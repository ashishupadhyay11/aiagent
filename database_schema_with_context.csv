Table Name,Column Name,Column Type,Is Nullable,Column Key,Extra,Default_Value,REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME,Max_Length,NUMERIC_PRECISION,NUMERIC_SCALE,context_for_ai
Dim_Date,Calendar_Date,date,NO,PRI,,,,,,,,"The Calendar_Date column in Dim_Date serves as the primary key and contains individual calendar dates in a standard date format. This column is commonly used to join with fact tables for time-based analysis and filtering, and since it's non-nullable, it ensures every record in the date dimension has a valid date value."
Dim_Date,Calendar_Date_String_fr,varchar(35),NO,,,,,,35.0,,,"The Calendar_Date_String_fr column in Dim_Date stores French-formatted date strings, providing localized date representations for French-language reporting and display purposes. When writing SQL queries, this column can be used for filtering or displaying dates in French format, though for date calculations or comparisons, it's recommended to use the table's standard date columns instead."
Dim_Date,Calendar_Date_String_en,varchar(35),NO,,,,,,35.0,,,"The Calendar_Date_String_en column in Dim_Date stores the English language text representation of calendar dates (e.g., ""January 1, 2023""). This column is useful when you need to display dates in a human-readable format in reports or user interfaces, and can be used in SELECT statements when you want to show dates in a more natural language format rather than standard date formats."
Dim_Date,Calendar_Month,tinyint,NO,,,,,,,3.0,0.0,"The Calendar_Month column in Dim_Date represents the numeric month value (1-12) within a calendar year, where 1 corresponds to January and 12 to December. This non-nullable tinyint column is commonly used for monthly aggregations and filtering, allowing queries to group or filter data by specific months across different years."
Dim_Date,Calendar_Day,tinyint,NO,,,,,,,3.0,0.0,"The Calendar_Day column in Dim_Date represents the day of the month (1-31) for each calendar date record. This non-nullable tinyint column is commonly used in date-related queries to filter or group results by specific days of the month, and can be combined with other date dimension columns to create precise date-based conditions."
Dim_Date,Calendar_Year,smallint,NO,,,,,,,5.0,0.0,"The Calendar_Year column in Dim_Date represents the four-digit year (e.g., 2023) of each calendar date record and is commonly used for annual grouping and filtering operations. This non-nullable smallint column serves as a fundamental component for year-level time analysis and can be used in GROUP BY clauses or WHERE conditions when analyzing data across different years."
Dim_Date,Calendar_Quarter,tinyint,NO,,,,,,,3.0,0.0,"The Calendar_Quarter column in Dim_Date represents the quarter number (1-4) within a calendar year, where 1 indicates January-March, 2 indicates April-June, and so on. This non-nullable tinyint column is commonly used for quarterly aggregations and filtering, allowing queries to group or analyze data by three-month periods throughout the year."
Dim_Date,Day_Name_fr,varchar(9),NO,,,,,,9.0,,,"The Day_Name_fr column in the Dim_Date table stores the French name of each day of the week (e.g., ""Lundi"", ""Mardi"", etc.) as a character string up to 9 characters long. This column is useful for displaying day names in French-language reports or when filtering/grouping date-based data for French-speaking users, and since it's non-nullable, every date record will have a corresponding French day name."
Dim_Date,Day_Name_en,varchar(9),NO,,,,,,9.0,,,"The Day_Name_en column in the Dim_Date table stores the English name of each day of the week (e.g., 'Monday', 'Tuesday', etc.) as a text string. This column is commonly used for filtering or grouping data by specific days of the week, and since it's non-nullable, it ensures every date record has a corresponding day name for reliable day-based analysis."
Dim_Date,ISO_Day_of_Week,tinyint,NO,,,,,,,3.0,0.0,"The ISO_Day_of_Week column in Dim_Date represents the day of the week according to ISO standards, where Monday is 1 and Sunday is 7. This column is useful for filtering or grouping data by specific days of the week in SQL queries, particularly when working with international date standards or when Monday-based week calculations are required."
Dim_Date,Billing_Day_of_Week,tinyint,NO,,,,,,,3.0,0.0,"The Billing_Day_of_Week column in the Dim_Date table represents the numeric day of the week (likely 1-7) for each calendar date, specifically used for billing-related queries and analysis. This non-nullable tinyint column enables filtering and grouping of transactions by day of week, making it particularly useful for identifying billing patterns or scheduling trends across different weekdays."
Dim_Date,Day_of_Week_in_Month,tinyint,NO,,,,,,,3.0,0.0,"The Day_of_Week_in_Month column represents the occurrence number of a particular weekday within its month (e.g., 1 for the first Monday, 2 for the second Monday, etc.), stored as a tinyint value. This column is useful for queries that need to identify specific weekday instances within months, such as finding events that occur on ""the third Thursday"" of each month."
Dim_Date,Day_of_Week_in_Year,tinyint,NO,,,,,,,3.0,0.0,"The Day_of_Week_in_Year column in Dim_Date represents the sequential occurrence of a specific weekday within a calendar year (e.g., the 1st Monday, 2nd Monday, etc.), stored as a small integer value. This column is useful for analyzing patterns or trends based on specific weekday occurrences throughout the year, such as identifying sales performance on the first Monday of each year or tracking events that occur on specific weekday instances."
Dim_Date,Day_of_Week_in_Quarter,tinyint,NO,,,,,,,3.0,0.0,"The Day_of_Week_in_Quarter column in Dim_Date represents the sequential occurrence of a specific weekday within its respective quarter (e.g., 1st Monday of Q1, 2nd Monday of Q1, etc.), stored as a small integer value. This column is useful for analyzing patterns or trends based on specific weekday occurrences within quarters, such as identifying sales performance on the first Monday of each quarter or tracking events that occur on specific weekday instances within quarterly periods."
Dim_Date,Day_of_Quarter,tinyint,NO,,,,,,,3.0,0.0,"The Day_of_Quarter column in Dim_Date represents the sequential day number within each quarter, ranging from 1 to 90/91/92 depending on the quarter. This non-nullable tinyint column is useful for analyzing patterns within quarters and can be used to filter or group data for quarter-based analysis (e.g., ""SELECT * FROM fact_table WHERE dim_date.day_of_quarter <= 30"" to analyze the first month of each quarter)."
Dim_Date,Day_of_Year,smallint,NO,,,,,,,5.0,0.0,"The Day_of_Year column in Dim_Date represents the numerical day within a calendar year, ranging from 1 to 366 (accounting for leap years). This non-nullable smallint column is commonly used in SQL queries for date-based calculations and filtering, particularly when analyzing seasonal patterns or comparing data points across different years at the same yearly position."
Dim_Date,ISO_Standard_Week,tinyint,NO,,,,,,,3.0,0.0,"The ISO_Standard_Week column in Dim_Date represents the week number according to the ISO-8601 standard, ranging from 1 to 53, where week 1 is the first week containing a Thursday in the year. This column is commonly used for consistent week-based analysis and reporting across international organizations, and can be particularly useful when grouping or filtering data by standard week periods."
Dim_Date,ISO_Standard_Year,smallint,NO,,,,,,,5.0,0.0,"The ISO_Standard_Year column in Dim_Date represents the year according to the ISO calendar standard, stored as a small integer value (e.g., 2023). This non-nullable column is commonly used for grouping and filtering date-based data by year, particularly when consistency with international date standards is required."
Dim_Date,Billing_Week,tinyint,NO,,,,,,,3.0,0.0,"The Billing_Week column in Dim_Date represents the week number within a billing cycle, stored as a tinyint value that cannot be null. This column can be used to group or filter transactions by billing week, making it useful for weekly financial reporting and billing cycle analysis."
Dim_Date,Month_Name_fr,varchar(9),NO,,,,,,9.0,,,"The Month_Name_fr column in the Dim_Date table stores the French language name of each month (e.g., 'Janvier', 'FÃ©vrier', etc.) as a character string up to 9 characters long. This column is useful for displaying month names in French language reports and interfaces, and can be used in GROUP BY clauses or WHERE conditions when French month name filtering is needed."
Dim_Date,Month_Name_en,varchar(9),NO,,,,,,9.0,,,"The Month_Name_en column in the Dim_Date table stores the full English name of each month (e.g., ""January"", ""February"") as a character string up to 9 characters long. This column is commonly used for displaying month names in reports or filtering date-based data by month name, and since it's non-nullable, every row in the dimension table will have a valid month name value."
Dim_Date,First_Date_of_Week,date,NO,,,,,,,,,"The First_Date_of_Week column in Dim_Date contains the date corresponding to the first day (typically Sunday or Monday) of the week for each date record in the dimension table. This column is commonly used in SQL queries for week-based grouping and analysis, allowing you to easily aggregate or filter data by week periods by joining with fact tables and using this column as a reference point."
Dim_Date,Last_Date_of_Week,date,NO,,,,,,,,,"The Last_Date_of_Week column in Dim_Date contains the date representing the last day (typically Saturday or Sunday) of the week for each calendar date record. When writing SQL queries, this column is particularly useful for week-ending calculations and reporting, allowing you to easily group or filter data based on weekly boundaries."
Dim_Date,Billing_First_Date_of_Week,date,NO,,,,,,,,,"The Billing_First_Date_of_Week column in Dim_Date represents the first day (typically Monday) of the billing week that contains each calendar date. This column is commonly used in SQL queries to group or filter transactions by billing weeks, enabling consistent week-based financial analysis and reporting."
Dim_Date,Billing_Last_Date_of_Week,date,NO,,,,,,,,,"The Billing_Last_Date_of_Week column in Dim_Date represents the last calendar date of each billing week, making it useful for week-ending calculations and billing period analysis. This non-nullable date column can be used to group or filter transactions by their billing week end dates, commonly used in queries that need to aggregate financial or billing data on a weekly basis."
Dim_Date,First_Date_of_Month,date,NO,,,,,,,,,"The First_Date_of_Month column in Dim_Date contains the first calendar date of each month (e.g., 2023-01-01, 2023-02-01) and is commonly used for month-level grouping and filtering operations. This column is particularly useful when you need to aggregate data to a monthly level or want to compare metrics across different months, and can be referenced in SQL queries using date functions or direct comparisons."
Dim_Date,Last_Date_of_Month,date,NO,,,,,,,,,"The Last_Date_of_Month column in Dim_Date contains the final calendar date of each month (e.g., January 31, February 28/29, March 31) represented in the date dimension. This column is particularly useful for end-of-month calculations and reporting, allowing queries to easily identify or filter for month-end dates without using complex date functions."
Dim_Date,First_Date_of_Quarter,date,NO,,,,,,,,,"The First_Date_of_Quarter column in Dim_Date contains the first calendar date of each quarter (e.g., January 1, April 1, July 1, October 1) corresponding to each date record in the table. This column is useful for grouping or filtering data by quarters, and can be used in SQL queries to align data with quarterly business reporting periods or to perform quarter-start-based calculations."
Dim_Date,Last_Date_of_Quarter,date,NO,,,,,,,,,"The Last_Date_of_Quarter column in Dim_Date contains the final calendar date of each quarter (e.g., March 31, June 30, September 30, December 31) for the corresponding date record. This column is useful for quarter-end reporting and analysis, allowing queries to easily identify or filter for quarter-end dates or compare metrics against quarter-end values."
Dim_Date,First_Date_of_Year,date,NO,,,,,,,,,"The First_Date_of_Year column in Dim_Date contains the January 1st date for whatever year the current row's date belongs to, making it useful for year-level grouping and comparisons. This column can be used in SQL queries to easily align dates to their respective year starts or to calculate year-to-date metrics by comparing against this reference date."
Dim_Date,Last_Date_of_Year,date,NO,,,,,,,,,"The Last_Date_of_Year column in Dim_Date contains the final calendar date (December 31st) for each year represented in the date dimension. This column is useful for year-end calculations and reporting, allowing queries to easily identify or filter for year-end dates without complex date manipulation functions."
Dim_Date,Is_Weekday,bit(1),NO,,,,,,,1.0,,"The Is_Weekday column in Dim_Date is a binary flag (1 or 0) that indicates whether a given calendar date falls on a weekday (Monday through Friday) or weekend (Saturday and Sunday). This column is commonly used in SQL queries to filter or analyze business metrics specifically for weekdays or weekends, making it valuable for business-day analysis and reporting."
Dim_Date,Is_Business_Day,bit(1),NO,,,,,,,1.0,,"The Is_Business_Day column in Dim_Date is a binary flag (1 or 0) indicating whether a given calendar date is a business day (1) or not (0). This column is commonly used in WHERE clauses or aggregations to filter or analyze data specifically for business days, excluding weekends and holidays."
Dim_Date,Is_Leap_Year,bit(1),NO,,,,,,,1.0,,"The Is_Leap_Year column is a binary flag (1 or 0) in the Dim_Date table that indicates whether a given date falls within a leap year. This column is useful for date calculations and filtering dates specifically in leap years, and can be used in WHERE clauses or JOIN conditions when analyzing data that needs to account for leap year variations."
Dim_Date,Days_in_Month,tinyint,NO,,,,,,,3.0,0.0,"The Days_in_Month column in the Dim_Date table stores the total number of days in each month (e.g., 31 for January, 28/29 for February) as a small integer value. This column is commonly used in date-based calculations and reporting to accurately determine month lengths, particularly useful when calculating daily averages or performing month-end analysis."
Dim_Date,Next_Business_Day,date,NO,,,,,,,,,"The Next_Business_Day column in the Dim_Date table stores the date of the next working day (excluding weekends and holidays) for each calendar date. This column is particularly useful in financial and business analytics queries where calculations need to account for business day logic, and can be used in JOIN operations or WHERE clauses to analyze data based on business day sequences."
XParams,name,char(128),NO,PRI,,,,,128.0,,,"The 'name' column in the XParams table serves as the primary key and stores unique parameter names or configuration keys as fixed-length character strings (128 characters). When querying this table, use the 'name' column to look up specific system parameters or to join with other tables that reference these configuration settings."
XParams,value,longblob,YES,,,,,,4294967295.0,,,"The 'value' column in the XParams table stores large binary objects (BLOB) that can contain serialized configuration values, binary data, or extended parameter content of any size. This column is nullable and works in conjunction with a corresponding key to form key-value pairs for system configuration, allowing for flexible storage of various data types and formats that may be needed for application settings."
ZZZ_fix_bb_20250124,inventory_date,date,NO,,,,,,,,,"The inventory_date column in the temporary fix table ZZZ_fix_bb_20250124 stores the date when inventory records were taken or modified, and it requires a valid date value (cannot be null). When querying this temporary fix table, use this column to filter or join inventory-related data based on specific dates, keeping in mind that this table is likely part of a temporary solution for January 24, 2025 fixes."
ZZZ_fix_bb_20250124,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the temporary fix table ZZZ_fix_bb_20250124 is a required integer field that uniquely identifies products affected by this fix or patch. When querying this table, use product_id to join with other product-related tables or to filter specific products that were part of the January 24, 2025 fix."
ZZZ_fix_bb_20250124,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the temporary fix table ZZZ_fix_bb_20250124 stores character strings up to 255 characters in length and allows NULL values. When querying this column, keep in mind that it's part of a temporary fix table created for January 24, 2025, so any data stored here is likely transitional and may be moved or removed once the fix is completed."
ZZZ_fix_bb_20250124,price_sunday,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The price_sunday column stores the decimal price value (with 2 decimal places and up to 7 total digits) specifically for Sunday pricing in this temporary fix table. Since it's non-nullable and has a default of 0.00, it always contains a value, making it reliable for calculations and comparisons in queries where Sunday-specific pricing is needed."
ZZZ_fix_bb_20250124,price_monday,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The price_monday column stores Monday pricing values as decimal numbers with 5 digits before the decimal point and 2 digits after (e.g., 12345.67), and cannot contain NULL values. As part of a temporary fix table, this column likely contains corrected or updated Monday price values that were problematic in the main system, with a default value of 0.00."
ZZZ_fix_bb_20250124,inventory_id_monday,int,NO,MUL,,0,,,,10.0,0.0,"The inventory_id_monday column is a non-nullable integer field that serves as a secondary index (MUL) in this temporary fix table, likely storing inventory identifiers specifically for Monday-related data points. When querying this column, it's important to note that while it's indexed for performance, it's part of a temporary fix table (as indicated by the ZZZ prefix) and should be used cautiously as the table may be deprecated after January 24, 2025."
ZZZ_issue_juice_gift,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the ZZZ_issue_juice_gift table is a required integer field that serves as a foreign key (indicated by MUL key type) to identify the customer or recipient who received a juice-related gift or promotional item. When querying this table, use this column to join with other user-related tables or to filter/group gift distribution records by specific recipients."
ZZZ_issue_juice_gift,order_details_id,int,NO,MUL,,0,,,,10.0,0.0,"The order_details_id column in the ZZZ_issue_juice_gift table serves as a foreign key that links each juice gift record to its corresponding order details. When writing queries, this column can be used to join with the main order details table to access additional information about the gift order, and since it's non-nullable, every gift record must have an associated order detail."
ZZZ_issue_juice_gift,order_id,int,NO,MUL,,0,,,,10.0,0.0,"The order_id column in the ZZZ_issue_juice_gift table serves as a reference identifier for tracking specific juice gift orders or promotional items, and it's indexed (MUL) to optimize query performance. Since it's non-nullable, every gift record must have an associated order_id, making it reliable for JOIN operations and WHERE clause filtering when querying order-related information."
ZZZ_issue_juice_gift,delivery_date,date,NO,,,,,,,,,"The delivery_date column in the ZZZ_issue_juice_gift table stores the date when a juice-related gift or promotional item was delivered to the recipient. As a required (non-nullable) date field, it can be used in SQL queries for filtering, sorting, or grouping gift deliveries by date, such as finding all gifts delivered within a specific date range or analyzing delivery patterns over time."
ZZZ_issue_juice_gift,status,tinyint,YES,MUL,,0,,,,3.0,0.0,"The 'status' column in the ZZZ_issue_juice_gift table is a tinyint field that likely represents the current state of a juice gift or promotional item (e.g., pending, issued, redeemed, expired). As indicated by the MUL key type, this column is part of a multi-column index, suggesting it's commonly used in combination with other columns for filtering or joining operations in queries."
ZZZ_issue_juice_gift,product_id,int,YES,,,,,,,10.0,0.0,"The product_id column in the ZZZ_issue_juice_gift table stores integer identifiers that reference specific juice products or promotional items being gifted. When writing queries, this column can be used to filter or join with other product-related tables to access detailed information about the gifted juice items."
ZZZ_issue_juice_gift,coupon_id,int,YES,,,,,,,10.0,0.0,"The coupon_id column in the ZZZ_issue_juice_gift table stores integer values that uniquely identify promotional coupons or gift vouchers associated with juice-related promotions. When querying this table, you can use coupon_id to join with other coupon-related tables or to filter/group promotional items, though note that the field is nullable which means some records might not have an associated coupon."
ZZZ_issue_juice_gift_to_contact,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the ZZZ_issue_juice_gift_to_contact table is a required integer field that identifies the user who issued or recorded the juice gift transaction. When writing queries, this column can be used to join with other user-related tables (as indicated by the MUL key type) and to filter or group juice gift records by the issuing user."
ZZZ_issue_juice_gift_to_contact,order_details_id,int,NO,,,0,,,,10.0,0.0,The order_details_id column is a required integer field that likely references specific order details associated with each juice gift transaction. This column can be used in SQL queries to join with related order detail tables or to filter/group juice gift records based on their associated order information.
ZZZ_issue_juice_gift_to_contact,order_id,int,NO,MUL,,0,,,,10.0,0.0,"The order_id column is a non-nullable integer field that serves as a foreign key reference in the ZZZ_issue_juice_gift_to_contact table, likely linking to a primary order record in another table. When querying this table, you can use order_id to join with related order tables or to filter/group juice gift records associated with specific orders."
ZZZ_issue_juice_gift_to_contact,delivery_date,date,NO,,,,,,,,,"The delivery_date column stores the date when a juice gift was or will be delivered to a contact, and it must always have a value (non-nullable). When writing SQL queries, use this column to filter or analyze juice gift deliveries by date, such as finding gifts delivered on specific dates or within date ranges."
ZZZ_issue_juice_gift_to_contact,status,tinyint,YES,,,0,,,,3.0,0.0,"The 'status' column in the ZZZ_issue_juice_gift_to_contact table is a tinyint field that likely indicates the current state of a juice gift record (e.g., pending, completed, cancelled). When querying this column, you can use numeric comparisons to filter records based on their status values, though you should refer to the application's documentation for specific status code meanings since they aren't explicitly defined in the schema."
ZZZ_issue_juice_gift_to_contact,product_id,int,YES,,,,,,,10.0,0.0,"The product_id column in the ZZZ_issue_juice_gift_to_contact table is an integer field that identifies which specific juice product was given as a gift to a contact. When querying this table, you can use this column to join with a products table or filter gift records by specific juice products, though note that the field is nullable which means some gift records might not have an associated product."
ZZZ_issue_juice_gift_to_contact,coupon_id,int,YES,,,,,,,10.0,0.0,"The coupon_id column in the ZZZ_issue_juice_gift_to_contact table stores integer values that likely reference specific coupon or promotional codes associated with juice gifts. When querying this column, it can be used to join with other coupon-related tables or to filter/group juice gift records based on their associated promotional offers, though the nullable property means some gift records might not have an associated coupon."
ZZZ_reactivated_from_waitlist,ZZZ_reactivated_from_waitlist_had_subscription_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"This column serves as the primary key in the ZZZ_reactivated_from_waitlist table and stores the subscription ID that a customer previously held before being placed on the waitlist. When querying this table, use this column to uniquely identify reactivation records or join with other subscription-related tables to track a customer's subscription history through the waitlist process."
ZZZ_reactivated_from_waitlist,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the ZZZ_reactivated_from_waitlist table is a required integer field that uniquely identifies customers who have been reactivated from a waitlist status. When querying this table, use this column to join with other customer-related tables or to filter specific reactivated customers, noting that NULL values are not allowed in this field."
ZZZ_reactivated_from_waitlist,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the ZZZ_reactivated_from_waitlist table automatically records the timestamp when a waitlisted customer is reactivated, using CURRENT_TIMESTAMP as the default value. When querying this column, it can be used to analyze reactivation patterns over time or filter records based on when customers were moved off the waitlist."
ZZZ_remaining_buffer,prepbasket_buffer_id,int,NO,,,0,,,,10.0,0.0,"The prepbasket_buffer_id column serves as a numeric identifier in the ZZZ_remaining_buffer temporary table, storing integer values that cannot be null. This column likely acts as a reference or tracking number for buffered preparation basket data, enabling the system to manage and process temporary overflow information in a structured manner."
ZZZ_remaining_buffer,order_id,int,NO,MUL,,,,,,10.0,0.0,"The order_id column in the ZZZ_remaining_buffer table is a non-nullable integer field that serves as a reference key (indicated by MUL key type) to track orders within this temporary storage table. When querying this table, order_id can be used for joining with other order-related tables or filtering specific orders, though keep in mind this is temporary buffer storage as indicated by the ZZZ_ prefix."
ZZZ_remaining_buffer,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the ZZZ_remaining_buffer table is a required integer field that serves as a reference to identify specific products within this temporary storage table. This column can be used in SQL queries to track or process product-related data that's being temporarily held, and since it's non-nullable, every record must have a valid product identifier."
ZZZ_remaining_buffer,quantity,int,NO,,,,,,,10.0,0.0,"The 'quantity' column in the ZZZ_remaining_buffer table is a required integer field that likely tracks the number of items or units remaining in a temporary buffer storage. When writing SQL queries, this column can be used for numerical calculations or filtering conditions, and since it's non-nullable, you don't need to handle NULL cases in your queries."
ZZZ_remaining_buffer,box,smallint,NO,,,,,,,5.0,0.0,"The 'box' column in the ZZZ_remaining_buffer table is a required (non-nullable) smallint field that likely represents a box identifier or counter in a temporary storage context. When querying this column, use integer comparisons and aggregations, keeping in mind that smallint typically allows values between -32,768 and 32,767."
ZZZ_remaining_buffer,weight,int,NO,,,,,,,10.0,0.0,"The 'weight' column in the ZZZ_remaining_buffer table is a required integer field that likely represents a numerical weight or quantity value in the temporary buffer storage. This column can be used in SQL queries for calculations, sorting, or filtering temporary data based on weight values, and since it's non-nullable, it will always contain a value."
ZZZ_remaining_buffer,route,int,NO,,,,,,,10.0,0.0,"The 'route' column in the ZZZ_remaining_buffer table is a required integer field that likely represents a route identifier or sequence number in this temporary storage table. When querying this column, you can use it for numerical comparisons or joins, and since it's non-nullable, you don't need to handle NULL cases in your queries."
ZZZ_tour,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the ZZZ_tour table is a required integer field that identifies the user associated with a tour record. Since it's a non-nullable field, any SQL queries involving this table must provide a valid user_id value when inserting records, and it can be reliably used in WHERE clauses or JOIN conditions without needing to check for NULL values."
ab_absence_details,ab_absence_detail_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ab_absence_detail_id column serves as the primary key in the ab_absence_details table, uniquely identifying each absence record with a non-nullable integer value. This column should be used when joining to related tables or when specifically querying for individual absence records, and it automatically ensures each absence entry can be distinctly referenced."
ab_absence_details,ab_absence_request_id,int,NO,,,,,,,10.0,0.0,The ab_absence_request_id column in the ab_absence_details table serves as a unique identifier for each absence request record. This required integer field can be used in WHERE clauses to look up specific absence records or in JOIN operations to connect with related absence data across other tables.
ab_absence_details,ab_absence_type_id,int,NO,,,,,,,10.0,0.0,"The ab_absence_type_id column in the ab_absence_details table is a required integer field that categorizes the type of employee absence (such as sick leave, vacation, or personal time). When writing queries, this column can be used to filter or group absences by their type, making it useful for analyzing patterns in employee time off or generating reports by absence category."
ab_absence_details,ab_hour_type_id,int,NO,,,,,,,10.0,0.0,"The ab_hour_type_id column in the ab_absence_details table is a required integer field that specifies the type or category of hours being recorded for an employee's absence (such as sick time, vacation, or personal leave). When querying absence records, this column can be used to filter or group absences by their hour classification type, making it useful for analyzing different categories of time off."
ab_absence_details,hr_form_id,int,NO,,,,,,,10.0,0.0,The hr_form_id column in the ab_absence_details table is a required integer field that likely references an internal HR form or document associated with each employee absence record. This column can be used in SQL queries to join with related HR form tables or to filter/group absence records based on their associated form documentation.
ab_absence_details,hr_form_question_id,int,NO,,,,,,,10.0,0.0,"The hr_form_question_id column in the ab_absence_details table is a required integer field that likely references specific questions from HR absence-related forms. When writing queries, this column can be used to link absence records with their corresponding HR form questions, enabling analysis of responses to specific absence-related inquiries."
ab_absence_details,vacation_date,date,NO,,,,,,,,,"The vacation_date column in the ab_absence_details table stores the specific date when an employee was absent, using a standard date format. This required field (non-nullable) is essential for tracking when absences occur and should be used in queries when filtering or analyzing absence patterns by date."
ab_absence_details,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in the ab_absence_details table is a required (non-nullable) tinyint field that likely represents the current state of an employee's absence record using numeric codes (e.g., 1 for pending, 2 for approved, 3 for rejected). When querying this table, the status column can be used to filter or group absence records based on their current state, making it useful for tracking the approval workflow of absence requests."
ab_absence_details,processed_status,int,NO,,,0,,,,10.0,0.0,"The processed_status column in ab_absence_details is a required integer field that indicates whether and how an employee's absence record has been processed by HR or the system. When writing queries, this column can be used to filter or group absence records based on their processing state (e.g., WHERE processed_status = 0 for unprocessed records), with the default value being 0."
ab_absence_details,reviewed_by,int,YES,,,,,,,10.0,0.0,"The ""reviewed_by"" column in the ab_absence_details table stores the employee ID (as an integer) of the person who reviewed the absence record, typically a supervisor or HR staff member. This column being nullable indicates that not all absence records may have been reviewed yet, making it useful for filtering records that need review or tracking who has approved specific absences."
ab_absence_details,is_weekend,tinyint,YES,,,,,,,3.0,0.0,"The `is_weekend` column in the `ab_absence_details` table is a boolean flag (stored as tinyint) that indicates whether the recorded absence occurred on a weekend (1) or weekday (0). This column can be useful for filtering or analyzing absence patterns specifically related to weekend occurrences, and being nullable suggests that some absence records may not have this weekend status explicitly defined."
ab_absence_details,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the ab_absence_details table records the timestamp when each absence record was initially created in the system, automatically populated with CURRENT_TIMESTAMP. This datetime field is useful for tracking when absence records were entered and can be used in SQL queries for auditing purposes or filtering/sorting absence records by their creation date."
ab_absence_details,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the ab_absence_details table records the timestamp of when an absence record was last modified, storing this information in a datetime format. This column is commonly used in WHERE clauses to filter for recently updated absence records or in ORDER BY clauses to sort records by their last modification date, making it useful for tracking changes and maintaining an audit trail of absence record updates."
ab_absence_details,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the ab_absence_details table stores the employee ID (as an integer) of the person who created or recorded the absence entry. This column can be used to track who entered the absence information into the system, which is useful for audit trails and accountability, and can be joined with an employees table to get the creator's details."
ab_absence_details,updated_by,int,YES,,,,,,,10.0,0.0,The `updated_by` column in the `ab_absence_details` table stores the employee ID (as an integer) of the person who last modified the absence record. This column helps track who made changes to absence records and can be used in queries to join with an employees table to get details about who updated specific absence entries.
ab_absence_details,is_st_holiday,tinyint,YES,,,,,,,3.0,0.0,"The `is_st_holiday` column in the `ab_absence_details` table is a boolean flag (stored as tinyint) indicating whether an employee's absence is due to a statutory holiday. When querying this column, use values 1 (true) or 0 (false) to filter absences that are or aren't statutory holidays, and since it's nullable, consider handling NULL values appropriately in your conditions."
ab_absence_details,is_office_st_holiday,tinyint,YES,,,,,,,3.0,0.0,"The `is_office_st_holiday` column in the `ab_absence_details` table is a boolean flag (stored as tinyint) that indicates whether an employee's absence coincides with an official state/statutory holiday at their office location. When querying absence records, you can use this column to filter or analyze absences that occur on state holidays (value = 1) versus regular working days (value = 0), which is useful for HR reporting and attendance pattern analysis."
ab_absence_details,is_multiple,tinyint(1),NO,,,0,,,,3.0,0.0,"The `is_multiple` column in the `ab_absence_details` table is a boolean flag (stored as tinyint(1)) that indicates whether an absence record spans multiple days or dates. When querying this column, use 1 to filter for multiple-day absences and 0 for single-day absences, as in `WHERE is_multiple = 1` to find all multi-day absence records."
ab_absence_documents,ab_absence_document_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ab_absence_document_id column serves as the primary key identifier for each document or attachment record in the ab_absence_documents table. When writing SQL queries, use this column to uniquely identify specific absence-related documents, join with related tables, or filter document records (e.g., WHERE ab_absence_document_id = 123)."
ab_absence_documents,ab_absence_request_id,int,NO,,,,,,,10.0,0.0,"The ab_absence_request_id column in the ab_absence_documents table serves as a reference to link documents with their corresponding absence requests. This mandatory integer field should be used in JOIN operations to connect absence-related documents with their parent absence request records, enabling queries to retrieve all documents associated with a specific leave request."
ab_absence_documents,ab_absence_type_id,int,NO,,,,,,,10.0,0.0,"The ab_absence_type_id column in the ab_absence_documents table is a required integer field that links each document to a specific type of absence (such as sick leave, vacation, or medical leave). When querying this table, you can use this column to filter or group documents by their associated absence type, or join with an absence types reference table to get detailed information about the type of leave the document supports."
ab_absence_documents,hr_form_id,int,NO,,,,,,,10.0,0.0,"The hr_form_id column in the ab_absence_documents table is a required integer field that likely serves as a reference to a specific HR form template or form instance associated with an absence document. When querying this table, use this column to join with related HR form tables or to filter documents based on specific form types."
ab_absence_documents,file_name,text,NO,,,,,,65535.0,,,"The file_name column in ab_absence_documents stores the actual name of uploaded documents related to employee absences, such as ""medical_certificate.pdf"" or ""leave_request_form.docx"". This required (non-nullable) text field is essential for identifying and retrieving specific absence-related documents, and can be used in SQL queries to search for or filter documents by their file names."
ab_absence_documents,hr_form_question_id,int,NO,,,,,,,10.0,0.0,"The hr_form_question_id column in the ab_absence_documents table is a required integer field that links to specific questions or sections on HR forms related to employee absences. This column helps organize and associate uploaded documents with their corresponding form questions, enabling precise tracking of which documents answer or support specific parts of absence-related questionnaires or forms."
ab_absence_documents,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in the ab_absence_documents table is a required tinyint field that indicates the current state of absence-related documents (such as whether they are active, archived, or pending review). When querying this table, you can use the status field to filter documents based on their current state, typically using equality comparisons (e.g., WHERE status = 1)."
ab_absence_documents,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the ab_absence_documents table records the timestamp when an absence-related document was initially uploaded or created in the system, automatically populated with CURRENT_TIMESTAMP. When querying absence documents, this column can be used to filter or sort records by their creation date, such as finding recently uploaded documents or tracking document submissions within specific time periods."
ab_absence_documents,updated_at,datetime,YES,,,,,,,,,The `updated_at` column in the `ab_absence_documents` table records the date and time when an absence-related document record was last modified. This datetime field helps track the chronological history of document updates and can be useful for auditing changes or filtering documents based on when they were last updated.
ab_absence_documents,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the `ab_absence_documents` table stores the user ID (as an integer) of the person who uploaded or created the absence-related document. This column can be used to track document ownership and audit document creation, and it's typically joined with a users or employees table to get the actual creator's details."
ab_absence_documents,updated_by,int,YES,,,,,,,10.0,0.0,"The ""updated_by"" column in the ab_absence_documents table stores the user ID (as an integer) of the person who last modified the absence document record. This column can be used to track document modifications and is commonly joined with a users or employees table to retrieve the name or details of the person who made the update, though it can be null if the last modifier is unknown or not tracked."
ab_absence_requests,ab_absence_request_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ab_absence_request_id column serves as the primary key in the ab_absence_requests table, uniquely identifying each absence request record with a non-nullable integer value. This column should be used when joining to related tables or when specifically querying for individual absence requests, and its values are typically referenced in WHERE clauses or JOIN conditions."
ab_absence_requests,employee_id,int,NO,,,,,,,10.0,0.0,"The employee_id column in the ab_absence_requests table is a required integer field that identifies which employee submitted the absence request. This column likely serves as a foreign key linking to an employee master table, allowing queries to connect absence requests with employee information, though no explicit foreign key constraint is defined in the provided schema."
ab_absence_requests,hr_form_id,int,NO,,,,,,,10.0,0.0,"The hr_form_id column in the ab_absence_requests table is a required integer field that likely serves as a reference to an associated HR form or document for each absence request. When querying absence requests, this column can be used to link to specific HR documentation or to filter/group requests based on their associated form identifiers."
ab_absence_requests,department_id,int,YES,,,,,,,10.0,0.0,"The department_id column in the ab_absence_requests table is an integer field that identifies which department an employee's absence request belongs to, enabling filtering and grouping of absence requests by organizational unit. This optional field (as it's nullable) can be used in JOIN operations with a departments table to retrieve department names or other department-related information when analyzing absence patterns across the organization."
ab_absence_requests,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in the ab_absence_requests table is a required (non-nullable) tinyint field that represents the current state of an employee's absence request, likely using numeric codes to indicate states such as pending, approved, or rejected. When querying this column, you can use numeric comparisons to filter absence requests based on their status, though you should refer to the application's status code documentation for the specific meaning of each value."
ab_absence_requests,form_details,longtext,YES,,,,,,4294967295.0,,,"The 'form_details' column in the ab_absence_requests table stores comprehensive information about absence requests in a longtext format, likely containing JSON or structured text data with detailed form submissions. This column can be used to store and query additional request-specific information that doesn't fit into standard columns, such as supporting documentation, notes, or custom form fields related to the absence request."
ab_absence_requests,comment,longtext,YES,,,,,,4294967295.0,,,"The 'comment' column in the ab_absence_requests table stores optional detailed text notes or explanations related to employee absence requests. This longtext field can be used to capture additional context about the absence, such as specific reasons for the leave, special circumstances, or any relevant communication between employees and managers."
ab_absence_requests,start_date,date,YES,,,,,,,,,"The start_date column in the ab_absence_requests table represents the first day of an employee's requested absence period. When writing SQL queries, this date field can be used to filter or analyze absence requests by their beginning dates, and since it's nullable, queries should handle potential NULL values appropriately when performing date-based operations or comparisons."
ab_absence_requests,end_date,date,YES,,,,,,,,,"The end_date column in the ab_absence_requests table stores the last day of an employee's requested absence period in date format. This column is commonly used in date range queries to find active or upcoming absences, and can be compared with other date fields (like start_date) to calculate the duration of absence requests."
ab_absence_requests,is_weekend_include,tinyint,YES,,,0,,,,3.0,0.0,The `is_weekend_include` column in the `ab_absence_requests` table is a boolean flag (stored as tinyint) that indicates whether the absence request includes weekend days (1) or excludes them (0). This column helps in accurately calculating the duration of leave requests and can be used in WHERE clauses to filter absence requests based on whether they include weekend days.
ab_absence_requests,processed_by,int,YES,,,,,,,10.0,0.0,"The ""processed_by"" column in the ab_absence_requests table stores the employee ID (as an integer) of the person who processed or reviewed the absence request, such as a manager or HR staff member. This column being nullable indicates that not all absence requests may have been processed yet, making it useful for filtering pending versus processed requests in queries."
ab_absence_requests,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the ab_absence_requests table stores the timestamp when each absence request was initially submitted, automatically populated with CURRENT_TIMESTAMP when a record is created. This datetime field is useful for tracking request submission timing and can be used in SQL queries for filtering recent requests, analyzing submission patterns, or sorting requests chronologically."
ab_absence_requests,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `ab_absence_requests` table stores the timestamp of when an absence request record was last modified, using a datetime format. This column helps track the history of changes to absence requests and can be useful for auditing purposes or filtering records based on when they were last updated."
ab_absence_requests,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the `ab_absence_requests` table stores the employee ID (as an integer) of the person who submitted the absence request. This column can be used to join with an employee table to get details about who initiated the request, and since it's nullable, some historical or system-generated requests might not have an associated creator."
ab_absence_requests,updated_by,int,YES,,,,,,,10.0,0.0,"The ""updated_by"" column in the ab_absence_requests table stores the employee ID (as an integer) of the person who last modified the absence request record. This column helps track who made changes to absence requests and can be used in queries to join with an employees table to get details about who updated specific requests, though it's optional as indicated by its nullable property."
ab_absence_requests,approver_id,int,YES,,,,,,,10.0,0.0,"The approver_id column in the ab_absence_requests table stores the unique identifier of the employee who is responsible for reviewing and approving/rejecting the absence request. This optional (nullable) integer field can be used to join with an employee or user table to retrieve approver details, and is commonly used in queries that need to track or filter absence requests by their assigned approvers."
ab_absence_requests,is_st_holiday_include,tinyint,YES,,,,,,,3.0,0.0,"The `is_st_holiday_include` column in the `ab_absence_requests` table is a boolean flag (stored as tinyint) that indicates whether statutory holidays are included in the absence request period. When writing queries, this column can be used to filter or identify absence requests that either include (1) or exclude (0) statutory holidays in their duration calculation."
ab_absence_requests,is_office_st_holiday_include,tinyint,YES,,,,,,,3.0,0.0,"The `is_office_st_holiday_include` column in the `ab_absence_requests` table is a boolean flag (stored as tinyint) indicating whether the absence request includes or overlaps with official state/office holidays. When querying absence requests, you can use this column to filter or identify requests that coincide with holidays (1/true) versus those that don't (0/false)."
ab_absence_requests,rejection_reason,longtext,YES,,,,,,4294967295.0,,,"The rejection_reason column in ab_absence_requests stores detailed explanations for why an absence request was denied, allowing for lengthy text descriptions of the rejection justification. This optional (nullable) field should be referenced in queries when you need to analyze or report on the specific reasons for declined time-off requests, and can be particularly useful when joining with approval status fields to understand rejection patterns."
ab_absence_types,ab_absence_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ab_absence_type_id column serves as the primary key in the ab_absence_types table, uniquely identifying each type of employee absence or leave category. When writing SQL queries, use this column to join with other tables that reference absence types or to filter specific absence categories, ensuring that each value is a non-null integer."
ab_absence_types,name_en,varchar(255),NO,,,,,,255.0,,,"The name_en column in the ab_absence_types table stores the English language name or description of each absence type (e.g., ""Sick Leave"", ""Vacation"", ""Personal Time Off""). This required (non-nullable) text field is commonly used in WHERE clauses or JOIN conditions when querying for specific absence types, and it's essential for displaying human-readable absence categories in English-language interfaces."
ab_absence_types,name_fr,varchar(255),NO,,,,,,255.0,,,"The name_fr column in the ab_absence_types table stores the French language name/description of each absence type, with a maximum length of 255 characters. This required field (non-nullable) should be used when displaying absence type names in French-language interfaces or reports, making it essential for multilingual support in the absence management system."
ab_absence_types,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the ab_absence_types table records the timestamp when each absence type record was initially created in the system, automatically populated with CURRENT_TIMESTAMP. When querying this column, it's useful for auditing purposes or filtering absence types by their creation date, and can be used with datetime functions for time-based analysis (e.g., finding recently added absence types)."
ab_absence_types,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the ab_absence_types table records the timestamp of when each absence type record was last modified, storing this information in a datetime format. This column is useful for tracking the history of changes to absence type definitions and can be used in SQL queries to filter or sort records based on when they were last updated, though it can contain NULL values if the last update time wasn't recorded."
ab_hour_types,ab_hour_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ab_hour_type_id column serves as the primary key in the ab_hour_types table, uniquely identifying each hourly classification or time tracking category. When writing SQL queries, use this column to join with other tables that reference hour types or to filter specific hour type records, ensuring that you're working with non-null integer values since this field is required."
ab_hour_types,hour,tinyint,NO,,,,,,,3.0,0.0,"The ""hour"" column in the ab_hour_types table is a required (non-nullable) tinyint field that likely represents a numeric code or identifier for different hour classifications. When writing SQL queries, this column can be used to reference specific hour types or categories, making it useful for filtering, grouping, or joining with other time-tracking related tables."
ab_hour_types,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the ab_hour_types table records the timestamp when each hour type classification was initially added to the system, automatically populated with CURRENT_TIMESTAMP when a new record is created. When querying, this column can be used to filter or sort hour type records by their creation date, which is particularly useful for auditing purposes or tracking when different time tracking categories were established."
ab_hour_types,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `ab_hour_types` table records the timestamp of when each hour type classification was last modified, storing this information as a datetime value. This column can be useful in SQL queries for tracking changes to hour type definitions, filtering for recently updated records, or auditing modifications to the time tracking categories."
action_log,action_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The action_id column serves as the primary key in the action_log table, uniquely identifying each system action or event entry. When querying the action_log table, this column can be used to join with other tables or filter specific action records, and since it's non-nullable, you can rely on it always having a value."
action_log,staff_id,int,YES,,,,,,,10.0,0.0,"The staff_id column in the action_log table is an integer field that identifies which staff member performed or initiated the logged action. This optional field (as it's nullable) can be used to filter or group audit records by specific employees, making it useful for queries that need to track or analyze actions performed by particular staff members."
action_log,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the action_log table is a required integer field that identifies which user performed each logged action or event, serving as a foreign key reference to a users table. This column is indexed (MUL) to optimize queries that filter or join based on user activity, making it efficient to retrieve all actions performed by a specific user."
action_log,action,varchar(500),NO,,,,,,500.0,,,"The 'action' column in the action_log table stores text descriptions of specific system activities or operations that have occurred, with a maximum length of 500 characters. This required field (non-nullable) is essential for understanding what type of action was taken in each audit record, making it a key column for filtering and analyzing system behavior through SQL queries like ""SELECT * FROM action_log WHERE action LIKE '%login%'"" to find specific types of activities."
action_log,action_type,int,YES,MUL,,,,,,10.0,0.0,"The action_type column in the action_log table is an integer field that categorizes the type of system action or event being recorded, with a multi-column index (MUL) to optimize queries filtering or grouping by action types. When querying this column, you can use it to filter specific types of actions (e.g., WHERE action_type = 1) or aggregate events by their types (e.g., GROUP BY action_type), and since it's nullable, remember to handle NULL values appropriately in your queries."
action_log,ip_address,varchar(60),YES,,,,,,60.0,,,"The ip_address column in the action_log table stores the IP address from which a system action or event originated, using a varchar(60) format to accommodate both IPv4 and IPv6 addresses. This column can be used in SQL queries to filter, group, or analyze system activities by their network origin, though it may contain NULL values when the IP address is not available or not recorded."
action_log,agent_id,int unsigned,NO,MUL,,,,,,10.0,0.0,"The agent_id column in the action_log table is a required, non-negative integer field that identifies the agent (user, system, or service) responsible for performing the logged action. As indicated by the MUL key type, this column is indexed to optimize queries that filter or join based on agent_id, making it efficient to retrieve all actions performed by a specific agent."
action_log,date,date,YES,MUL,,,,,,,,"The 'date' column in the action_log table stores the calendar date (without time) when each system action or event occurred. This column is indexed (MUL) to optimize queries filtering or grouping by date, and can be used for date-based analysis of system activities or to generate historical reports."
action_log,time,time,YES,,,,,,,,,"The 'time' column in the action_log table stores the specific time of day when each system action or event occurred, using a standard time format (HH:MM:SS). When querying this column, you can use time comparison operators and time functions to analyze or filter events based on their occurrence time, making it useful for identifying patterns in system activity during specific times of the day."
activate_newsletter_pop_up,activate_newsletter_pop_up_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The activate_newsletter_pop_up_id column serves as the primary key identifier for each unique newsletter pop-up configuration in the activate_newsletter_pop_up table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific pop-up configurations (e.g., WHERE activate_newsletter_pop_up_id = [value])."
activate_newsletter_pop_up,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the activate_newsletter_pop_up table is a required integer field that identifies the specific user for whom newsletter pop-up settings are configured. When writing queries, this column can be used to filter or join with other user-related tables to retrieve or modify individual user's newsletter subscription display preferences."
activate_newsletter_pop_up,seen,tinyint,NO,,,0,,,,3.0,0.0,"The 'seen' column in the activate_newsletter_pop_up table is a required boolean flag (stored as tinyint) that tracks whether a newsletter pop-up has been shown to a visitor. When querying this column, use 0 to filter for unseen pop-ups and 1 for previously displayed pop-ups, making it useful for controlling the frequency and timing of newsletter subscription prompts."
active_record_logs,active_record_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The active_record_log_id column serves as the primary key identifier for each log entry in the active_record_logs table, using an integer data type that uniquely identifies each database operation record. When writing SQL queries, this column can be used for precise record selection, joining with related tables, or ordering log entries, and since it's non-nullable, you can rely on it always having a valid value."
active_record_logs,description,varchar(255),YES,,,,,,255.0,,,"The `description` column in the `active_record_logs` table stores a human-readable text description (up to 255 characters) of the database operation or change that occurred. When querying this column, it can be used to search for specific types of changes or to generate reports about database modifications, with NULL values indicating operations where no description was provided."
active_record_logs,action,varchar(20),YES,,,,,,20.0,,,"The 'action' column in the active_record_logs table stores the type of database operation performed (such as 'create', 'update', or 'delete') as a variable-length string up to 20 characters. When querying this column, you can use it to filter or group log entries by operation type, making it useful for analyzing specific types of database activities or tracking patterns in data modifications."
active_record_logs,model,varchar(45),YES,MUL,,,,,45.0,,,"The 'model' column in the active_record_logs table stores the name of the ActiveRecord model class (as a string up to 45 characters) that was affected by the logged database operation. When querying this column, you can use it to filter or group log entries by specific model types (e.g., 'User', 'Order', 'Product'), and its MUL key type indicates it's indexed for improved query performance when filtering by model name."
active_record_logs,model_id,int unsigned,YES,,,,,,,10.0,0.0,"The `model_id` column in the `active_record_logs` table stores the primary key identifier of the record that was modified during the logged database operation. This unsigned integer field can be used to join with the corresponding model's table to retrieve the specific record that was affected, making it essential for tracking changes to individual records across the application."
active_record_logs,field,varchar(45),YES,,,,,,45.0,,,"The 'field' column in the active_record_logs table stores the name of the specific database field or attribute that was modified during an ActiveRecord operation, with a maximum length of 45 characters. When querying this column, it can be used to filter or group log entries based on which fields were affected during database operations, making it valuable for analyzing changes to particular attributes across records."
active_record_logs,old_value,varchar(500),YES,,,,,,500.0,,,"The `old_value` column in the `active_record_logs` table stores the previous value of a field before it was modified in a database operation, with a maximum length of 500 characters. When querying this column, it's useful for comparing historical data states or tracking specific changes, and since it's nullable, you should handle NULL values appropriately in your queries using IS NULL or COALESCE when necessary."
active_record_logs,new_value,varchar(500),YES,,,,,,500.0,,,"The `new_value` column in the `active_record_logs` table stores the updated value(s) of a record after a database operation, with a maximum length of 500 characters. When querying this column, it's useful for comparing changes or tracking what values were set during updates, though the field may be NULL if the operation was a deletion or if no changes were made to the tracked fields."
active_record_logs,created_at,timestamp,NO,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The created_at column in the active_record_logs table automatically records the timestamp when each log entry is created, using CURRENT_TIMESTAMP as the default value. This column is commonly used in SQL queries for filtering logs by date/time ranges or ordering entries chronologically, making it essential for temporal analysis of database operations (e.g., SELECT * FROM active_record_logs WHERE created_at >= '2023-01-01' ORDER BY created_at DESC)."
active_record_logs,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the active_record_logs table is a required integer field that identifies which user performed the logged database operation. This column can be used to join with a users table or to filter/group database operations by specific users, making it valuable for user-specific audit trails and accountability tracking."
active_record_logs,parent_model_id,int unsigned,YES,,,,,,,10.0,0.0,"The parent_model_id column in the active_record_logs table stores the primary key identifier of the parent record when logging changes to associated or nested models in a Rails application. This optional integer field helps establish relationships between logged operations and their parent records, making it useful for queries that need to trace changes across related models or analyze modifications within specific parent-child hierarchies."
active_record_logs,parent_model,varchar(45),YES,MUL,,,,,45.0,,,"The `parent_model` column in the `active_record_logs` table stores the class name (up to 45 characters) of the parent model associated with the logged database operation, enabling tracking of hierarchical relationships in ActiveRecord associations. This column is indexed (MUL) for efficient querying and can be NULL when there's no parent model involved, making it useful for filtering and analyzing database operations in the context of model inheritance or nested relationships."
additional_lots_found,additional_lot_found_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The additional_lot_found_id column serves as the primary key for the additional_lots_found table, uniquely identifying each newly discovered lot number record during spot check inspections. When writing SQL queries, use this column for joining with related tables or when you need to reference specific additional lot entries, ensuring each record can be distinctly identified and tracked."
additional_lots_found,task_type_spot_check_id,int,NO,MUL,,,task_type_spot_check,task_type_spot_check_id,,10.0,0.0,"The task_type_spot_check_id column serves as a foreign key that links each additional lot record to its parent spot check inspection task in the task_type_spot_check table. This required integer field enables queries to join and filter additional lots based on their associated spot check inspection, making it essential for analyzing which spot check tasks resulted in the discovery of unlisted lot numbers."
additional_lots_found,lot_id,int,NO,,,,,,,10.0,0.0,"The lot_id column in the additional_lots_found table stores the unique identifier for each newly discovered lot number found during spot check inspections. This required integer field serves as a way to track and reference specific lots that were identified but weren't initially recorded in the inventory system, enabling accurate tracking of inventory discrepancies."
additional_lots_found,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the additional_lots_found table automatically records the timestamp when a new lot number entry is discovered and added to the system during spot check inspections. This non-nullable datetime field is automatically populated with the current timestamp when a record is inserted, making it useful for tracking when discrepancies between physical inventory and system records are identified."
additional_lots_found,quantity_found,int,YES,,,,,,,10.0,0.0,"The quantity_found column stores the number of units discovered for each additional lot number identified during spot check inspections that weren't in the original inventory records. This integer field can be used in aggregate functions (like SUM or AVG) to analyze discrepancies between expected and actual inventory, and since it's nullable, queries should handle potential NULL values when performing calculations."
additional_lots_found,location_header_id,int,NO,,,,,,,10.0,0.0,"The location_header_id column in the additional_lots_found table is a required integer field that identifies the specific warehouse location where an additional lot was discovered during a spot check. This column helps maintain traceability by linking each newly found lot to its physical storage location within the facility, enabling accurate tracking of where unexpected inventory items were located."
ai_alternatives,ai_alternative_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ai_alternative_id column serves as the primary key in the ai_alternatives table, uniquely identifying each alternative ingredient suggestion. When writing SQL queries, use this column for precise record selection, joining with other tables, or when you need to reference a specific alternative ingredient entry."
ai_alternatives,ai_product_id,int,NO,,,,,,,10.0,0.0,"The ai_product_id column in the ai_alternatives table represents the unique identifier of a product that can be used as an alternative ingredient in AI-generated recipes. When writing SQL queries, this column can be used to join with product-related tables to retrieve detailed information about the substitute ingredients, and it's required (non-nullable) to ensure each alternative ingredient is properly identified."
ai_alternatives,ai_recipe_id,int,NO,MUL,,,ai_recipes,ai_recipe_id,,10.0,0.0,"The ai_recipe_id column in the ai_alternatives table serves as a foreign key that links to the primary recipe in the ai_recipes table. This column is essential for querying and joining recipe data with their corresponding alternative ingredients, and since it's non-nullable, every alternative ingredient must be associated with a valid recipe."
ai_alternatives,ai_name,varchar(255),NO,,,,,,255.0,,,"The ai_name column in the ai_alternatives table stores the name or description of alternative ingredients that can be used in AI-generated recipes, with a maximum length of 255 characters. This required field (non-nullable) helps identify and reference different ingredient substitutions when querying or displaying alternative options for recipe modifications."
ai_alternatives,ai_weight,int,NO,,,,,,,10.0,0.0,"The ai_weight column in the ai_alternatives table is a required integer value that indicates the relative preference or priority of an alternative ingredient option. When querying for ingredient substitutions, you can use this column to sort or filter alternatives based on their weight, where higher weights typically represent more recommended or preferred substitutions."
ai_alternatives,ai_original_product_id,int,NO,,,,,,,10.0,0.0,"The ai_original_product_id column in the ai_alternatives table represents the primary ingredient that could be substituted in an AI-generated recipe. This required integer field serves as a reference to identify the original ingredient for which alternatives are being suggested, enabling the system to track and manage ingredient substitutions effectively."
ai_ingredients,ai_ingredient_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ai_ingredient_id column serves as the primary key in the ai_ingredients table, uniquely identifying each ingredient record with an integer value. This column is commonly used in WHERE clauses for specific ingredient lookups and in JOIN operations when connecting ingredient details with their corresponding recipes through the ai_recipe_id relationship."
ai_ingredients,ai_product_id,int,NO,,,,,,,10.0,0.0,"The ai_product_id column in the ai_ingredients table is a required integer field that identifies specific products or ingredients used in AI-generated recipes. This column likely serves as a reference to a product catalog or ingredient master list, enabling standardized ingredient tracking and consistent recipe creation across the system."
ai_ingredients,ai_recipe_id,int,NO,MUL,,,ai_recipes,ai_recipe_id,,10.0,0.0,"The ai_recipe_id column in the ai_ingredients table is a required integer field that serves as a foreign key linking each ingredient to its corresponding recipe in the ai_recipes table. This column enables queries to join ingredient details with their associated recipes, making it essential for retrieving complete recipe information or filtering ingredients by specific recipes."
ai_ingredients,ai_name,varchar(255),NO,,,,,,255.0,,,"The ai_name column in the ai_ingredients table stores the name of each ingredient (e.g., ""flour,"" ""sugar,"" ""salt"") as a text string up to 255 characters long. This required field (non-nullable) is essential for identifying ingredients within AI-generated recipes and should be referenced when querying for specific ingredients or listing recipe components."
ai_ingredients,ai_weight,int,NO,,,,,,,10.0,0.0,"The ai_weight column in the ai_ingredients table stores the numerical weight value of ingredients used in AI-generated recipes as an integer. This non-nullable field can be used in SQL queries to filter, sort, or calculate total ingredient weights, and is particularly useful when writing queries that need to analyze recipe proportions or scale ingredient quantities."
ai_recipes,ai_recipe_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ai_recipe_id column serves as the primary key in the ai_recipes table, uniquely identifying each AI-generated or AI-managed recipe in the system. This integer field is non-nullable and is essential for establishing relationships with alternative recipe versions and ingredient listings in related tables through foreign key connections."
ai_recipes,ai_recipe_name_en,varchar(255),NO,,,,,,255.0,,,"The ai_recipe_name_en column stores the English-language name or title of an AI-generated or AI-managed recipe as a text string (maximum 255 characters) and cannot be null. When querying recipes, use this column to search for or display recipe names, such as ""SELECT ai_recipe_name_en FROM ai_recipes WHERE ai_recipe_name_en LIKE '%chicken%'"" to find chicken-related recipes."
ai_recipes,ai_recipe_name_fr,varchar(255),NO,,,,,,255.0,,,"The ai_recipe_name_fr column stores the French language version of recipe names in the ai_recipes table, using a maximum length of 255 characters and requiring a non-null value. When writing SQL queries, use this column to filter, sort, or display recipe names in French, particularly when building multilingual recipe interfaces or when French language recipe names are specifically needed."
ai_recipes,ai_calories,int,NO,,,,,,,10.0,0.0,"The ai_calories column in the ai_recipes table stores the total caloric content of each recipe as a non-null integer value. When writing SQL queries, this column can be used to filter or sort recipes based on their caloric content, making it useful for queries related to nutritional analysis or dietary restrictions."
ai_recipes,ai_meal_type,varchar(50),NO,,,,,,50.0,,,"The ai_meal_type column in the ai_recipes table is a required field that categorizes recipes by their meal classification (e.g., breakfast, lunch, dinner, snack, dessert). When querying recipes, this column can be used to filter or group recipes by their intended meal timing, making it useful for meal planning queries or when searching for recipes appropriate for specific times of day."
ai_recipes,ai_diet_category,varchar(50),NO,,,,,,50.0,,,"The ai_diet_category column in the ai_recipes table is a required field that specifies the primary dietary classification of a recipe (e.g., vegetarian, vegan, keto, paleo) using a text string up to 50 characters. When writing SQL queries, this column can be used to filter or group recipes by dietary preferences, making it particularly useful for targeting specific dietary requirements or analyzing recipe distribution across different diet categories."
ai_recipes,ai_allergy_warnings,text,YES,,,,,,65535.0,,,"The ai_allergy_warnings column in the ai_recipes table stores text-based alerts about potential allergens present in the recipe, helping AI systems identify and communicate food safety concerns. This nullable text field should be queried when filtering recipes for specific allergy requirements or when displaying comprehensive recipe safety information to users."
ai_recipes,ai_preparation_time,int,NO,,,,,,,10.0,0.0,"The ai_preparation_time column in the ai_recipes table represents the total time required to prepare the recipe, stored as an integer value (likely in minutes). When writing SQL queries, this non-nullable field can be used to filter or sort recipes based on preparation duration, making it useful for queries that need to find quick recipes or organize recipes by time commitment."
ai_recipes,ai_cook_time,int,NO,,,,,,,10.0,0.0,"The ai_cook_time column in the ai_recipes table represents the total cooking time required for a recipe, stored as an integer value (likely in minutes). This required field helps AI systems accurately calculate and filter recipes based on cooking duration, making it useful for queries that need to find recipes within specific time constraints or sort recipes by preparation length."
ai_recipes,ai_preparation_instructions_en,text,NO,,,,,,65535.0,,,"The ai_preparation_instructions_en column contains the complete step-by-step cooking instructions for a recipe in English text format, making it essential for recipe execution and display. This required field should be referenced when querying for detailed recipe preparation methods, and it can be searched using text-based operations (like LIKE or ILIKE) to find recipes with specific cooking techniques or steps."
ai_recipes,ai_preparation_instructions_fr,text,NO,,,,,,65535.0,,,"The ai_preparation_instructions_fr column contains the complete preparation instructions for recipes in French language, stored as text. This mandatory field (non-nullable) should be used when querying for French-language recipe steps or when displaying full recipe preparation methods to French-speaking users."
ai_recipes,ia_short_description_fr,text,YES,,,,,,65535.0,,,"The ia_short_description_fr column contains a brief French-language description or summary of the recipe, stored as text. This column can be used in SQL queries to filter or display French recipe descriptions, particularly useful for multilingual recipe applications or when specifically targeting French-speaking users."
ai_recipes,ia_short_description_en,text,YES,,,,,,65535.0,,,"The ia_short_description_en column in the ai_recipes table stores a brief English-language description or summary of the recipe, providing a quick overview of what the dish is about. When querying this column, it can be useful for searching or filtering recipes based on their descriptions, and since it's nullable, queries should handle potential NULL values appropriately using IS NULL or COALESCE functions when necessary."
ai_recipes,ia_seasonnality,varchar(20),YES,,,,,,20.0,,,"The ia_seasonnality column in the ai_recipes table indicates the optimal season or time of year when a recipe is best prepared or when its ingredients are most readily available (e.g., ""Summer"", ""Winter"", ""Year-round""). When querying recipes, this column can be used to filter or sort recipes based on seasonal appropriateness, making it particularly useful for generating seasonally relevant recipe recommendations or meal plans."
ai_recipes,ai_ustensils_required,json,YES,,,,,,,,,"The ai_ustensils_required column stores a JSON array of kitchen tools and equipment needed to prepare the recipe, allowing for structured storage of multiple utensils with their optional properties (like size or specific type). When querying this column, use JSON operators and functions to extract or filter specific utensil requirements, and note that NULL values are permitted if utensil information is not specified for a recipe."
ai_recipes,ai_protein,int,NO,,,0,,,,10.0,0.0,"The ai_protein column in the ai_recipes table stores the protein content of a recipe as a non-null integer value, representing the amount in grams. This nutritional data point is essential for dietary tracking and recipe filtering, allowing AI systems to query and sort recipes based on their protein content."
ai_recipes,ai_sugar,int,NO,,,0,,,,10.0,0.0,"The ai_sugar column in the ai_recipes table is a required integer field that indicates the sugar content or sweetness level of a recipe. When writing SQL queries, this column can be used to filter or sort recipes based on their sugar content, making it useful for queries related to dietary restrictions or nutritional analysis."
ai_recipes,ai_common_ingredients_fr,json,YES,,,,,,,,,"The ai_common_ingredients_fr column stores a JSON array of common ingredients in French language for each recipe, providing a localized ingredient overview without detailed measurements. This column can be queried using JSON operators and functions to extract or search for specific French ingredient names, making it useful for language-specific recipe filtering and ingredient-based searches in French."
ai_recipes,ai_common_ingredients_en,json,YES,,,,,,,,,"The ai_common_ingredients_en column stores a JSON array of commonly used ingredients for a recipe in English, providing a quick overview of main ingredients without detailed measurements or preparation notes. This JSON field is useful for ingredient-based recipe searches and filtering, allowing AI systems to quickly assess recipe composition without querying the more detailed ingredient relationships table."
ai_recipes,ai_meal_tags,json,YES,,,,,,,,,"The ai_meal_tags column stores JSON-formatted tags that categorize and describe meal characteristics, such as ""breakfast,"" ""vegetarian,"" ""quick-prep,"" or ""kid-friendly,"" allowing for flexible and multiple tag assignments per recipe. This JSON structure enables efficient filtering and searching of recipes based on meal types and dietary preferences, making it valuable for AI systems to understand recipe classifications and recommend appropriate dishes based on user preferences or requirements."
ai_recipes,ai_recipe_status,"enum('Active','Invalid - no ingredient','Invalid - too expensive','Invalid - not accurate')",NO,,,Active,,,23.0,,,"The ai_recipe_status column in the ai_recipes table is an enumerated field that indicates the current validation state of an AI-generated recipe, with possible values being 'Active' for valid recipes or various 'Invalid' states specifying why a recipe failed validation. When querying recipes, this column can be used to filter for only valid recipes (WHERE ai_recipe_status = 'Active') or to identify recipes that failed specific validation checks, making it essential for quality control and recipe management workflows."
annie_exemptions,annie_exemption_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The annie_exemption_id column serves as the primary key for the annie_exemptions table, uniquely identifying each exemption record with a non-nullable integer value. When writing SQL queries, use this column for precise record selection, joining with other tables, or when you need to reference a specific exemption record (e.g., SELECT * FROM annie_exemptions WHERE annie_exemption_id = 123)."
annie_exemptions,product_id,int,YES,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the annie_exemptions table is a foreign key that links each exemption record to its corresponding product in the products table. When writing queries, you can use this column to join annie_exemptions with the products table to access product details related to each exemption, or to filter exemptions for specific products."
annie_exemptions,expiry,date,YES,,,,,,,,,"The 'expiry' column in the annie_exemptions table stores the date when a product's exemption status is set to end, using a standard date format. This optional field (as indicated by being nullable) helps track when special exemptions or exclusions for products will no longer be valid, making it useful in queries that need to filter for active exemptions by comparing against the current date."
annie_exemptions,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the annie_exemptions table is an integer field that stores the user ID of the person who created the exemption record. When writing queries, this column can be used to track or filter exemptions based on their creator, and it can be joined with a users table (if available) to get more information about who created specific exemptions."
annie_exemptions,created_at,datetime,YES,,,,,,,,,"The created_at column in the annie_exemptions table records the timestamp when each exemption record was initially created in the system. This datetime field can be used in SQL queries to filter or sort exemption records by their creation date, making it useful for auditing purposes or analyzing when exemptions were added over time."
api_log,api_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The api_log_id column serves as the primary key for the api_log table, uniquely identifying each API interaction record. When querying the api_log table, this column can be used to join with other tables or to filter for specific API log entries, and since it's non-nullable, you can rely on it always having a value."
api_log,response,text,YES,,,,,,65535.0,,,"The 'response' column in the api_log table stores the complete response payload returned by the API endpoint as text data. When writing SQL queries, this column can be used to analyze API response contents or troubleshoot issues, though be aware that since it's nullable, you may need to handle NULL values appropriately in your queries."
api_log,status,varchar(50),YES,,,,,,50.0,,,"The 'status' column in the api_log table stores the outcome or state of API requests as a text value (up to 50 characters), such as ""SUCCESS"", ""FAILED"", ""PENDING"", or other status indicators. This column is commonly used in WHERE clauses to filter API logs by their completion status, making it useful for monitoring success rates or investigating failed requests."
api_log,timestamp,datetime,NO,,,,,,,,,"The timestamp column in the api_log table stores the exact date and time when each API request/response was recorded, using a datetime format. This column is required (non-nullable) and can be used for filtering API interactions within specific time ranges or ordering results chronologically, making it essential for temporal analysis and debugging of API activity."
api_log,request,text,YES,,,,,,65535.0,,,"The 'request' column in the api_log table stores the raw request payload or body sent during API calls as text data. This column is useful for debugging API interactions and can be queried to analyze request patterns or troubleshoot issues, though being nullable means some API calls might not have captured request data."
app_version,version_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The version_id column serves as the primary key in the app_version table, uniquely identifying each software version or release entry. This non-nullable integer field is essential for referencing specific versions in queries and can be used to join with other tables that need to track version-specific information."
app_version,version_code,varchar(255),YES,UNI,,,,,255.0,,,"The version_code column in the app_version table stores unique version identifiers for software releases as text strings (up to 255 characters). When writing SQL queries, this column can be used to filter or join on specific software versions, and its unique constraint (UNI) ensures that each version code appears only once in the table."
app_version,required,tinyint(1),YES,,,,,,,3.0,0.0,"The `required` column in the `app_version` table is a boolean flag (tinyint(1)) that indicates whether a particular software version is mandatory for users to install. When writing queries, this column can be used to filter or identify critical version updates (where required = 1) versus optional updates (where required = 0), with NULL values potentially indicating versions where the requirement status hasn't been determined."
app_version,broadcasted,tinyint(1),YES,,,,,,,3.0,0.0,"The 'broadcasted' column in the app_version table is a boolean flag (tinyint(1)) that indicates whether a particular software version has been announced or communicated to users. This column can be used in SQL queries to filter or identify which software versions have been publicly broadcasted (value = 1) versus those that haven't been announced yet (value = 0), with NULL values potentially indicating versions whose broadcast status is unknown or not applicable."
app_version,json_version,text,YES,,,,,,65535.0,,,"The json_version column in the app_version table stores version information in a text format, likely containing structured JSON data about specific software releases. This column can be queried to extract detailed version-related attributes using JSON parsing functions, and since it's nullable, some version records may not have JSON-formatted data associated with them."
application_error_logs,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the application_error_logs table, uniquely identifying each error log entry with an auto-incrementing integer value. When querying error logs, this column can be used for precise record selection or joining with related tables, though for time-based error analysis, you might prefer using timestamp fields instead of this ID."
application_error_logs,level,varchar(128),YES,,,,,,128.0,,,"The ""level"" column in the application_error_logs table stores the severity level of logged errors and exceptions (such as ""ERROR"", ""WARNING"", ""CRITICAL"", etc.) as a variable-length string up to 128 characters. When querying error logs, this column can be used to filter or group errors by their severity level, making it useful for prioritizing issues or analyzing patterns in system stability."
application_error_logs,category,varchar(128),YES,MUL,,,,,128.0,,,"The 'category' column in the application_error_logs table stores the classification or type of error that occurred (e.g., 'Database Error', 'Network Timeout', 'Authentication Failure') as a variable-length string up to 128 characters. This column is indexed (MUL) to optimize queries that filter or group errors by category, making it efficient for analyzing error patterns or generating error reports by type."
application_error_logs,created,timestamp,NO,MUL,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The 'created' column in the application_error_logs table stores the exact date and time when each error or exception was recorded, automatically populated with CURRENT_TIMESTAMP when a new log entry is created. When querying this column, you can use standard timestamp operations for filtering errors by time periods, analyzing error patterns over time, or joining with other time-based data, making it particularly useful for temporal analysis of system issues."
application_error_logs,ip_address,varchar(50),YES,,,,,,50.0,,,"The ip_address column in the application_error_logs table stores the IP address of the client or server where the error occurred, using a varchar(50) format that accommodates both IPv4 and IPv6 addresses. This column can be used in SQL queries to filter or group errors by their origin location, helping to identify patterns of issues affecting specific network segments or geographic regions, though it may contain NULL values when the IP address cannot be determined."
application_error_logs,user_id,varchar(20),YES,MUL,,,,,20.0,,,"The user_id column in the application_error_logs table stores the identifier of the user who was active when the error occurred, using a varchar(20) format. This column is indexed (MUL) to optimize queries filtering or joining on user-related error patterns, and can be NULL when errors occur in system processes or when user context isn't available."
application_error_logs,request_URL,text,YES,,,,,,65535.0,,,"The request_URL column in the application_error_logs table stores the complete URL path where the error or exception occurred during system operation. This text field helps developers trace the specific endpoint or resource that triggered the error, making it useful in SQL queries for filtering errors by specific routes or analyzing which URLs are most problematic (e.g., SELECT * FROM application_error_logs WHERE request_URL LIKE '%/api/users%')."
application_error_logs,message,text,YES,,,,,,65535.0,,,"The 'message' column in the application_error_logs table stores the detailed error message or description associated with each logged application error, providing human-readable context about what went wrong. When querying this column, you can use text-based operations (like LIKE, ILIKE, or string functions) to search for specific error patterns or messages, though be mindful that the content can be lengthy since it's stored as text."
application_error_logs,host,varchar(255),YES,MUL,,,,,255.0,,,"The 'host' column in the application_error_logs table stores the hostname or server identifier (up to 255 characters) where each error or exception occurred, allowing for tracking issues across different deployment environments or server instances. This column is indexed (MUL) to optimize queries filtering or grouping by host, and it can be null if the host information is not available during error logging."
asset,asset_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The asset_id column serves as the primary key in the asset table, uniquely identifying each digital or physical asset in the system. When writing SQL queries, use this column to join with other tables (particularly cart_asset_associations) and to filter or retrieve specific asset records."
asset,srl_nbr,int,YES,UNI,,,,,,10.0,0.0,"The `srl_nbr` column in the `asset` table stores a unique serial number for each digital or physical asset as an integer value. This optional (nullable) field serves as an alternative unique identifier, distinct from the primary key, and can be used to look up specific assets when the serial number is known."
asset,type_id,int,NO,,,,,,,10.0,0.0,"The type_id column in the asset table is a required integer field that categorizes assets into different types (such as digital, physical, or other classifications). When querying assets, this column can be used to filter or group assets by their type, making it useful for operations that need to work with specific categories of assets."
asset,active,tinyint,YES,MUL,,1,,,,3.0,0.0,"The 'active' column in the asset table is a boolean flag (stored as tinyint) that indicates whether an asset is currently available for use in the system, where 1 typically represents active assets and 0 represents inactive ones. When writing queries, this column can be used to filter for available assets (WHERE active = 1) or to exclude inactive assets from search results, and its MUL key type suggests it's commonly used in combination with other columns for filtering or joining operations."
asset,created,datetime,NO,,,,,,,,,"The 'created' column in the asset table is a mandatory datetime field that records when each asset (digital or physical) was initially added to the system. When writing SQL queries, this column can be used for temporal filtering or sorting assets chronologically, and since it's non-nullable, you can rely on it always having a valid datetime value."
asset,updated,datetime,NO,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The 'updated' column in the asset table automatically records the timestamp of when an asset record was last modified, using CURRENT_TIMESTAMP as its default value. This non-nullable datetime field is useful for tracking asset changes and can be used in SQL queries to filter or sort assets based on their modification time, such as finding recently updated assets or identifying changes within a specific time period."
asset,last_order_id,int,NO,,,,,,,10.0,0.0,The last_order_id column in the asset table stores the identifier of the most recent order in which this asset was purchased. This required integer field helps track the latest transaction history for each asset and can be useful for analyzing purchase patterns or determining when an asset was last acquired.
asset,last_client_id,int,NO,MUL,,,,,,10.0,0.0,"The last_client_id column in the asset table is a required integer field that references the client who most recently interacted with or modified the asset. This column is indexed (MUL) to optimize queries that filter or join based on the most recent client, and its non-nullable nature ensures every asset record maintains a clear audit trail of client interactions."
asset,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the asset table is a required integer field that establishes a link to the user who owns or created the asset. When writing queries, this column can be used to filter or join assets based on user ownership, and its multiple index (MUL) designation suggests it's optimized for such operations."
asset,fake_asset,int,NO,,,0,,,,10.0,0.0,"The fake_asset column is a required integer field (non-nullable) in the asset table that likely serves as a flag or indicator to distinguish between real and simulated/test assets in the system. When writing queries, use this column with boolean conditions (WHERE fake_asset = 0 for real assets or fake_asset = 1 for test assets) to filter assets based on their authenticity status."
asset_activity,asset_activity_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The asset_activity_id column serves as the primary key in the asset_activity table, uniquely identifying each activity or event record related to assets in the system. This auto-incrementing integer field is non-nullable and should be referenced when joining with related tables or filtering specific activity records in queries."
asset_activity,asset_id,int,NO,MUL,,,,,,10.0,0.0,"The asset_id column in the asset_activity table serves as a foreign key that references the specific asset involved in each activity or event. This column is indexed (MUL) and required (non-nullable), making it efficient for queries that need to filter or join activity records based on specific assets."
asset_activity,location_id,int,NO,MUL,,,,,,10.0,0.0,"The location_id column in the asset_activity table is a required integer field that references the physical or logical location where the asset activity occurred. This column, marked with a multi-column index (MUL), can be used to filter or join asset activities by location, making it useful for queries that need to analyze asset events at specific locations or aggregate activity data across different locations."
asset_activity,created,datetime,NO,MUL,,,,,,,,"The 'created' column in the asset_activity table stores the exact date and time when each asset-related activity or event was recorded in the system, using a datetime format. This non-nullable field, which is part of a multi-column index (MUL), is essential for temporal queries and audit trails, allowing you to filter, sort, or analyze asset activities based on when they occurred."
asset_activity,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the asset_activity table is a required integer field that identifies which user performed the recorded asset action or activity. This column is essential for audit tracking and accountability, allowing queries to trace which system users were responsible for specific asset-related events or changes."
asset_activity,spot,varchar(11),YES,MUL,,,,,11.0,,,"The 'spot' column in the asset_activity table is a variable-length string (up to 11 characters) that likely represents a location identifier or position designation where the asset activity occurred. When querying this column, you can use string comparison operators and pattern matching (e.g., LIKE) to filter or group activities by their location, and since it's indexed (MUL), it's optimized for search operations."
asset_activity,order_id,int,YES,MUL,,,,,,10.0,0.0,"The `order_id` column in the asset_activity table is an integer field that links asset-related activities to their associated orders, serving as a foreign key reference. This column can be used in JOIN operations to connect asset activities with order details from other tables, and since it's nullable, not all asset activities necessarily need to be associated with an order."
asset_location,location_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The location_id column serves as the primary key in the asset_location table, uniquely identifying each physical or virtual location where assets can be found within the organization. When writing SQL queries, use this column to join with other tables that reference specific locations or to filter/group location-specific data, as it provides the fundamental identifier for each location record."
asset_location,name,varchar(10),NO,,,,,,10.0,,,"The 'name' column in the asset_location table stores a short identifier or label (up to 10 characters) that represents a specific location where assets can be found. This required field (non-nullable) helps uniquely identify different locations within the organization's physical or virtual space, such as room numbers, zone codes, or area designations."
asset_location,description,varchar(255),YES,,,,,,255.0,,,"The ""description"" column in the asset_location table stores additional textual details or notes about a specific asset location, allowing up to 255 characters of information. This optional field (being nullable) can be used to provide more context about the location, such as ""North corner of server room"" or ""Behind reception desk,"" making it useful for filtering or searching locations based on descriptive characteristics."
asset_location,created,datetime,NO,,,,,,,,,"The 'created' column in the asset_location table stores the timestamp when a location record was initially created in the system, using a datetime format. This non-nullable field is essential for tracking when assets were first assigned to or registered at specific locations, making it useful in queries that need to analyze location history or audit location assignments over time."
asset_location,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in the asset_location table is a required integer field that identifies the user who is currently responsible for or associated with an asset at a specific location. This column helps track asset accountability and enables queries to find all assets assigned to a particular user or determine who is responsible for assets in different locations.
asset_order,asset_order_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The asset_order_id column serves as the primary key for the asset_order table, uniquely identifying each order or transaction record. This non-nullable integer field is essential for joining with related tables and should be referenced when querying specific order details or filtering order-related data."
asset_order,asset_id,int,NO,MUL,,,,,,10.0,0.0,"The asset_id column in the asset_order table is a required integer field that serves as a foreign key reference to identify which specific asset (digital or physical) is being ordered or transacted. When writing queries, this column can be used to join with the assets table to retrieve detailed asset information, or to filter and group orders by specific assets."
asset_order,order_id,int,NO,MUL,,,,,,10.0,0.0,"The order_id column in the asset_order table serves as a unique identifier for each order or transaction in the system, and it's commonly used to join with related tables or filter specific orders. Since it's a non-nullable integer field with a MUL (multiple) key type, it's likely used as a foreign key to reference orders in other tables, making it essential for tracking and linking order-related information across the database."
asset_order,created,datetime,NO,,,,,,,,,"The 'created' column in the asset_order table stores the timestamp when each order was initially created in the system, using a datetime format. This non-nullable field is commonly used for tracking order chronology and can be useful in queries that need to filter or sort orders by their creation date, such as finding orders within specific date ranges or analyzing order patterns over time."
asset_order,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the asset_order table is a required integer field that identifies which user placed the order, serving as a link to the user's account information. This column is essential for filtering orders by specific users and analyzing user purchasing patterns."
asset_transactions,pk_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The pk_id column serves as the primary key identifier for each unique transaction record in the asset_transactions table, using an integer data type that cannot be null. This column should be used in JOIN operations when linking to related tables and in WHERE clauses when needing to reference specific transaction records."
asset_transactions,transaction_id,int,NO,,,,,,,10.0,0.0,"The transaction_id column in the asset_transactions table serves as a unique identifier for each financial transaction record. This non-nullable integer field should be used in WHERE clauses and JOIN conditions when you need to reference or filter specific transactions, such as ""WHERE transaction_id = 123"" or ""JOIN other_table ON asset_transactions.transaction_id = other_table.transaction_id""."
asset_transactions,asset_id,int,NO,,,,,,,10.0,0.0,"The asset_id column in the asset_transactions table is a required integer field that identifies the specific asset involved in each financial transaction. This column serves as a reference to track which asset is being bought, sold, or modified in each transaction record, making it essential for querying and analyzing asset-specific transaction history."
asset_transactions,type,tinyint,NO,,,,,,,3.0,0.0,"The 'type' column in the asset_transactions table is a required (non-nullable) tinyint field that categorizes the nature of each asset transaction using numeric codes. When querying this table, you can use this column to filter or group transactions by their type, where different tinyint values likely represent distinct transaction categories such as purchases, sales, transfers, or other asset-related operations."
asset_type,type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The type_id column serves as the primary key in the asset_type table, uniquely identifying each asset category or classification. When writing SQL queries, use this column to join with other tables that reference asset types or to filter specific asset categories, as it's a non-nullable integer field that ensures data integrity and consistent asset type identification."
asset_type,name,varchar(10),NO,,,,,,10.0,,,"The 'name' column in the asset_type table stores short text identifiers (up to 10 characters) that represent different categories of assets, such as ""Vehicle,"" ""Building,"" or ""Machine."" This required field (non-nullable) is used to uniquely identify and reference asset types throughout the system, making it essential for queries that need to filter or group assets by their classification."
asset_type,description,varchar(255),YES,,,,,,255.0,,,"The description column in the asset_type table holds detailed text explanations (up to 255 characters) that provide additional information about each asset category or classification. This optional field can be used in SQL queries to search for or filter asset types based on their descriptive text, or to display more detailed information about asset categories in reports and user interfaces."
asset_type,created,datetime,NO,,,,,,,,,"The 'created' column in the asset_type table is a mandatory datetime field that records when each asset category or classification was initially added to the system. When writing SQL queries, this column can be used for temporal filtering or auditing purposes, such as finding recently added asset types or analyzing when different categories were established."
asset_type,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the asset_type table is a required integer field that identifies which user created or owns the asset type classification. When writing queries, this column can be used to filter asset types by specific users or join with the users table to get additional information about who manages different asset classifications."
asset_type,price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The 'price' column in the asset_type table stores the standard or reference price for each asset category as a decimal number with up to 10 digits total and 2 decimal places of precision. Since this column is non-nullable, every asset type must have a defined price value, making it suitable for calculations, aggregations, or filtering queries where price comparison is needed."
authassignment,itemname,varchar(255),NO,PRI,,,,,255.0,,,"The `itemname` column in the `authassignment` table is a required VARCHAR(255) field that serves as part of the primary key, storing the unique identifier of a permission or access right being assigned. When writing SQL queries, this column should be used to join with other authorization-related tables or to filter specific permission assignments, and its non-nullable nature means you must always provide a value when inserting new records."
authassignment,userid,varchar(64),NO,PRI,,,,,64.0,,,"The 'userid' column in the authassignment table is a primary key field that stores unique user identifiers as strings (up to 64 characters) and cannot contain null values. When writing SQL queries, this column should be used to join with user-related tables and to filter or group authorization assignments for specific users, making it a crucial field for querying user permissions and access rights."
authassignment,bizrule,text,YES,,,,,,65535.0,,,"The `bizrule` column in the `authassignment` table stores custom business logic or conditions (in text format) that must be evaluated when determining if a user/role can exercise their assigned permission. When writing queries involving authorization checks, this column can be used to filter or validate access based on dynamic business rules, though its nullable nature indicates that not all permission assignments require additional business rule validation."
authassignment,data,text,YES,,,,,,65535.0,,,"The 'data' column in the authassignment table stores additional configuration or metadata related to permission assignments in text format. This optional field (being nullable) can contain JSON, serialized data, or other text-based information that provides context or parameters for how the authorization should be applied, allowing for more granular or conditional access control settings."
authitem,name,varchar(255),NO,PRI,,,,,255.0,,,"The 'name' column in the authitem table serves as the primary identifier (primary key) for authorization items, storing unique string values up to 255 characters that represent roles, permissions, or tasks. This column is required (non-nullable) and is commonly used in JOIN operations with the authitemchild table to establish parent-child relationships in the permission hierarchy."
authitem,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the authitem table is a required integer field that categorizes the authorization item, likely using predefined values to distinguish between roles, permissions, tasks, or other access control elements. When writing SQL queries, this column can be used to filter or group authorization items by their type, making it easier to manage and analyze different levels of access control within the hierarchical system."
authitem,description,text,YES,,,,,,65535.0,,,"The 'description' column in the authitem table stores text-based explanations or details about authorization items (roles, permissions, or tasks) in the system. This optional field (nullable) can be used in SQL queries to search, filter, or display human-readable descriptions of access control items, making it useful for administrative interfaces or documentation purposes."
authitem,bizrule,text,YES,,,,,,65535.0,,,"The 'bizrule' column in the authitem table stores business rule conditions as text that must be satisfied for the authorization item to be granted. These business rules can be used to implement dynamic access control logic, allowing permissions to be granted or denied based on custom conditions or contextual parameters."
authitem,data,text,YES,,,,,,65535.0,,,"The 'data' column in the authitem table stores additional configuration or metadata associated with authorization items in a text format. This optional field can be used to store JSON, serialized data, or other custom attributes that provide extra context or settings for roles, permissions, or tasks within the access control system."
authitemchild,parent,varchar(64),NO,PRI,,,authitem,name,64.0,,,"The 'parent' column in the authitemchild table stores the identifier (up to 64 characters) of the higher-level authorization item in a role-based access control hierarchy, and serves as part of the primary key. When writing queries, this column should be joined with the authitem table to establish hierarchical relationships, where the parent typically represents a role or permission group that contains other authorization items."
authitemchild,child,varchar(255),NO,PRI,,,authitem,name,255.0,,,"The 'child' column in the authitemchild table stores the identifier of the subordinate authorization item (such as a permission or lower-level role) in a hierarchical RBAC relationship, using a varchar(255) format. As part of the primary key and with a NOT NULL constraint, this column works in conjunction with the 'parent' column to establish clear hierarchical relationships between authorization items, where each child value must correspond to a valid authorization item name in the referenced authitem table."
average_price_unit_conversions,average_price_unit_conversion_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The average_price_unit_conversion_id is the primary key column that uniquely identifies each price unit conversion record in the average_price_unit_conversions table. When writing SQL queries, use this column for joining to related tables or when you need to reference specific conversion records, as it serves as the main identifier for each conversion factor entry."
average_price_unit_conversions,average_price_unit_id,int,NO,,,,,,,10.0,0.0,"The average_price_unit_id column serves as a unique identifier for each price unit conversion record in the average_price_unit_conversions table. When writing SQL queries, use this column to join with other tables that reference price unit conversions or to uniquely identify specific conversion records."
average_price_unit_conversions,unit_of_measure,int,NO,,,,,,,10.0,0.0,"The unit_of_measure column is a required integer field that identifies different measurement units used in price calculations and conversions. It serves as a standardized identifier for various units of measure (such as pounds, kilograms, ounces, etc.), enabling consistent unit conversion calculations across the system."
average_price_unit_conversions,conversion,"decimal(10,3)",NO,,,,,,,10.0,3.0,"The ""conversion"" column stores decimal values with up to 3 decimal places that represent multiplication factors used to convert prices between different units of measurement (e.g., 2.205 to convert from price per kilogram to price per pound). When writing SQL queries, multiply the original price by this conversion factor to standardize prices to a common unit, and note that this column cannot contain NULL values."
average_price_units,average_price_unit_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The average_price_unit_id column serves as the primary key identifier for each unique record in the average_price_units table, using auto-incrementing integers. This column should be used in JOIN operations when relating price unit data to other tables, and can be referenced in WHERE clauses when looking up specific price unit records."
average_price_units,average_price_unit,varchar(20),NO,,,,,,20.0,,,"The average_price_unit column stores the unit of measurement (as a text string up to 20 characters) used for calculating average prices of items, such as ""per pound,"" ""per piece,"" or ""per dozen."" This required field helps standardize price comparisons and analysis by clearly defining the measurement basis for each price record in the average_price_units table."
banner_action_logs,banner_action_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The banner_action_log_id is the primary key column in the banner_action_logs table, uniquely identifying each banner-related action or change record. This auto-incrementing integer column should be used when joining to related tables or when specifically querying for individual banner action log entries."
banner_action_logs,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the banner_action_logs table is a required integer field that identifies which user performed a specific banner-related action, serving as a foreign key reference to the users table. This column is indexed (MUL) to optimize queries that filter or join based on user information, making it efficient to track and analyze banner actions by specific users."
banner_action_logs,type,varchar(255),YES,,,,,,255.0,,,"The 'type' column in the banner_action_logs table stores the category or nature of actions performed on banner content, represented as a variable-length string up to 255 characters. This column helps classify different kinds of banner-related activities (such as 'create', 'update', 'delete', etc.) and can be used in SQL queries to filter or group banner actions by their type, though it can contain NULL values when the action type is not specified."
banner_action_logs,action,varchar(255),YES,,,,,,255.0,,,"The 'action' column in the banner_action_logs table stores text descriptions of specific operations performed on banner content, such as ""create,"" ""update,"" ""delete,"" or ""publish."" When writing SQL queries, this column can be used to filter or group banner-related activities by their action type, making it useful for analyzing patterns in banner modifications or auditing specific types of changes."
banner_action_logs,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the banner_action_logs table automatically records the exact date and time when a banner action or modification was logged, using the CURRENT_TIMESTAMP value. When writing SQL queries, this timestamp column can be used for filtering banner actions by date ranges, ordering entries chronologically, or analyzing banner modification patterns over time."
basket_apology_users,userid,int,NO,,,,,,,10.0,0.0,The userid column in the basket_apology_users table is a required integer field that uniquely identifies each customer who has received an apology or compensation for basket-related issues. This column can be used to join with other user-related tables and is essential for tracking which specific customers have been contacted regarding order problems or have received compensatory actions.
basket_builder_logs,basket_builder_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The basket_builder_log_id is the primary key column that uniquely identifies each logged event or action in the basket builder system. When querying the basket_builder_logs table, this column can be used to join with related tables or to filter for specific log entries, and since it's non-nullable, you can rely on it always having a value."
basket_builder_logs,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the basket_builder_logs table is a required integer field that identifies which user performed the logged basket action or event. This column can be used to filter or group basket builder activities by specific users, and is commonly joined with user-related tables to access additional user information when analyzing basket building behavior."
basket_builder_logs,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the basket_builder_logs table is a required integer field that identifies which specific product was involved in a basket-related action or event. When querying this table, you can use product_id to filter or group basket interactions by specific products, or join with product-related tables to access additional product details associated with the basket events."
basket_builder_logs,date,date,NO,,,,,,,,,The 'date' column in the basket_builder_logs table stores the calendar date (without time) when a basket-related event or action occurred. This non-nullable field is essential for temporal analysis of basket builder activities and can be used to group or filter basket events by specific dates or date ranges.
basket_builder_logs,basket_1_def,int,NO,,,,,,,10.0,0.0,"The basket_1_def column in the basket_builder_logs table stores an integer value representing the default configuration or state of the first basket position in the basket builder system. This required field (non-nullable) can be used in SQL queries to filter or analyze specific basket configurations, particularly when examining how users modify their initial basket settings from the default state."
basket_builder_logs,basket_1_min,int,NO,,,,,,,10.0,0.0,"The basket_1_min column in the basket_builder_logs table is a required integer field that tracks the first minute of a basket-related event or action. This column is likely used for time-based analysis and monitoring of basket builder activities, helping to establish precise chronological order of basket modifications within a given minute of the hour (values 0-59)."
basket_builder_logs,basket_1_max,int,NO,,,,,,,10.0,0.0,"The basket_1_max column in the basket_builder_logs table stores an integer value representing the maximum capacity or limit for the first basket in a basket building operation. This non-nullable field is essential for enforcing and tracking basket size constraints, helping to ensure that users don't exceed predefined limits when building their shopping baskets."
basket_builder_logs,basket_5_def,int,NO,,,,,,,10.0,0.0,"The basket_5_def column in the basket_builder_logs table is a required integer field that tracks a specific numeric value or setting related to the fifth basket definition or configuration. When querying this column, you can use standard integer comparison operators (=, >, <, etc.) to filter or analyze basket-related events based on this definition value."
basket_builder_logs,basket_5_min,int,NO,,,,,,,10.0,0.0,"The basket_5_min column in the basket_builder_logs table is a non-nullable integer field that tracks a 5-minute related metric or count associated with basket building activities. When querying this column, it can be used to analyze or filter basket-related events that occur within 5-minute intervals, though specific business logic around this metric should be confirmed with documentation or team members."
basket_builder_logs,basket_5_max,int,NO,,,,,,,10.0,0.0,"The basket_5_max column in the basket_builder_logs table stores an integer value representing the maximum number of items allowed in a specific basket configuration (specifically for basket type 5). When writing queries, this column can be used to validate or analyze basket size limits, and since it's non-nullable, you can reliably use it in comparisons without needing to handle NULL cases."
basket_builder_logs,basket_7_def,int,NO,,,,,,,10.0,0.0,"The basket_7_def column in the basket_builder_logs table is a required integer field that tracks specific configuration or default settings related to the seventh position or parameter of a shopping basket. When querying this column, use it to filter or analyze basket configurations, keeping in mind that it cannot contain NULL values and must be compared using integer operations."
basket_builder_logs,basket_7_min,int,NO,,,,,,,10.0,0.0,"The basket_7_min column in the basket_builder_logs table stores an integer value representing a 7-minute interval metric related to basket building activity. This non-nullable field can be used in queries to analyze or group basket-related events within specific 7-minute time windows, helping track user behavior patterns during basket creation and modification."
basket_builder_logs,basket_7_max,int,NO,,,,,,,10.0,0.0,"The basket_7_max column in the basket_builder_logs table stores an integer value representing the maximum number of items allowed in a specific basket configuration (specifically for basket type 7). When writing queries, this column can be used to validate or analyze basket size limits, and since it's non-nullable, you can reliably use it in comparisons without needing to handle NULL cases."
basket_builder_logs,basket_8_def,int,NO,,,,,,,10.0,0.0,"The basket_8_def column in the basket_builder_logs table is a required integer field that tracks specific configuration or default settings related to the basket builder's 8th parameter or component. When querying this column, use it to filter or analyze basket configurations where this particular setting is relevant, though you should treat it as a non-null value since null values are not permitted."
basket_builder_logs,basket_8_min,int,NO,,,,,,,10.0,0.0,"The basket_8_min column in the basket_builder_logs table is a required integer field that tracks an 8-minute metric related to basket building activity. While the specific meaning of the ""8_min"" designation isn't clear from the provided context, this column likely stores a count, duration, or threshold value that's relevant to monitoring user basket interactions within an 8-minute timeframe."
basket_builder_logs,basket_8_max,int,NO,,,,,,,10.0,0.0,"The basket_8_max column in the basket_builder_logs table stores an integer value representing the maximum number of items allowed in a specific basket configuration (specifically type 8). When writing queries, this column can be used to validate or filter basket-related events based on capacity limits, such as finding instances where basket contents exceeded or approached the maximum allowed items."
basket_builder_logs,basket_9_def,int,NO,,,,,,,10.0,0.0,"The basket_9_def column in the basket_builder_logs table is a required integer field that tracks specific configuration or default settings related to the ninth basket parameter. When querying this column, use it to filter or analyze basket configurations, keeping in mind that it cannot contain NULL values and must store whole numbers."
basket_builder_logs,basket_9_min,int,NO,,,,,,,10.0,0.0,"The basket_9_min column in the basket_builder_logs table is a required integer field that tracks a specific 9-minute interval metric related to basket building activities. When querying this column, use integer comparisons to analyze or filter basket-related events that occur within these 9-minute time segments, though you should consult application documentation for the exact meaning of these intervals in the context of basket building."
basket_builder_logs,basket_9_max,int,NO,,,,,,,10.0,0.0,"The basket_9_max column in the basket_builder_logs table stores an integer value representing the maximum limit or threshold specifically configured for the basket type 9 during basket building operations. This non-nullable field is essential for enforcing business rules and validations when users interact with basket type 9, helping to ensure that basket modifications stay within defined constraints."
basket_builder_logs,basket_10_def,int,NO,,,,,,,10.0,0.0,"The basket_10_def column in the basket_builder_logs table is a required integer field that tracks specific default settings or configurations for the 10th position or slot in a user's shopping basket. When writing queries, this column can be used to filter or analyze basket configurations, and since it's non-nullable, you should always expect a valid integer value."
basket_builder_logs,basket_10_min,int,NO,,,,,,,10.0,0.0,"The basket_10_min column in the basket_builder_logs table is a non-nullable integer field that tracks a specific 10-minute interval metric related to basket building activities. When querying this column, it can be used to analyze or group basket-related events within 10-minute time windows, making it useful for time-based analysis of user shopping behavior."
basket_builder_logs,basket_10_max,int,NO,,,,,,,10.0,0.0,"The basket_10_max column in the basket_builder_logs table is a required integer field that tracks the maximum number of items allowed in a user's shopping basket when configured with a limit of 10 items. This constraint-related field helps monitor and enforce basket size limitations, making it useful in queries that analyze basket capacity restrictions or validate compliance with size limits."
basket_builder_logs,price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The 'price' column in the basket_builder_logs table stores the monetary value (with 2 decimal places) associated with basket-related events, such as item prices or total basket values. This non-nullable decimal field can be used in SQL queries for financial calculations, price-based filtering, or aggregating basket values, and supports values up to 8 digits before the decimal point."
basket_builder_logs,featured,tinyint,NO,,,,,,,3.0,0.0,"The 'featured' column in the basket_builder_logs table is a boolean flag (stored as tinyint) that indicates whether the logged basket action involved a featured item or promotion. When writing queries, use this column with values 1 (true) or 0 (false) to filter or analyze basket events specifically related to featured items, such as ""SELECT * FROM basket_builder_logs WHERE featured = 1"" to retrieve all basket actions involving featured items."
basket_builder_logs,quantity,int,NO,,,,,,,10.0,0.0,"The `quantity` column in the basket_builder_logs table stores the numeric count of items involved in each basket modification event as a non-null integer value. This column is essential for tracking how many units of a product were added, removed, or modified during basket builder interactions, providing crucial information for analyzing user shopping behavior and basket composition changes."
basket_builder_logs,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the basket_builder_logs table stores the exact timestamp when a basket-related event or action was recorded, automatically populated with CURRENT_TIMESTAMP when a new log entry is created. This timestamp field is essential for temporal analysis of basket activities and can be used in SQL queries for filtering events within specific time periods or ordering basket actions chronologically."
basket_builder_logs,is_top_new,tinyint,YES,,,0,,,,3.0,0.0,"The `is_top_new` column in the basket_builder_logs table is a boolean flag (stored as a tinyint) that indicates whether a basket modification represents a new item being added to the top of the basket. When querying this column, use values 0 and 1, where 1 typically indicates a new top item addition and 0 indicates other types of basket modifications."
basket_builder_logs,super_featured,tinyint,YES,,,0,,,,3.0,0.0,"The `super_featured` column in the basket_builder_logs table is a boolean flag (stored as a tinyint) that indicates whether the logged basket action involved a super-featured item or promotion. When querying this column, use 1 to filter for super-featured events and 0 for standard events, making it useful for analyzing special promotional or featured item interactions within the basket builder functionality."
basket_builder_logs,basket_11_max,int,NO,,,,,,,10.0,0.0,"The basket_11_max column in the basket_builder_logs table stores an integer value representing the maximum number of items allowed in a specific basket configuration (specifically for basket type 11). When writing queries, this column can be used to validate or analyze basket size limits, and since it's non-nullable, you can reliably use it in comparisons without needing to handle NULL cases."
basket_builder_logs,basket_12_max,int,NO,,,,,,,10.0,0.0,"The basket_12_max column in the basket_builder_logs table stores an integer value representing the maximum number of items allowed in a 12-month subscription basket. This non-nullable field is used to track and enforce basket size limitations, helping ensure users don't exceed the permitted quantity when building their subscription baskets."
basket_builder_logs,basket_13_max,int,NO,,,,,,,10.0,0.0,"The basket_13_max column in the basket_builder_logs table stores an integer value representing the maximum number of items allowed in a specific basket configuration (specifically for basket type 13). When writing queries, this column can be used to validate or analyze basket size limits, and since it's non-nullable, you can reliably use it in comparisons without needing to handle NULL cases."
basket_builder_logs,exclude_from_random_base_basket_content,int,NO,,,,,,,10.0,0.0,"This boolean flag (stored as an integer) indicates whether specific items or configurations should be excluded when generating random base basket content. When writing queries, use this column with a value of 1 to identify entries that should be skipped during random basket generation processes, or 0 for entries that are eligible for inclusion in random baskets."
basket_design_product_availability,availability_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The availability_id column serves as the primary key in the basket_design_product_availability table, uniquely identifying each product availability record for basket designs. This non-nullable integer field is essential for referencing specific availability statuses and can be used in JOIN operations or WHERE clauses when querying product availability information."
basket_design_product_availability,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the basket_design_product_availability table serves as a foreign key that references the unique identifier of a product, linking it to its availability status within specific basket designs. When writing queries, this column can be used to join with the products table to access detailed product information or to filter/group availability records for specific products."
basket_design_product_availability,basket_design_id,int,NO,MUL,,,,,,10.0,0.0,"The basket_design_id column serves as a foreign key in the basket_design_product_availability table, linking each availability record to a specific basket design configuration. This non-nullable integer column is indexed (MUL) to optimize queries that filter or join based on basket design relationships, making it essential for tracking product availability within particular basket configurations."
basket_design_product_availability,confirmed,int,YES,,,0,,,,10.0,0.0,"The ""confirmed"" column in the basket_design_product_availability table is an integer flag (likely 0 or 1) that indicates whether a product's availability status has been verified or confirmed for a specific basket design. When querying this column, you can use it to filter for products with confirmed or unconfirmed availability status, helping to ensure accurate inventory management in basket configurations."
basket_design_product_availability,min_quantity,int,NO,,,,,,,10.0,0.0,The min_quantity column represents the minimum required quantity of a product that must be included when using it in a basket design. This non-nullable integer field can be used in SQL queries to enforce minimum quantity requirements or to filter basket designs based on quantity thresholds.
basket_design_product_availability,max_quantity,int,NO,,,,,,,10.0,0.0,The max_quantity column represents the maximum number of units available for a specific product within a basket design configuration. This required integer field helps enforce inventory limits and can be used in SQL queries to validate if requested quantities are within allowed thresholds or to check stock availability.
basket_design_product_availability,default_quantity,int,NO,,,,,,,10.0,0.0,"The default_quantity column represents the standard or initial quantity of a product that should be included when adding this item to a basket design. As a non-nullable integer, this column ensures every product in a basket design has a predefined default quantity value, which can be used as a starting point for inventory calculations or when automatically populating basket quantities."
basket_designer_locks,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the basket_designer_locks table, uniquely identifying each lock record with an auto-incrementing integer value. When writing SQL queries involving basket designer locks, this column can be used for precise record identification and joins, though in most cases you'll likely want to filter or join using the basket_designer_locked_by field instead for user-related operations."
basket_designer_locks,basket_designer_locked,tinyint(1),NO,,,,,,,3.0,0.0,"The basket_designer_locked column is a boolean flag (stored as tinyint(1)) that indicates whether the basket designer is currently locked for editing. When this column is set to 1, it means the basket designer is locked by a user (specified in basket_designer_locked_by), while 0 indicates the designer is available for editing."
basket_designer_locks,basket_designer_locked_by,int,YES,MUL,,,users,user_id,,10.0,0.0,"The basket_designer_locked_by column stores the user_id of the person who currently has a lock on the basket designer, with NULL indicating no active lock. When writing queries, this column can be joined with the users table to get information about who has the current lock, and its nullable property allows for tracking when the designer is unlocked."
basket_designer_locks,date,date,NO,,,,,,,,,The 'date' column in the basket_designer_locks table stores the date when a lock was created for the basket designer feature. This non-nullable date field helps track when users began their editing sessions and can be useful for identifying stale locks or generating reports on basket designer usage patterns.
basket_designs,basket_design_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The basket_design_id is the primary key column in the basket_designs table, uniquely identifying each basket design configuration. This integer column is required (non-nullable) and should be referenced when joining with other tables or filtering specific basket design records."
basket_designs,basket_id,int,NO,,,,,,,10.0,0.0,"The basket_id column in the basket_designs table serves as a unique identifier for each basket design configuration. This required integer field should be referenced when joining with other basket-related tables or when querying specific basket design settings, including their associated launch messaging configurations."
basket_designs,open_date,date,YES,,,,,,,,,"The open_date column in the basket_designs table represents the date when a specific basket design becomes available or launches to customers. This optional date field can be used to filter or sort basket designs based on their launch timing, making it particularly useful for queries that need to identify upcoming or past basket launches."
basket_designs,close_date,date,YES,MUL,,,,,,,,"The close_date column in the basket_designs table represents the date when a particular basket design configuration is no longer active or available. When writing SQL queries, this column can be used to filter for active basket designs (where close_date is NULL or greater than the current date) or to analyze historical basket configurations based on their end dates."
basket_designs,status,tinyint,NO,,,0,,,,3.0,0.0,"The 'status' column in the basket_designs table is a required (non-nullable) tinyint field that indicates the current state of a basket design configuration. When writing SQL queries, this column can be used to filter or group basket designs based on their operational status, where 0 likely represents an inactive or default state."
basket_designs,setup_status,int,NO,,,0,,,,10.0,0.0,"The setup_status column in the basket_designs table is a required integer field that tracks the configuration state of each basket design. This column likely uses predefined status codes (where 0 appears to be a default value) to indicate whether a basket's design setup is complete, pending, or in other states, helping to manage the workflow of basket configuration processes."
basket_designs,sticker_message_fr,varchar(200),NO,,,,,,200.0,,,"The sticker_message_fr column in the basket_designs table stores the French-language version of messages that appear on basket stickers, with a maximum length of 200 characters and cannot be null. This column should be used when querying for French-specific basket messaging content, particularly when generating or displaying sticker text for French-speaking customers or markets."
basket_designs,sticker_message_en,varchar(200),NO,,,,,,200.0,,,"The sticker_message_en column in the basket_designs table stores the English-language text that appears on basket stickers, with a maximum length of 200 characters and cannot be null. This column is essential for queries involving basket labeling or when retrieving customer-facing messaging that needs to be printed or displayed on physical basket materials."
basket_designs,communication_message_id_basket_launch,int,YES,MUL,,,communication_messages,communication_messages_id,,10.0,0.0,"This column stores the foreign key reference to the communication_messages table, specifically linking to the message template used when launching regular (non-vegan) baskets. When writing queries, join this column with the id column in the communication_messages table to retrieve the associated launch message content for standard basket configurations."
basket_designs,communication_message_id_reminder,int,YES,,,,,,,10.0,0.0,"This column stores the ID of a reminder message from the communication_messages table that is associated with a basket design. When writing queries, you can use this nullable foreign key to join with communication_messages to retrieve the specific reminder message content for a basket, though not all basket designs will have an associated reminder message since the field can be null."
basket_designs,communication_message_id_basket_launch_vegan,int,YES,MUL,,,communication_messages,communication_messages_id,,10.0,0.0,"This column stores the foreign key reference to a specific message ID in the communication_messages table that is used when launching vegan baskets. When writing queries involving vegan basket launch communications, join the basket_designs table with communication_messages using this column to access the associated vegan-specific launch message content."
baskets,basket_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The basket_id column serves as the primary key in the baskets table, uniquely identifying each basket record in the droppoint system. When writing SQL queries, use this column to join with other tables or filter specific basket records, as it's a non-nullable integer that ensures each basket can be distinctly referenced."
baskets,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the baskets table stores descriptive text labels (up to 255 characters) that identify individual baskets in the droppoint system. This optional field can be used in SQL queries to search, filter, or display basket names, making it useful for human-readable basket identification and reporting purposes."
baskets,min_credits,varchar(255),YES,,,,,,255.0,,,"The min_credits column in the baskets table stores the minimum number of credits required for a basket as a varchar string, though it represents a numeric value. When querying this column, you may need to cast it to a numeric type for mathematical comparisons, and since it's nullable, remember to handle NULL cases appropriately in your WHERE clauses or calculations."
baskets,description,text,YES,,,,,,65535.0,,,"The `description` column in the `baskets` table stores optional text descriptions of individual baskets in the droppoint system. This free-form text field can be used to record distinguishing characteristics, condition notes, or other relevant details about each basket, which can be helpful when querying for specific baskets or generating reports."
baskets,repeat_interval,int,YES,,,7,,,,10.0,0.0,"The repeat_interval column in the baskets table represents the frequency (in days) at which a basket is scheduled for regular service or collection at its assigned droppoint. This optional integer field, which defaults to 7 days, helps determine the recurring schedule for basket maintenance or pickup operations, enabling automated scheduling and tracking of regular basket service intervals."
baskets,default_price,float,NO,,,,,,,12.0,,"The default_price column in the baskets table stores the standard monetary value (as a floating-point number) associated with each basket in the droppoint system. This non-nullable field can be used in SQL queries to calculate costs, filter baskets by price ranges, or perform price-based aggregations when analyzing basket assignments across different droppoints."
baskets,feeds,varchar(50),NO,,,1,,,50.0,,,"The 'feeds' column in the baskets table stores a varchar(50) value that indicates the feed configuration or type associated with each basket in the droppoint system. This required field (non-nullable) helps identify how each basket is configured to handle different types of feeds or input streams, which is essential for proper basket management and droppoint operations."
baskets,image_url,varchar(500),YES,,,,,,500.0,,,"The image_url column in the baskets table stores the URL path (up to 500 characters) to an image associated with each basket, which can be used for visual identification or documentation purposes. Since this field is nullable, not all basket records are required to have an associated image, making it an optional attribute when querying or inserting basket data."
baskets,image_full_url,varchar(500),YES,,,,,,500.0,,,"The image_full_url column stores the complete URL path to a high-resolution image of the basket, accepting URLs up to 500 characters in length. This optional field (nullable) can be used in queries to retrieve or filter baskets based on their image availability, or to display basket images in user interfaces."
baskets,status,tinyint,NO,,,0,,,,3.0,0.0,"The 'status' column in the baskets table is a required tinyint field that indicates the current state of each basket in the droppoint system. When querying this column, use numeric values (likely 0, 1, etc.) to filter baskets based on their operational status, such as whether they are active, inactive, or in other predefined states."
baskets,in_use,tinyint,YES,,,1,,,,3.0,0.0,"The `in_use` column in the baskets table is a boolean flag (stored as tinyint) that indicates whether a basket is currently being utilized in the droppoint system. When writing queries, use this column to filter for active/inactive baskets, where 1 typically represents a basket in use and 0 (or NULL) indicates a basket that's not currently assigned or active."
baskets,baskets_dynamic_content,tinyint,NO,,,0,,,,3.0,0.0,"The baskets_dynamic_content column is a required boolean flag (tinyint) in the baskets table that indicates whether a basket has dynamic or static content. When writing queries, use this column to filter or distinguish between baskets with fixed content (0) versus those with changeable content (1), which can be particularly useful when managing inventory or content assignments in the droppoint system."
basketsLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'l_id' column serves as the primary key in the basketsLang table, using an integer data type to uniquely identify each language-specific basket entry. This non-nullable field is essential for joining with other tables and maintaining referential integrity when querying basket-related translations or localized content."
basketsLang,basket_id,int,NO,,,,,,,10.0,0.0,"The basket_id column in the basketsLang table serves as a reference identifier linking language-specific content to a specific shopping basket or cart. As a non-nullable integer field, it should be used in JOIN operations to connect basket-related translations with their corresponding main basket records, and it's essential to always provide a valid basket_id value when inserting new language-specific basket content."
basketsLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the basketsLang table stores language identifiers (like 'en', 'es', 'fr') as text strings up to 10 characters long, and a value is required (cannot be null). This column is used to specify which language a particular basket-related text or translation corresponds to, enabling multi-language support for shopping cart functionality."
basketsLang,l_name,varchar(255),NO,,,,,,255.0,,,"The `l_name` column in the `basketsLang` table stores localized names or labels for shopping basket-related content, with a maximum length of 255 characters and cannot contain NULL values. This column is likely used to store translated versions of basket names, categories, or status labels that need to be displayed in different languages throughout the shopping interface."
basketsLang,l_description,text,YES,,,,,,65535.0,,,"The `l_description` column in the `basketsLang` table stores localized descriptive text content for shopping baskets or cart-related elements, allowing for language-specific descriptions to be maintained. As a nullable text field, it can store detailed descriptions of varying lengths or be left empty when a description isn't needed for a particular language variant."
blog,blog_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The blog_id column serves as the primary key in the blog table, uniquely identifying each blog post with a non-null integer value. This column is essential for joining with the blog_rating table to retrieve reader ratings and feedback, and should be referenced when querying specific blog posts or establishing relationships with related tables."
blog,slug,varchar(255),NO,,,,,,255.0,,,"The `slug` column in the `blog` table stores URL-friendly versions of blog post titles, formatted as lowercase text with hyphens replacing spaces (e.g., ""my-first-blog-post""). This column is required (non-nullable) and is commonly used in WHERE clauses to find specific blog posts in URLs or to generate SEO-friendly links."
blog,title,varchar(255),NO,,,,,,255.0,,,"The 'title' column in the blog table stores the main heading or title of each blog post as a text string, with a maximum length of 255 characters. Since this column is marked as NOT NULL, every blog post must have a title, making it a required field when inserting or updating records in the blog table."
blog,body,longtext,YES,,,,,,4294967295.0,,,"The 'body' column in the blog table stores the main content or text of each blog post using the longtext data type, which can accommodate large amounts of formatted text content. When querying this column, you can use text-based functions like LIKE, SUBSTRING, or LOCATE to search or manipulate the blog post content, and since it's nullable, remember to handle potential NULL values appropriately in your queries."
blog,image_url,varchar(500),YES,,,,,,500.0,,,"The image_url column in the blog table stores the web URL or file path (up to 500 characters) pointing to the featured image associated with each blog post. This optional field (nullable) can be used in SQL queries to retrieve or filter blog posts based on whether they have images, or to display the corresponding images alongside blog content in the application interface."
blog,blog_category_id,int,NO,,,,,,,10.0,0.0,"The blog_category_id column in the blog table is a required integer field that identifies the category classification of each blog post. This column likely serves as a foreign key linking to a category reference table, allowing for the organization and filtering of blog posts by their topical categories (though no explicit foreign key constraint is shown in the provided information)."
blog,recipe_preparation_time,varchar(255),YES,,,,,,255.0,,,"The recipe_preparation_time column in the blog table stores the estimated time required to prepare a recipe, formatted as a text string (e.g., ""30 minutes"" or ""2 hours""). This optional field is specifically relevant for blog posts containing recipes and can be used in queries to filter or sort recipe-based content by preparation duration, though its nullable nature means not all blog posts will have this information."
blog,recipe_total_time,varchar(255),YES,,,,,,255.0,,,"The recipe_total_time column in the blog table stores the total preparation and cooking time for recipe-based blog posts as a text string (e.g., ""45 minutes"" or ""2 hours 30 minutes""). When querying recipe-related blog posts, this column can be used to filter or sort content based on cooking duration, though note that since it's a VARCHAR field, string comparison rules will apply rather than numerical comparisons."
blog,recipe_serves,varchar(255),YES,,,,,,255.0,,,"The recipe_serves column in the blog table indicates the number of people a recipe featured in a blog post is intended to serve, stored as a text value (e.g., ""4-6 people"" or ""8 servings""). This optional field is specifically relevant for food and recipe-related blog posts, and can be used in queries to filter or display serving size information when presenting recipe content."
blog,recipe_ingredients_left,text,YES,,,,,,65535.0,,,"The recipe_ingredients_left column in the blog table stores text content specifically for listing ingredients in recipe-focused blog posts, likely representing the left-hand or primary ingredient section of a recipe format. When querying recipe-related blog posts, this column can be used to search for specific ingredients or filter posts based on ingredient content, though its nullable property means some blog posts may not contain recipe information."
blog,recipe_ingredients_right,text,YES,,,,,,65535.0,,,"The recipe_ingredients_right column in the blog table stores text content specifically related to the right-hand portion or section of recipe ingredients in blog posts. When querying recipe-related blog content, this column can be used to access or filter the ingredient listings that appear on the right side of the recipe layout, though its nullable property indicates that not all blog posts will necessarily contain recipe ingredients."
blog,recipe_directions,text,YES,,,,,,65535.0,,,"The recipe_directions column in the blog table stores the step-by-step cooking instructions for blog posts that contain recipes, stored as free-form text. When querying this column, consider using text search functions (like LIKE or ILIKE) to find specific cooking techniques or ingredients within the directions, and note that since it's nullable, you should handle NULL values appropriately in your queries."
blog,frontpage,tinyint,NO,,,0,,,,3.0,0.0,"The 'frontpage' column in the blog table is a boolean flag (stored as tinyint) that indicates whether a blog post should be featured on the website's front page, where 0 typically means not featured and 1 means featured. When querying blog posts for front page display, use this column in WHERE clauses (e.g., WHERE frontpage = 1) to filter for featured content."
blog,sticky,tinyint,NO,,,0,,,,3.0,0.0,"The 'sticky' column in the blog table is a boolean flag (stored as tinyint) that indicates whether a blog post should be ""stuck"" or pinned to the top of the blog listing. When querying blog posts, you can use this column to prioritize sticky posts (where sticky = 1) over regular posts (where sticky = 0), typically combining it with ORDER BY to ensure pinned content appears first."
blog,status,tinyint,NO,,,1,,,,3.0,0.0,"The 'status' column in the blog table is a required (non-nullable) tinyint field that indicates the current state of a blog post, likely using predefined status codes (e.g., 1 for published, 0 for draft). When querying blog posts, this column can be used to filter for specific post states, such as `WHERE status = 1` to retrieve only published posts."
blog,created,datetime,NO,,,,,,,,,"The 'created' column in the blog table stores the timestamp indicating when each blog post was initially created, using a datetime format. This non-nullable field is essential for tracking the chronological order of blog posts and can be used in SQL queries for filtering content by date ranges, sorting posts chronologically, or analyzing posting patterns over time."
blog,updated,datetime,NO,,,,,,,,,"The 'updated' column in the blog table stores the timestamp of when a blog post was last modified, using a datetime format that captures both the date and time of the update. This non-nullable field is essential for tracking content revisions and can be used in SQL queries to filter or sort blog posts based on their modification dates, such as finding recently updated content or identifying posts that haven't been updated within a specific timeframe."
blog,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the blog table is a required integer field that identifies the user who authored each blog post. This column likely links to a users or authors table, making it possible to join and retrieve author information for any given blog post."
blog,meta_title,varchar(255),YES,,,,,,255.0,,,"The meta_title column in the blog table stores SEO-optimized titles for blog posts, which may differ from the main display title and is used specifically for search engine optimization purposes. This optional VARCHAR field, limited to 255 characters, can be used in SQL queries to analyze or filter blog posts based on their SEO metadata, such as finding posts with specific keywords in their meta titles or identifying posts lacking meta titles (WHERE meta_title IS NULL)."
blog,meta_desc,varchar(255),YES,,,,,,255.0,,,"The meta_desc column in the blog table stores the meta description for blog posts, which is a brief summary (up to 255 characters) used for SEO purposes and preview snippets in search results. When querying this column, you can use it to filter or search for blog posts based on their meta descriptions, though be aware that it can contain NULL values since it's an optional field."
blog,publish_datetime,datetime,YES,,,,,,,,,"The publish_datetime column in the blog table stores the date and time when each blog post was published, using a standard datetime format. This column can be used for filtering posts by publication date, sorting content chronologically, or analyzing posting patterns over time, making it particularly useful in queries that need to display recent posts or track content publication timelines."
blog,image_offset,int,YES,,,,,,,10.0,0.0,"The `image_offset` column in the blog table represents the positioning or order of images within a blog post's content, stored as an integer value. This optional field (nullable) helps determine where images should be placed when rendering the blog post, allowing for proper layout and formatting of visual content within the text."
blogLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the `blogLang` table, uniquely identifying each language configuration record with an integer value. This column should be used in JOIN operations when connecting language settings to other tables, and can be referenced in WHERE clauses when filtering for specific language configurations."
blogLang,blog_id,int,YES,,,,,,,10.0,0.0,"The blog_id column in the blogLang table serves as a reference to identify specific blogs and their associated language settings. This integer column can be used in SQL queries to filter or join with other blog-related tables, making it useful for retrieving language preferences for particular blog entries or grouping language settings by blog."
blogLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the blogLang table stores unique language identifiers as text strings (up to 10 characters) that represent different languages supported by the blog system. This required field (non-nullable) typically contains standard language codes (like 'en', 'es', 'fr') and can be used in SQL queries to filter or join language-specific content and settings."
blogLang,l_slug,varchar(255),NO,,,,,,255.0,,,"The l_slug column in the blogLang table stores URL-friendly language identifiers (like ""en"", ""es"", ""fr"") as text strings up to 255 characters long. This required field helps identify and reference specific languages throughout the blog system, making it useful for filtering content by language or joining with other language-related tables."
blogLang,l_title,varchar(255),NO,,,,,,255.0,,,"The l_title column in the blogLang table stores the localized title or heading text for blog-related content, with a maximum length of 255 characters and cannot be null. This column is typically used when querying or filtering blog content by their translated titles in different languages, making it essential for implementing multilingual blog functionality."
blogLang,l_body,longtext,YES,,,,,,4294967295.0,,,"The `l_body` column in the `blogLang` table stores the translated or localized main content/body text of blog posts in different languages, using the longtext data type to accommodate large amounts of text content. When writing queries, this column can be used to retrieve or update the language-specific versions of blog post content, and since it's nullable, some language versions might not have translated content yet."
blogLang,l_recipe_preparation_time,varchar(255),YES,,,,,,255.0,,,"The l_recipe_preparation_time column in the blogLang table stores localized text descriptions of recipe preparation times in different languages, allowing for translated time estimates like ""30 minutes"" or ""2 hours"" to be displayed to users based on their language preference. This varchar(255) field is nullable, indicating that preparation time translations are optional and may not be available for all language variants."
blogLang,l_recipe_total_time,varchar(255),YES,,,,,,255.0,,,"The l_recipe_total_time column in the blogLang table stores the localized text representation of recipe preparation and cooking times, accommodating different language formats and time expressions. This column can be used to query or display recipe duration information in the user's preferred language, making it useful for filtering recipes by time requirements or displaying cooking durations in multilingual blog interfaces."
blogLang,l_recipe_serves,varchar(255),YES,,,,,,255.0,,,"The l_recipe_serves column in the blogLang table stores translated text descriptions of serving sizes or portions for recipes in different languages. This column can be used in SQL queries to retrieve or filter localized serving information, making it useful for displaying recipe details in the user's preferred language."
blogLang,l_recipe_ingredients_left,text,YES,,,,,,65535.0,,,"This 'l_recipe_ingredients_left' column in the blogLang table stores translated text for the ""ingredients"" section label or heading that appears on the left side of recipe displays. As part of the blog's language localization system, this column allows the ingredients section label to be displayed in different languages based on user preferences or regional settings."
blogLang,l_recipe_ingredients_right,text,YES,,,,,,65535.0,,,"This 'l_recipe_ingredients_right' column in the blogLang table stores text content for recipe ingredients that should appear on the right side of a blog's interface, likely as part of a localized/translated recipe display. When querying this column, expect to retrieve ingredient-related text content that has been translated or formatted for specific language settings, with NULL values being possible since the column is nullable."
blogLang,l_recipe_directions,text,YES,,,,,,65535.0,,,"The l_recipe_directions column in the blogLang table stores translated cooking instructions or preparation steps for recipes in different languages. This text field can be used to query or update recipe directions in various languages, supporting multilingual recipe content within the blog system."
blogLang,l_meta_title,varchar(255),YES,,,,,,255.0,,,"The l_meta_title column in the blogLang table stores SEO-friendly meta titles for blog content in different languages, with a maximum length of 255 characters. This column can be used in SQL queries to retrieve or update language-specific meta titles for blog posts, which are typically used in HTML meta tags and search engine results."
blogLang,l_meta_desc,varchar(255),YES,,,,,,255.0,,,"The l_meta_desc column in the blogLang table stores meta descriptions for blog content in different languages, with a maximum length of 255 characters. This column is used to store SEO-friendly descriptions that appear in search engine results, and being nullable indicates that not all language entries require a meta description."
blog_category,blog_category_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The blog_category_id column serves as the primary key identifier for each unique category in the blog_category table, using auto-incrementing integers. When writing SQL queries, use this column to join with other tables that reference categories or to uniquely identify specific blog categories in WHERE clauses and category-specific operations."
blog_category,parent_category_id,int,YES,,,,,,,10.0,0.0,"The parent_category_id column in the blog_category table represents the hierarchical relationship between categories by referencing the ID of a parent category, allowing for nested category structures. This optional (nullable) integer field enables the creation of category trees, where a NULL value indicates a top-level category with no parent, while a populated value points to another category that serves as its parent."
blog_category,slug,varchar(255),NO,,,,,,255.0,,,"The `slug` column in the `blog_category` table stores URL-friendly versions of category names, using lowercase letters, numbers, and hyphens (e.g., ""tech-news"" or ""lifestyle-tips""). This column is required (non-nullable) and is commonly used in WHERE clauses to filter blog posts by category in URLs or to create clean, SEO-friendly links for category pages."
blog_category,title,varchar(255),NO,,,,,,255.0,,,"The 'title' column in the blog_category table stores the display name of each content category (e.g., ""Technology"", ""Travel"", ""Food"") as a text string up to 255 characters. Since this field is marked as NOT NULL, every category must have a title, making it essential for SQL queries that need to display, filter, or group blog posts by their categorical classification."
blog_category,body,longtext,YES,,,,,,4294967295.0,,,"The `body` column in the `blog_category` table stores detailed descriptions or explanations of blog categories using the longtext data type, which can accommodate lengthy content. When querying this column, you can use text-based operations (like LIKE, CONTAINS, etc.) to search through category descriptions, and since it's nullable, be sure to handle NULL values appropriately in your queries."
blog_category,weight,int,NO,,,0,,,,10.0,0.0,"The 'weight' column in the blog_category table is a required integer field that determines the display order or priority of blog categories. This value can be used in ORDER BY clauses to control how categories are sorted in navigation menus or category listings, where higher weight values typically indicate higher priority or prominence."
blog_category,status,tinyint,NO,,,1,,,,3.0,0.0,"The `status` column in the `blog_category` table is a required (non-nullable) tinyint field that indicates whether a blog category is active or inactive, typically using 1 for active and 0 for inactive categories. When querying blog categories, you can use this column to filter for only active categories, ensuring that disabled or deprecated categories are excluded from content organization and navigation features."
blog_category,created,datetime,NO,,,,,,,,,"The 'created' column in the blog_category table stores the timestamp when each category was initially added to the system, using a datetime format that captures both the date and time of creation. This non-nullable field is useful for tracking category history and can be used in SQL queries to filter or sort categories by their creation date, such as finding recently added categories or analyzing category growth over time."
blog_category,updated,datetime,NO,,,,,,,,,"The 'updated' column in the blog_category table records the most recent timestamp when a category's information was modified, using a datetime format. This non-nullable field helps track the chronological history of category changes and can be useful for auditing purposes or displaying ""last modified"" information in content management interfaces."
blog_category,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the blog_category table is a required integer field that identifies which user created or owns a particular blog category. When writing queries, this column can be used to filter categories by user ownership or join with the users table to get information about category creators."
blog_categoryLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column in the `blog_categoryLang` table serves as the primary key identifier for each unique language-specific category translation record. When writing SQL queries, use this column for precise record identification, joining with related tables, or when you need to reference a specific category translation entry (e.g., `WHERE l_id = value` or `JOIN` operations)."
blog_categoryLang,blog_category_id,int,YES,,,,,,,10.0,0.0,"The blog_category_id column in the blog_categoryLang table serves as a reference to connect language-specific translations with their corresponding base category entries. When writing queries, this column should be used to join with the main blog categories table to retrieve or filter category translations for specific category IDs, making it essential for multi-language content operations."
blog_categoryLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the blog_categoryLang table stores language identifiers (like 'en', 'es', 'fr') as character strings up to 10 characters long, representing the specific language of each category translation. This required field is essential for filtering and retrieving category content in specific languages, making it a fundamental component for implementing multi-language functionality in the blog system."
blog_categoryLang,l_slug,varchar(255),NO,,,,,,255.0,,,"The l_slug column in blog_categoryLang stores URL-friendly versions of translated category names, used for generating localized URLs in different languages. This non-nullable varchar(255) field helps create language-specific SEO-friendly URLs for blog category pages, ensuring each language version has its own unique, readable path in the URL structure."
blog_categoryLang,l_title,varchar(255),NO,,,,,,255.0,,,"The l_title column in blog_categoryLang stores the localized (translated) title or name of a blog category in a specific language, with a maximum length of 255 characters. Since this field is marked as NOT NULL, every category translation record must include a title, making it an essential component for displaying category names across different language versions of the blog system."
blog_categoryLang,l_body,longtext,YES,,,,,,4294967295.0,,,"The `l_body` column in the `blog_categoryLang` table stores the full-length translated description or content body for a blog category in a specific language, using the longtext data type to accommodate extensive textual content. When querying this column, you can use text-based operations and functions to search, filter, or retrieve the localized category descriptions, though be mindful that the column is nullable and may contain NULL values."
blog_productsubcategory_rl,blog_productsubcategory_rl_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The blog_productsubcategory_rl_id column serves as the primary key identifier for each unique relationship between a blog post and a product subcategory in the blog_productsubcategory_rl table. When writing SQL queries, use this column for joining operations or when you need to uniquely identify specific blog-subcategory relationships, noting that it cannot contain NULL values."
blog_productsubcategory_rl,blog_id,int,YES,,,,,,,10.0,0.0,"The blog_id column in the blog_productsubcategory_rl table serves as a foreign key reference to identify specific blog posts that are being categorized. When writing SQL queries, this column can be used to join with the main blog table to retrieve blog content associated with particular product subcategories, or to filter and group blog posts based on their categorization."
blog_productsubcategory_rl,product_subcategory_id,int,YES,,,,,,,10.0,0.0,"This column serves as a foreign key reference to product subcategories, linking blog content to specific product subcategory classifications. When writing queries, use this column to filter or join blog content based on product subcategory relationships, such as finding all blog posts associated with a particular product subcategory."
blog_rating,rating_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The rating_id column serves as the primary key in the blog_rating table, uniquely identifying each rating entry with an integer value. This column is essential for referencing specific ratings in SQL queries and is commonly used in JOIN operations or WHERE clauses when tracking or analyzing individual rating records."
blog_rating,blog_id,int,NO,MUL,,,blog,blog_id,,10.0,0.0,"The blog_id column in the blog_rating table is a required integer field that serves as a foreign key reference to the blog table, establishing a link between ratings and their corresponding blog posts. This column should be used in JOIN operations with the blog table to retrieve rating information for specific blog posts, and can also be used in WHERE clauses to filter ratings for particular blog entries."
blog_rating,vote_count,int,NO,,,0,,,,10.0,0.0,"The vote_count column in the blog_rating table is a required integer field that tracks the total number of votes or ratings received for each blog post. This column helps in aggregating user engagement metrics and can be used in SQL queries to filter, sort, or analyze blog posts based on their popularity through vote counts, with a default value of 0 for new entries."
blog_rating,vote_average,float,NO,,,0,,,,12.0,,"The vote_average column in the blog_rating table stores the average rating score for blog posts as a floating-point number, and cannot contain NULL values. When writing queries, this column can be used to filter, sort, or aggregate blog ratings (e.g., SELECT blog_id FROM blog_rating WHERE vote_average > 4.5 or ORDER BY vote_average DESC)."
blog_rating,vote_sum,float,NO,,,0,,,,12.0,,"The vote_sum column in the blog_rating table stores the cumulative rating score (as a floating-point number) for each blog post, representing the total sum of all user ratings for that specific entry. This non-nullable field is essential for calculating average ratings and tracking overall blog post performance, and it must always contain a numeric value (defaulting to 0 when no ratings exist)."
blog_supplier_rl,blog_supplier_rl_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The blog_supplier_rl_id column serves as the primary key for the blog_supplier_rl table, uniquely identifying each blog-supplier relationship with a non-nullable integer value. When writing SQL queries, use this column for joining to related tables or when you need to specifically reference a particular blog-supplier mapping record."
blog_supplier_rl,blog_id,int,YES,,,,,,,10.0,0.0,"The blog_id column in the blog_supplier_rl table serves as a foreign key reference to identify specific blog entries that are associated with suppliers. When writing SQL queries, this column can be used to join with the primary blog table or to filter/group supplier relationships based on specific blog posts."
blog_supplier_rl,supplier_id,int,YES,,,,,,,10.0,0.0,"The supplier_id column in the blog_supplier_rl table is an integer field that stores references to supplier records, enabling a many-to-many relationship between blog entries and suppliers. When writing queries, this column can be used to join with the primary supplier table or to filter blog-supplier relationships based on specific supplier identifiers."
bonus_comments,bonus_comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The bonus_comment_id column serves as the primary key in the bonus_comments table, uniquely identifying each comment entry with an integer value. When writing SQL queries, this column can be used for precise record selection, joining with other tables, or ensuring unique identification of comment records, though it's typically system-generated and not manually assigned."
bonus_comments,comment,varchar(255),NO,,,,,,255.0,,,"The 'comment' column in the bonus_comments table stores textual annotations or explanations (up to 255 characters) related to specific bonus logging entries. This required field (non-nullable) should be included in SQL queries when you need to retrieve, insert, or analyze the explanatory notes associated with bonus records, and it can be used effectively in WHERE clauses for searching specific comments or in SELECT statements to display the detailed notes alongside other bonus information."
bonus_comments,bonus_logging_id,int,NO,MUL,,,bonus_logging,bonus_logging_id,,10.0,0.0,"The bonus_logging_id column in the bonus_comments table serves as a foreign key that links each comment to its corresponding entry in the bonus_logging table. When writing SQL queries, use this column to join the bonus_comments table with bonus_logging to retrieve associated comments for specific bonus records, or to filter comments based on their related bonus logging entries."
bonus_logging,bonus_logging_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The bonus_logging_id is the primary key column that uniquely identifies each bonus-related activity record in the bonus_logging table. This auto-incrementing integer serves as the main identifier when joining with other tables or filtering specific bonus logging entries, and since it's non-nullable, every record is guaranteed to have a unique value."
bonus_logging,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the bonus_logging table is a required integer field that serves as a foreign key to identify the user involved in a bonus-related activity. This column is indexed (MUL) to optimize queries joining with the users table, and since it's non-nullable, every bonus log entry must be associated with a specific user."
bonus_logging,date,date,YES,MUL,,,,,,,,"The 'date' column in the bonus_logging table stores the calendar date when a bonus-related activity occurred, such as when a bonus was assigned, reviewed, or processed. This indexed column (MUL) allows for efficient date-based filtering and reporting of bonus activities, and its nullable property provides flexibility when the exact date isn't immediately available."
bonus_logging,hours,int,YES,,,,,,,10.0,0.0,"The 'hours' column in the bonus_logging table stores the number of hours associated with a bonus activity, typically representing time-based criteria for bonus calculations or tracking. This optional integer field can be used in queries to analyze or filter bonus records based on time commitments, such as filtering bonuses that exceed certain hour thresholds or calculating total hours across bonus activities."
bonus_logging,bonus,float,NO,,,0,,,,12.0,,"The 'bonus' column in the bonus_logging table stores the numerical value (as a floating-point number) of the bonus amount being tracked, and cannot contain NULL values. When writing queries, this column can be used for financial calculations, aggregations, or filtering bonus records by amount, with a default value of 0 if not explicitly specified."
bonus_logging,success,int,NO,,,,,,,10.0,0.0,"The 'success' column in the bonus_logging table is a required integer field that indicates whether a bonus-related action was completed successfully (typically 1) or failed (typically 0). This binary status field is essential for filtering and analyzing the outcomes of bonus processing activities, making it useful in queries that need to identify successful bonus assignments or troubleshoot failed bonus operations."
bonus_logging,speed,float,YES,,,,,,,12.0,,"The 'speed' column in the bonus_logging table stores a floating-point value that likely represents the processing or completion speed of bonus-related activities. When querying this column, you can use it to analyze performance metrics or filter bonus records based on their processing efficiency, though its nullable nature means you should handle NULL values appropriately in your queries."
bonus_logging,created_at,datetime,YES,,,,,,,,,"The created_at column in the bonus_logging table stores the timestamp when a bonus record was initially created in the system, using a datetime format. This column is useful for temporal analysis of bonus activities and can be used in SQL queries to filter or sort bonus records by their creation date, making it particularly valuable for auditing bonus assignments and analyzing bonus distribution patterns over time."
bonus_logging,bonus_reason_id,int,NO,MUL,,,bonus_reasons,bonus_reason_id,,10.0,0.0,"The bonus_reason_id column in the bonus_logging table is a required foreign key that links each bonus record to its corresponding reason or justification category. This column enables filtering and grouping of bonus activities by their underlying reasons, making it essential for reporting and analysis of bonus distributions based on different justification types."
bonus_logging,created_by,int,NO,MUL,,2,users,user_id,,10.0,0.0,"The `created_by` column in the bonus_logging table is a required integer field that stores the user ID of the employee who initiated or created the bonus record, serving as a foreign key reference. This column is indexed (MUL) to optimize queries that filter or join based on the bonus creator, making it efficient to track and analyze who has been creating bonus entries in the system."
bonus_logging,transaction_id,int,YES,MUL,,,transactions,transaction_id,,10.0,0.0,"The transaction_id column in the bonus_logging table serves as a foreign key that links bonus records to their corresponding financial transactions in a related transactions table. This column enables tracking of the actual monetary disbursement or processing of bonuses, allowing queries to connect bonus approval events with their eventual financial execution."
bonus_logging,status,"enum('Active','Reverted')",YES,,,Active,,,8.0,,,"The 'status' column in the bonus_logging table is an enumerated field that indicates whether a bonus record is currently valid ('Active') or has been canceled/reversed ('Reverted'). When querying bonus-related data, this column can be used to filter for either active bonus records or identify those that have been reversed, helping to maintain accurate bonus tracking and reporting."
bonus_logging,task_id,int,YES,MUL,,,task,task_id,,10.0,0.0,"The task_id column in the bonus_logging table serves as a foreign key that links bonus records to specific tasks or activities that triggered or justified the bonus award. This relationship allows queries to trace the connection between bonuses and their originating tasks, enabling analysis of task-based bonus distributions and providing context for why particular bonuses were granted."
bonus_logging,contested_at,datetime,YES,,,,,,,,,"The contested_at column in the bonus_logging table records the timestamp when a bonus was formally disputed or challenged within the system. This datetime field can be used in SQL queries to filter or analyze contested bonuses, track dispute patterns, or calculate resolution timeframes, with NULL values indicating bonuses that have never been contested."
bonus_logging,employee_comment,varchar(255),YES,,,,,,255.0,,,"The employee_comment column in the bonus_logging table stores optional feedback or notes (up to 255 characters) provided by employees regarding their bonus assignments. This free-text field can be useful when filtering or analyzing bonus records based on employee responses, and since it's nullable, queries should handle potential NULL values appropriately when referencing this column."
bonus_logging,reviewed_at,datetime,YES,,,,,,,,,"The reviewed_at column in the bonus_logging table stores the timestamp when a bonus was formally reviewed by an authorized reviewer in the system. This datetime field can be used to filter or analyze bonus review timelines, and since it's nullable, a NULL value indicates that the bonus hasn't yet been reviewed, making it useful for identifying pending reviews or calculating review processing times."
bonus_logging,review_status,"enum('Pending','Refunded','Rejected')",YES,,,,,,8.0,,,"The review_status column in the bonus_logging table indicates the current state of a bonus review using one of three possible values: 'Pending', 'Refunded', or 'Rejected'. When querying bonus records, you can use this column to filter or group bonuses based on their review state, such as finding all pending bonuses that need review or identifying rejected bonus requests."
bonus_logging,reviewer_comment,text,YES,,,,,,65535.0,,,"The reviewer_comment column in the bonus_logging table stores optional text feedback or notes provided by the bonus reviewer during the approval process. This free-form text field can be used in queries to search for specific reviewer feedback patterns or to analyze approval rationales, though since it's nullable, queries should handle potential NULL values appropriately."
bonus_logging,reviewer_reason,int,YES,,,,,,,10.0,0.0,"The reviewer_reason column in the bonus_logging table stores an integer value that indicates the specific reason or justification provided by the reviewer when evaluating a bonus. This optional field (as it's nullable) can be used in SQL queries to filter or analyze bonus reviews based on standardized reason codes, helping to understand patterns in bonus approval or rejection decisions."
bonus_logging,reviewer_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The reviewer_id column in the bonus_logging table stores the unique identifier of the user who reviewed or approved the bonus entry, linking to the users table through a foreign key relationship. This column can be null when a bonus hasn't yet been reviewed, and it's commonly used in JOIN operations to retrieve reviewer details or filter bonus records based on specific reviewers."
bonus_multipliers,bonus_multiplier_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The bonus_multiplier_id is the primary key column in the bonus_multipliers table, uniquely identifying each bonus multiplier record. This integer column should be used in JOIN operations when linking to other tables or in WHERE clauses when querying specific bonus multiplier records."
bonus_multipliers,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the bonus_multipliers table is a required integer field that identifies the employee who is receiving the bonus multiplier. This column is indexed (MUL) to optimize queries joining with user-related tables, and since it's non-nullable, every bonus multiplier record must be associated with a specific employee."
bonus_multipliers,multiplier,float,YES,,,,,,,12.0,,"The `multiplier` column in the bonus_multipliers table stores decimal values representing the factor by which an employee's compensation is adjusted during specific pay periods (e.g., 1.5 for a 50% bonus increase). When writing SQL queries, this column can be used for calculations involving employee compensation adjustments, and since it's nullable, queries should handle potential NULL values appropriately."
bonus_multipliers,pay_period_id,int,NO,MUL,,,pay_periods,pay_period_id,,10.0,0.0,"The pay_period_id column in the bonus_multipliers table is a required integer field that links each bonus multiplier record to a specific pay period when the multiplier is effective. This column is indexed (MUL) to optimize queries joining with the pay periods table, making it efficient to retrieve or filter bonus multipliers for specific payment cycles."
bonus_multipliers,created_at,datetime,NO,,,,,,,,,"The created_at column in the bonus_multipliers table records the exact date and time when each bonus multiplier record was created in the system. This non-nullable datetime field is useful for auditing purposes and can be used in SQL queries to filter or sort bonus multiplier records by their creation timestamp, such as finding recently added multipliers or analyzing multiplier creation patterns over time."
bonus_multipliers,created_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The created_by column in the bonus_multipliers table is a required integer field that stores the ID of the staff member who created each bonus multiplier record, serving as a foreign key reference. This column is indexed (MUL) to optimize queries that filter or join based on the creator of bonus multiplier entries, making it efficient to track and audit who established specific compensation adjustments."
bonus_multipliers,status,"enum('Active','Reverted')",YES,,,,,,8.0,,,"The 'status' column in the bonus_multipliers table indicates whether a bonus multiplier is currently in effect ('Active') or has been canceled ('Reverted'). When querying for valid bonus multipliers that should be applied to employee compensation calculations, you should typically filter for records where status = 'Active'."
bonus_multipliers,multiplier_reason_id,int,NO,MUL,,,multiplier_reasons,multiplier_reason_id,,10.0,0.0,"The multiplier_reason_id column in the bonus_multipliers table is a required foreign key that references a lookup table containing standardized reasons for bonus multiplier assignments. When writing queries, this column can be used to join with the reason lookup table to get detailed descriptions of why specific bonus multipliers were applied, or to filter/group bonus multipliers by their associated reasons."
bonus_reasons,bonus_reason_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The bonus_reason_id column serves as the primary key in the bonus_reasons table, uniquely identifying each predefined bonus reason with a non-nullable integer value. This column is designed to be referenced by other tables (particularly the bonus_logging table) to establish relationships between actual bonus events and their standardized justifications."
bonus_reasons,name_fr,varchar(255),NO,,,,,,255.0,,,"The name_fr column in the bonus_reasons table stores the French language version of each bonus reason description, with a maximum length of 255 characters and cannot be null. When writing SQL queries that need to display or filter bonus reasons in French, use this column instead of the default language version, particularly for French-language interfaces or reports."
bonus_reasons,name_en,varchar(255),NO,,,,,,255.0,,,"The name_en column in the bonus_reasons table stores the English-language description or name of each bonus reason, with a maximum length of 255 characters and cannot be null. When writing SQL queries, use this column to search for or display human-readable bonus reason descriptions, such as ""Performance Excellence"" or ""Project Completion Bonus,"" making it particularly useful in SELECT statements and WHERE clauses when you need to filter or display bonus reasons by their English names."
bonus_rollover,bonus_rollover_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The bonus_rollover_id column serves as the primary key for the bonus_rollover table, uniquely identifying each bonus rollover record in the system. When writing SQL queries, use this column for precise record selection or when joining with other tables that reference specific bonus rollover entries."
bonus_rollover,user_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the bonus_rollover table serves as a foreign key that connects to the users table, allowing you to identify which user owns specific bonus rollover records. When writing queries, you can join this column with the users table to access user details alongside their bonus rollover information, and since it's indexed (MUL), it's optimized for such join operations and lookups."
bonus_rollover,amount,int,YES,,,,,,,10.0,0.0,"The 'amount' column in the bonus_rollover table stores the numeric value of bonus points or rewards that are carried forward from one period to the next for a user. This integer field can be used in aggregate functions (SUM, AVG) to calculate total rollover amounts or in WHERE clauses to filter for specific rollover thresholds, and its nullable property allows for cases where a user might not have any points to roll over."
bonus_rollover,from_pp_id,int,YES,,,,,,,10.0,0.0,"The from_pp_id column in the bonus_rollover table represents the source or original program period ID from which bonus points are being carried over. This integer field helps track the historical origin of rolled-over points, allowing queries to trace the movement of bonus points from one period to another, and can be used in JOIN operations or WHERE clauses to analyze point transfer patterns between specific program periods."
bonus_rollover,to_pp_id,int,YES,,,,,,,10.0,0.0,"The to_pp_id column in the bonus_rollover table represents the target program period ID where bonus points are being rolled over to. This integer field helps track the destination time period for reward point transfers, enabling the system to maintain a clear timeline of when points become available in subsequent program periods."
bundle_details_temp,bundle_details_temp_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The bundle_details_temp_id column serves as the primary key identifier for each unique record in the bundle_details_temp table, using an integer data type and not allowing NULL values. When writing SQL queries, use this column for uniquely identifying specific bundle records, joining with related tables, or filtering bundle details (e.g., WHERE bundle_details_temp_id = X)."
bundle_details_temp,bundle_product_id,int,NO,,,,,,,10.0,0.0,"The bundle_product_id column in the bundle_details_temp table is a required integer field that uniquely identifies each product bundle or package combination during temporary processing. This column should be used in WHERE clauses or JOIN conditions when you need to filter or link specific bundle records, particularly when working with temporary bundle data before it's moved to permanent storage."
bundle_details_temp,child_product_id,int,NO,,,,,,,10.0,0.0,"The child_product_id column in bundle_details_temp represents the unique identifier of individual products that are components or parts of a larger product bundle. When writing SQL queries, use this non-nullable integer column to join with other product-related tables or to identify specific items within bundles, particularly when you need to analyze or track individual components of temporary bundle configurations."
bundle_details_temp,retail_price,"decimal(5,2)",NO,,,,,,,5.0,2.0,"The retail_price column in bundle_details_temp stores the final selling price of product bundles with two decimal places of precision, supporting values up to 999.99. This non-nullable decimal field is essential for price-related calculations and reporting, and can be used in SQL queries for price comparisons, summations, or filtering bundles within specific price ranges."
bundle_logs_temp,bundle_logs_temp_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The bundle_logs_temp_id column serves as the primary key for the bundle_logs_temp table, uniquely identifying each temporary log entry related to bundle processing operations. When writing queries, use this column for joining to related tables or when you need to reference specific log entries, but keep in mind that since this is a temporary table, the IDs may not persist long-term."
bundle_logs_temp,bundle_product_id,int,NO,,,,,,,10.0,0.0,"The bundle_product_id column in the bundle_logs_temp table is a required integer field that identifies the specific product bundle being processed. This column can be used in SQL queries to filter, group, or join temporary logging records related to specific bundle products, making it useful for tracking and analyzing bundle processing operations."
bundle_logs_temp,order_id,int,NO,,,,,,,10.0,0.0,"The order_id column in the bundle_logs_temp table is a required integer field that identifies the specific order associated with each bundle processing log entry. This column can be used to join with order-related tables or filter log entries for specific orders, making it useful for tracking bundle processing activities for particular orders."
cancelation,cancelation_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cancelation_id column serves as the primary key in the cancelation table, uniquely identifying each cancelation record in the customer service system. When writing SQL queries, this column can be used to join with the cancelation_responses table and is essential for filtering or retrieving specific cancelation cases."
cancelation,subscription_id,int,NO,MUL,,,,,,10.0,0.0,"The subscription_id column in the cancelation table is a required integer field that references the subscription being canceled, serving as a foreign key (indicated by the MUL key type). This column is essential for linking cancelation records to specific customer subscriptions, enabling queries to track which subscriptions have been canceled and analyze cancelation patterns."
cancelation,reason,int,NO,,,,,,,10.0,0.0,"The 'reason' column in the cancelation table is a required integer field that stores standardized codes representing why a customer service interaction was canceled. When writing queries, this column can be used to filter or group cancelation records by their specific reasons, and since it's non-nullable, you can rely on every record having a valid reason code."
cancelation,note,text,YES,,,,,,65535.0,,,"The 'note' column in the cancelation table stores free-form text comments or explanations related to specific cancelation cases. This optional field (nullable) can be used to search for or filter cancelation records based on specific details or keywords mentioned in the notes, and it's particularly useful when writing queries that need to analyze the context or reasons behind cancelations."
cancelation,created,datetime,NO,,,,,,,,,The 'created' column in the cancelation table is a mandatory datetime field that records the exact timestamp when a cancelation record was initially created in the system. This column is useful for temporal analysis of cancelation patterns and can be used in SQL queries for filtering cancelations by date ranges or ordering results chronologically.
cancelation,staff_id,int,NO,,,,,,,10.0,0.0,"The staff_id column in the cancelation table is a required integer field that identifies which staff member handled or processed the cancelation case. When writing queries, this column can be used to join with staff-related tables or to filter/group cancelation records by staff member, making it useful for analyzing staff performance or workload distribution in cancelation handling."
cancelation,subscription_type,int,NO,,,0,,,,10.0,0.0,"The subscription_type column in the cancelation table is a required integer field that indicates the type or category of subscription being canceled. When writing SQL queries, this field can be used to filter or group cancelation records by subscription category, helping analyze patterns in cancelations across different subscription offerings."
cancelation,retained,tinyint,NO,,,0,,,,3.0,0.0,The 'retained' column in the cancelation table is a binary flag (tinyint) that indicates whether a customer was successfully retained (1) or not (0) after a cancelation attempt. This required field is essential for tracking the outcome of customer retention efforts and can be used in SQL queries to filter or analyze successful versus unsuccessful retention cases.
cancelation,tier_id,int,YES,,,,,,,10.0,0.0,"The tier_id column in the cancelation table is an optional integer field that likely represents the service or membership tier level associated with a canceled account or service. When writing SQL queries, this column can be used to segment or analyze cancelations by different tier levels, though its nullable nature means you should handle NULL values appropriately in your queries."
cancelation,created_at,timestamp,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the cancelation table records the timestamp when each cancelation record was initially created, automatically populated with CURRENT_TIMESTAMP when a new record is inserted. This timestamp field is useful for temporal analysis of cancelation patterns and can be used in SQL queries for filtering records by date/time ranges or ordering cancelations chronologically."
cancelation_flow_action_logs,action_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The action_id column serves as the primary key in the cancelation_flow_action_logs table, uniquely identifying each individual action or event that occurs during a cancellation process. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific cancellation flow events."
cancelation_flow_action_logs,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the cancelation_flow_action_logs table is a required integer field that identifies which user performed or initiated each cancellation-related action. When querying this table, you can join user_id with other user-related tables or use it to filter and group cancellation events by specific users."
cancelation_flow_action_logs,subscription_id,int,NO,MUL,,,,,,10.0,0.0,"The subscription_id column in the cancelation_flow_action_logs table is a required integer field that references the specific subscription being canceled. This column can be used to join with other subscription-related tables and filter or group cancellation events by subscription, making it useful for analyzing cancellation patterns or tracking the cancellation history of individual subscriptions."
cancelation_flow_action_logs,created_at,datetime,NO,,,,,,,,,"The created_at column in the cancelation_flow_action_logs table records the exact timestamp when each cancellation-related action or event occurred. This datetime field is mandatory (non-nullable) and can be used to analyze the timing and sequence of events within the cancellation flow, making it particularly useful for queries that need to filter, sort, or analyze cancellation actions by their occurrence time."
cancelation_flow_action_logs,slide,smallint,YES,MUL,,,,,,5.0,0.0,"The ""slide"" column in the cancelation_flow_action_logs table represents the specific step or screen number in the cancellation flow process where an action occurred. When querying this column, you can use it to analyze user progression through the cancellation flow or filter for actions that happened at particular stages of the process."
cancelation_flow_action_logs,checkbox_input,smallint,YES,,,,,,,5.0,0.0,"The `checkbox_input` column in the `cancelation_flow_action_logs` table stores binary responses (typically 0 or 1) indicating whether a user checked or unchecked specific boxes during the cancellation process. This column can be used to analyze user selections during cancellation flows, such as confirming they understand cancellation terms or selecting reasons for cancellation, and can be queried using standard integer comparison operators."
cancelation_flow_action_logs,text_input,text,YES,,,,,,65535.0,,,"The `text_input` column in the `cancelation_flow_action_logs` table stores any free-form text responses or feedback provided by users during the cancellation process. When querying this column, you can use string operations to search for specific keywords or patterns in user responses, though be aware that the column can contain NULL values since not all cancellation actions may require or include text input."
cancelation_reasons,id,int,NO,PRI,,,,,,10.0,0.0,"The 'id' column in the cancelation_reasons table serves as the primary key, uniquely identifying each standardized cancellation reason with a non-nullable integer value. This identifier is commonly used to establish relationships with other tables, particularly when referencing specific cancellation reasons in transaction or operation records."
cancelation_reasons,reason,varchar(128),YES,,,,,,128.0,,,"The 'reason' column in the cancelation_reasons table stores descriptive text (up to 128 characters) explaining why a transaction or operation was canceled. This column can be used in SELECT queries to retrieve human-readable cancellation explanations, or in JOIN operations to analyze cancellation patterns, and since it's nullable, some records may not have a specified reason."
cancelation_reasons,in_use,tinyint,NO,,,1,,,,3.0,0.0,"The `in_use` column in the `cancelation_reasons` table is a required boolean flag (stored as a tinyint) that indicates whether a cancellation reason is currently active and available for use in the system. When querying for valid cancellation reasons, filter for records where `in_use = 1` to ensure only active reasons are returned."
cancelation_reasons_lang,cancelation_reasons_lang_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cancelation_reasons_lang_id column serves as the primary key for the cancelation_reasons_lang table, uniquely identifying each translated cancellation reason entry. When writing SQL queries, use this column for joining with related tables or when you need to reference a specific translation record, as it provides a guaranteed unique identifier for each row in the translations table."
cancelation_reasons_lang,id,int,NO,,,,,,,10.0,0.0,"The 'id' column in the cancelation_reasons_lang table serves as a unique identifier for each translated cancellation reason entry. When writing queries, this column can be used to uniquely reference specific translations or join with other related tables that need to reference these translations."
cancelation_reasons_lang,l_reason,text,NO,,,,,,65535.0,,,"The `l_reason` column in the `cancelation_reasons_lang` table stores the translated text of cancellation reasons in different languages, containing the actual localized description or message that explains why something was cancelled. When writing SQL queries, this column should be used to retrieve or filter the translated cancellation reason text, typically in conjunction with a language identifier column to get the appropriate translation for a specific locale."
cancelation_responses,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the cancelation_responses table, uniquely identifying each individual response record in the cancelation survey. When writing SQL queries, use this column for precise record selection, joining with other tables, or when you need to reference specific cancelation response entries."
cancelation_responses,cancelation_id,int,YES,MUL,,,cancelation,cancelation_id,,10.0,0.0,"The cancelation_id column in the cancelation_responses table serves as a foreign key that links each survey response to its corresponding cancelation record. This column enables queries to join cancelation details with their associated feedback responses, allowing for analysis of user responses in the context of specific cancelation instances."
cancelation_responses,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the cancelation_responses table is a required integer field that links each cancelation response to a specific user in the system, serving as a foreign key reference. This column is indexed (MUL) to optimize queries that filter or join based on user information, making it efficient to analyze cancelation feedback patterns for individual users."
cancelation_responses,question_id,int,NO,MUL,,,questions,id,,10.0,0.0,"The question_id column in the cancelation_responses table is a required integer field that references specific questions asked during the cancelation survey process. This column serves as a foreign key to link each response with its corresponding survey question, enabling queries to analyze which questions were answered and aggregate responses across different cancelation requests."
cancelation_responses,response_text,text,YES,,,,,,65535.0,,,"The response_text column in the cancelation_responses table stores the actual text feedback or answers provided by users during the cancelation process. This free-form text field captures detailed explanations, comments, or specific reasons why users are requesting to cancel, making it valuable for qualitative analysis of cancelation patterns and user sentiment."
capacity_types,capacity_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The capacity_type_id column serves as the primary key in the capacity_types table, uniquely identifying each type of vehicle capacity measurement (such as weight, volume, or passenger capacity). When writing SQL queries, use this column to join with related tables like daily_vehicle_capacity and vehicle_capacities, ensuring accurate capacity type references across the vehicle fleet management system."
capacity_types,name,varchar(64),YES,,,,,,64.0,,,"The 'name' column in the capacity_types table stores descriptive labels for different types of vehicle capacity measurements, such as ""Maximum Weight"", ""Cargo Volume"", or ""Passenger Seats"", using text strings up to 64 characters long. This column helps identify and categorize various capacity measurements, making it useful in queries that need to filter, group, or join capacity-related data based on the type of measurement being referenced."
capacity_types,status,tinyint,YES,,,,,,,3.0,0.0,"The 'status' column in the capacity_types table is a tinyint field that indicates whether a particular capacity measurement type is currently active or inactive in the system. This optional field (as it's nullable) can be used in WHERE clauses to filter active capacity types, helping queries focus on currently relevant capacity measurements when joining with related vehicle capacity tables."
careers,career_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The career_id column serves as the primary key in the careers table, uniquely identifying each career/job position record. This integer field is required (non-nullable) and is commonly used to join with the careersLang table to retrieve multilingual career information and descriptions."
careers,job_title_fr,varchar(255),NO,,,,,,255.0,,,"The job_title_fr column in the careers table stores the French language version of job titles as text strings up to 255 characters in length. This field is mandatory (non-nullable) and should be used when querying or displaying French job title information, making it particularly useful for French language interfaces or when implementing multilingual career data displays."
careers,description_fr,text,YES,,,,,,65535.0,,,"The description_fr column in the careers table stores the French-language description of career positions as free-form text. While this column appears to store French descriptions directly in the main careers table, note that according to the table context, career descriptions are typically managed through the careersLang table instead, making this column potentially deprecated or redundant."
careers,short_description_fr,varchar(500),YES,,,,,,500.0,,,"The short_description_fr column in the careers table stores brief French-language descriptions of career positions, with a maximum length of 500 characters. While this column is optional (nullable), it provides a concise French summary of the career/job position and can be useful in queries where French language career descriptions are needed, particularly for French-language interfaces or reports."
careers,requirements_fr,text,YES,,,,,,65535.0,,,"The requirements_fr column in the careers table stores the French-language version of job requirements or qualifications needed for specific career positions. While this column can be left empty (nullable), it's typically used in queries when you need to display or filter career requirements specifically for French-language users or contexts."
careers,benefits_fr,text,YES,,,,,,65535.0,,,"The benefits_fr column in the careers table stores the French-language description of benefits associated with a career position, stored as text data. While this column is optional (nullable), it's part of the multilingual career information structure and should be used when querying specifically for French-language benefit details of career positions."
careers,assets_fr,text,YES,,,,,,65535.0,,,"The assets_fr column in the careers table stores French-language text content describing the key assets, skills, or qualifications typically associated with a specific career position. When writing queries, this column can be used to filter or display French-specific career asset information, though be aware it may contain NULL values since it's nullable."
careers,location,varchar(255),YES,,,,,,255.0,,,"The 'location' column in the careers table stores the geographical location or area where a particular career/job position is based or typically found, accepting text values up to 255 characters. This optional field (nullable) can be used in SQL queries to filter or group career opportunities by their physical location, making it useful for location-based career searches or regional job market analysis."
careers,wage,varchar(255),YES,,,,,,255.0,,,"The 'wage' column in the careers table stores salary or compensation information for different job positions as a text string (varchar), allowing for flexible wage representations like ranges or descriptive text. When querying this column, be aware that since it's a varchar field rather than a numeric type, you'll need to use string comparison operators and may need to parse or convert the values for numerical calculations."
careers,schedule,varchar(255),YES,,,,,,255.0,,,"The 'schedule' column in the careers table stores the typical working schedule or time arrangement associated with a career position (e.g., ""Full-time"", ""Part-time"", ""Flexible"", ""Shifts""). When querying this column, you can use string comparison operations to filter careers based on their schedule types, though be mindful that it's nullable and may contain NULL values."
careers,image_url,varchar(255),YES,,,,,,255.0,,,"The image_url column in the careers table stores web URLs (up to 255 characters) pointing to visual representations or icons associated with specific career positions. This optional field can be used in queries when you need to retrieve or display career-related images, such as in user interfaces or career profile pages."
careers,type,smallint,YES,,,,,,,5.0,0.0,"The 'type' column in the careers table is a smallint field that categorizes different types or classifications of career positions. When writing queries, this column can be used to filter or group career records based on their classification type, though its nullable property means some career records may not have a type assigned."
careers,status,smallint,YES,,,,,,,5.0,0.0,"The 'status' column in the careers table is a smallint field that indicates the current state or status of a career/job position record. When writing queries, this column can be used to filter active vs. inactive careers or to identify careers in specific states (e.g., WHERE status = 1 for active careers), though you should verify the specific status code meanings for your implementation."
careers,created,datetime,YES,,,,,,,,,"The 'created' column in the careers table stores the timestamp indicating when each career/job position record was initially added to the database. This datetime field can be useful for tracking the chronological evolution of the career catalog and filtering records based on when they were created, though it's optional as indicated by its nullable property."
careers,published,datetime,YES,,,,,,,,,"The 'published' column in the careers table stores the date and time when a career/job position entry was made publicly visible or officially released in the system. When writing queries, this datetime field can be used to filter or sort career entries based on their publication timing, such as finding recently published careers or careers published within a specific date range."
careers,apply_link_fr,varchar(255),YES,,,,,,255.0,,,"The apply_link_fr column in the careers table stores French-language URLs or web links (up to 255 characters) where users can apply for specific career positions. This optional field (nullable) is part of the multilingual support system, specifically targeting French-speaking users who want to apply for positions through French-language application portals."
careers,content_fr,text,YES,,,,,,65535.0,,,"The content_fr column in the careers table stores the French-language content or description for career positions, though it can be left empty (nullable). While this column exists in the main careers table, it's worth noting that the table-level context suggests that language-specific content is typically managed in the separate careersLang table, making this column potentially deprecated or redundant."
careers,weight,tinyint unsigned,YES,,,255,,,,3.0,0.0,"The 'weight' column in the careers table is an optional numeric field (0-255) that can be used to control the display order or relative importance of career entries. When writing queries that need to present careers in a specific sequence or prioritize certain career listings over others, you can ORDER BY weight to achieve the desired sorting."
careersLang,l_career_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The l_career_id column serves as the primary key in the careersLang table and links to the main careers table, establishing a relationship between career entries and their corresponding language-specific content. This integer column is required (non-nullable) and should be used in JOIN operations when combining career data with its translations, or when filtering for specific career translations."
careersLang,career_id,int,NO,MUL,,,careers,career_id,,10.0,0.0,"The career_id column in the careersLang table serves as a foreign key that links to the primary career information in the main careers table. When writing queries, use this column to join with the careers table to retrieve or filter multilingual career content, and since it's non-nullable, every translation record must be associated with a valid career entry."
careersLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the careersLang table stores language identifiers (such as 'en', 'es', 'fr') as text strings up to 10 characters long, indicating the language of each career-related content entry. This required field is essential for filtering and retrieving career information in specific languages, and should be used in WHERE clauses when querying for language-specific content (e.g., WHERE lang_id = 'en' for English content)."
careersLang,l_job_title,varchar(70),YES,,,,,,70.0,,,"The l_job_title column in the careersLang table stores the translated job titles for different career positions, supporting up to 70 characters in length. This column is used when you need to retrieve or filter career titles in specific languages, and being nullable, it can accommodate cases where a translation might not be available for certain languages."
careersLang,l_description,text,YES,,,,,,65535.0,,,"The l_description column in the careersLang table stores detailed, language-specific descriptions of careers in text format. When writing SQL queries, this column can be used to retrieve or filter career descriptions in different languages, and since it's nullable, queries should handle potential NULL values appropriately when performing text searches or content retrieval."
careersLang,l_short_description,varchar(500),NO,,,,,,500.0,,,"The l_short_description column in the careersLang table stores brief, localized descriptions of careers with a maximum length of 500 characters. This column is required (non-nullable) and is used to provide concise career summaries in different languages, making it useful for queries that need to display quick career overviews in a user's preferred language."
careersLang,l_requirements,text,YES,,,,,,65535.0,,,"The l_requirements column in the careersLang table stores localized (translated) requirements text for different career positions, supporting multiple language versions of job requirements. This text field can contain detailed requirements, qualifications, or prerequisites for a career position in the specific language represented by the row, and can be NULL if requirements information isn't available in a particular language."
careersLang,l_benefits,text,YES,,,,,,65535.0,,,"The l_benefits column in the careersLang table stores localized text descriptions of benefits associated with specific careers in different languages. When writing SQL queries, this column can be used to retrieve or filter translated benefit information, typically joined with the main careers table through career_id to provide language-specific benefit details for career listings."
careersLang,l_assets,text,YES,,,,,,65535.0,,,"The l_assets column in the careersLang table stores text-based information about assets or resources associated with a career in different languages. This column can be used to store translated lists of tools, equipment, or other assets relevant to specific careers, and since it's nullable, not all career translations require asset information."
careersLang,l_apply_link,varchar(255),YES,,,,,,255.0,,,"The l_apply_link column in the careersLang table stores localized URLs or web links where users can apply for specific career positions in different languages. This column supports multilingual career application processes by allowing different application links for each language version of a career posting, with a maximum length of 255 characters and the option to leave it empty (nullable) when no language-specific application link is needed."
careersLang,l_content,text,YES,,,,,,65535.0,,,"The l_content column in the careersLang table stores the translated text content for career descriptions and details in different languages. This text field can contain long-form content such as job descriptions, responsibilities, or requirements, and can be NULL when a translation is not yet available for a particular language."
cart,cart_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cart_id column serves as the primary key in the cart table, uniquely identifying each cart record in the system. When writing SQL queries, use this column to join with related tables that reference cart information, and ensure that any new cart records have a unique cart_id value since NULL values are not allowed."
cart,serial,varchar(255),NO,UNI,,,,,255.0,,,"The 'serial' column in the cart table stores unique manufacturer-assigned serial numbers for each cart as a string value (up to 255 characters). This non-nullable column with a unique constraint ensures each cart can be distinctly identified by its serial number, making it useful for tracking specific carts in queries involving inventory management, maintenance records, or warranty-related lookups."
cart,status,int,NO,,,,,,,10.0,0.0,"The 'status' column in the cart table is a required integer field that indicates the current operational state of a cart (e.g., available, in-use, maintenance, out-of-service). When writing SQL queries, this column can be used to filter or group carts based on their operational status, making it useful for monitoring cart availability and generating status-based reports."
cart,nb_level,int,NO,,,,,,,10.0,0.0,"The nb_level column in the cart table represents the number of levels or tiers present in a cart, stored as a non-null integer value. This column is essential for understanding the vertical storage capacity of each cart and can be used in queries to filter or group carts based on their physical structure, particularly when planning storage assignments or analyzing cart capacity utilization."
cart,nb_slot_per_level,int,NO,,,,,,,10.0,0.0,"The nb_slot_per_level column in the cart table represents the number of available slots on each level of a cart, stored as a non-null integer value. This column is essential for calculating total cart capacity and can be used in queries to determine slot availability or space utilization per cart level."
cart,beeing_used_by,int,NO,,,,,,,10.0,0.0,"The beeing_used_by column in the cart table is a required integer field that indicates which entity (likely a user or system ID) is currently utilizing the cart. This column helps track cart possession and availability in real-time, enabling systems to determine if a cart is occupied or free for use in operations."
cart,current_levels,int,NO,,,,,,,10.0,0.0,"The current_levels column in the cart table is a required integer field that tracks the present quantity or occupancy level of items in a cart. This column is essential for monitoring cart capacity and inventory management, helping operations teams make decisions about cart utilization and restocking needs."
cart,is_electric,tinyint(1),NO,,,0,,,,3.0,0.0,"The `is_electric` column in the cart table is a boolean flag (stored as tinyint(1)) that indicates whether a cart is electrically powered (1) or not (0). This required field helps distinguish between electric and non-electric carts in the fleet, which can be useful for filtering carts based on their power source or managing different maintenance requirements."
cart,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the cart table automatically records the timestamp when each cart record is initially created, using the CURRENT_TIMESTAMP as the default value. This non-nullable datetime field is useful for tracking cart lifecycle metrics, filtering carts by creation date, and analyzing cart inventory growth over time."
cart,created_by,int,NO,,,2,,,,10.0,0.0,"The created_by column in the cart table is a required integer field that stores the identifier of the user or system entity responsible for creating the cart record. This column helps maintain accountability and tracking of cart creation actions, and can be used to join with user-related tables to get additional information about who initiated the cart's creation."
cart,is_color_coded,tinyint(1),YES,,,0,,,,3.0,0.0,"The `is_color_coded` column in the cart table is a boolean flag (stored as tinyint(1)) that indicates whether a cart uses a color coding system for identification or organization purposes. When querying this column, use 1 to filter for color-coded carts and 0 for non-color-coded carts, which can be helpful when implementing visual management systems or organizing carts by color categories."
cart_activity,cart_activity_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cart_activity_id is the primary key column in the cart_activity table, uniquely identifying each cart-related event or change record. This non-nullable integer column should be used in JOIN operations when linking cart activities to other tables, and can be referenced in WHERE clauses when filtering for specific cart activity records."
cart_activity,cart_id,int,NO,MUL,,,cart,cart_id,,10.0,0.0,"The cart_id column in the cart_activity table is a required integer field that serves as a foreign key reference to identify specific shopping carts. When writing SQL queries, use this column to join with the main cart table or to filter cart-specific activities, such as ""SELECT * FROM cart_activity WHERE cart_id = 123"" to retrieve all activities for a particular cart."
cart_activity,status,int,NO,,,,,,,10.0,0.0,"The 'status' column in the cart_activity table is a required integer field that represents the current state of a cart-related activity or operation. This column helps track the progression of cart events through various stages, where different integer values correspond to specific statuses (such as pending, in progress, completed, etc.), making it essential for monitoring and managing shopping cart workflows."
cart_activity,task_id,int,YES,MUL,,,task,task_id,,10.0,0.0,"The task_id column in the cart_activity table is a foreign key that references specific workflow tasks associated with cart events or changes. When querying cart activities, you can use this column to join with the tasks table to retrieve detailed information about the workflow task that triggered or is related to the cart activity, with NULL values indicating cart activities that aren't linked to any specific task."
cart_activity,created_at,datetime,NO,,,,,,,,,"The created_at column in the cart_activity table stores the exact timestamp (date and time) when a cart activity or change was recorded. This mandatory (non-nullable) datetime field is essential for temporal tracking and auditing of shopping cart events, allowing queries to filter, sort, or analyze cart activities based on when they occurred."
cart_activity,created_by,int,NO,,,,,,,10.0,0.0,"The `created_by` column in the cart_activity table is a required integer field that stores the user ID of the person who initiated or created the cart activity or change. This column is essential for audit tracking and accountability, allowing the system to identify who performed specific actions on shopping carts and their associated tasks."
cart_activity,cart_type,"enum('0','4','12','16')",YES,,,0,,,2.0,,,"The cart_type column in the cart_activity table is an enumerated field that categorizes different types of shopping cart activities using specific numeric codes (0, 4, 12, or 16). When writing SQL queries, you can filter or group cart activities based on these type codes, and since the field is nullable, you should consider handling NULL values appropriately in your conditions."
cart_asset_associations,cart_asset_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cart_asset_id column serves as the primary key for the cart_asset_associations table, uniquely identifying each cart-to-asset relationship with a non-nullable integer value. When writing SQL queries, this column can be used to join with other tables or as a reference point for specific cart-asset combinations, though it's typically more common to use the actual cart and asset IDs for business logic operations."
cart_asset_associations,cart_id,int,NO,MUL,,,cart,cart_id,,10.0,0.0,"The cart_id column in the cart_asset_associations table is a required foreign key that references the unique identifier of a shopping cart. When writing SQL queries, use this column to join with the shopping carts table or to filter/group cart-related asset associations, as it represents which cart an asset belongs to in the many-to-many relationship."
cart_asset_associations,position,int,NO,,,,,,,10.0,0.0,"The 'position' column in the cart_asset_associations table is a required integer field that specifies the ordering or sequence of digital assets within a shopping cart. When writing SQL queries, this column can be used to sort assets in a specific order within each cart (e.g., ORDER BY position) or to maintain a specific presentation sequence when displaying cart contents."
cart_asset_associations,asset_id,int,NO,MUL,,,asset,asset_id,,10.0,0.0,"The asset_id column in the cart_asset_associations table is a required foreign key that references the unique identifier of a digital asset being added to a shopping cart. When writing SQL queries, this column can be used to join with the assets table to retrieve asset details or to filter/group cart items based on specific asset identifiers."
cart_asset_associations,active,tinyint,NO,,,,,,,3.0,0.0,"The 'active' column in the cart_asset_associations table is a boolean flag (stored as tinyint) that indicates whether a particular cart-asset relationship is currently valid and should be considered in cart operations. When querying cart contents, you should typically include ""WHERE active = 1"" to ensure only current, valid cart items are returned, unless specifically querying for historical or inactive relationships."
cart_asset_associations,created_at,datetime,YES,,,,,,,,,"The created_at column in the cart_asset_associations table records the timestamp when a digital asset was first added to a shopping cart. This datetime field can be used in SQL queries to track when cart-asset relationships were established, enabling time-based analysis and filtering of cart contents (e.g., finding recently added items or analyzing shopping patterns over time)."
cart_parking_location,cart_parking_location_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cart_parking_location_id is the primary key identifier for each unique parking location or zone designated for shopping carts within retail spaces. This non-nullable integer column should be used in WHERE clauses when querying specific parking locations, and as a foreign key reference in related tables (particularly cart_parking_location_activity) to track activities and events associated with each parking location."
cart_parking_location,serial,varchar(10),YES,,,,,,10.0,,,"The 'serial' column in the cart_parking_location table stores a unique alphanumeric identifier (up to 10 characters) that can be used to reference specific parking locations or zones for shopping carts. When writing SQL queries, this column can be used to filter or join with other tables to track specific parking locations, though it's worth noting that the field is nullable and isn't designated as a primary key."
cart_parking_location,status,int,NO,,,,,,,10.0,0.0,"The 'status' column in the cart_parking_location table is a required integer field that indicates the current operational state of a cart parking location (e.g., active, inactive, under maintenance). When writing SQL queries, this column can be used to filter or segment parking locations based on their operational status, helping to identify which locations are currently available or usable for cart storage."
cart_parking_location,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the cart_parking_location table is a required integer field that categorizes different kinds of cart parking locations or zones within retail spaces (e.g., 1 for indoor collection points, 2 for outdoor corrals). When querying this table, use this column to filter or group cart parking locations by their designated type, which helps in analyzing or managing different categories of cart storage areas."
cart_parking_location,weight,int,NO,,,,,,,10.0,0.0,"The 'weight' column in the cart_parking_location table stores a numeric value representing the relative importance or priority of each cart parking location within the retail space. When writing SQL queries, this integer field can be used to sort or filter parking locations based on their priority level, helping to optimize cart collection routes or determine primary versus secondary parking zones."
cart_parking_location_activity,cart_parking_location_activity,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cart_parking_location_activity column serves as the primary key identifier for each unique cart parking location activity record in the cart_parking_location_activity table. When writing SQL queries, use this column to uniquely identify specific cart movement events or join with related tables that reference this activity ID."
cart_parking_location_activity,cart_parking_location_id,int,NO,MUL,,,cart_parking_location,cart_parking_location_id,,10.0,0.0,"The cart_parking_location_id column is a foreign key that references a specific parking location where a cart activity occurred. This integer column is required (non-nullable) and is indexed (MUL) to optimize queries that filter or join based on parking locations, making it essential for tracking cart movements and activities across different parking spots."
cart_parking_location_activity,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The task_id column in the cart_parking_location_activity table is a required foreign key that links each cart parking activity record to its associated task in a related tasks table. This column enables queries to connect cart movement events with specific tasks, allowing you to analyze which tasks triggered particular cart location changes or to find all parking activities related to a given task."
cart_parking_location_activity,cart_id,int,NO,MUL,,,cart,cart_id,,10.0,0.0,"The cart_id column is a required foreign key field that identifies which specific cart is involved in a parking location activity or movement. When writing queries, use this column to join with the carts table or to filter/group cart-specific parking activities, as it serves as the primary way to track individual cart movements across different parking locations."
cart_parking_location_activity,status,int,NO,,,,,,,10.0,0.0,"The 'status' column in the cart_parking_location_activity table is a required integer field that indicates the current state of a cart's parking activity or movement (such as entering, exiting, or remaining parked). When writing SQL queries, this column can be used to filter or group cart activities based on their specific status codes, helping to analyze cart movement patterns or find carts in particular states."
cart_parking_location_activity,created_at,datetime,YES,,,,,,,,,"The created_at column in the cart_parking_location_activity table stores the timestamp when a cart activity or movement record was initially created in the system. This datetime field can be used in SQL queries to filter, sort, or analyze cart movements by time period, helping track when carts entered or exited parking locations or when specific activities occurred."
certifications,certification_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The certification_id column serves as the primary key in the certifications table, uniquely identifying each professional certification or credential record. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific certification entry."
certifications,name_en,varchar(255),NO,,,,,,255.0,,,"The name_en column in the certifications table stores the English-language name or title of professional certifications (e.g., ""Certified Public Accountant"", ""Project Management Professional"") as a required text field with a maximum length of 255 characters. When querying this column, you can use string operations and pattern matching to search for or filter specific certification names, and since it's non-nullable, you can rely on every record having a certification name value."
certifications,name_fr,varchar(255),NO,,,,,,255.0,,,"The name_fr column in the certifications table stores the French language name or title of professional certifications, with a maximum length of 255 characters. This required field (non-nullable) should be used when displaying certification names to French-speaking users or when implementing multilingual certification listings."
certifications,image_path_en,varchar(255),NO,,,,,,255.0,,,"The image_path_en column in the certifications table stores the file path or URL (as a string up to 255 characters) to the English-language version of the certification's image or logo. This required field helps systems locate and display the visual representation of each professional certification, likely used in user interfaces or documentation where certification badges need to be shown."
certifications,image_path_fr,varchar(255),NO,,,,,,255.0,,,"The image_path_fr column in the certifications table stores the file path or URL (as a string up to 255 characters) for the French version of certification-related images, such as logos or badges. This required field (non-nullable) helps maintain localized visual assets for French-language displays or documentation of professional certifications."
chargeback_log,chargeback_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The chargeback_log_id is the primary key column in the chargeback_log table, serving as a unique identifier for each chargeback dispute record. When writing SQL queries, use this column to uniquely reference specific chargeback records or join with related tables that reference this chargeback data."
chargeback_log,user_id,int,YES,,,,,,,10.0,0.0,"The user_id column in the chargeback_log table represents the unique identifier of the user who initiated or is associated with a chargeback request or dispute. When querying chargeback records, this column can be used to filter or join with other user-related tables to analyze dispute patterns or retrieve user-specific chargeback history."
chargeback_log,case_number,bigint,YES,,,,,,,19.0,0.0,"The case_number column in the chargeback_log table stores a unique identifier for each chargeback dispute case, represented as a large integer (bigint). This column can be used to join with related tables or filter specific chargeback cases, and since it's nullable, some records might not have an assigned case number yet."
chargeback_log,created,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The 'created' column in the chargeback_log table stores the timestamp when a chargeback request or dispute was initially recorded in the system, automatically populated with CURRENT_TIMESTAMP when a new record is inserted. This datetime field is useful for filtering and analyzing chargeback records by their creation date, enabling queries to track dispute patterns over time or find chargebacks created within specific date ranges."
chargeback_log,updated,datetime,YES,,,,,,,,,"The 'updated' column in the chargeback_log table stores the timestamp of when a chargeback record was last modified, tracking any changes to the dispute's details or status. This datetime field is nullable and can be used in SQL queries to filter or sort chargeback records based on their modification time, making it useful for analyzing dispute processing timelines or identifying recently updated cases."
chargeback_log,status,tinyint(1),YES,,,,,,,3.0,0.0,"The 'status' column in the chargeback_log table uses a tinyint(1) to represent the current state of a chargeback dispute, where different numeric values indicate distinct stages in the chargeback process (e.g., 0 for pending, 1 for approved, etc.). When querying this column, you can use numeric comparisons to filter chargebacks by their current status, and the nullable property allows for cases where the status might not yet be determined."
chargeback_log,amount,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The `amount` column in the chargeback_log table stores the monetary value of the disputed transaction, represented as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). When querying this column, you can use numerical comparisons and aggregations to analyze disputed amounts, and since it's nullable, remember to handle NULL values appropriately in your calculations."
chargeback_log,notes,text,YES,,,,,,65535.0,,,"The 'notes' column in the chargeback_log table stores free-form text comments and additional details about chargeback cases, which can include dispute reasons, communication history, or resolution details. When querying this column, use text-based operations (like LIKE, ILIKE, or text search functions) to search for specific keywords or patterns within the notes, and be aware that the column can contain NULL values since it's nullable."
chargeback_log,link,varchar(255),YES,,,,,,255.0,,,"The ""link"" column in the chargeback_log table stores URL references or file paths (up to 255 characters) that point to supporting documentation or evidence related to a chargeback dispute. When querying this column, it can be used to retrieve or filter chargeback records based on their associated documentation links, though the column may contain NULL values if no documentation is linked to a particular dispute."
chargeback_log,transaction_date,date,YES,,,,,,,,,"The transaction_date column in the chargeback_log table stores the date when the original payment transaction (that is being disputed) occurred. This date field is useful for analyzing chargeback patterns over time and can be used in SQL queries to filter or group chargeback records by specific dates or date ranges, though it can contain NULL values if the original transaction date is unknown."
chargeback_log,settled_date,datetime,YES,,,,,,,,,"The settled_date column in the chargeback_log table records the timestamp when a chargeback dispute was officially resolved or settled. This datetime field can be used to track resolution timelines, filter for settled/unsettled cases, or analyze settlement patterns, with NULL values indicating chargebacks that are still pending resolution."
chargeback_log,reason,tinyint,YES,,,,,,,3.0,0.0,"The 'reason' column in the chargeback_log table stores a numeric code (as a tinyint) that represents the specific reason or category for why a chargeback was initiated. When querying this column, you can use standard numeric comparisons to filter or group chargebacks by their reason codes, and it's important to note that NULL values are permitted, which may indicate cases where the reason wasn't specified or recorded."
chargeback_log,created_by,int,NO,,,,,,,10.0,0.0,The created_by column in the chargeback_log table stores the unique identifier (integer) of the user or system that initiated the chargeback request or dispute. This mandatory field (non-nullable) is essential for tracking who created each chargeback record and can be used in JOIN operations with user/employee tables to retrieve creator details.
chargeback_log,accounting,datetime,YES,,,,,,,,,The `accounting` column in the `chargeback_log` table stores the datetime when a chargeback record was processed in the accounting system. This timestamp can be used to track when financial adjustments were made due to chargebacks and is useful for filtering or grouping chargeback records by their accounting processing dates.
cities,city_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The city_id column serves as the primary key in the cities table, uniquely identifying each city record with a non-null integer value. When writing SQL queries, use this column for precise city lookups, joining with other tables that reference cities, or when you need to ensure unique identification of city records."
cities,state_id,int,NO,,,,,,,10.0,0.0,"The state_id column in the cities table is a required integer field that identifies which state each city belongs to, likely referencing a separate states table. This column enables queries to filter or group cities by their state and establish relationships between cities and state-level data."
cities,city_name,varchar(45),NO,,,,,,45.0,,,"The city_name column in the cities table stores the official name of each city as a text string with a maximum length of 45 characters. Since this field is marked as NOT NULL, every record in the cities table must have a city name, making it a reliable field to use in WHERE clauses or JOIN conditions when querying city-related data."
cities,slug,varchar(255),NO,,,,,,255.0,,,"The `slug` column in the `cities` table contains URL-friendly versions of city names, stored as varchar strings up to 255 characters long. This column is required (non-nullable) and is commonly used for generating clean URLs or unique identifiers in web applications, typically containing lowercase letters, numbers, and hyphens (e.g., ""new-york-city"" or ""san-francisco"")."
cleaning_task_item,cleaning_task_item_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cleaning_task_item_id is the primary key column that uniquely identifies each cleaning task or item in the cleaning_task_item table. When writing SQL queries, use this column for joining to related tables, filtering specific cleaning tasks, or ordering results by task ID."
cleaning_task_item,cleaning_task_id,int,NO,,,,,,,10.0,0.0,The cleaning_task_id column is a required integer field that uniquely identifies each cleaning task within the cleaning_task_item table. This column can be used in WHERE clauses to filter specific cleaning tasks or in JOIN operations to connect with related tables that reference cleaning tasks.
cleaning_task_item,cage_number,int,NO,,,1,,,,10.0,0.0,"The cage_number column in the cleaning_task_item table is a required integer field that identifies the specific cage associated with a cleaning task. This column helps track and organize cleaning activities by cage location, allowing queries to filter or group cleaning tasks based on specific cage assignments."
cleaning_task_item,start_time,time,YES,,,,,,,,,"The start_time column in the cleaning_task_item table represents the scheduled or actual starting time of a cleaning task, stored in a time format (HH:MM:SS). This column can be used to filter, sort, or analyze cleaning tasks based on their timing during the day, and being nullable means that some tasks may not have a specific start time assigned."
cleaning_task_item,end_time,time,YES,,,,,,,,,"The end_time column in the cleaning_task_item table represents the scheduled or actual completion time of a specific cleaning task, stored in a time format (HH:MM:SS). This column can be used in SQL queries to filter tasks based on their completion times or to calculate task durations, and since it's nullable, tasks that are not yet completed or don't have a defined end time will have NULL values."
cleaning_task_item,duration,time,YES,,,,,,,,,"The 'duration' column in the cleaning_task_item table represents the estimated or actual time required to complete a specific cleaning task, stored in a time format (HH:MM:SS). This column can be used in SQL queries to analyze task lengths, schedule cleaning activities, or calculate total cleaning time requirements, and since it's nullable, some tasks may not have a specified duration."
cleaning_task_item,productivity,"decimal(11,2)",YES,,,,,,,11.0,2.0,"The 'productivity' column in the cleaning_task_item table stores a decimal number (up to 11 digits with 2 decimal places) that likely represents the efficiency or output rate for a specific cleaning task. This metric can be used in SQL queries to analyze task performance, calculate averages, or filter tasks based on productivity thresholds, with NULL values permitted when productivity data is not available."
cleaning_task_item,biso_count,int,YES,,,,,,,10.0,0.0,"The `biso_count` column in the cleaning_task_item table represents the number of BISO (likely a specific cleaning item or supply) required or associated with a particular cleaning task. When writing queries, this integer field can be used to track quantities, filter tasks based on BISO requirements, or calculate total BISO needs across multiple cleaning tasks."
cleaning_task_item,qa_required,int,YES,,,0,,,,10.0,0.0,"The qa_required column in the cleaning_task_item table is an integer flag (0 or 1) that indicates whether quality assurance inspection is needed for a specific cleaning task. When writing SQL queries, you can use this column to filter or identify tasks that require QA verification, where 0 typically means no QA is required and 1 indicates QA inspection is necessary."
cleaning_task_item,qa_count,int,YES,,,,,,,10.0,0.0,"The qa_count column in the cleaning_task_item table tracks the number of quality assurance checks or inspections performed on a specific cleaning task. This optional integer field can be used in queries to filter or analyze tasks based on their QA inspection frequency, or to identify tasks that may need additional quality verification."
cleaning_task_item,qa_smell,int,YES,,,,,,,10.0,0.0,"The qa_smell column in the cleaning_task_item table is an integer field that likely represents a quality assurance score or rating specifically related to odor or smell assessment of a cleaning task. This optional field (as it's nullable) can be used in SQL queries to filter, sort, or analyze cleaning tasks based on their smell-related quality metrics, such as finding tasks that failed smell checks or calculating average smell ratings across different cleaning activities."
cleaning_task_item,qa_damaged,int,YES,,,,,,,10.0,0.0,The qa_damaged column in the cleaning_task_item table is an integer flag that indicates whether quality assurance checks have identified damage during the cleaning process. This column can be used in WHERE clauses to filter for tasks with identified damage (typically when qa_damaged = 1) or to analyze damage rates across cleaning activities.
cleaning_task_item,qa_biso_clean,int,YES,,,,,,,10.0,0.0,"The qa_biso_clean column in the cleaning_task_item table is an integer field that likely indicates whether a cleaning task has passed quality assurance (QA) standards for biosafety or biological safety requirements. This optional field (as it's nullable) can be used in SQL queries to filter or group cleaning tasks based on their biosafety compliance status, where different integer values may represent different QA states or levels of biosafety cleanliness verification."
cleaning_task_item,qa_station_clean,int,YES,,,,,,,10.0,0.0,"The qa_station_clean column in the cleaning_task_item table is an integer field that likely indicates whether a quality assurance (QA) station requires cleaning or has been cleaned, possibly using a binary (0/1) or status code system. This column can be used in SQL queries to filter or group cleaning tasks based on their QA station cleaning status, making it useful for tracking and managing quality control-related cleaning requirements."
cleaning_task_item,qa_finished_at,timestamp,YES,,,,,,,,,"The qa_finished_at column in the cleaning_task_item table records the timestamp when quality assurance (QA) inspection was completed for a specific cleaning task. This timestamp can be used to track when tasks have passed final inspection and to analyze QA completion times, with NULL values indicating tasks that haven't yet undergone or completed QA review."
cleaning_task_item,qa_performed_by,int,YES,,,,,,,10.0,0.0,"The qa_performed_by column in the cleaning_task_item table stores the identifier (ID) of the person who performed quality assurance checks on the cleaning task. This optional field (nullable) can be used to track who verified or inspected the cleaning work, making it useful for queries that need to analyze quality control patterns or find tasks that have been quality-checked by specific personnel."
cleaning_task_item,qa_score,int,YES,,,0,,,,10.0,0.0,"The qa_score column in the cleaning_task_item table represents a quality assurance rating or score assigned to a cleaning task, stored as an integer value. This score can be used to filter, sort, or analyze the quality of completed cleaning tasks, making it useful in queries that need to evaluate cleaning performance or identify tasks that meet specific quality thresholds."
cleaning_task_item_logs,cleaning_task_item_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cleaning_task_item_log_id is the primary key column that uniquely identifies each log entry in the cleaning_task_item_logs table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific log entries, particularly in WHERE clauses or JOIN conditions where unique log entry identification is required."
cleaning_task_item_logs,cleaning_task_item_id,int,NO,,,,,,,10.0,0.0,"The cleaning_task_item_id column is a required integer field that serves as a reference to the specific cleaning task item being logged. This column is essential for linking log entries to their corresponding cleaning tasks, making it useful in JOIN operations or WHERE clauses when you need to retrieve the history of changes for a particular cleaning task item."
cleaning_task_item_logs,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the cleaning_task_item_logs table is a required integer field that categorizes the type of change or action recorded in each log entry. When querying this table, use this column to filter or group log entries based on specific types of cleaning task modifications (e.g., SELECT * FROM cleaning_task_item_logs WHERE type = 1 to find logs of a particular action type)."
cleaning_task_item_logs,start_time,time,NO,,,,,,,,,"The start_time column in the cleaning_task_item_logs table represents the scheduled starting time of a cleaning task, stored in a time format (HH:MM:SS). This required field is commonly used in queries to filter or sort cleaning tasks based on their planned start times, making it useful for scheduling analysis and task organization."
cleaning_task_item_logs,end_time,time,YES,,,,,,,,,"The `end_time` column in the cleaning_task_item_logs table stores the time when a cleaning task was completed or ended, recorded in a standard time format. This column can be used in SQL queries to filter, sort, or analyze cleaning task completion times, and being nullable means some tasks may not have an end time recorded yet."
cleaning_task_item_logs,duration,time,YES,,,,,,,,,"The 'duration' column in the cleaning_task_item_logs table stores the time taken to complete a specific cleaning task, represented in a time format (HH:MM:SS). This column can be used in SQL queries to analyze task completion times, calculate average durations, or identify tasks that took longer than expected, with NULL values indicating tasks where duration wasn't recorded."
cleaning_tasks,cleaning_task_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cleaning_task_id column serves as the primary key in the cleaning_tasks table, uniquely identifying each cleaning task or activity record. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific cleaning tasks (e.g., WHERE cleaning_task_id = X)."
cleaning_tasks,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the cleaning_tasks table is a required integer field that identifies which user is associated with or assigned to a specific cleaning task. This column can be used to join with a users table to get additional information about the assigned person, and it's commonly used in WHERE clauses to filter tasks by specific users or in GROUP BY clauses to analyze task distribution across users."
cleaning_tasks,cleaning_workstation_colour_id,int,YES,,,,,,,10.0,0.0,"The cleaning_workstation_colour_id column in the cleaning_tasks table is an integer field that references a color classification system for workstations requiring cleaning. This optional field (as it's nullable) helps organize and categorize cleaning tasks based on color-coded workstation zones or areas, enabling efficient task sorting and filtering by workstation color designation."
cleaning_tasks,date,date,NO,,,,,,,,,"The 'date' column in the cleaning_tasks table represents the specific calendar date when a cleaning task is scheduled to be performed or was performed. This required (non-nullable) date field is essential for temporal tracking and scheduling of cleaning activities, and can be used in SQL queries for filtering tasks by date ranges, grouping tasks by day, or analyzing cleaning task patterns over time."
cleaning_tasks,start_time,time,YES,,,,,,,,,"The start_time column in the cleaning_tasks table stores the scheduled or actual starting time of a cleaning task in a time format (HH:MM:SS). This column can be used in SQL queries to filter tasks by their start times, schedule tasks for specific times of day, or analyze cleaning task timing patterns, and since it's nullable, some tasks may not have a defined start time."
cleaning_tasks,end_time,time,YES,,,,,,,,,"The `end_time` column in the cleaning_tasks table stores the scheduled or actual completion time of a cleaning task in a time format (HH:MM:SS). This column can be used in SQL queries to filter tasks based on their completion times, calculate task durations when paired with start times, or analyze cleaning schedules, and being nullable means some tasks may not have an end time specified yet."
cleaning_tasks,total_daily_minimum_target,int,NO,,,,,,,10.0,0.0,"The total_daily_minimum_target column in the cleaning_tasks table represents the minimum number of cleaning tasks that must be completed per day. This required integer value can be used in SQL queries to compare against actual completion counts or to set operational targets, making it useful for monitoring daily cleaning performance and compliance with minimum requirements."
cleaning_violation,cleaning_violation_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cleaning_violation_id column serves as the primary key for the cleaning_violation table, uniquely identifying each recorded cleaning violation instance. When writing SQL queries, use this column to join with related tables or to filter specific violation records, and since it's non-nullable, you can rely on it always having a value."
cleaning_violation,created_at,date,NO,,,,,,,,,"The created_at column in the cleaning_violation table stores the date when a cleaning violation was initially recorded in the system. When writing SQL queries, this date field can be used for temporal analysis of violations, filtering violations within specific date ranges, or sorting violations chronologically, and must always contain a value as it is non-nullable."
cleaning_violation,created_by,int,NO,,,,,,,10.0,0.0,The created_by column in the cleaning_violation table is a required integer field that stores the identifier of the user who recorded or created the cleaning violation entry. This column is essential for maintaining an audit trail of who documented each cleaning violation and can be used in JOIN operations to link to a user or employee table to get more information about the person who reported the violation.
cleaning_violation,cleaning_violation_type_id,int,NO,MUL,,,cleaning_violation_type,cleaning_violation_type_id,,10.0,0.0,The cleaning_violation_type_id column is a required foreign key that links each cleaning violation record to its corresponding violation type in the cleaning_violation_type table. This column enables queries to join with the cleaning_violation_type table to retrieve detailed information about the category or nature of each cleaning violation.
cleaning_violation,cleaning_violation_amount,float,NO,,,0,,,,12.0,,"The cleaning_violation_amount column in the cleaning_violation table stores the monetary value or penalty amount associated with each cleaning violation as a floating-point number. This required field (non-nullable) represents the financial impact of the violation and can be used in SQL queries for financial calculations, reporting, or filtering violations based on their monetary severity."
cleaning_violation,additional_information,varchar(255),NO,,,,,,255.0,,,"The additional_information column in the cleaning_violation table stores mandatory text details (up to 255 characters) that provide specific context or notes about a cleaning violation incident. This column should be used when you need to retrieve or filter detailed descriptions about cleaning violations, and since it's non-nullable, every violation record must include some explanatory information."
cleaning_violation,order_id,int,YES,MUL,,,,,,10.0,0.0,"The order_id column in the cleaning_violation table serves as a foreign key that links cleaning violations to specific orders in the system. When querying, this column can be used to join with the orders table to retrieve order-specific details associated with cleaning violations, or to filter/group violations by their related orders."
cleaning_violation,reviewed_at,date,YES,,,,,,,,,"The reviewed_at column in the cleaning_violation table stores the date when a cleaning violation was reviewed by relevant personnel. This optional date field can be used to filter or analyze when violations were assessed, and its nullable property indicates that not all violations may have been reviewed yet."
cleaning_violation,reviewed_by,int,YES,,,,,,,10.0,0.0,"The reviewed_by column in the cleaning_violation table stores the ID of the user who reviewed the cleaning violation, linking to a user reference table. This optional field (as indicated by being nullable) helps track who has assessed or evaluated the violation, enabling accountability and audit trails in the violation review process."
cleaning_violation,frustration_level,int,NO,,,,,,,10.0,0.0,"The frustration_level column in the cleaning_violation table is a required integer field that quantifies the severity or impact of a cleaning violation incident. When writing queries, this column can be used to filter or sort violations based on their intensity level, making it useful for identifying particularly problematic cleaning infractions or analyzing patterns in violation severity."
cleaning_violation,status,int,NO,,,1,,,,10.0,0.0,"The 'status' column in the cleaning_violation table is a required integer field that indicates the current state of a cleaning violation record. When writing queries, this column can be used to filter or group violations based on their processing status (e.g., pending, resolved, dismissed), where different integer values correspond to specific status states."
cleaning_violation_type,cleaning_violation_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cleaning_violation_type_id column serves as the primary key in the cleaning_violation_type table, uniquely identifying each type of cleaning violation in the system. This integer column is used as a foreign key reference in the cleaning_violation table to categorize specific violations, ensuring data integrity and standardized violation type classification."
cleaning_violation_type,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the cleaning_violation_type table stores the descriptive text labels for different types of cleaning violations (e.g., ""Improper Sanitization"", ""Missed Cleaning Schedule"") as varchar strings up to 255 characters. This required field serves as a human-readable identifier for each violation type and should be referenced when you need to display or filter violation categories in queries, though for table joins you should use the primary key instead."
cleaning_violation_type,penalty_amount,float,NO,,,0,,,,12.0,,"The penalty_amount column in the cleaning_violation_type table stores the standard monetary fine (as a floating-point number) associated with each type of cleaning violation. This required field (non-nullable) helps establish consistent financial penalties for different categories of violations, making it useful in queries that need to calculate or report on potential or actual fines for cleaning infractions."
cleaning_violation_type,status,int,NO,,,1,,,,10.0,0.0,"The 'status' column in the cleaning_violation_type table is a required integer field that indicates whether a cleaning violation type is currently active or inactive in the system. When writing queries, this column can be used to filter for active violation types (typically status = 1) or to exclude inactive violation types from results."
cleaning_workstation_colours,cleaning_workstation_colour_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cleaning_workstation_colour_id column serves as the primary key identifier for each unique colour option available for cleaning workstations in the facility management system. When writing SQL queries, use this column to join with related tables or to uniquely identify specific workstation colour records, as it's a non-nullable integer that ensures each colour entry can be distinctly referenced."
cleaning_workstation_colours,colour,varchar(255),NO,,,,,,255.0,,,"The 'colour' column in the cleaning_workstation_colours table stores text-based colour names or codes (up to 255 characters) that are used to identify different cleaning workstations. When writing SQL queries, this required field can be used to filter, group, or join with other tables to analyze or assign workstation colours, such as ""SELECT * FROM cleaning_workstation_colours WHERE colour = 'blue'"" or when matching workstations with their designated colours."
clock_io,clock_io_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The clock_io_id column serves as the primary key for the clock_io table, uniquely identifying each individual time clock entry or exit record. This non-nullable integer field is essential for referencing specific clock-in/clock-out events and should be included in JOIN operations when connecting time clock data with other employee-related tables."
clock_io,staff_id,int,NO,,,,,,,10.0,0.0,"The staff_id column in the clock_io table is a required integer field that identifies which employee is clocking in or out for their shift. When writing queries, this column can be used to join with employee tables or to filter/group time clock entries for specific workers, making it a crucial field for tracking individual employee attendance and work hours."
clock_io,date,date,NO,,,,,,,,,"The 'date' column in the clock_io table stores the calendar date (without time) when an employee's clock in/out action occurred. This required field is essential for grouping and analyzing employee attendance by day, and can be used in SQL queries to filter or aggregate time clock entries for specific dates or date ranges."
clock_io,from,varchar(10),YES,,,,,,10.0,,,"The ""from"" column in the clock_io table stores the starting location or point of origin for an employee's time clock entry as a variable-length string (up to 10 characters). This column can be used in queries to analyze or filter clock entries based on where employees begin their shifts, though it's optional as indicated by its nullable status."
clock_io,to,varchar(10),YES,,,,,,10.0,,,"The 'to' column in the clock_io table stores the destination or end location code (as a string up to 10 characters) where an employee completes their shift or work period. When writing queries, this column can be used to analyze employee movement patterns or filter clock-out records by specific work locations."
clock_io,total_time,varchar(10),YES,,,,,,10.0,,,"The total_time column in the clock_io table stores the calculated duration of an employee's shift in a string format (VARCHAR), representing the time difference between clock-in and clock-out entries. When querying this column, you can use string comparison operators to filter or analyze shift durations, though you may need to cast it to a time-based format for duration calculations."
clock_io,created,datetime,NO,,,,,,,,,"The 'created' column in the clock_io table stores the exact timestamp when each time clock entry or exit record was created in the system, using a datetime format. This non-nullable field is essential for chronological tracking and can be used in SQL queries to filter or analyze clock-in/out events by specific dates and times, such as finding records within a particular time range or grouping entries by day."
cold_chain_actions,cold_chain_action_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cold_chain_action_id is the primary key identifier for each unique action or event recorded in the cold_chain_actions table, serving as a non-nullable integer that uniquely identifies each record. This column should be used in JOIN operations when linking to related tables and in WHERE clauses when filtering for specific cold chain events or actions."
cold_chain_actions,date,date,NO,,,,,,,,,"The 'date' column in the cold_chain_actions table stores the calendar date (without time) when a cold chain monitoring event or action occurred. This required field is essential for tracking and analyzing cold chain activities by date, making it useful for filtering events within specific date ranges or grouping temperature-related incidents by day."
cold_chain_actions,out_of_super_ice_packs_by,int,YES,,,,,,,10.0,0.0,The `out_of_super_ice_packs_by` column in the cold_chain_actions table stores an integer value representing the number of super ice packs that are depleted or need replacement in a cold chain monitoring system. This column helps track inventory management of cooling materials and can be used in queries to identify when replenishment is needed or to analyze ice pack consumption patterns.
cold_chain_actions,out_of_super_ice_packs_at,time,YES,,,,,,,,,"This column records the specific time when a cold chain shipment or storage unit ran out of super ice packs, which are critical for maintaining required temperature conditions. It can be used in SQL queries to analyze patterns of ice pack depletion or to identify time periods when temperature control might have been compromised, with NULL values indicating either that ice packs were sufficient or the information wasn't recorded."
cold_chain_actions,dry_ice_frozen_by,int,YES,,,,,,,10.0,0.0,"The `dry_ice_frozen_by` column in the cold_chain_actions table stores the employee ID (as an integer) of the person responsible for freezing or replenishing dry ice in a cold chain container or package. This column can be used to track accountability and link to an employees table for identifying who performed specific dry ice-related tasks, and its nullable property allows for cases where dry ice handling information is not applicable or not recorded."
cold_chain_actions,dry_ice_frozen_at,time,YES,,,,,,,,,"The `dry_ice_frozen_at` column in the `cold_chain_actions` table stores the specific time when dry ice was frozen or prepared for use in cold chain operations, recorded in a time format (HH:MM:SS). This column can be used in SQL queries to analyze dry ice preparation schedules, track operational timing patterns, or calculate time intervals between freezing and usage, with NULL values indicating either that dry ice wasn't used for a particular action or the freezing time wasn't recorded."
cold_chain_actions,dry_ice_fridge_by,int,YES,,,,,,,10.0,0.0,"The `dry_ice_fridge_by` column in the cold_chain_actions table stores an integer identifier (likely a user ID or employee ID) representing the person responsible for managing dry ice or refrigeration tasks in the cold chain process. This column can be used in queries to track accountability and analyze who performed specific cold chain maintenance activities, and being nullable indicates that not all actions require dry ice or refrigeration handling."
cold_chain_actions,dry_ice_fridge_at,time,YES,,,,,,,,,"The `dry_ice_fridge_at` column in the `cold_chain_actions` table stores the specific time when goods were placed in or checked within a dry ice refrigeration unit, recorded in a time format (HH:MM:SS). This column can be used in SQL queries to analyze patterns in dry ice storage timing or to verify compliance with storage protocols, and being nullable indicates that not all cold chain actions necessarily involve dry ice refrigeration."
cold_chain_actions,min_time_on_truck,tinyint,YES,,,,,,,3.0,0.0,"The min_time_on_truck column in the cold_chain_actions table represents the minimum required time (in minutes) that goods must remain on a temperature-controlled truck during transportation. This optional field (nullable) uses a tinyint data type to store small integer values, making it suitable for queries that need to validate or filter transportation duration requirements in cold chain logistics."
communication_messages,communication_messages_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The communication_messages_id column serves as the primary key for the communication_messages table, uniquely identifying each message record related to basket notifications. When writing SQL queries, use this column for joining with other tables or filtering specific messages, particularly when connecting to basket_designs table through either regular or vegan basket launch relationships."
communication_messages,name,varchar(100),NO,,,,,,100.0,,,"The 'name' column in the communication_messages table stores the identifying title or label for each communication message, with a maximum length of 100 characters and cannot be null. This column likely contains descriptive names for different types of basket-related notifications, such as ""Launch Announcement"" or ""Basket Update Notice,"" making it useful for filtering and organizing messages in queries."
communication_messages,content,text,NO,,,,,,65535.0,,,"The 'content' column in the communication_messages table stores the actual text body of messages used for basket-related notifications and updates. This required (non-nullable) text field should be referenced when querying for the specific message content that gets sent to users about basket launches, whether for regular or vegan baskets."
communication_messages,start_date,date,NO,,,,,,,,,"The start_date column in the communication_messages table represents the date when a specific basket-related communication message becomes active or valid. This mandatory date field helps control when messages should begin appearing in notifications and updates, ensuring proper timing of communication for both regular and vegan basket launches."
communication_messages,end_date,date,NO,,,,,,,,,"The end_date column in the communication_messages table represents the final date when a basket-related communication message remains valid or active. When writing SQL queries, this date field can be used to filter active messages by comparing it against the current date (e.g., WHERE end_date >= CURRENT_DATE) or to identify expired communications."
communication_messages,status,int,NO,,,1,,,,10.0,0.0,"The 'status' column in the communication_messages table is a required integer field that indicates the current state of a basket-related communication message. This column likely uses predefined status codes (e.g., 1 for active, 0 for inactive) to track whether a message is currently in use or valid for basket notifications."
communication_messages,subject,varchar(255),NO,,,,,,255.0,,,"The 'subject' column in the communication_messages table stores the email subject line or message header for basket-related notifications, with a maximum length of 255 characters and cannot be null. This required field helps identify and organize different types of communications sent about regular and vegan basket launches, making it essential for filtering and organizing message content in queries."
communication_messages,landing_message,text,YES,,,,,,65535.0,,,"The landing_message column in the communication_messages table stores the main text content for basket-related landing pages or notifications, allowing for long-form message content due to its text data type. This optional field (as indicated by being nullable) likely contains customized messaging that appears when users view basket launch announcements or related communications, whether for regular or vegan basket types."
communication_messages,image_url,varchar(254),YES,,,,,,254.0,,,"The image_url column in the communication_messages table stores web-accessible URLs (up to 254 characters) that point to images used in basket-related notifications and communications. This optional field can be used to enhance messages with visual content, and can be referenced in SQL queries when you need to retrieve or filter messages based on their associated image assets."
communication_messages,type,int,NO,,,0,,,,10.0,0.0,"The 'type' column in the communication_messages table is a required integer field that categorizes different kinds of basket-related notification messages. This column likely uses predefined numeric codes to distinguish between message types (such as regular basket notifications versus vegan basket notifications), enabling efficient filtering and organization of communication content."
communication_messages,cancel_order_popup,text,YES,,,,,,65535.0,,,"The cancel_order_popup column in the communication_messages table stores the text content displayed when a user attempts to cancel a basket order. This text field can be used to customize cancellation confirmation messages or warnings, and being nullable allows for optional popup messages depending on the business requirements."
communication_messages,sms_content,varchar(161),YES,,,,,,161.0,,,"The sms_content column in the communication_messages table stores the actual text content of SMS messages (limited to 161 characters) that are sent for basket-related notifications. This optional field (nullable) is used to store message templates or actual message content that will be sent to customers regarding their basket orders, including updates about regular and vegan basket launches."
communication_messages,subject_active_with_activation_required,varchar(255),YES,,,,,,255.0,,,"This column stores the email subject line text used when sending notifications about baskets that require activation and are currently active. It's used in SQL queries when you need to retrieve or filter message templates specifically for active basket communications where user activation is needed, and being nullable allows for cases where this specific subject line variant isn't required."
communication_messages,subject_vacation,varchar(255),YES,,,,,,255.0,,,"The subject_vacation column in the communication_messages table stores the email subject line or message header specifically used for vacation-related basket notifications, with a maximum length of 255 characters. This column is optional (nullable) and likely contains customized subject lines for messages sent when customers need to pause or modify their basket deliveries during vacation periods."
communication_messages,subject_incompleted,varchar(255),YES,,,,,,255.0,,,"The subject_incompleted column in the communication_messages table stores the email subject line or message header specifically used when notifying users about incomplete basket-related actions. This varchar field, which can hold up to 255 characters and allows NULL values, is likely used to customize notification subjects for scenarios where a basket process wasn't fully completed or requires additional attention."
communication_messages,subject_inactive,varchar(255),YES,,,,,,255.0,,,"The subject_inactive column in the communication_messages table stores the subject line text (up to 255 characters) used for notifications when a basket becomes inactive or is discontinued. This optional field helps customize message subjects for communications specifically related to basket deactivation events, ensuring clear communication about basket status changes to relevant stakeholders."
communication_messages,content_active,text,YES,,,,,,65535.0,,,"The content_active column in the communication_messages table stores the active message text used for basket-related notifications and communications. This text field can be used to retrieve or filter current message content, and its nullable property allows for messages that may not yet have active content defined."
communication_messages,content_active_with_activation_required,text,YES,,,,,,65535.0,,,"This column stores the message content that is displayed when a basket design is active but requires activation from the user. When writing SQL queries, use this column to retrieve or filter specific message text that should be shown to users when they need to take action to activate their basket, and consider handling NULL values appropriately since this field is nullable."
communication_messages,content_vacation,text,YES,,,,,,65535.0,,,"The content_vacation column in the communication_messages table stores the message text used for vacation-related notifications in the basket communication system. This text field can be used to store customized messages that are sent to customers regarding vacation periods or temporary service interruptions, and since it's nullable, messages may not always require vacation-specific content."
communication_messages,content_incompleted,text,YES,,,,,,65535.0,,,The content_incompleted column in the communication_messages table stores the message text used when a basket is not fully completed or has missing elements. This nullable text field likely contains template messages that can be customized and sent to users when their basket design process is incomplete or requires additional attention.
communication_messages,content_inactive,text,YES,,,,,,65535.0,,,"The content_inactive column in the communication_messages table stores the alternative message text that's displayed when a basket is in an inactive state. This text field can be used in SQL queries to retrieve or update the specific messaging content shown to users when basket-related notifications need to indicate inactive status, and being nullable means some messages may not require inactive-state content."
communication_messages,preview,varchar(255),YES,,,,,,255.0,,,"The 'preview' column in the communication_messages table stores a brief preview or summary text (up to 255 characters) of notification messages related to basket updates and launches. This optional field (as indicated by being nullable) likely contains snippet text that might be displayed in notification previews, email subject lines, or message summaries for both regular and vegan basket communications."
communication_messages,preview_active_with_activation_required,varchar(255),YES,,,,,,255.0,,,"This column stores a text value indicating whether a preview message requires activation and is currently active, likely used to control the visibility and activation requirements of basket-related communications. It can be used in WHERE clauses to filter messages based on their preview and activation status, helping to manage which communications are visible to users under specific activation conditions."
communication_messages,preview_vacation,varchar(255),YES,,,,,,255.0,,,"The preview_vacation column in the communication_messages table stores preview text (up to 255 characters) specifically related to vacation-related notifications for basket services. This column is likely used to store templated message content that appears in customer communications when baskets need to be paused or modified due to vacation schedules, and being nullable indicates that not all communication messages require vacation-specific preview text."
communication_messages,preview_incompleted,varchar(255),YES,,,,,,255.0,,,"The preview_incompleted column in the communication_messages table stores a text preview (up to 255 characters) of messages specifically related to incomplete basket notifications. This column can be used in SQL queries to retrieve or filter message previews for incomplete basket scenarios, and being nullable, it may not contain a value for all message records."
communication_messages,preview_inactive,varchar(255),YES,,,,,,255.0,,,"The preview_inactive column in the communication_messages table stores a text string (up to 255 characters) that represents a preview message or placeholder text used when a basket-related communication is in an inactive state. This column can be used in SQL queries to retrieve or filter messages based on their inactive preview content, and being nullable means it's optional and can contain NULL values when no inactive preview text is needed."
communication_messages,preview_active,varchar(255),YES,,,,,,255.0,,,"The preview_active column in the communication_messages table is a varchar field that likely indicates whether a message preview is currently enabled or active for basket-related communications. This column can be used in WHERE clauses to filter messages based on their preview status, with expected values being text indicators like 'active', 'inactive', or similar status flags."
communication_messagesLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'l_id' column serves as the primary key in the communication_messagesLang table, uniquely identifying each language-specific message entry through an integer value. This column is essential for maintaining data integrity and establishing relationships with other tables, and since it's marked as NOT NULL, every message record must have a unique l_id value."
communication_messagesLang,communication_messages_id,int,YES,,,,,,,10.0,0.0,"The communication_messages_id column in the communication_messagesLang table serves as a reference to link language-specific message variations to their base message template. When writing queries, this column can be used to join with the main communication messages table to retrieve or filter specific translations of a message, making it essential for implementing multi-language functionality in the system."
communication_messagesLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the `communication_messagesLang` table stores language identifiers (such as 'en', 'es', 'fr') as character strings up to 10 characters long, and is required (non-nullable). This column is used to specify which language version a particular message represents, enabling queries to retrieve the appropriate translated content for different language preferences."
communication_messagesLang,l_content,text,NO,,,,,,65535.0,,,"The l_content column in the communication_messagesLang table stores the actual translated text content of communication messages in different languages, making it a crucial field for multi-language support. When writing SQL queries, this column should be used to retrieve or update the localized message content, and since it's non-nullable, you must always provide a value when inserting new records."
communication_messagesLang,l_subject,varchar(255),NO,,,,,,255.0,,,"The `l_subject` column in the `communication_messagesLang` table stores the localized subject line or title of communication messages in different languages, with a maximum length of 255 characters. This required field (non-nullable) is essential for querying and displaying message subjects in the appropriate language, and should be included when inserting new translated message records or retrieving language-specific message subjects."
communication_messagesLang,l_landing_message,text,YES,,,,,,65535.0,,,"The l_landing_message column in the communication_messagesLang table stores the localized (translated) version of landing page messages or welcome text in different languages. When writing SQL queries, this text field can be used to retrieve or update language-specific landing messages, typically joined with a language identifier to get the appropriate translation for a specific locale or language setting."
communication_messagesLang,l_cancel_order_popup,text,YES,,,,,,65535.0,,,"This 'l_cancel_order_popup' column stores localized text content for order cancellation popup messages in different languages, supporting multi-language functionality for the system's order cancellation interface. When writing SQL queries, you can join this column with language identifiers to retrieve the appropriate translated cancellation popup message for a specific language, or use it directly to access the popup text content."
communication_messagesLang,l_sms_content,varchar(161),YES,,,,,,161.0,,,"The `l_sms_content` column in the `communication_messagesLang` table stores the localized SMS message content with a maximum length of 161 characters. When writing queries, this column can be used to retrieve or filter language-specific SMS message templates, and its nullable property means that some records might not have SMS content defined."
communication_messagesLang,l_subject_active_with_activation_required,varchar(255),YES,,,,,,255.0,,,"This column stores language-specific subject lines for messages sent when a user's account is active but requires additional activation steps. It can be used in SQL queries to retrieve or filter localized message subjects, particularly when dealing with user activation notifications in different languages."
communication_messagesLang,l_subject_vacation,varchar(255),YES,,,,,,255.0,,,"The l_subject_vacation column in the communication_messagesLang table stores language-specific subject lines for vacation-related messages or notifications, with a maximum length of 255 characters. This column is used when the system needs to display or send vacation-related communications in different languages, and its nullable property allows for cases where certain language variations might not have a specific vacation subject defined."
communication_messagesLang,l_subject_incompleted,varchar(255),YES,,,,,,255.0,,,"The `l_subject_incompleted` column in the `communication_messagesLang` table stores localized subject lines for incomplete or pending communication messages, with a maximum length of 255 characters. This column is used to provide language-specific variations of message subjects when a communication or notification is in an incomplete state, supporting the system's multi-language capabilities."
communication_messagesLang,l_subject_inactive,varchar(255),YES,,,,,,255.0,,,"The l_subject_inactive column in the communication_messagesLang table stores the translated subject lines or headings for inactive or disabled communication messages, with a maximum length of 255 characters. This column is used when displaying message subjects in different languages for communications that are currently not active in the system, and its nullable property allows for cases where an inactive subject translation might not be required for certain languages."
communication_messagesLang,l_content_active,text,YES,,,,,,65535.0,,,"The l_content_active column in the communication_messagesLang table stores the active content or text of a message in a specific language, allowing for localized versions of system communications. This text field can be used to retrieve or update the current active message content for different languages, and being nullable suggests that some language variations might not have active content defined."
communication_messagesLang,l_content_active_with_activation_required,text,YES,,,,,,65535.0,,,"This column stores localized message content that is displayed to users when their account is active but requires additional activation steps or verification. The text field can contain translated versions of these activation-related messages in different languages, supporting the system's multi-language communication needs."
communication_messagesLang,l_content_vacation,text,YES,,,,,,65535.0,,,"The l_content_vacation column in the communication_messagesLang table stores localized (translated) content for vacation-related messages or notifications in different languages. This text field can be used to retrieve or update language-specific vacation message templates, and since it's nullable, some language variations might not have vacation-specific content defined."
communication_messagesLang,l_content_incompleted,text,YES,,,,,,65535.0,,,The `l_content_incompleted` column in the `communication_messagesLang` table stores the localized (translated) content for incomplete or partial message templates in different languages. This text field can be used to store longer message content and can be NULL when no incomplete message content exists for a particular language variant.
communication_messagesLang,l_content_inactive,text,YES,,,,,,65535.0,,,The `l_content_inactive` column in the `communication_messagesLang` table stores the translated content or text of inactive/deprecated message templates in different languages. This text field can be used to maintain historical versions of communication content that are no longer actively used in the system but need to be preserved for reference or audit purposes.
communication_messagesLang,l_preview,varchar(255),YES,,,,,,255.0,,,"The `l_preview` column in the `communication_messagesLang` table stores a preview or summary version of a communication message in different languages, limited to 255 characters. This column can be used to display abbreviated versions of the full message content, making it useful for scenarios where a quick overview or snippet of the message is needed, such as in notification previews or message listings."
communication_messagesLang,l_preview_active_with_activation_required,varchar(255),YES,,,,,,255.0,,,"This column stores localized text strings (up to 255 characters) that represent preview messages shown to users when a communication requires activation. It's used to display language-specific preview content for communications that are in a pending or pre-activation state, helping users understand what will be communicated once activated."
communication_messagesLang,l_preview_vacation,varchar(255),YES,,,,,,255.0,,,"The `l_preview_vacation` column in the `communication_messagesLang` table stores localized preview text for vacation-related messages or notifications, with a maximum length of 255 characters. This column can be used to retrieve or update language-specific vacation message previews, and since it's nullable, some language variations might not have preview text defined."
communication_messagesLang,l_preview_incompleted,varchar(255),YES,,,,,,255.0,,,"This column 'l_preview_incompleted' stores localized preview text (up to 255 characters) for incomplete or draft communication messages in different languages. It can be used in SQL queries to retrieve or filter language-specific preview content for messages that are still in progress or not fully completed, supporting multi-language preview functionality in the system."
communication_messagesLang,l_preview_inactive,varchar(255),YES,,,,,,255.0,,,"The `l_preview_inactive` column in the `communication_messagesLang` table stores localized preview text for inactive or disabled message states, with a maximum length of 255 characters. This column can be used to retrieve or filter language-specific preview content that appears when a communication message is in an inactive state, and since it's nullable, some message variations might not have preview text defined."
communication_messagesLang,l_preview_active,varchar(255),YES,,,,,,255.0,,,"The l_preview_active column in the communication_messagesLang table stores a text value indicating whether a preview is enabled or active for a specific language variant of a communication message. When writing queries, this column can be used to filter or identify messages where preview functionality is enabled, though its nullable nature suggests preview settings may not be required for all message entries."
community_bee_member_count,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the community_bee_member_count table, uniquely identifying each record of bee group membership counts. This non-nullable integer field is essential for referencing specific membership count entries and maintaining data integrity in queries involving this metrics table."
community_bee_member_count,count,int,NO,,,,,,,10.0,0.0,"The ""count"" column in the community_bee_member_count table stores the integer number of members belonging to each community bee group at a specific point in time. This non-nullable field is essential for tracking membership levels and can be used in aggregate functions (like AVG, SUM, MAX) to analyze membership trends or compare sizes across different bee communities."
community_bee_member_count,time,datetime,NO,,,,,,,,,"The 'time' column in the community_bee_member_count table stores the specific date and time when member counts were recorded for community bee groups. When querying this table, you can use this datetime column for temporal analysis, such as tracking membership changes over time or filtering records within specific date ranges using standard datetime comparison operators."
community_bee_welcome_messages,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the community_bee_welcome_messages table, uniquely identifying each welcome message template. This integer field is non-nullable and is commonly used to establish relationships with translations in the community_bee_welcome_messages_lang table, making it essential for JOIN operations and WHERE clause filtering when querying welcome message data."
community_bee_welcome_messages,from,date,NO,,,,,,,,,"The 'from' column in the community_bee_welcome_messages table specifies the start date from which a welcome message template becomes active. When querying welcome messages, use this date column to filter or select templates that are valid for a specific time period, often in combination with date comparison operators (e.g., WHERE from <= CURRENT_DATE)."
community_bee_welcome_messages,to,date,NO,,,,,,,,,"The 'to' column in the community_bee_welcome_messages table specifies the end date until which a welcome message template remains valid or active. When querying welcome messages, use this date column to filter for currently active templates or to schedule message template transitions, ensuring you compare it against the current date (e.g., WHERE to >= CURRENT_DATE)."
community_bee_welcome_messages,content,varchar(140),NO,,,,,,140.0,,,"The 'content' column in the community_bee_welcome_messages table stores the default welcome message text, limited to 140 characters, and is required (non-nullable). When writing SQL queries, this column can be used to retrieve or filter the base welcome message templates, while keeping in mind that localized versions of these messages are stored in a separate translation table."
community_bee_welcome_messages_lang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the community_bee_welcome_messages_lang table, uniquely identifying each translated welcome message record. When writing SQL queries, use this column for precise record selection or when joining with other tables that reference specific translated welcome message entries."
community_bee_welcome_messages_lang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in community_bee_welcome_messages_lang stores language identifiers (like 'en', 'es', 'fr') as VARCHAR(10) values, representing the language of each translated welcome message. This required field should be used in WHERE clauses when filtering for specific language versions of welcome messages, or in JOIN conditions when combining with other language-specific data."
community_bee_welcome_messages_lang,community_bee_welcome_message_id,int,NO,MUL,,,community_bee_welcome_messages,id,,10.0,0.0,"The community_bee_welcome_message_id column serves as a foreign key that links translated welcome messages to their original base message in the parent table. When writing queries, use this column to join with the main welcome messages table or to filter specific translations, noting that it's a required field (non-nullable) and is indexed for efficient querying."
community_bee_welcome_messages_lang,l_content,varchar(140),NO,,,,,,140.0,,,"The l_content column stores the translated text content of community welcome messages, with a maximum length of 140 characters. This column is required (non-nullable) and contains the actual localized welcome message text that will be displayed to users based on their language preference."
community_event_email_templates,community_event_email_templates_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_event_email_templates_id is the primary key column that uniquely identifies each email template-to-event association record in the community_event_email_templates table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific template-event associations."
community_event_email_templates,type,"enum('confirmation','reminder','post_visit','')",NO,,,,,,12.0,,,"The 'type' column in the community_event_email_templates table specifies the purpose or timing of an email template in relation to a community event, using one of three predefined values: 'confirmation', 'reminder', or 'post_visit'. When writing SQL queries, this column can be used to filter or categorize email templates based on when they should be sent in the event communication lifecycle (e.g., SELECT * FROM community_event_email_templates WHERE type = 'reminder')."
community_event_email_templates,days,int,YES,,,,,,,10.0,0.0,"The 'days' column in the community_event_email_templates table specifies the number of days before or after an event when a particular email template should be sent. This integer value helps determine the timing of automated event communications, where positive values indicate days before the event and negative values represent days after the event."
community_event_email_templates,hours,int,YES,,,,,,,10.0,0.0,"The 'hours' column in the community_event_email_templates table specifies the number of hours before or after an event when a particular email template should be sent. This timing information helps control when event-related emails are automatically dispatched to participants, making it a crucial parameter for scheduling automated event communications."
community_event_email_templates,email_template_id,int,YES,MUL,,,email_template,email_template_id,,10.0,0.0,"The email_template_id column in the community_event_email_templates table is a foreign key that references the ID of an email template used for event communications. When writing SQL queries, this column can be used to join with the email templates table to access template content and settings, or to filter/group event-related communications by specific template types."
community_event_email_templates,community_events_id,int,YES,MUL,,,community_events,community_events_id,,10.0,0.0,"The community_events_id column in the community_event_email_templates table serves as a foreign key that references specific community events, linking them to their associated email templates. When writing SQL queries, this column can be used to join with the community events table or filter email template records for specific events, making it particularly useful for retrieving or managing email communications related to particular community events."
community_event_email_templates,scheduled_events_id,int,YES,MUL,,,scheduled_events,scheduled_events_id,,10.0,0.0,"The `scheduled_events_id` column in the `community_event_email_templates` table is a foreign key that references specific scheduled events for which email templates are configured. When writing SQL queries, use this column to join with the scheduled events table or to filter email template associations for particular scheduled events, making it useful for retrieving or managing event-specific email communication settings."
community_event_email_templates,active,tinyint,NO,,,0,,,,3.0,0.0,"The 'active' column in the community_event_email_templates table is a required boolean flag (stored as tinyint) that indicates whether an email template association is currently in use for event communications. When querying this table, use this column to filter for active template associations (WHERE active = 1) or to exclude inactive ones (WHERE active = 0)."
community_event_email_templates,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in the community_event_email_templates table is a required tinyint field that indicates the current state of the email template-event association. When writing SQL queries, use this column to filter or check whether specific event-email template relationships are active, disabled, or in other defined states (typically using values like 0, 1, etc.)."
community_event_email_templates,post_visit_form,text,YES,,,,,,65535.0,,,"The `post_visit_form` column in the `community_event_email_templates` table stores text content related to forms or surveys that are sent to participants after an event. This column can be used in SQL queries to retrieve or filter event templates based on their post-event feedback form content, and being nullable means not all event communications require a post-visit form."
community_event_email_templates,email_schedule_id,int,YES,MUL,,,email_schedule,email_schedule_id,,10.0,0.0,"The email_schedule_id column in the community_event_email_templates table is a foreign key that references the timing and frequency settings for when event-related emails should be sent. When writing queries, this column can be used to join with an email schedules table to determine when specific event communications should be triggered, and it accepts NULL values for cases where scheduling information is not required."
community_event_sub_types,community_event_subtype_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_event_subtype_id is the primary key column in the community_event_sub_types table, uniquely identifying each event subtype record with an integer value. This column is commonly used in JOIN operations to connect with other tables (like community_events and scheduled_events) and is essential for querying specific event subtypes or filtering event data based on their detailed classifications."
community_event_sub_types,community_events_id,int,NO,MUL,,,community_events,community_events_id,,10.0,0.0,"The community_events_id column in the community_event_sub_types table serves as a foreign key that references the primary key in the main community_events table, establishing a relationship between event categories and their subtypes. This column is essential for joining queries that need to connect specific event subtypes with their parent event categories, and being non-nullable ensures that every subtype must be associated with a valid event category."
community_event_sub_types,name_en,varchar(255),NO,,,,,,255.0,,,"The name_en column in the community_event_sub_types table stores the English-language name or label for each event subtype, with a maximum length of 255 characters. This required field (non-nullable) should be used when querying or displaying the specific subcategory of community events in English, making it useful for filtering, grouping, or displaying event subtypes in user interfaces or reports."
community_event_sub_types,name_fr,varchar(255),NO,,,,,,255.0,,,"The name_fr column stores the French language name or title of community event subtypes, requiring a non-null varchar value up to 255 characters. This column should be used when displaying or filtering event subtypes in French-language contexts, making it essential for multilingual support in queries involving community event classifications."
community_event_sub_types,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in the community_event_sub_types table is a required tinyint field that indicates the current state or condition of an event subtype (e.g., active, inactive, archived). When writing SQL queries, this column can be used to filter event subtypes based on their operational status, ensuring that only relevant subtypes are included in event classification and organization."
community_events,community_events_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_events_id is the primary key column in the community_events table, serving as a unique identifier for each community event record. This non-nullable integer column is essential for establishing relationships with related tables and should be referenced when joining with child tables that contain specific event details like email templates, attachments, media, FAQs, testimonials, and waitlists."
community_events,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the community_events table stores the descriptive title or name of each community event as a variable-length text string (up to 255 characters). When writing SQL queries, this column can be used to search, filter, or display event names, making it particularly useful for queries that need to present human-readable event information or perform text-based searches on event titles."
community_events,short_description,text,YES,,,,,,65535.0,,,"The short_description column in the community_events table contains a brief text summary or overview of each community event, making it useful for displaying event previews or quick event descriptions in search results. When querying this column, it can be used to filter events based on keywords or to provide concise event information without retrieving the full event details."
community_events,default_duration,int,NO,,,0,,,,10.0,0.0,"The default_duration column in the community_events table stores the standard length of time (likely in minutes) for which a community event is scheduled to run. This required integer field helps in automated scheduling and resource allocation, serving as the baseline duration when creating new event instances or calculating time slots in the scheduling system."
community_events,default_location,int,YES,,,,,,,10.0,0.0,"The default_location column in the community_events table stores an integer value that references a predefined location where the community event typically takes place. When querying event locations, this column can be used as a fallback or default value when a specific location hasn't been assigned, making it useful for filtering events by their standard venue or for location-based reporting."
community_events,default_price,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The default_price column in the community_events table stores the standard monetary cost (with 2 decimal places) for participating in a community event, though this value can be NULL if the event is free or the price is yet to be determined. When writing SQL queries, this column can be used for filtering events by price range, calculating total revenue projections, or finding free events (WHERE default_price IS NULL), and should be handled with decimal precision to maintain accurate financial calculations."
community_events,carousel_photos_title,varchar(255),YES,,,,,,255.0,,,"The carousel_photos_title column stores descriptive titles or captions for photos that are displayed in a carousel-style presentation format for community events. This optional text field (up to 255 characters) helps provide context and descriptions for event-related images, making it useful in queries where you need to retrieve or filter events based on their visual content descriptions."
community_events,carousel_photos_description,text,YES,,,,,,65535.0,,,"The carousel_photos_description column in the community_events table stores descriptive text that explains or provides context for the photo carousel associated with a community event. This optional text field can be used in SQL queries to search for events based on their visual content descriptions or to retrieve accessibility-friendly descriptions of event photo galleries, making it particularly useful for queries that need to match events based on their visual content descriptions or generate accessible event listings."
community_events,video_title,varchar(255),YES,,,,,,255.0,,,"The video_title column in the community_events table stores the display name or heading for any video content associated with a community event, with a maximum length of 255 characters. When writing queries involving video content for community events, this optional field can be used to filter, sort, or display video-related information, though its nullable property means you should handle potential NULL values appropriately in your queries."
community_events,video_description,text,YES,,,,,,65535.0,,,"The video_description column in the community_events table stores detailed textual descriptions or transcripts related to video content associated with community events. When writing SQL queries, this optional (nullable) text field can be used to search for events based on their video content descriptions or to retrieve supplementary information about event videos, making it particularly useful for content filtering and search functionality."
community_events,video_url_en,text,YES,,,,,,65535.0,,,"The video_url_en column in the community_events table stores the English-language video URL associated with a community event, typically containing links to promotional videos, recordings, or live streams. This optional text field can be used in SQL queries to retrieve or filter events based on their video content availability, and is particularly useful when building event detail pages or media galleries that need to display event-related videos."
community_events,video_url_fr,text,YES,,,,,,65535.0,,,"The video_url_fr column in the community_events table stores the French-language video URL associated with a community event, allowing for multilingual video content accessibility. When querying this column, you can use it to retrieve or filter French video resources for events, though be aware that the field may contain NULL values since it's optional."
community_events,internal_notes,text,YES,,,,,,65535.0,,,"The internal_notes column in the community_events table stores private, administrative text notes and comments about community events that are intended for internal staff reference only. This free-form text field can be used to store important behind-the-scenes details, planning notes, or administrative observations that shouldn't be displayed publicly, and since it's nullable, notes are optional for each event record."
community_events,description,text,YES,,,,,,65535.0,,,"The 'description' column in the community_events table stores detailed text descriptions of community activities and programs, providing comprehensive information about what each event entails. This nullable text field can be used in SQL queries to search for events based on their content or to retrieve detailed event information, making it particularly useful for filtering events based on keywords or generating event listings with full descriptions."
community_events,add_carousel_photos,tinyint,NO,,,0,,,,3.0,0.0,"The add_carousel_photos column is a boolean flag (stored as tinyint) that indicates whether an event should include carousel photos in its display or presentation. When querying community events that need photo carousel functionality, filter using this column where add_carousel_photos = 1 for events with carousel photos enabled, or add_carousel_photos = 0 for events without this feature."
community_events,add_video,tinyint,NO,,,0,,,,3.0,0.0,"The add_video column is a boolean flag (stored as a tinyint) that indicates whether a video component should be included with the community event, where 0 typically means no video and 1 means video is enabled. When writing queries, this column can be used in WHERE clauses to filter events based on their video status, such as ""WHERE add_video = 1"" to find all events that include video content."
community_events,status,"enum('published','unpublished','draft','past','cancelled')",YES,,,,,,11.0,,,"The 'status' column in the community_events table is an enumerated field that tracks the current state of each community event using one of five possible values: published, unpublished, draft, past, or cancelled. When writing SQL queries, this column can be used to filter events based on their current status (e.g., `WHERE status = 'published'` to find active events) or to analyze event states across the system."
community_events,availability_setting,"enum('unlimited','date_range','recurring')",NO,,,,,,10.0,,,"The availability_setting column in the community_events table specifies how event availability is managed using one of three possible values: 'unlimited' for events with no time restrictions, 'date_range' for events available within specific start and end dates, or 'recurring' for events that repeat on a schedule. When querying this column, use exact string matches with the enum values to filter events based on their availability type, such as WHERE availability_setting = 'date_range' to find events with specific date constraints."
community_events,event_photo_name,varchar(255),YES,,,,,,255.0,,,"The event_photo_name column stores the filename (up to 255 characters) of the primary photo associated with a community event, allowing for easy reference and display of event imagery. This optional field can be used in SQL queries to retrieve or filter events based on their photo assets, and it's particularly useful when joining with media-related tables or when constructing image URLs for front-end display."
community_events,french,tinyint,YES,,,,,,,3.0,0.0,"The 'french' column in the community_events table is a boolean flag (tinyint) that indicates whether an event is conducted in French (1) or not (0). This column helps filter and identify French-language events within the community events system, which is particularly useful for queries targeting language-specific programming or creating language-filtered event listings."
community_events,english,tinyint,YES,,,,,,,3.0,0.0,"The 'english' column in the community_events table is a boolean flag (tinyint) that indicates whether an event is conducted in English (1) or not (0). This column helps filter and identify English-language events within the community events system, which is particularly useful for multilingual communities or when language-specific event queries are needed."
community_events,billingual,tinyint,YES,,,,,,,3.0,0.0,"The 'billingual' column in the community_events table is a boolean flag (stored as tinyint) that indicates whether an event offers bilingual support or content. When querying events, you can use this column to filter for events that specifically offer (billingual = 1) or don't offer (billingual = 0) bilingual services, making it useful for targeting language-specific event searches."
community_events,category,int,YES,,,,,,,10.0,0.0,"The 'category' column in the community_events table is an integer field that classifies events into different types or groups, helping to organize and filter community activities based on their nature or purpose. This optional field (as indicated by being nullable) can be used in SQL queries to segment events by category, making it useful for filtering events or generating category-based reports and analytics."
community_events,archive,tinyint,YES,,,0,,,,3.0,0.0,"The 'archive' column in the community_events table is a boolean flag (stored as tinyint) that indicates whether an event record has been archived (1) or is still active (0). This column is useful for filtering active versus historical events in queries, allowing applications to hide archived events from default views while maintaining the data for record-keeping purposes."
community_events,virtual_visit_url,text,YES,,,,,,65535.0,,,"The virtual_visit_url column in the community_events table stores the web link or URL where virtual community events can be accessed online. When writing SQL queries, this text field can be used to filter or retrieve events based on their virtual accessibility, with NULL values indicating in-person events or events without virtual components."
community_events_attachments,community_events_attachments_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_events_attachments_id column serves as the primary key for the community_events_attachments table, uniquely identifying each attachment record. This auto-incrementing integer field is essential for referencing specific attachments in SQL queries and maintaining data integrity when joining with other tables."
community_events_attachments,community_events_id,int,YES,MUL,,,community_events,community_events_id,,10.0,0.0,"The community_events_id column in the community_events_attachments table is a foreign key that references the ID of a community event, establishing a link between attachments and their associated community events. When querying, this column can be used to join with the community_events table or to filter attachments belonging to specific community events."
community_events_attachments,scheduled_events_id,int,YES,MUL,,,scheduled_events,scheduled_events_id,,10.0,0.0,"The scheduled_events_id column in the community_events_attachments table is a foreign key that references the ID of an event from the scheduled_events table. This column allows attachments to be associated with specific scheduled events, and since it's nullable, an attachment can exist without being linked to a scheduled event (it might instead be linked to a community event through a different column)."
community_events_attachments,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the community_events_attachments table stores the original filename or display name of the attached file, with a maximum length of 255 characters. This required field helps identify and reference attachments in a human-readable format when querying or displaying attachment information related to community or scheduled events."
community_events_attachments,size,int,NO,,,,,,,10.0,0.0,"The 'size' column in the community_events_attachments table stores the file size (in bytes) of each attachment associated with community or scheduled events. This non-nullable integer field is essential for tracking storage requirements and can be used in queries to filter or sort attachments based on their size, such as finding large attachments that may need attention."
community_events_attachments,uploaded_date,datetime,NO,,,,,,,,,"The uploaded_date column in the community_events_attachments table records the exact date and time when an attachment was uploaded to the system, stored in datetime format. This non-nullable field is essential for tracking the chronological order of attachments and can be useful in SQL queries for filtering attachments by upload time or sorting them chronologically."
community_events_availability,community_events_availability_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_events_availability_id is the primary key column that uniquely identifies each availability record in the community_events_availability table. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific availability entry, but avoid using it for business logic as it's purely a technical identifier."
community_events_availability,community_events_id,int,NO,MUL,,,community_events,community_events_id,,10.0,0.0,"The community_events_id column serves as a foreign key in the community_events_availability table, linking each availability record to its corresponding event in the community_events table. When writing queries, this column is essential for joining the two tables together and filtering availability information for specific events, making it a crucial field for retrieving or analyzing event scheduling details."
community_events_availability,available_from,date,YES,,,,,,,,,"The available_from column in the community_events_availability table stores the start date from which a community event becomes available for attendance or registration. When writing queries, this date field can be used to filter events based on their availability period or to check if events are currently available by comparing against the current date (e.g., WHERE available_from <= CURRENT_DATE)."
community_events_availability,available_until,date,YES,,,,,,,,,"The available_until column in the community_events_availability table stores the end date until which a community event can accept registrations or remain open for participation. When writing SQL queries, this date field can be used to filter active events or check registration deadlines, for example, ""WHERE available_until >= CURRENT_DATE"" would show only events that are still accepting participants."
community_events_availability,recurring_frequency,"enum('weekly','biweekly','monthly')",YES,,,,,,8.0,,,"The recurring_frequency column in the community_events_availability table specifies how often a community event repeats, with possible values of 'weekly', 'biweekly', or 'monthly'. When querying this column, you can use it to filter or group events based on their repetition pattern, and since it's nullable, be sure to handle NULL values appropriately when events don't have a recurring schedule."
community_events_availability,recurring_weekdays,varchar(255),YES,,,,,,255.0,,,"The recurring_weekdays column stores a comma-separated list of weekdays (e.g., ""MON,WED,FRI"") when a community event regularly occurs, allowing for flexible scheduling patterns. When writing SQL queries, you can use string functions like LIKE, FIND_IN_SET, or string splitting operations to check if an event occurs on specific days of the week, or leave it NULL for one-time events."
community_events_availability,recurring_month_day,int,YES,,,,,,,10.0,0.0,"The recurring_month_day column in the community_events_availability table stores the day of the month (1-31) when a recurring event takes place, allowing for the tracking of events that happen on the same day each month. When writing queries, this column can be used to filter or group recurring events by their monthly occurrence date, though its nullable nature means some events may not have a recurring pattern."
community_events_availability,includes_weekends,tinyint,YES,,,,,,,3.0,0.0,"The includes_weekends column is a boolean flag (stored as tinyint) that indicates whether a community event's availability extends to weekend days (1) or is limited to weekdays only (0). When querying event availability, you can use this column to filter events based on weekend inclusion, making it particularly useful for WHERE clauses when searching for events that are specifically available or unavailable on weekends."
community_events_availability,earliest_time,time,YES,,,,,,,,,"The earliest_time column in the community_events_availability table stores the starting time of when a community event becomes available, represented in a standard time format (HH:MM:SS). This column helps define the temporal boundaries for event scheduling and can be used in SQL queries to filter events based on their start times or to ensure events are scheduled within appropriate time windows."
community_events_availability,latest_time,time,YES,,,,,,,,,"The latest_time column in the community_events_availability table stores the ending or closing time of a community event in a standard time format (HH:MM:SS). When writing queries, this column can be used to filter events that end before a specific time or to ensure events don't overlap, and being nullable means some events might not have a defined end time."
community_events_contacts_tags,community_events_contacts_tag_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_events_contacts_tag_id column serves as the primary key identifier for each unique tag association between community institution contacts and their labels. This auto-incrementing integer field ensures each tag relationship can be uniquely identified and referenced within the system, making it essential for JOIN operations and relationship management in queries involving contact tagging."
community_events_contacts_tags,community_institution_contacts_id,int,NO,MUL,,,community_institution_contacts,community_institution_contacts_id,,10.0,0.0,"This column serves as a foreign key that links to the ID of a contact record in the community institution contacts system. When writing queries, use this column to join with the main contacts table or to filter/group contacts based on their tag associations, as it represents the specific contact that a tag is assigned to."
community_events_contacts_tags,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the community_events_contacts_tags table stores the actual text label or tag name (limited to 255 characters) that's associated with community institution contacts. When writing SQL queries, this required field can be used to filter, group, or search for contacts based on their assigned tags, making it useful for queries that need to organize or categorize contacts by their tagged attributes."
community_events_email_logs,community_events_email_logs_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_events_email_logs_id is the primary key column that uniquely identifies each email communication record in the community_events_email_logs table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific email log entries, such as ""WHERE community_events_email_logs_id = [value]""."
community_events_email_logs,destination_user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The destination_user_id column in the community_events_email_logs table is a required integer field that references the ID of the user who received the email notification. When writing queries, this column can be joined with the users table to retrieve recipient details, and since it's indexed (MUL), it's optimized for filtering and joining operations related to email recipients."
community_events_email_logs,email_template_id,int,NO,MUL,,,email_template,email_template_id,,10.0,0.0,"The email_template_id column in the community_events_email_logs table is a required integer field that references the template used to generate each event-related email notification. When writing queries, this column can be used to join with an email templates table to access the actual template content, or to group and analyze which templates are most frequently used for event communications."
community_events_email_logs,sent_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The sent_at column in the community_events_email_logs table records the exact timestamp when each event-related email was sent, automatically populated with CURRENT_TIMESTAMP when the record is created. This timestamp field is mandatory (non-nullable) and can be used for filtering, sorting, or analyzing email communication patterns, such as finding emails sent within specific time periods or tracking communication frequency."
community_events_email_logs,created_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `created_by` column in the community_events_email_logs table is a required integer field that stores the user ID of the person who initiated or sent the email communication. When writing queries, this column can be joined with the users table to retrieve sender information, and since it's indexed (MUL), it's optimized for such join operations and filtering."
community_events_faq,community_events_faq_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_events_faq_id is the primary key column that uniquely identifies each FAQ entry in the community_events_faq table. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference specific FAQ entries associated with community events."
community_events_faq,community_events_id,int,NO,MUL,,,community_events,community_events_id,,10.0,0.0,"The community_events_id column in the community_events_faq table serves as a foreign key that links each FAQ entry to its corresponding event in the community_events table. When writing queries, use this column to join with the community_events table or to filter FAQs for specific events, ensuring that it always contains a valid event ID since it cannot be null."
community_events_faq,question_en,varchar(255),NO,,,,,,255.0,,,"The question_en column stores the English version of frequently asked questions related to community events, with a maximum length of 255 characters. This required field should be used when querying or displaying FAQ questions in English language format, and is commonly paired with its corresponding answer field to provide complete FAQ information for specific community events."
community_events_faq,question_fr,varchar(255),NO,,,,,,255.0,,,"The question_fr column stores the French language version of frequently asked questions about community events, with a maximum length of 255 characters. This required field (non-nullable) should be used when querying or displaying FAQ content in French, and it pairs with other language versions of the same question in the community_events_faq table."
community_events_faq,answer_en,text,NO,,,,,,65535.0,,,"The answer_en column stores the English-language answer text for frequently asked questions related to community events, and it is a required field (non-nullable). When querying this column, you can use it to retrieve or filter FAQ answers for specific events by joining with the community_events table through the community_events_id relationship."
community_events_faq,answer_fr,text,NO,,,,,,65535.0,,,"The answer_fr column stores the French-language version of FAQ answers for community events, containing the complete response text for each frequently asked question. This mandatory (non-nullable) text field should be used when querying or displaying French-language FAQ content, and it works in parallel with other language versions of the same answer that may exist in the table."
community_events_faq,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in the community_events_faq table is a required (non-nullable) tinyint field that indicates the current state of each FAQ entry, likely using predefined numeric codes (e.g., 1 for active, 0 for inactive). When querying FAQs for community events, this column can be used to filter for active or relevant FAQ entries, ensuring only appropriate questions and answers are displayed to event attendees."
community_events_guests,community_events_guests_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_events_guests_id is the primary key column that uniquely identifies each guest registration record in the community_events_guests table. This integer column serves as the main identifier for tracking individual guest attendance entries and is commonly used in JOIN operations to link guest records with related event, user, and transaction data."
community_events_guests,scheduled_events_id,int,YES,MUL,,,scheduled_events,scheduled_events_id,,10.0,0.0,"The scheduled_events_id column in the community_events_guests table is a foreign key that references the ID of a specific scheduled event that a guest is attending. This column enables queries to link guest attendance records with their corresponding event details, making it useful for retrieving information about event participation or analyzing attendance patterns across different events."
community_events_guests,user_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the community_events_guests table is a foreign key that references the unique identifier of users who have registered for or attended community events. This column enables queries to link guest attendance records with user profiles, making it useful for retrieving attendee information or analyzing participation patterns across different events."
community_events_guests,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the community_events_guests table automatically records the timestamp when a guest registration record is first created, using CURRENT_TIMESTAMP as the default value. This non-nullable datetime field is useful for tracking when guests registered for events and can be used in SQL queries for temporal analysis, such as finding recent registrations or analyzing registration patterns over time."
community_events_guests,status,"enum('attending','waitlist','canceled','checked_in','did_not_attend')",NO,,,,,,14.0,,,"The 'status' column in the community_events_guests table is an enumerated field that tracks the current attendance state of each guest for a community event, with possible values being 'attending', 'waitlist', 'canceled', 'checked_in', or 'did_not_attend'. This column is mandatory (non-nullable) and can be used in SQL queries to filter or group guests based on their attendance status, making it particularly useful for attendance reporting and capacity management."
community_events_guests,quantity,int,NO,,,1,,,,10.0,0.0,"The 'quantity' column in the community_events_guests table represents the number of spots or tickets reserved by a guest for a particular community event, with a default value of 1. This integer field is required (non-nullable) and is essential for tracking attendance capacity and managing event bookings, particularly when guests can register multiple spots in a single booking."
community_events_guests,price_paid,int,YES,,,,,,,10.0,0.0,"The `price_paid` column in the `community_events_guests` table stores the amount paid by each guest for their event attendance, represented as an integer value. This column can be used in SQL queries to calculate revenue, analyze pricing patterns, or filter guests based on payment amounts, and since it's nullable, it can also accommodate scenarios where payment information isn't available or applicable (such as free events or pending payments)."
community_events_guests,quantity_checked_in,int,NO,,,0,,,,10.0,0.0,"The `quantity_checked_in` column in the community_events_guests table records the number of people who have physically checked in at the event from a specific guest registration. This integer field, which cannot be null and defaults to 0, is useful for comparing actual attendance against registered quantities and can be used in queries to analyze event attendance rates or track no-shows."
community_events_guests,internal_notes,text,YES,,,,,,65535.0,,,"The `internal_notes` column in the community_events_guests table stores administrative text comments and private remarks about guest attendance or registration that are only visible to event organizers and staff. When writing queries, this column can be used to filter or search for specific administrative annotations about guests, though its nullable nature means you should handle NULL values appropriately in your conditions."
community_events_guests,transaction_id,int,YES,MUL,,,transactions,transaction_id,,10.0,0.0,"The transaction_id column in the community_events_guests table is a foreign key that references the payment or transaction record associated with a guest's event registration. This optional field (nullable) allows tracking of which financial transaction corresponds to each guest's attendance, enabling the system to link attendance records with payment information for reporting and reconciliation purposes."
community_events_guests,lufa_cancelation,tinyint,YES,,,0,,,,3.0,0.0,"The `lufa_cancelation` column in the community_events_guests table is a boolean flag (stored as a tinyint) that indicates whether a guest's event registration was canceled through the LUFA system. When querying this column, use 1 to filter for canceled registrations and 0 for active registrations, with NULL values potentially indicating registrations where the cancelation status is unknown or not applicable."
community_events_lang,community_events_lang_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_events_lang_id is the primary key column that uniquely identifies each language-specific translation record for community events. When writing SQL queries, use this column for precise record selection or joins with related tables, particularly when you need to track or reference specific translations within the multilingual event system."
community_events_lang,community_events_id,int,NO,MUL,,,community_events,community_events_id,,10.0,0.0,"The community_events_id column serves as a foreign key in the community_events_lang table, linking each translation record to its corresponding event in the main community_events table. When writing queries, use this column to join the tables and retrieve language-specific event details, for example: ""SELECT * FROM community_events_lang WHERE community_events_id = [specific_event_id]"" or in joins like ""JOIN community_events_lang ON community_events.id = community_events_lang.community_events_id""."
community_events_lang,lang_id,varchar(20),NO,,,en,,,20.0,,,"The lang_id column in the community_events_lang table stores the language identifier (e.g., 'en' for English) for each event translation, using a varchar(20) format. This required field is essential for filtering and retrieving event content in specific languages, making it a key component in queries where language-specific event information needs to be accessed."
community_events_lang,l_name,varchar(255),YES,,,,,,255.0,,,"The l_name column in the community_events_lang table stores the localized (translated) name or title of a community event in different languages. When writing SQL queries, this column can be used to retrieve or filter event names in specific languages, typically in conjunction with a language identifier column and the community_events_id to match with the main event record."
community_events_lang,l_description,text,YES,,,,,,65535.0,,,"The l_description column in the community_events_lang table stores the translated or localized long-form description of community events in different languages. When writing queries, this column can be joined with community_events using community_events_id to retrieve language-specific event descriptions, and since it's nullable, you should consider using LEFT JOINs or NULL checks when this field isn't required."
community_events_lang,l_carousel_photos_title,varchar(255),YES,,,,,,255.0,,,"The l_carousel_photos_title column stores localized titles for photo carousel displays associated with community events, supporting multiple language versions of the same event's photo gallery headings. This column can be used in SQL queries to retrieve or filter language-specific carousel titles, and its nullable property allows for cases where certain language versions may not have a specified carousel title."
community_events_lang,l_carousel_photos_description,text,YES,,,,,,65535.0,,,"The l_carousel_photos_description column stores localized descriptive text for photo carousel images associated with community events, supporting multiple language versions of the same event's photo descriptions. This text field can be used in queries to retrieve language-specific image descriptions for event carousels, and should be joined with the community_events table using community_events_id when building multilingual event displays."
community_events_lang,l_video_title,varchar(255),YES,,,,,,255.0,,,"The l_video_title column stores the localized (translated) title of a video associated with a community event, supporting up to 255 characters. This column is optional (nullable) and should be used in queries when you need to retrieve or filter event video titles in specific languages, working in conjunction with the language identifier in the same table."
community_events_lang,l_video_description,text,YES,,,,,,65535.0,,,"The l_video_description column stores localized (translated) descriptions of video content associated with community events in different languages. This text field can be used to provide detailed, language-specific explanations of event-related videos, and since it's nullable, not all event translations require a video description."
community_events_lang,l_short_description,text,YES,,,,,,65535.0,,,"The l_short_description column in the community_events_lang table stores localized brief descriptions of community events in different languages, with each record corresponding to a specific language version of an event. When querying this column, it should typically be used alongside a language identifier to retrieve the appropriate translated short description for the desired locale, and it can be NULL if a brief description isn't available in a particular language."
community_events_lang,l_category,int,YES,,,,,,,10.0,0.0,"The l_category column in the community_events_lang table stores the translated/localized category identifier for community events in different languages. When writing SQL queries, this integer column can be used to filter or group events by their localized categories, and since it's nullable, queries should handle potential NULL values appropriately."
community_events_lang,l_virtual_visit_url,text,YES,,,,,,65535.0,,,"The l_virtual_visit_url column stores localized URLs for virtual or online access to community events, allowing the URL to be customized for different language versions of the same event. This text field can contain complete web addresses for virtual event participation, and being nullable means that not all events require a virtual visit option."
community_events_lang,l_virtual_visit_url_billingual,text,YES,,,,,,65535.0,,,"This column stores bilingual URLs or web links for virtual visits related to community events, allowing organizers to provide access points in multiple languages. The text field can accommodate long URLs and is optional (nullable), making it suitable for events that may or may not have virtual components."
community_events_media,community_events_media_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_events_media_id is the primary key column that uniquely identifies each media file entry in the community_events_media table. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference specific media attachments associated with community events."
community_events_media,community_events_id,int,NO,MUL,,,community_events,community_events_id,,10.0,0.0,"The community_events_id column in the community_events_media table serves as a foreign key that links media files to their corresponding community events. When writing SQL queries, use this column to join with the community_events table or to filter media files associated with specific events, such as ""SELECT * FROM community_events_media WHERE community_events_id = [specific_event_id]""."
community_events_media,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the community_events_media table stores the original filename or display name of media files associated with community events, with a maximum length of 255 characters. This required field (non-nullable) can be used in SQL queries to search, filter, or display media file names, making it useful for queries that need to locate specific media assets or generate user-facing media listings."
community_events_media,size,int,NO,,,,,,,10.0,0.0,"The 'size' column in the community_events_media table stores the file size of each media attachment in bytes, making it useful for tracking storage requirements and implementing file size validations. This non-nullable integer field can be used in queries to filter or sort media files by their size, such as finding large attachments that might need optimization or ensuring files meet size limits."
community_events_media,type,varchar(255),NO,,,,,,255.0,,,"The 'type' column in the community_events_media table specifies the format or category of the media file (e.g., 'image', 'video', 'document') and is required for all entries. When querying this column, you can use it to filter or group media files by their type, which is particularly useful when you need to retrieve specific kinds of media attachments for community events."
community_events_media,carousel_order,int,NO,,,,,,,10.0,0.0,"The carousel_order column is a required integer field that determines the display sequence of media files when shown in a carousel or slideshow format for a community event. This ordering system helps maintain a consistent and intentional presentation of multiple media items associated with the same event, where lower numbers typically indicate earlier positions in the sequence."
community_events_testimonials,community_events_testimonials_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_events_testimonials_id is the primary key column that uniquely identifies each testimonial record in the community_events_testimonials table. This auto-incrementing integer serves as the main identifier when joining testimonial data with related event and institution information, and should be referenced when querying specific testimonial entries."
community_events_testimonials,community_events_id,int,NO,MUL,,,community_events,community_events_id,,10.0,0.0,"The community_events_id column in the community_events_testimonials table serves as a foreign key that links each testimonial to its corresponding event in the community_events table. When writing SQL queries, use this column to join with the community_events table to access event details associated with specific testimonials, or to filter testimonials by event-specific criteria."
community_events_testimonials,testimonial_en,text,NO,,,,,,65535.0,,,"The testimonial_en column stores the English-language version of participant feedback or testimonials about community events as text content. As a required field (non-nullable), it must contain the actual testimonial text when creating records, and it can be used in queries to search for specific feedback content or analyze participant sentiments about events."
community_events_testimonials,testimonial_fr,text,NO,,,,,,65535.0,,,"The testimonial_fr column stores the French-language version of participant testimonials and feedback about community events, ensuring bilingual documentation of event experiences. As a required (non-nullable) text field, it must contain the French translation of each testimonial, making it essential for queries that need to retrieve or analyze French-language feedback about community events."
community_events_testimonials,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the community_events_testimonials table stores the name of the person or representative who provided the testimonial about a community event, with a maximum length of 255 characters. This optional field (as indicated by being nullable) can be used in SQL queries to filter, group, or display testimonial sources, helping identify who provided specific feedback about events."
community_events_testimonials,community_institution_id,int,YES,MUL,,,community_institutions,community_institution_id,,10.0,0.0,"The community_institution_id column in the community_events_testimonials table is a foreign key that references the organization or institution providing the testimonial. When writing queries, this column can be used to join with the community_institutions table to retrieve details about the organization giving feedback, or to filter testimonials by specific institutions."
community_events_testimonials,date,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The 'date' column in the community_events_testimonials table records the timestamp when a testimonial or feedback was submitted, automatically populated with the current timestamp when a record is created. When querying testimonials, this column can be used to filter or sort feedback by submission time, helping track the chronological order of participant responses for community events."
community_events_testimonials,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in community_events_testimonials is a required tinyint field that indicates the current state of a testimonial (e.g., pending, approved, rejected). When querying testimonials, this column can be used to filter records based on their approval status, helping to distinguish between published and unpublished testimonials in the system."
community_events_waitlist,community_events_waitlist_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_events_waitlist_id is the primary key column that uniquely identifies each waitlist entry in the community_events_waitlist table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific waitlist entries, but avoid using it for business logic as it's purely a technical identifier."
community_events_waitlist,community_events_id,int,NO,MUL,,,community_events,community_events_id,,10.0,0.0,"The community_events_id column in the community_events_waitlist table is a required foreign key that references the primary event record in the community_events table. When writing queries, use this column to join with the community_events table to access event details, or to filter/group waitlist entries by specific events."
community_events_waitlist,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the community_events_waitlist table is a required foreign key that references the unique identifier of a user who has been added to an event's waitlist. When writing SQL queries, this column can be used to join with the users table to access waitlisted user details or to filter/group waitlist entries by specific users."
community_institution_contacts,community_institution_contacts_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_institution_contacts_id is the primary key column that uniquely identifies each contact record in the community_institution_contacts table. This integer field serves as the main identifier for linking contact relationships between users and institutions, and should be referenced when joining with related tables that track scheduled contacts or event contact tags."
community_institution_contacts,community_institution_id,int,YES,MUL,,,community_institutions,community_institution_id,,10.0,0.0,"The community_institution_id column in the community_institution_contacts table is a foreign key that references the ID of a community institution, establishing a link between contacts and their associated institutions. This integer field is indexed (MUL) and nullable, allowing for flexible relationship mapping between users and institutions while enabling efficient queries that filter or join based on institutional associations."
community_institution_contacts,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the community_institution_contacts table is a required integer field that identifies the specific user involved in an institutional contact relationship. This column serves as a foreign key (indicated by MUL key type) linking to the users table, enabling queries to join user information with their institutional contact records and related interactions."
community_institution_contacts,internal_notes,text,YES,,,,,,65535.0,,,"The internal_notes column in the community_institution_contacts table stores free-form text notes and comments about the contact relationship between users and institutions, intended for internal reference and documentation. This optional field can be used in SQL queries to search for or filter contacts based on specific internal annotations or remarks, typically using LIKE or ILIKE operators for text pattern matching."
community_institution_contacts,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the community_institution_contacts table automatically records the timestamp when a contact record between a user and institution is first created, using CURRENT_TIMESTAMP as the default value. This non-nullable timestamp field is useful for tracking when relationships were established and can be used in SQL queries for temporal analysis, filtering contacts by creation date, or ordering results chronologically."
community_institution_contacts,archive,tinyint,YES,,,0,,,,3.0,0.0,"The `archive` column in the community_institution_contacts table is a boolean flag (stored as tinyint) that indicates whether a contact record has been archived (1) or is active (0). When querying for current/active institutional contacts, include ""WHERE archive = 0"" in your SQL conditions to exclude archived records."
community_institution_scheduled_contacts,community_institution_scheduled_contact_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_institution_scheduled_contact_id is the primary key column that uniquely identifies each scheduled contact event between a community institution and its contact. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific scheduled contact events, such as ""WHERE community_institution_scheduled_contact_id = [value]""."
community_institution_scheduled_contacts,community_institution_contacts_id,int,YES,MUL,,,community_institution_contacts,community_institution_contacts_id,,10.0,0.0,"The community_institution_contacts_id column serves as a foreign key that references specific contact records from the community_institution_contacts table. This column is used to link contact information to scheduled events, making it essential for queries that need to retrieve or analyze interactions between institutions and their contacts, such as filtering events by contact or aggregating contact-related event data."
community_institution_scheduled_contacts,scheduled_event_id,int,YES,MUL,,,scheduled_events,scheduled_events_id,,10.0,0.0,"The scheduled_event_id column in the community_institution_scheduled_contacts table is a foreign key that references a specific scheduled event record, linking it to a contact interaction. This column helps track when and how institutions interact with their contacts by connecting contact records to scheduled events, and its nullable property allows for temporary or draft contact records without an associated event."
community_institutions,community_institution_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_institution_id is the primary key column in the community_institutions table, uniquely identifying each institution (such as schools, community centers, or organizations) in the system. When writing SQL queries, use this column to join with related tables or to filter specific institutions, as it serves as the main reference point for all institution-related data across the database."
community_institutions,institution_name,varchar(255),NO,,,,,,255.0,,,"The institution_name column in the community_institutions table stores the official name of each participating institution (like ""Lincoln High School"" or ""Downtown Community Center"") as a text string up to 255 characters. This required field serves as the primary identifier for human readers and should be used in SELECT statements when you need to display or filter by the institution's name, particularly in JOIN operations with related event and contact tables."
community_institutions,address,varchar(255),YES,,,,,,255.0,,,"The 'address' column in the community_institutions table stores the physical location or mailing address of participating institutions as a text string up to 255 characters long. This optional field can be used in SQL queries to filter or group institutions by location, support geographic analysis, or generate mailing lists for communication purposes."
community_institutions,office_no,varchar(15),YES,,,,,,15.0,,,"The office_no column in the community_institutions table stores the office or unit number identifier for participating institutions, using a variable-length string format that can accommodate up to 15 characters. This optional field (as indicated by being nullable) can be used to specify specific office locations or department numbers within larger institutions, which is helpful when querying or filtering institutions based on their physical location or organizational structure."
community_institutions,accessibility_info,text,YES,,,,,,65535.0,,,"The accessibility_info column stores detailed text descriptions of an institution's accessibility features, accommodations, and facilities (such as wheelchair ramps, elevators, or assistive technologies). When writing SQL queries, this column can be used to filter or search for institutions based on specific accessibility requirements, though its nullable nature means you should handle NULL values appropriately in your queries."
community_institutions,internal_notes,text,YES,,,,,,65535.0,,,"The internal_notes column in the community_institutions table stores free-form text notes and comments about partner institutions that are intended for internal staff reference only. This field can be used to record important administrative details, historical interactions, or special considerations about an institution, and since it's nullable, not every institution record requires notes."
community_institutions,status,tinyint,YES,,,0,,,,3.0,0.0,"The 'status' column in the community_institutions table is a tinyint field that indicates the current operational state or participation level of an institution in community programs (where common values might be 0 for inactive, 1 for active, etc.). When writing SQL queries, this column can be used to filter institutions based on their current status, such as selecting only active institutions or excluding those that are no longer participating in community programs."
community_messages,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the community_messages table, uniquely identifying each message or announcement posted within the community platform. When writing SQL queries, this column can be used for precise message lookups, joining with related tables, or filtering specific messages, and its non-nullable integer type ensures data integrity and efficient indexing."
community_messages,author_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The author_id column in the community_messages table is a required integer field that identifies which user created each message, linking directly to the user_id in the users table through a foreign key relationship. When writing queries, you can use this column to join with the users table to access author information or to filter/group messages by their authors."
community_messages,body,varchar(200),NO,,,,,,200.0,,,"The 'body' column in the community_messages table stores the actual text content of messages and announcements posted by users, with a maximum length of 200 characters. This required field (non-nullable) can be used in SQL queries to search for specific message content, filter messages based on text patterns, or display message contents to users."
community_messages,sent_at,datetime,NO,,,,,,,,,"The sent_at column in the community_messages table records the exact date and time when each message was posted to the community platform. This non-nullable datetime field is essential for chronological sorting and filtering of messages, and can be used in SQL queries to find messages within specific time periods or to order messages by their posting time."
community_pool_campaigns,community_pool_campaign_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The community_pool_campaign_id is the primary key column that uniquely identifies each fundraising campaign in the community_pool_campaigns table. This integer column should be used in WHERE clauses and JOIN conditions when you need to reference specific campaigns or link to related tables that contain campaign-specific information.
community_pool_campaigns,title_fr,text,NO,,,,,,65535.0,,,The title_fr column stores the French-language title or name of each community pool fundraising campaign as mandatory text data. This column should be used when displaying or filtering campaign information for French-speaking users or when implementing multilingual functionality in queries.
community_pool_campaigns,message_fr,text,NO,,,,,,65535.0,,,"The message_fr column stores the French-language version of the campaign's descriptive message or promotional text, ensuring French-speaking users can understand the fundraising initiative's details. This required (non-nullable) text field should be included in queries when displaying campaign information to French-language users or when implementing multilingual campaign displays."
community_pool_campaigns,title_en,text,NO,,,,,,65535.0,,,"The title_en column stores the English-language title or name of each community pool fundraising campaign as text, and it is a required field (non-nullable). When querying this column, you can use it to search for or filter specific campaigns by their English titles, such as ""SELECT * FROM community_pool_campaigns WHERE title_en LIKE '%renovation%'"" to find campaigns related to pool renovations."
community_pool_campaigns,message_en,text,NO,,,,,,65535.0,,,"The message_en column stores the English-language description or promotional message for each community pool fundraising campaign, providing essential campaign details and context for potential donors. This required text field should be referenced when querying for campaign messaging content or when displaying campaign information to English-speaking users."
community_pool_campaigns,link,text,NO,,,,,,65535.0,,,"The 'link' column in the community_pool_campaigns table stores the URL or web address associated with each fundraising campaign, providing direct access to the campaign's online presence or donation page. This required (non-nullable) text field is essential for connecting potential donors to the campaign's digital platform and can be used in queries to retrieve or validate campaign web addresses."
community_pool_campaigns,start_date,timestamp,YES,,,,,,,,,"The start_date column in the community_pool_campaigns table stores the timestamp when each fundraising campaign officially began. This temporal data point can be used in SQL queries to filter campaigns by their launch dates, calculate campaign durations, or analyze fundraising patterns over time."
community_pool_campaigns,end_date,timestamp,YES,,,,,,,,,"The end_date column in the community_pool_campaigns table stores the timestamp indicating when a fundraising campaign is scheduled to conclude or has concluded. This timestamp can be used in SQL queries to filter active versus completed campaigns, calculate campaign durations, or identify upcoming campaign end dates, with NULL values potentially indicating open-ended campaigns without set completion dates."
community_pool_campaigns,default,tinyint,NO,,,,,,,3.0,0.0,"The 'default' column in the community_pool_campaigns table is a required boolean flag (tinyint) that indicates whether a fundraising campaign is designated as the default or primary campaign for a community pool project. When querying this table, you can use this column to filter for or identify the default campaign, typically using WHERE default = 1 to find the primary campaign or WHERE default = 0 for non-default campaigns."
community_pool_campaigns,archive,tinyint,NO,,,,,,,3.0,0.0,"The `archive` column in the community_pool_campaigns table is a boolean flag (stored as tinyint) that indicates whether a fundraising campaign is archived (1) or active (0). When querying for current campaigns, filter for archive = 0, and when accessing historical campaign records, filter for archive = 1."
community_pool_campaigns,scheduled,tinyint,NO,,,,,,,3.0,0.0,"The `scheduled` column in the community_pool_campaigns table is a boolean flag (stored as a tinyint) that indicates whether a fundraising campaign has been officially scheduled or not. When querying this column, use 1 to filter for scheduled campaigns and 0 for unscheduled campaigns, making it useful for finding either planned future campaigns or impromptu fundraising efforts."
community_pool_status,community_pool_status_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_pool_status_id is the primary key identifier for each unique record in the community_pool_status table, used to uniquely track individual pool status entries. When writing queries, this column is essential for joining with related tables and filtering specific pool status records, and should be referenced when a unique identifier for a pool status entry is needed."
community_pool_status,type,tinyint,NO,,,,,,,3.0,0.0,"The 'type' column in the community_pool_status table is a required (non-nullable) tinyint field that categorizes pools into different classifications or types. When querying this column, use numeric values to filter or group pools by their type (e.g., indoor/outdoor, recreational/competitive), which helps in analyzing and managing different categories of community pools."
community_pool_status,default,tinyint,NO,,,,,,,3.0,0.0,"The 'default' column in the community_pool_status table is a required boolean flag (tinyint) that indicates whether a pool record represents the default or standard configuration for the community pool system. When writing queries, this column can be used to filter for or identify the default pool settings (WHERE default = 1) versus customized or special pool configurations."
community_pool_status,selected,tinyint,NO,,,,,,,3.0,0.0,"The 'selected' column in the community_pool_status table is a boolean flag (stored as a tinyint) that indicates whether a pool record is currently selected or active in the system. When querying this column, use 1 to filter for selected pools and 0 for unselected pools, as in `WHERE selected = 1` to find active pool records."
community_pool_status,status_en,text,NO,,,,,,65535.0,,,"The status_en column in the community_pool_status table stores the current operational status of each community pool in English text format (e.g., ""Open"", ""Closed"", ""Under Maintenance""). This required field is essential for filtering and grouping pools based on their operational state, making it useful in queries that need to identify pools with specific status conditions."
community_pool_status,status_fr,text,NO,,,,,,65535.0,,,"The ""status_fr"" column in the community_pool_status table stores the French language version of the pool's current operational status (e.g., ""Ouvert"", ""FermÃ©"", ""En maintenance""). When writing queries that need to display pool status information in French, particularly for bilingual applications or French-language interfaces, this column should be used instead of any English status fields."
community_pool_status,message_en,text,NO,,,,,,65535.0,,,"The message_en column in the community_pool_status table stores English-language status messages or notifications about pool conditions, such as ""Pool closed for maintenance"" or ""Normal operations."" This required (non-nullable) text field provides human-readable explanations that complement other operational metrics and can be used in WHERE clauses or SELECT statements when filtering for specific pool status messages."
community_pool_status,message_fr,text,NO,,,,,,65535.0,,,"The message_fr column in the community_pool_status table stores the French-language version of status messages or announcements related to community pools. This required (non-nullable) text field should be used when querying for French-specific communications about pool conditions, maintenance updates, or operational notices."
community_representative_group,community_representative_group_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_representative_group_id is the primary key column that uniquely identifies each community representative group or organization in the system. When writing SQL queries, use this column to join with the community_representative_group_details table or to specifically identify and filter individual groups, as it serves as the main identifier for all group-related operations."
community_representative_group,name,varchar(50),YES,,,,,,50.0,,,"The 'name' column in the community_representative_group table stores the official or common name of community representative groups or organizations, with a maximum length of 50 characters. When writing SQL queries, this column can be used for searching, filtering, or displaying group names, and since it's nullable, queries should handle potential NULL values appropriately."
community_representative_group,team_size,"float(4,2)",NO,,,0.00,,,,4.0,2.0,"The team_size column in the community_representative_group table stores the number of members in each community representative group as a decimal number with up to 2 decimal places (format: XX.XX). This required field cannot be null and typically starts at 0.00, making it useful for queries that need to filter, sort, or analyze groups based on their membership size."
community_representative_group,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the community_representative_group table automatically records the timestamp when a community representative group record is first created, using the CURRENT_TIMESTAMP as the default value. When writing SQL queries, this non-nullable datetime column can be useful for filtering or sorting groups based on their creation date, such as finding recently added groups or analyzing group registration patterns over time."
community_representative_group_details,community_representative_group_details_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The community_representative_group_details_id is the primary key column that uniquely identifies each member record within community representative groups. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific member details within the community_representative_group_details table."
community_representative_group_details,community_representative_group_id,int,NO,MUL,,,community_representative_group,community_representative_group_id,,10.0,0.0,"The community_representative_group_id column serves as a foreign key in the community_representative_group_details table, linking member records to their associated representative groups. This integer field is required (non-nullable) and is used to establish relationships between members and their groups, making it essential for queries that need to filter, join, or aggregate data based on group membership."
community_representative_group_details,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,The user_id column in the community_representative_group_details table is a required integer field that serves as a foreign key reference to identify individual users who are members of community representative groups. This column is frequently used in JOIN operations to connect user information with their group memberships and can be used in WHERE clauses to filter or lookup specific user's group associations.
community_representative_group_details,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the community_representative_group_details table automatically records the timestamp when a member is added to a community representative group, using CURRENT_TIMESTAMP as the default value. This non-nullable datetime field is useful for tracking membership history and can be used in SQL queries to filter or sort group memberships by their creation date, such as finding recent additions or analyzing membership patterns over time."
community_representative_group_details,phone_number,varchar(32),YES,,,,,,32.0,,,"The phone_number column in the community_representative_group_details table stores contact telephone numbers for members of community representative groups, accepting values up to 32 characters in length. This optional field (as indicated by being nullable) can be used in SQL queries to filter, search, or retrieve contact information for group members, and is typically formatted as a string that may include international codes, area codes, and local numbers."
community_representative_group_details,ext_number,varchar(32),YES,,,,,,32.0,,,"The ext_number column in the community_representative_group_details table stores external reference numbers (up to 32 characters) associated with members of community representative groups. This optional field can be used in SQL queries to filter or identify group members based on their external identification numbers, which might be assigned by external systems or organizations."
community_representative_group_orders_shipped_logs,community_representative_group_orders_shipped_logs_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"This column serves as the primary key identifier for each shipping log entry in the community representative group orders tracking system. It uniquely identifies each shipping record with an auto-incrementing integer value, making it ideal for joining to related tables or filtering specific shipping log entries."
community_representative_group_orders_shipped_logs,community_representative_group_orders_shipped_logs_yearweek,int,NO,MUL,,0,,,,10.0,0.0,"This column stores the year and week number combined as an integer value (e.g., 202352 for the 52nd week of 2023) for when community representative group orders were shipped. It serves as a temporal index for efficient querying of shipping records by time period and is commonly used in WHERE clauses or GROUP BY operations to analyze shipping patterns across different weeks."
community_representative_group_orders_shipped_logs,community_representative_group_orders_shipped_logs_cgrid,int,NO,,,0,,,,10.0,0.0,"This column serves as a reference identifier linking to community representative group orders in the shipping logs table. When writing queries, use this integer column to join with related tables or filter specific group order shipping records, noting that NULL values are not allowed."
community_representative_group_orders_shipped_logs,community_representative_group_orders_shipped_logs_count,int,NO,,,0,,,,10.0,0.0,"This integer column tracks the total number of shipments logged for community representative group orders, serving as a running count of shipping records. It's a required field (non-nullable) that helps monitor shipping volume and can be useful for aggregating shipping activity across different community groups or time periods."
community_representative_group_subs_logs,community_representative_group_subs_logs_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The community_representative_group_subs_logs_id is the primary key identifier for each subscription log entry in the community_representative_group_subs_logs table. This auto-incrementing integer uniquely identifies each subscription-related activity or change for community representative groups and is commonly used in JOIN operations or WHERE clauses when querying specific subscription log records.
community_representative_group_subs_logs,community_representative_group_subs_logs_yearweek,int,NO,MUL,,0,,,,10.0,0.0,"The community_representative_group_subs_logs_yearweek column stores the year and week number combination as an integer value (e.g., 202301 for the first week of 2023) to track when subscription-related activities occurred for community representative groups. This column is indexed (MUL) and required (non-nullable), making it useful for filtering and grouping subscription log entries by time periods, particularly when analyzing subscription trends or changes across specific weeks."
community_representative_group_subs_logs,community_representative_group_subs_logs_cgrid,int,NO,,,0,,,,10.0,0.0,"This column serves as a reference to identify specific community representative groups within the subscription logging system. When writing SQL queries, use this integer column to filter or join subscription-related activities for particular community groups, as it's a required field (non-nullable) that helps track subscription changes and events for each group."
community_representative_group_subs_logs,community_representative_group_subs_logs_type,int,YES,,,,,,,10.0,0.0,"This integer column 'community_representative_group_subs_logs_type' categorizes different types of subscription-related events or changes that occur for community representative groups. When querying subscription logs, use this column to filter or group records based on specific types of subscription activities (e.g., new subscriptions, renewals, cancellations) to analyze patterns or track specific kinds of subscription changes."
community_representative_group_subs_logs,community_representative_group_subs_logs_active,int,YES,,,,,,,10.0,0.0,"This integer column 'community_representative_group_subs_logs_active' indicates whether a subscription log entry represents an active (1) or inactive (0) state for a community representative group's subscription. When querying subscription history or status changes, you can use this column to filter for active/inactive subscription events or analyze transitions between subscription states."
community_representative_group_subs_logs,community_representative_group_subs_logs_count,int,NO,,,0,,,,10.0,0.0,"The community_representative_group_subs_logs_count column is a required integer field that tracks the number of subscription-related events or changes associated with a community representative group. This count field can be used in SQL queries to analyze subscription activity volume, filter for groups with specific numbers of subscription changes, or aggregate subscription event frequencies across different community groups."
companies,company_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The company_id column is the primary key in the companies table, serving as a unique identifier for each business entity in the system. This integer field is non-nullable and is frequently used in JOIN operations to connect company records with related data across multiple tables such as translations, contracts, orders, and violation records."
companies,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the companies table stores the primary business name of each company entity as a required text field with a maximum length of 255 characters. This column is commonly used in SELECT and WHERE clauses when searching for specific companies or displaying company information, and since it's non-nullable, you can rely on it always containing a value."
companies,address,varchar(500),YES,,,,,,500.0,,,"The `address` column in the `companies` table stores the physical or mailing address of each business entity as a text string up to 500 characters in length. Since this field is nullable, SQL queries should handle potential NULL values when filtering or displaying address information, and it's commonly used in JOIN operations with location-based queries or for generating business documents and reports."
companies,postal_code,varchar(50),YES,,,,,,50.0,,,"The postal_code column in the companies table stores the mailing or ZIP code for a company's physical location, accepting up to 50 characters to accommodate various international postal code formats. This field can be used in queries for geographic filtering, address validation, or logistics-related operations, though it's optional as indicated by its nullable property."
companies,city,varchar(255),YES,,,,,,255.0,,,"The 'city' column in the companies table stores the city name where each company is located, accepting text values up to 255 characters in length. Since this field is nullable, it's optional when inserting company records, and queries should handle potential NULL values when filtering or displaying city information."
companies,country,varchar(255),YES,,,,,,255.0,,,"The 'country' column in the companies table stores the country where each business entity is located or registered, using a text format that can hold up to 255 characters. Since this field is nullable, it's important to handle potential NULL values when querying or joining with this column, especially when performing geographic analysis or country-based filtering of companies."
companies,phone,varchar(50),YES,,,,,,50.0,,,"The `phone` column in the `companies` table stores contact telephone numbers for business entities, accepting values up to 50 characters in length and allowing null values when a phone number is not available. When writing queries, this column can be used to search for or filter companies by their phone numbers, though care should be taken to handle potential null values appropriately using IS NULL or IS NOT NULL conditions where necessary."
companies,email,varchar(255),YES,,,,,,255.0,,,"The email column in the companies table stores the primary contact email address for each business entity, accepting values up to 255 characters in length. Since this field is nullable, not all companies are required to have an email address recorded, making it suitable for filtering or joining operations where email communication details are relevant but not mandatory."
companies,contractor,tinyint,NO,,,0,,,,3.0,0.0,"The `contractor` column in the companies table is a boolean flag (stored as tinyint) that indicates whether a company operates as a contractor (1) or not (0). This required field helps distinguish contractor companies from other business entities, which is useful when filtering or segmenting companies based on their business relationship type in queries."
companies,charitable_partner,tinyint,YES,,,0,,,,3.0,0.0,"The charitable_partner column in the companies table is a boolean flag (stored as a tinyint) that indicates whether a company is registered as a charitable partner in the system. When writing queries, you can use this column to filter or identify companies that have charitable partnership status (1) versus those that don't (0), with NULL values indicating that the charitable partnership status is unknown or not applicable."
companies,description,text,YES,,,,,,65535.0,,,"The description column in the companies table stores free-form text content that provides detailed information about each company entity. This optional field can be used in SQL queries to search for companies based on their descriptive content or to retrieve company descriptions for display purposes, commonly used with LIKE operators for partial text matching or in conjunction with full-text search capabilities."
companies,bubble_description,text,YES,,,,,,65535.0,,,"The bubble_description column in the companies table stores a text-based description that provides a brief, concise overview of a company, likely used for tooltips, previews, or summary displays in the user interface. When querying this column, keep in mind that it can contain NULL values, and it's typically used for displaying quick, digestible information about a company rather than detailed descriptions."
companies,logo_url,varchar(255),YES,,,,,,255.0,,,The logo_url column in the companies table stores the web URL or file path (up to 255 characters) where each company's logo image can be accessed. This optional field can be used in queries to retrieve or filter companies based on whether they have logos (IS NOT NULL) or to display company branding in user interfaces.
companies,short_quote_about_program,text,YES,,,,,,65535.0,,,"The short_quote_about_program column in the companies table stores a brief testimonial or statement from the company about their experience with the program or service. When querying this field, it can be used to retrieve marketing-friendly quotes or testimonials, though since it's nullable, always consider handling NULL values appropriately in your queries using COALESCE or IS NULL/IS NOT NULL checks."
companies,quote_about_program,text,YES,,,,,,65535.0,,,"The quote_about_program column in the companies table stores testimonial or feedback text provided by companies about their experience with the program or service. This optional text field can be used in SQL queries to retrieve company testimonials or filter companies based on specific feedback content, making it useful for reporting and marketing purposes."
companies,author_quote_about_program,text,YES,,,,,,65535.0,,,"The author_quote_about_program column in the companies table stores testimonial or quote text from company representatives about their experience with the program or system. This optional text field can be used when querying for company testimonials or when generating marketing materials, and since it's nullable, queries should handle potential NULL values appropriately."
companies,company_url,varchar(255),YES,,,,,,255.0,,,"The company_url column in the companies table stores the website URL or web address associated with each business entity, with a maximum length of 255 characters. This optional field (as indicated by being nullable) can be used in queries to access or filter companies based on their web presence, and is commonly used when displaying company profiles or validating company information."
companies,short_mission_statement,text,YES,,,,,,65535.0,,,"The short_mission_statement column in the companies table stores a brief text description of each company's core purpose or mission. This optional field can be used in SQL queries to filter or display concise mission statements, making it useful for reports, company profiles, or when searching for companies with specific mission focuses."
companies,full_length_mission_statement,text,YES,,,,,,65535.0,,,"The full_length_mission_statement column in the companies table stores the complete, unabridged mission statement text for each business entity. When querying this column, consider using text search functions (like LIKE or ILIKE) to find companies with specific mission statement themes or content, and note that the field can be NULL since not all companies may have formal mission statements."
companies,allotted_members,int,NO,,,0,,,,10.0,0.0,"The allotted_members column in the companies table is a required integer field that specifies the maximum number of members or users allowed for each company. This field is used to enforce membership limits and capacity planning, with a default value of 0, and can be referenced in queries to check or validate company membership constraints."
companies,featured_in_carousel,tinyint,NO,,,0,,,,3.0,0.0,"The featured_in_carousel column is a boolean flag (stored as tinyint) in the companies table that indicates whether a company should be displayed in promotional carousels or featured sections of the application. When querying, use this column with values 0 (not featured) or 1 (featured) to filter or identify companies that should receive special visibility in the user interface."
companies,carousel_photo,text,NO,,,,,,65535.0,,,"The carousel_photo column in the companies table stores a text-based reference (likely a URL or file path) to a primary promotional image used for displaying the company in carousel or slideshow features throughout the system. This required field ensures every company has at least one visual representation, making it useful in queries where company visual content needs to be displayed, such as in company listings or profile pages."
companies,allotted_subscriptions,int,YES,,,0,,,,10.0,0.0,"The allotted_subscriptions column in the companies table represents the number of subscription slots allocated to a company, with NULL values permitted. When writing queries, this integer field can be used to filter or analyze companies based on their subscription capacity, and it's commonly used in business logic calculations related to subscription management and capacity planning."
companies,created_at,date,YES,,,,,,,,,"The created_at column in the companies table records the date when a company record was initially created in the system. This timestamp field can be useful for filtering or analyzing company records by their creation date, such as finding recently added companies or generating reports based on company registration periods."
companiesLang,companyLang_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The companyLang_id column serves as the primary key in the companiesLang table, uniquely identifying each language-specific company content record. When writing SQL queries, use this column for precise record selection or joins with related tables, particularly when you need to reference specific language variants of company information."
companiesLang,company_id,int,NO,MUL,,,companies,company_id,,10.0,0.0,"The company_id column in the companiesLang table serves as a foreign key that links to the primary company record in the main companies table. When writing queries, use this column to join with the companies table or to filter language-specific company content for a particular company, noting that it's a required field (non-nullable) and is indexed for efficient querying."
companiesLang,l_name,text,YES,,,,,,65535.0,,,"The l_name column in the companiesLang table stores the translated company name in different languages, supporting multilingual display of company names across the application. When querying, this column should be joined with the companies table using company_id and filtered by the appropriate language code to retrieve language-specific company names."
companiesLang,l_city,varchar(255),NO,,,,,,255.0,,,"The l_city column in the companiesLang table stores the translated city name where a company is located, supporting multiple language versions of the same city. This column is a required field (non-nullable) that accepts text up to 255 characters and should be used in conjunction with the language identifier in the table to retrieve city names in specific languages."
companiesLang,l_description,text,YES,,,,,,65535.0,,,"The l_description column in the companiesLang table stores detailed textual descriptions of companies in different languages, supporting multilingual content management. When writing queries, this column can be used to retrieve or filter company descriptions in specific languages by joining with the companies table through company_id and including appropriate language filters."
companiesLang,l_bubble_description,text,YES,,,,,,65535.0,,,"The l_bubble_description column in the companiesLang table stores localized tooltip or bubble text descriptions about companies in different languages. This text field can be used to provide brief, language-specific explanatory content that appears when users hover over company information, and since it's nullable, not all language versions require this description."
companiesLang,lang_id,varchar(10),YES,,,,,,10.0,,,"The lang_id column in the companiesLang table stores language identifiers (such as 'en', 'es', 'fr') to indicate which language version each company content record represents. When writing queries, this column can be used to filter or join company translations by specific languages, making it essential for retrieving localized company information in multilingual applications."
companiesLang,l_short_quote_about_program,text,YES,,,,,,65535.0,,,"The l_short_quote_about_program column in the companiesLang table stores brief testimonials or promotional quotes about a company's program in different languages. When writing SQL queries, this text field can be used to retrieve or filter localized program quotes, and since it's nullable, you should handle potential NULL values appropriately using COALESCE or IS NULL/IS NOT NULL conditions."
companiesLang,l_quote_about_program,text,YES,,,,,,65535.0,,,"The l_quote_about_program column in the companiesLang table stores testimonial quotes or program-related statements from companies in different languages, allowing for localized content presentation. When querying this column, you can join it with the companies table using company_id to retrieve language-specific quotes for specific companies, and since it's nullable, be sure to handle NULL values appropriately in your queries."
companiesLang,l_author_quote_about_program,text,YES,,,,,,65535.0,,,"This column stores translated quotes or testimonials from authors about a company's program, allowing for different language versions of the same testimonial content. When querying, this text field can be used to retrieve localized author quotes for specific companies, and since it's nullable, some language variations might not have associated quotes."
companiesLang,l_short_mission_statement,text,YES,,,,,,65535.0,,,"The l_short_mission_statement column in the companiesLang table stores brief mission statements for companies in different languages, with each record corresponding to a specific language version. This text field allows for storing translated versions of a company's concise mission statement, making it useful in queries where you need to retrieve language-specific mission statement content, typically joined with the companies table through company_id."
companiesLang,l_full_length_mission_statement,text,YES,,,,,,65535.0,,,"The l_full_length_mission_statement column stores the complete mission statement text for a company in a specific language, allowing for detailed, untruncated mission statements to be stored in multiple languages. When querying this column, you can join it with the companies table using company_id to retrieve language-specific mission statements, and since it's nullable, be sure to handle NULL values appropriately in your queries."
company_notes,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the company_notes table automatically records the timestamp when each note or comment is initially created, using CURRENT_TIMESTAMP as the default value. This non-nullable timestamp field is useful for filtering, sorting, or analyzing notes by their creation date and time, and can be used in SQL queries to track when documentation was added to the system."
company_notes,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the company_notes table is a required integer field that identifies which user created or owns the note entry. When querying this table, you can use user_id to filter or group notes by their associated users, though there's no formal foreign key relationship enforcing user validity."
company_notes,note,text,NO,,,,,,65535.0,,,"The 'note' column in the company_notes table stores the actual content of company-related notes, comments, and annotations as text data, and it cannot contain NULL values. When querying this column, you can use text-based operations (like LIKE, CONTAINS, or full-text search functions) to search through or filter the note contents, making it useful for retrieving specific company documentation or memos."
company_notes,company_id,int,NO,,,,,,,10.0,0.0,"The company_id column in the company_notes table is a required integer field that identifies which company the note belongs to, even though this table operates as a standalone repository. When querying company_notes, you can use this column to filter or group notes by specific companies, making it essential for retrieving company-specific documentation and memos."
company_notes,company_note_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The company_note_id column serves as the primary key for the company_notes table, uniquely identifying each note or comment entry. This non-nullable integer field should be referenced when querying specific notes or when joining with any future tables that might need to reference individual company notes."
company_notes,visible,tinyint,NO,,,1,,,,3.0,0.0,"The 'visible' column in the company_notes table is a required boolean flag (stored as tinyint) that controls whether a note should be displayed in the system, where 1 typically indicates visible notes and 0 indicates hidden notes. When querying the table, this column can be used to filter notes based on their visibility status, making it useful for showing only active or relevant notes in result sets."
company_projects,company_projects_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The company_projects_id column serves as the primary key identifier for each unique project record in the company_projects table. This non-nullable integer field should be used in WHERE clauses and JOIN conditions when you need to reference specific projects or establish relationships with other tables that contain project-related data.
company_projects,company_projects_name,varchar(255),NO,,,,,,255.0,,,"The company_projects_name column in the company_projects table stores the official names of company projects as text strings up to 255 characters in length. Since this field is marked as NOT NULL, every project record must have a name, making it a reliable field to use in WHERE clauses or JOIN conditions when querying project-related information."
company_projects,company_projects_est_deployment,varchar(255),NO,,,,,,255.0,,,"The company_projects_est_deployment column stores the estimated deployment date or timeframe for company projects as a text string (varchar) with a maximum length of 255 characters. When querying this column, you can use string comparison operators to filter or sort by deployment estimates, and since it's marked as NOT NULL, you can expect every project record to have a deployment estimate value."
company_projects,company_projects_dri,text,NO,,,,,,65535.0,,,The company_projects_dri column in the company_projects table stores text values representing the Directly Responsible Individual (DRI) for each project. This required field (non-nullable) helps identify the primary person accountable for project execution and should be referenced when querying for project ownership or responsibility assignments.
company_projects,company_projects_updated_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The company_projects_updated_at column stores the most recent timestamp when any field in a project record was modified, automatically updating to the current time whenever changes are made. This non-nullable datetime column uses CURRENT_TIMESTAMP to track the last update time, making it useful for queries that need to find recently modified projects or audit changes over time."
company_projects,company_projects_status,tinyint,NO,,,0,,,,3.0,0.0,"The company_projects_status column in the company_projects table is a required (non-nullable) tinyint field that represents the current status of a project using numeric codes. When querying this column, use numeric values to filter or group projects by their status states (e.g., WHERE company_projects_status = 1 or GROUP BY company_projects_status)."
company_projects,company_projects_department,varchar(255),YES,,,,,,255.0,,,"The company_projects_department column in the company_projects table stores the name or identifier of the department responsible for each project, accepting text values up to 255 characters in length. Since this field is nullable, it can be left empty if department assignment is unknown or not applicable, making it suitable for queries that need to filter or group projects by department affiliation."
company_resources,name_en,text,NO,,,,,,65535.0,,,"The name_en column in the company_resources table stores the English language name or description of each company resource, such as ""Dell Laptop XPS 15"" or ""Adobe Creative Suite License."" This required field (non-nullable) should be used when querying or displaying resource names in English-language contexts, suggesting there might be parallel columns for names in other languages."
company_resources,description_en,text,NO,,,,,,65535.0,,,"The description_en column in the company_resources table stores the English-language description of each company resource, providing detailed information about the asset's characteristics, specifications, or purpose. This required (non-nullable) text field should be referenced when querying for detailed information about resources or when filtering assets based on their descriptive content."
company_resources,name_fr,text,NO,,,,,,65535.0,,,"The name_fr column in the company_resources table stores the French language name or description of company assets and resources. This required (non-nullable) text field should be used when displaying or filtering resource information in French-language contexts, making it essential for multilingual asset management and reporting."
company_resources,description_fr,text,NO,,,,,,65535.0,,,"The description_fr column in the company_resources table stores the French-language description of company assets and resources, providing detailed information about equipment, licenses, and facilities in French. This mandatory (non-nullable) text field should be used when querying or displaying resource descriptions for French-speaking users or when multilingual asset documentation is required."
company_resources,last_edited_by_user_id,int,NO,,,,,,,10.0,0.0,"The last_edited_by_user_id column in the company_resources table is a required integer field that stores the user ID of the person who most recently modified each resource record. When writing queries, this column can be used to track modification history or join with a users table to get information about who made the latest changes to resource records."
company_resources,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the company_resources table automatically records the timestamp when a resource entry is first added to the system, using CURRENT_TIMESTAMP as the default value. This non-nullable timestamp field is useful for tracking when assets were initially registered in the inventory system and can be used in SQL queries for auditing purposes or filtering resources based on their creation date."
company_resources,attachment_name_en,text,NO,,,,,,65535.0,,,"The attachment_name_en column in the company_resources table stores the English language name or title of any documents, files, or attachments associated with company resources. This required text field is essential for identifying and referencing resource-related documentation, such as user manuals, warranty documents, or license agreements, and should be used in queries when searching for or organizing resource attachments by their English names."
company_resources,attachment_name_fr,text,NO,,,,,,65535.0,,,"The attachment_name_fr column in the company_resources table stores the French language version of attachment names associated with company resources, ensuring multilingual support for document management. This required (non-nullable) text field should be used when querying or displaying attachment names in French-language contexts or when implementing localization features."
company_resources,status,int,NO,,,1,,,,10.0,0.0,"The 'status' column in the company_resources table is a required integer field that indicates the current state of a company resource (such as active, inactive, under maintenance, etc.). When writing queries, this column can be used to filter resources based on their operational status, with different integer values representing distinct states in the asset lifecycle."
company_resources,company_resource_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The company_resource_id column serves as the primary key in the company_resources table, uniquely identifying each resource asset in the company's inventory system. When writing SQL queries, use this column for precise resource lookups, joining with related tables, or filtering specific assets, as it provides a reliable and unique reference point for each resource record."
company_resources,archive,tinyint,NO,,,0,,,,3.0,0.0,"The `archive` column in the company_resources table is a binary flag (tinyint) that indicates whether a resource record is archived (1) or active (0), and it cannot contain NULL values. When querying active resources, filter with `WHERE archive = 0`, and for archived resources, use `WHERE archive = 1`."
compilation_of_recent_orders_per_user,compilation_of_recent_orders_per_user_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The compilation_of_recent_orders_per_user_id column serves as the primary key in the compilation_of_recent_orders_per_user table, uniquely identifying each user's order summary record. When writing SQL queries, use this column for joining to other user-related tables or when you need to filter or group order summaries by specific user identifiers."
compilation_of_recent_orders_per_user,order_id,int,YES,,,,,,,10.0,0.0,"The order_id column in the compilation_of_recent_orders_per_user table stores integer identifiers for individual orders associated with each user's purchasing activity. When querying this table, you can use order_id to filter, group, or join with other order-related tables, though note that it's nullable which means some user records might not have associated orders."
compilation_of_recent_orders_per_user,delivery_date,date,NO,,,,,,,,,"The delivery_date column in the compilation_of_recent_orders_per_user table represents the date when orders were or will be delivered to users, stored in a standard date format. This non-nullable field can be used in SQL queries for date-based filtering, grouping, or analyzing delivery patterns, such as finding orders delivered within specific date ranges or calculating delivery trends over time."
compilation_of_recent_orders_per_user,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the compilation_of_recent_orders_per_user table stores the unique identifier for products that users have purchased, represented as a non-nullable integer value. When querying this table, you can use product_id to filter or group user order data by specific products, making it particularly useful for analyzing purchasing patterns or product-specific metrics at the user level."
compilation_of_recent_orders_per_user,sub_sub_category_id,int,NO,,,,,,,10.0,0.0,"The sub_sub_category_id column in the compilation_of_recent_orders_per_user table represents the most granular product category identifier associated with a user's recent orders. When querying this table, you can use this non-nullable integer column to filter or group user order data by specific product sub-subcategories, enabling detailed analysis of purchasing patterns at the finest category level."
compilation_of_recent_orders_per_user,order_details_id,int,NO,,,,,,,10.0,0.0,"The order_details_id column is a required integer field that uniquely identifies each order details record within the compilation_of_recent_orders_per_user table. When writing SQL queries, this column can be used to join with other order-related tables or as a filtering criterion to analyze specific order details within the user's purchase history."
compilation_of_recent_orders_per_user,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column serves as a unique identifier for each customer in the compilation_of_recent_orders_per_user table, making it essential for joining with other user-related tables or filtering specific customer data. When writing SQL queries, this non-nullable integer column should be used as the primary reference point for user-level analysis and aggregations of recent order patterns."
compilation_of_recent_orders_per_user,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in the compilation_of_recent_orders_per_user table is a required (non-nullable) tinyint field that represents the current state of a user's aggregated order activity. When querying this column, use numeric values to filter or group users based on their order status, with the specific status codes likely representing different states of order activity or user engagement levels."
config,config_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The config_id column serves as the primary key in the config table, uniquely identifying each configuration setting record with an integer value. When writing SQL queries, use this column for precise record selection or joins when referencing specific configuration entries, but note that for most common configuration lookups, you'll likely want to use the configuration key name rather than this internal identifier."
config,option_name,varchar(255),NO,UNI,,,,,255.0,,,"The option_name column in the config table serves as a unique identifier for each configuration setting, storing descriptive names like ""site_title"" or ""default_timezone"" as varchar strings up to 255 characters. Since it has a unique constraint (UNI) and cannot be null, each option_name must be distinct, making it reliable for WHERE clauses when querying specific configuration settings."
config,option_value,text,YES,,,,,,65535.0,,,"The option_value column in the config table stores the actual values of system configuration settings, which can be any text-based data such as feature flags, preferences, or system parameters. When querying this column, you can use string comparison operations to find specific configuration values, and since it's nullable, remember to handle NULL cases appropriately when necessary."
config,created,datetime,NO,,,,,,,,,"The 'created' column in the config table is a mandatory datetime field that records when each configuration setting was initially added to the system. When writing queries, this column can be used to track the chronological order of configuration changes or filter settings based on when they were created, making it useful for auditing and historical analysis of system configurations."
config,updated,datetime,NO,,,,,,,,,"The ""updated"" column in the config table records the timestamp of when each configuration setting was last modified, stored as a datetime value. This non-nullable field is useful for tracking configuration changes over time and can be used in SQL queries to filter or sort configuration entries based on their modification dates."
config,staff_id,int,NO,,,,,,,10.0,0.0,"The staff_id column in the config table is a required integer field that identifies which staff member created or is associated with a particular configuration setting. When querying configuration settings, you can join this column with the staff table to get information about who manages specific system parameters, or filter settings by specific staff members."
contract,contract_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The contract_id column serves as the primary key in the contract table, uniquely identifying each contract record with a non-nullable integer value. This identifier is essential for joining with the custom_rule table and is used to establish relationships between contracts and their specific rules or terms."
contract,created_at,date,NO,,,,,,,,,"The created_at column in the contract table stores the date when a contract was initially created in the system, using a standard date format. This non-nullable field is essential for tracking contract chronology and can be used in SQL queries for filtering contracts by creation date, analyzing contract trends over time, or sorting contracts chronologically."
contract,company_id,int,NO,MUL,,,companies,company_id,,10.0,0.0,"The company_id column in the contract table is a required foreign key that references the companies table, establishing which company owns or is associated with each contract. This column is frequently used in JOIN operations with the companies table to retrieve company details related to contracts, and it's indexed (MUL) to optimize these join operations and lookups."
contract,start_date,date,NO,,,,,,,,,"The start_date column in the contract table represents the official commencement date of a contract between the system and a company, stored in a date format. This mandatory field (non-nullable) is essential for tracking when contracts become active and can be used in SQL queries for date-based filtering, reporting, or calculating contract durations."
contract,end_date,date,NO,,,,,,,,,"The end_date column in the contract table represents the date when a contract expires or terminates, stored in a standard date format. This mandatory field (non-nullable) is essential for tracking contract validity periods and can be used in SQL queries to filter active contracts, identify expiring agreements, or analyze contract durations."
contract,modified_end_date,date,NO,,,,,,,,,"The modified_end_date column in the contract table represents the most current or adjusted end date of a contract agreement, which may differ from the original end date due to amendments or modifications. When writing SQL queries, this mandatory date field should be used to determine the current validity period of contracts and can be particularly useful in filters (WHERE clause) to find active or expired contracts based on their modified end dates."
contract,contract_type,"enum('HD','PUP','Stationary')",NO,,,,,,10.0,,,"The contract_type column in the contract table is a required (non-nullable) enumerated field that specifies the category of contract using one of three possible values: 'HD', 'PUP', or 'Stationary'. When querying contracts, you can filter or group by contract_type to analyze different categories of agreements, for example: SELECT * FROM contract WHERE contract_type = 'HD' or GROUP BY contract_type."
contract,price_per_stop,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The price_per_stop column in the contract table represents the monetary amount charged for each stop or delivery point within a contract agreement, stored as a decimal number with up to 10 digits and 2 decimal places. This required field (non-nullable) defaults to 0.00 and is commonly used in pricing calculations or financial reporting queries where per-stop costs need to be analyzed or aggregated for contract-related transactions."
contract,price_per_km,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The price_per_km column in the contract table stores the agreed-upon rate (in decimal format with 2 decimal places) that will be charged per kilometer for services provided under the contract. This required field represents a crucial pricing component for calculating costs in transportation or distance-based services, with a default value of 0.00, and can be used in SQL queries for price calculations or cost analysis (e.g., SELECT price_per_km * distance AS total_cost FROM contract)."
contract,price_per_box,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The price_per_box column in the contract table stores the agreed-upon price per box/unit for the contract, represented as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). This required field (non-nullable) with a default value of 0.00 is commonly used in pricing calculations and financial reporting queries where per-unit costs need to be analyzed or compared across different contracts."
contract,price_per_order,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The price_per_order column in the contract table stores the fixed price amount (with 2 decimal places) that is charged for each order under a specific contract agreement. This required field represents the monetary value per order and cannot be null, defaulting to 0.00 if not explicitly set, making it useful for financial calculations and reporting in queries where per-order pricing needs to be analyzed."
contract,price_per_pallet,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The price_per_pallet column in the contract table stores the agreed-upon price charged for each pallet as a decimal number with two decimal places, representing currency values (e.g., $50.25). When writing SQL queries, this non-nullable field can be used for calculating total costs, comparing pricing across different contracts, or filtering contracts based on specific price thresholds."
contract,violation_rate,int,NO,,,0,,,,10.0,0.0,"The violation_rate column in the contract table is a required integer field that tracks the rate or frequency of contract violations for each agreement. When writing SQL queries, this column can be used to analyze compliance patterns or filter contracts based on their violation rates, with 0 being the default value indicating no violations."
contract,default_violation_value,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,The default_violation_value column in the contract table represents the standard monetary penalty or fee amount (stored with 2 decimal places) that applies when contract terms are violated. This non-nullable field defaults to 0.00 and should be used in queries when calculating potential violation costs or when filtering contracts based on their violation fee amounts.
contract,status,"enum('Valid','Nullified')",YES,,,Valid,,,9.0,,,"The 'status' column in the contract table is an enumerated field that indicates whether a contract is currently ""Valid"" or has been ""Nullified,"" with ""Valid"" being the default value. When writing SQL queries, this column can be used to filter active contracts (WHERE status = 'Valid') or to identify terminated agreements (WHERE status = 'Nullified'), making it essential for contract lifecycle management queries."
contract,price_per_stationary,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The price_per_stationary column in the contract table stores the fixed price rate (with 2 decimal places) charged for stationary items under each contract agreement. This required field cannot be null and defaults to 0.00, making it essential for calculating costs related to stationary items in contract pricing structures."
contract,price_per_apt,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The price_per_apt column in the contract table stores the agreed-upon price per apartment unit as a decimal number with up to 10 digits total and 2 decimal places. This required field (non-nullable) represents the monetary amount charged for each apartment under the contract terms, defaulting to 0.00 if not specified, and should be used in calculations involving contract pricing or when filtering contracts based on their per-apartment rates."
countries,country_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The country_id column serves as the primary key in the countries table, uniquely identifying each country record with a non-nullable integer value. This column is commonly used in JOIN operations and foreign key relationships when linking country-specific data across different tables in the system."
countries,country_name,varchar(45),NO,,,,,,45.0,,,The country_name column in the countries table stores the official name of each country as a text string with a maximum length of 45 characters and cannot contain NULL values. This column is commonly used in WHERE clauses for filtering country-specific data or in JOIN operations when connecting country information with other tables that reference countries.
countries,lang_code,varchar(5),NO,,,,,,5.0,,,"The lang_code column in the countries table stores the primary or official language code for each country using a standardized format (up to 5 characters). This required field (non-nullable) can be used in SQL queries to filter or join with other language-related data, making it useful for language-specific operations or when displaying country information in different locales."
countries,timezone,varchar(10),NO,,,,,,10.0,,,"The timezone column in the countries table stores the primary time zone identifier for each country as a string value (up to 10 characters) and cannot be null. When querying country data, this column can be used to filter or group countries by their time zones, or to perform time-based calculations that need to account for different geographical regions."
countries,code,varchar(5),YES,,,,,,5.0,,,"The 'code' column in the countries table stores country codes as variable-length strings up to 5 characters, which can be null. This column typically contains standardized country codes (such as ISO codes) and can be used in WHERE clauses or JOIN conditions when linking country-specific data across different tables."
coupon_receivers,coupon_receiver_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The coupon_receiver_id is the primary key column in the coupon_receivers table, uniquely identifying each instance of a coupon being assigned to a user or customer. When writing SQL queries, use this column to join with other tables or to filter specific coupon distribution records, as it serves as the main identifier for each coupon-user relationship."
coupon_receivers,user_id,int,YES,,,,,,,10.0,0.0,"The user_id column in the coupon_receivers table serves as a reference to identify which user or customer received a particular coupon or promotional offer. When writing queries, this column can be used to join with other user-related tables or to filter/group coupon distribution data by specific users, making it useful for analyzing coupon targeting and redemption patterns."
coupon_receivers,first_name,varchar(255),YES,,,,,,255.0,,,"The first_name column in the coupon_receivers table stores the given name of individuals who have received coupons or promotional offers, with a maximum length of 255 characters. This column can be used in SQL queries to filter, sort, or identify coupon recipients by their first name, and since it's nullable, some records may not have a first name value."
coupon_receivers,last_name,varchar(255),YES,,,,,,255.0,,,"The `last_name` column in the `coupon_receivers` table stores the surname or family name of individuals who have received coupons or promotional offers, with a maximum length of 255 characters. This column can be used in SQL queries to filter or group coupon recipients by their last name, though it's worth noting that the field is nullable, meaning some records might not have a last name value."
coupon_receivers,email,varchar(255),YES,,,,,,255.0,,,"The 'email' column in the coupon_receivers table stores the email address of users or customers who have received coupons, using a variable-length string format with a maximum of 255 characters. Since this field is nullable, it can be used in SQL queries to filter or identify coupon recipients by their email addresses, while also accommodating cases where an email address might not be available."
coupon_receivers,custom_message,text,NO,,,,,,65535.0,,,"The custom_message column in the coupon_receivers table stores the personalized text content that was sent to each recipient along with their coupon or promotional offer. This required (non-nullable) text field can be used to filter or analyze the specific messaging used for different promotional campaigns, and it's useful when you need to retrieve or analyze the exact communication sent to customers."
coupon_receivers,sent,tinyint(1),YES,,,,,,,3.0,0.0,"The 'sent' column in the coupon_receivers table is a boolean flag (tinyint(1)) that indicates whether a coupon has been successfully delivered to a user or customer. This column can be used in WHERE clauses to filter for either sent (sent = 1) or unsent (sent = 0) coupons, making it useful for tracking coupon distribution status and identifying any delivery failures."
coupon_receivers,delivery_date,date,YES,,,,,,,,,"The delivery_date column in the coupon_receivers table records the date when a coupon or promotional offer was sent or distributed to a user or customer. This date field can be used in SQL queries to analyze coupon distribution patterns over time or to filter records based on when coupons were delivered, making it useful for tracking promotional campaign timelines and measuring their effectiveness."
coupon_receivers,lang,varchar(255),YES,,,,,,255.0,,,"The ""lang"" column in the coupon_receivers table stores the preferred language or language setting for each coupon recipient, using a varchar format that can hold up to 255 characters. This column can be useful for filtering or segmenting coupon distribution based on language preferences, enabling targeted promotional campaigns for different language groups."
coupons,coupon_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The coupon_id column serves as the primary key in the coupons table, uniquely identifying each coupon record with a non-nullable integer value. When writing SQL queries, use this column for precise coupon lookups, joining with related tables (like redemption records or product associations), and ensuring referential integrity in parent-child coupon relationships."
coupons,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the coupons table stores the human-readable title or identifier for each coupon promotion (e.g., ""Summer Sale 2023"", ""First-Time Customer Discount"") as a required text field with a maximum length of 255 characters. When querying coupons, this column is commonly used in WHERE clauses for searching specific promotions or in SELECT statements to display coupon names to users."
coupons,code,varchar(255),YES,UNI,,,,,255.0,,,"The 'code' column in the coupons table stores unique alphanumeric identifiers for each coupon, serving as a human-readable reference that can be used for coupon redemption and tracking. When writing SQL queries, this column can be used to uniquely identify coupons (due to its UNI key constraint) and is commonly used in WHERE clauses for looking up specific coupons or in JOIN conditions when connecting to redemption records, though it can contain NULL values if needed."
coupons,type,tinyint,YES,,,0,,,,3.0,0.0,"The 'type' column in the coupons table is a tinyint field that categorizes different kinds of coupons (e.g., percentage discount, fixed amount, buy-one-get-one) using numeric codes. When writing SQL queries, this column can be used to filter or group coupons based on their type, and since it's nullable, queries should handle potential NULL values appropriately."
coupons,use_type,tinyint,YES,,,0,,,,3.0,0.0,"The `use_type` column in the coupons table is a tinyint field that specifies how a coupon can be used or redeemed within the system. When querying this column, you should expect values that indicate different usage patterns (likely using 0, 1, 2, etc. to represent different redemption types or restrictions), which helps determine the coupon's application rules in promotional scenarios."
coupons,amount,float,NO,,,,,,,12.0,,"The 'amount' column in the coupons table stores the numerical value of the discount or benefit offered by the coupon, represented as a floating-point number. When writing SQL queries, this non-nullable field can be used to filter, sort, or calculate total discount values, making it essential for operations like finding high-value coupons (e.g., WHERE amount > 50.00) or analyzing discount distributions."
coupons,created,datetime,NO,,,,,,,,,"The 'created' column in the coupons table stores the exact date and time when each coupon record was initially created in the system, using a datetime format. This non-nullable field is commonly used in queries for auditing purposes, filtering coupons by creation date, or analyzing coupon creation patterns over time."
coupons,updated,datetime,YES,,,,,,,,,"The 'updated' column in the coupons table stores the timestamp of when a coupon record was last modified, automatically tracking changes to coupon details, rules, or status. This datetime field helps in auditing coupon modifications and can be useful for filtering or sorting coupons based on their last update time, though it can be null if no updates have been made after the initial creation."
coupons,start_date,date,YES,,,,,,,,,"The start_date column in the coupons table specifies the first date when a coupon becomes valid and can be redeemed by users. When writing SQL queries, this column can be used with date comparison operators (e.g., >=, BETWEEN) to filter active coupons or analyze promotion periods, and since it's nullable, queries should handle NULL values appropriately when checking coupon validity."
coupons,end_date,date,YES,,,,,,,,,"The end_date column in the coupons table specifies the last date when a coupon can be redeemed, marking the expiration of the promotional offer. When querying active coupons, you should compare this column against the current date (e.g., WHERE end_date >= CURRENT_DATE or end_date IS NULL) to find valid promotions, noting that NULL values may indicate coupons without expiration dates."
coupons,max_user_uses,int,YES,,,1,,,,10.0,0.0,"The max_user_uses column in the coupons table specifies the maximum number of times a single user can redeem a particular coupon, with NULL indicating unlimited uses. When writing SQL queries, this column can be used to enforce usage limits per user, such as filtering out coupons that have reached their maximum redemption count through comparisons with actual usage counts from related redemption tables."
coupons,max_uses,int,YES,,,0,,,,10.0,0.0,"The max_uses column in the coupons table specifies the maximum number of times a coupon can be redeemed across all users, with NULL or 0 typically indicating unlimited uses. When writing SQL queries, this column can be used to check coupon availability by comparing against the current number of redemptions or to filter for coupons that still have remaining uses available."
coupons,status,tinyint,YES,,,1,,,,3.0,0.0,"The 'status' column in the coupons table is a tinyint field that indicates the current state of a coupon (e.g., active, inactive, expired, or deleted), allowing for efficient filtering and validation of coupon availability. When writing SQL queries, this column can be used in WHERE clauses to filter coupons based on their operational status, such as ""WHERE status = 1"" to retrieve only active coupons."
coupons,note,varchar(500),YES,,,,,,500.0,,,"The 'note' column in the coupons table stores optional administrative or descriptive text (up to 500 characters) that provides additional context or internal remarks about a coupon. When writing SQL queries, this column can be used for free-text searches to find coupons with specific annotations or comments, though it should not be relied upon for critical business logic since it's nullable and meant for supplementary information."
coupons,staff_id,int,NO,,,,,,,10.0,0.0,"The staff_id column in the coupons table is a required integer field that identifies which staff member created or is responsible for managing the coupon. When writing queries, this column can be used to filter coupons by their associated staff member or join with the staff/employees table to access additional information about the coupon's administrator."
coupons,company_id,int,YES,,,,,,,10.0,0.0,"The company_id column in the coupons table identifies which company or business entity owns or issued the coupon, allowing for multi-tenant coupon management. When querying coupons, this column can be used to filter or group coupons by their issuing company, and it can be joined with a companies table to access additional company information related to the coupon."
coupons,up_to_amount,float,YES,,,0,,,,12.0,,"The `up_to_amount` column in the coupons table specifies the maximum monetary value or ceiling limit for a coupon's discount, stored as a floating-point number. This column is used to cap discount amounts in scenarios where percentage-based discounts need an upper limit, ensuring that even high-value purchases don't receive discounts beyond the specified maximum amount."
coupons,for_new,tinyint,YES,,,0,,,,3.0,0.0,"The `for_new` column in the coupons table is a boolean flag (stored as tinyint) that indicates whether a coupon is exclusively available to new users/customers (1) or not (0). When writing queries, use this column to filter coupons based on new user eligibility, such as `WHERE for_new = 1` to find promotions specifically targeted at new customers."
coupons,referrer_user_id,int,YES,MUL,,,,,,10.0,0.0,"The referrer_user_id column in the coupons table identifies the user who referred or shared the coupon, enabling tracking of coupon distribution through user referrals. When querying, this column can be used to analyze referral patterns or filter coupons based on their origin user, with NULL values indicating coupons that weren't distributed through referrals."
coupons,open_pup,int,YES,,,,,,,10.0,0.0,"The `open_pup` column in the coupons table is an integer field that likely represents a flag or counter related to public visibility or accessibility of a coupon. When writing SQL queries, this column can be used to filter or segment coupons based on their public availability status, though its nullable nature suggests that not all coupons may have this property defined."
coupons,query,text,YES,,,,,,65535.0,,,"The 'query' column in the coupons table stores text-based filtering conditions or rules that determine which products or services the coupon can be applied to. When writing SQL queries, this column can be used to filter or validate coupon applicability by checking its content against product attributes or other criteria, though being nullable means you should handle cases where no specific filtering rules are defined."
coupons,product_id,int,YES,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the coupons table is a foreign key that links a coupon to a specific product for which the coupon can be used, enabling product-specific promotions and discounts. When querying, this column can be used to join with the products table to retrieve product details associated with the coupon, or to filter coupons that are valid for particular products, though the nullable property indicates that some coupons may not be tied to specific products (potentially being store-wide or category-wide promotions)."
coupons,child_coupon_id,int,YES,MUL,,,coupons,coupon_id,,10.0,0.0,"The child_coupon_id column in the coupons table is used to establish hierarchical relationships between coupons, where one coupon can be a child of another coupon. When querying, this column can be used to find sub-coupons that are part of a larger promotion or to trace coupon inheritance patterns, with NULL values indicating top-level coupons that have no parent."
coupons,gift_certificate,int,NO,,,0,,,,10.0,0.0,"The gift_certificate column in the coupons table is a required integer field that indicates whether a coupon functions as a gift certificate (1) or a regular coupon (0). This flag helps differentiate between standard promotional discounts and gift certificate-type offers, which may have different redemption rules or validation processes."
coupons,used_for,int,YES,,,0,,,,10.0,0.0,"The ""used_for"" column in the coupons table is an integer field that likely indicates the intended usage context or application type for each coupon. When writing queries, this column can be used to filter or group coupons based on their specific use cases (e.g., 0 might represent general use, while other values could indicate specific promotion types or redemption scenarios)."
coupons,coupon_receiver_id,int,YES,,,,,,,10.0,0.0,"The coupon_receiver_id column in the coupons table identifies the specific user or entity that is eligible to receive and redeem the coupon, though it can be null if the coupon is available to all users. When writing queries, this column can be used to filter coupons by their intended recipients or to join with user-related tables to analyze coupon distribution patterns."
coupons_droppoints,coupons_droppoints_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The coupons_droppoints_id column serves as the primary key for the coupons_droppoints junction table, uniquely identifying each coupon-droppoint association with an integer value. This column should be referenced when joining with other tables or when specific coupon-droppoint relationships need to be identified or modified."
coupons_droppoints,coupon_id,int,NO,MUL,,,coupons,coupon_id,,10.0,0.0,"The coupon_id column in the coupons_droppoints table is a required foreign key that references the unique identifier of a coupon from the coupons table. When writing SQL queries, this column can be used to join with the coupons table to retrieve coupon details or to filter/group records based on specific coupon associations with droppoints."
coupons_droppoints,droppoint_id,int,NO,MUL,,,droppoints,droppoint_id,,10.0,0.0,"The droppoint_id column in the coupons_droppoints table is a required foreign key that references the ID of a physical dropoff/pickup location where a coupon can be used. When writing SQL queries, this column can be used to join with the droppoints table to access location details, or to filter/group coupons based on specific dropoff locations."
credit_card_popup,credit_card_popup_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The credit_card_popup_id is the primary key column that uniquely identifies each credit card promotional popup configuration in the system. When writing queries, use this column to join with related tables or to specifically target individual popup configurations, as it serves as the main identifier for each popup record."
credit_card_popup,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the credit_card_popup table is a required integer field that serves as a foreign key to identify which user the credit card promotional popup configuration applies to. This column is indexed (MUL) to optimize queries that filter or join based on user_id, making it efficient to look up popup settings for specific users."
credit_card_popup,type,varchar(255),YES,,,,,,255.0,,,"The ""type"" column in the credit_card_popup table stores the category or classification of different credit card promotional popups, using text values up to 255 characters in length. This column can be used to filter or group different styles of promotional popups (e.g., 'welcome_offer', 'seasonal_promotion', 'targeted_offer'), making it useful in queries that need to analyze or display specific types of credit card promotions."
credit_card_popup,seen,tinyint,NO,,,0,,,,3.0,0.0,"The ""seen"" column in the credit_card_popup table is a binary flag (tinyint) that tracks whether a specific credit card promotional popup has been shown to users, where 0 typically indicates unseen and 1 indicates seen. This non-nullable field can be used in WHERE clauses to filter for shown/unshown popups or in UPDATE statements to mark popups as displayed, helping to manage popup frequency and prevent repeated displays to the same user."
crops,crop_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The crop_id column serves as the primary key in the crops table, uniquely identifying each agricultural crop record with a non-null integer value. When writing SQL queries, use this column for precise record selection, joining with related tables, or establishing relationships between different crop-related data points."
crops,name,varchar(255),YES,UNI,,,,,255.0,,,"The 'name' column in the crops table stores the unique name or identifier of each agricultural crop as a variable-length text string (up to 255 characters). This column has a unique constraint (UNI) ensuring no duplicate crop names can exist in the table, making it ideal for identifying specific crops in WHERE clauses or JOIN operations, though it can contain NULL values."
custom_base_basket_user_products_list,custom_base_basket_user_products_list_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The custom_base_basket_user_products_list_id column serves as the primary key identifier for each unique product entry in a user's customized shopping basket. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific basket product entries."
custom_base_basket_user_products_list,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the custom_base_basket_user_products_list table is a required integer field that serves as a foreign key to identify which user owns specific custom product selections. When writing queries, this column can be used to filter or join with other user-related tables to retrieve personalized basket information for specific users."
custom_base_basket_user_products_list,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the custom_base_basket_user_products_list table serves as a foreign key reference to identify specific products that users have added to their customized shopping baskets. When writing SQL queries, this column can be used to join with a products table to retrieve detailed product information, or to filter and group custom basket items by specific products."
custom_base_basket_user_products_list,avg_items_per_order,int,NO,,,,,,,10.0,0.0,"The avg_items_per_order column represents the typical number of items a user orders for this specific custom product in their base basket, stored as a whole number (integer). This non-nullable field can be used in SQL queries to analyze ordering patterns or calculate inventory requirements, and is commonly used in aggregate functions like SUM or AVG when analyzing user purchasing behavior across multiple orders."
custom_base_basket_user_products_list,total_time_product_ordered,int,NO,,,,,,,10.0,0.0,"The total_time_product_ordered column tracks the cumulative number of times a specific product has been ordered within a user's custom base basket. This non-nullable integer field serves as a frequency counter, helping to understand product popularity and ordering patterns at the individual user level."
custom_base_basket_user_products_list,week_where_product_available,int,NO,,,,,,,10.0,0.0,"The week_where_product_available column is a required integer field that specifies which week number a custom product is available for selection in a user's personalized shopping basket. This column helps enforce temporal availability constraints, ensuring products are only offered to users during their designated weekly availability windows."
custom_base_basket_user_products_list,products_removed_from_bb_multiplier,"decimal(4,2)",NO,,,,,,,4.0,2.0,"This decimal column represents a multiplier value (with 2 decimal places) that adjusts calculations when products are removed from a base basket. When writing SQL queries, use this column to apply proportional adjustments or scaling factors for pricing or quantity calculations related to removed products, where a value of 1.00 typically represents no adjustment."
custom_base_basket_user_products_list,score_pre_discount_multiplier,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The score_pre_discount_multiplier column stores a decimal value that acts as a multiplier for calculating pre-discount scores for custom products in user baskets. When writing SQL queries, this non-nullable decimal field can be used in calculations to adjust or weight product scores before any discounts are applied, typically by multiplying it with other numerical values to determine preliminary pricing or ranking factors."
custom_base_basket_user_products_list,created_at,datetime,NO,,,,,,,,,"The created_at column in the custom_base_basket_user_products_list table stores the exact date and time when a user adds a custom product to their personalized shopping basket. This non-nullable datetime field can be used for temporal queries and analysis, such as filtering products added within specific time periods or ordering products by their addition date."
custom_base_basket_user_products_list,avg_weeks_between_deliveries,"decimal(4,2)",NO,,,,,,,4.0,2.0,"The avg_weeks_between_deliveries column stores the average frequency (in weeks) at which a custom product is delivered to a user, represented as a decimal number with up to 2 decimal places. This non-nullable field is essential for calculating delivery schedules and can be used in SQL queries to filter or analyze delivery patterns, such as ""SELECT * FROM custom_base_basket_user_products_list WHERE avg_weeks_between_deliveries <= 2.00"" to find products delivered biweekly or more frequently."
custom_message_to_display_on_checkout,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The 'id' column serves as the primary key identifier for each unique custom message in the checkout display system. This auto-incrementing integer field is required (non-nullable) and should be referenced when joining with related tables or when specifically targeting individual checkout messages for updates or deletions.
custom_message_to_display_on_checkout,uid,int,NO,MUL,,,,,,10.0,0.0,"The 'uid' column in the custom_message_to_display_on_checkout table serves as a non-unique indexed identifier (indicated by MUL key type) that likely references a user or entity associated with each checkout message. When querying this table, you can use this column to efficiently filter or join messages based on user relationships, though you should be aware that multiple messages may exist for the same uid value."
custom_message_to_display_on_checkout,date,date,NO,,,,,,,,,"The 'date' column in the custom_message_to_display_on_checkout table represents the specific date when a checkout message should be shown to customers. This required (non-nullable) date field can be used in WHERE clauses to control message visibility based on specific dates, such as filtering for current-day messages or scheduling future promotional announcements."
custom_rule,custom_rule_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The custom_rule_id column serves as the primary key in the custom_rule table, uniquely identifying each custom rule or condition that can be applied to contracts. When writing SQL queries, use this column for precise rule identification, joining with other tables, or filtering specific rules, ensuring each rule can be distinctly referenced and managed within the contract rule system."
custom_rule,contract_id,int,NO,MUL,,,contract,contract_id,,10.0,0.0,"The contract_id column in the custom_rule table serves as a foreign key that links each custom rule to its associated contract in the contract table. When writing SQL queries, use this column to join with the contract table or to filter custom rules for specific contracts, ensuring that all custom rules are properly associated with an existing contract since null values are not allowed."
custom_rule,transaction_type_id,int,NO,,,,,,,10.0,0.0,"The transaction_type_id column in the custom_rule table is a required integer field that specifies which type of transaction the custom rule applies to. When writing queries, this column can be used to filter or group custom rules based on specific transaction types, helping to identify which rules are relevant for different kinds of contract transactions."
custom_rule,violation_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The violation_rate column in the custom_rule table stores the decimal value representing the penalty or violation rate associated with a contract rule, with precision up to 2 decimal places. When writing SQL queries, this non-nullable field can be used for calculations or comparisons related to rule violations, and it defaults to 0.00 if not explicitly specified."
custom_violation_rates,custom_violation_rates_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The custom_violation_rates_id column serves as the primary key for the custom_violation_rates table, uniquely identifying each violation rate record. This non-nullable integer column should be referenced when joining to related tables or when specifically querying individual violation rate entries."
custom_violation_rates,custom_violation_rule_id,int,NO,,,,,,,10.0,0.0,"The custom_violation_rule_id column is a required integer field that uniquely identifies different custom violation rules or scenarios being tracked in the custom_violation_rates table. When writing SQL queries, use this column to filter, group, or join with other tables to analyze specific violation rules, as it serves as a reference point for individual compliance scenarios or business rule violations."
custom_violation_rates,violation_rate,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The violation_rate column in the custom_violation_rates table stores decimal values representing the rate or percentage of violations for specific scenarios, with precision up to 2 decimal places (e.g., 12.34%). When querying this column, you can use standard numeric comparisons (>, <, =) to filter or analyze violation rates, and the values can be NULL if the rate hasn't been calculated or isn't applicable."
custom_violation_rule,custom_violation_rule_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The custom_violation_rule_id is the primary key identifier for each unique custom violation rule in the system. This integer column serves as the main reference point when joining or filtering violation rules, and its non-nullable property ensures that every rule has a distinct identifier."
custom_violation_rule,contract_id,int,NO,,,,,,,10.0,0.0,"The contract_id column in the custom_violation_rule table is a required integer field that identifies the specific contract to which a violation rule applies. This column helps link violation rules to their corresponding contracts, enabling the system to enforce contract-specific violation detection criteria."
custom_violation_rule,violation_type_id,int,NO,,,,,,,10.0,0.0,"The violation_type_id column in the custom_violation_rule table is a required integer field that identifies the specific category or classification of violation being defined by the rule. When writing SQL queries, this column can be used to filter or group violation rules by their type, and it likely serves as a reference to a separate violation types lookup table."
customization_log,cust_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cust_id column serves as the primary key in the customization_log table, uniquely identifying each customization or change record in the system's audit trail. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific customization entries (e.g., WHERE cust_id = X)."
customization_log,staff_id,int,YES,,,,,,,10.0,0.0,"The staff_id column in the customization_log table is an integer field that identifies which staff member made a particular customization or configuration change in the system. When querying this column, it can be used to filter or group changes by specific staff members, and it can likely be joined with a staff or users table to get additional information about who made each modification."
customization_log,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the customization_log table is a required integer field that references the user who made a specific customization or configuration change in the system. When writing queries, this column can be joined with user-related tables to retrieve information about who performed particular changes, and since it's indexed (MUL), it's optimized for filtering and joining operations."
customization_log,order_id,int,NO,MUL,,,,,,10.0,0.0,"The order_id column in the customization_log table is a required integer field that references the specific order associated with a customization or change event. As indicated by the MUL (Multiple) key type, this column is indexed to optimize queries that filter or join based on order_id, making it efficient to retrieve all customization events related to a particular order."
customization_log,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the customization_log table is a required integer field that references the specific product being customized or modified. This column is indexed (MUL) to optimize queries that filter or join based on product identification, making it efficient to retrieve all customization history for a particular product."
customization_log,new_qty,int,NO,,,,,,,10.0,0.0,"The ""new_qty"" column in the customization_log table stores the updated quantity value after a change was made, represented as a non-nullable integer. This column is essential for tracking quantity-based modifications in the system and can be used in SQL queries to analyze how quantities have changed over time or to compare with previous values."
customization_log,price,float,YES,,,,,,,12.0,,"The 'price' column in the customization_log table stores the monetary value (as a floating-point number) associated with a customization or change, if applicable. When querying this column, be aware that it can contain NULL values, which may indicate that the logged change had no direct price impact or that the price information was not relevant for that particular customization entry."
customization_log,success,tinyint,NO,,,,,,,3.0,0.0,The 'success' column in the customization_log table is a required boolean flag (stored as tinyint) that indicates whether the customization or change attempt was successful (1) or failed (0). This field is essential for filtering and analyzing the effectiveness of system modifications and can be used in WHERE clauses to identify either successful changes or problematic failed attempts.
customization_log,ip_address,varchar(60),YES,,,,,,60.0,,,"The ip_address column in the customization_log table stores the IP address of the client or system from which a customization or configuration change was initiated, using a varchar format that accommodates both IPv4 and IPv6 addresses. When querying this column, you can use it to filter or analyze system changes based on network origin, though be aware the field may be null in some cases where the IP address wasn't captured."
customization_log,user_agent,varchar(600),YES,,,,,,600.0,,,"The user_agent column in the customization_log table stores the browser or client application information (as a string up to 600 characters) that was used when making system changes or customizations. This field helps identify the specific software/browser environment from which modifications were made, which is valuable for troubleshooting and security auditing purposes."
customization_log,agent_id,int,YES,MUL,,,,,,10.0,0.0,"The agent_id column in the customization_log table is a foreign key that references the system user or agent who performed the customization action. When querying customization history, this column can be used to filter or join with user/agent tables to identify who made specific changes, making it valuable for audit trails and accountability tracking."
customization_log,date,date,YES,MUL,,,,,,,,"The 'date' column in the customization_log table stores the calendar date when a customization or configuration change was made in the system. This column is indexed (MUL) to optimize queries filtering or sorting by date, and can be used to analyze customization patterns over time or find changes made within specific date ranges."
customization_log,time,time,YES,,,,,,,,,"The 'time' column in the customization_log table stores the specific time of day when a customization or configuration change was made, using a standard time format (HH:MM:SS). When querying this column, it's useful for filtering changes that occurred during specific times of day or analyzing patterns in when system modifications typically take place."
cycle_count_history,cycle_count_history_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The cycle_count_history_id is the primary key column that uniquely identifies each cycle count record in the cycle_count_history table. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific cycle count entries, as it provides a guaranteed unique reference point for each inventory counting event."
cycle_count_history,warehouse_id,int,NO,,,,,,,10.0,0.0,"The warehouse_id column in the cycle_count_history table is a required integer field that identifies which warehouse location the cycle count was performed in. This column is essential for filtering and grouping cycle count records by specific warehouse locations, enabling queries to analyze inventory counting activities across different facilities."
cycle_count_history,storage_units_id,int,YES,,,,,,,10.0,0.0,"The storage_units_id column in the cycle_count_history table is an integer field that references the specific storage location or unit where the inventory count was performed. When writing queries, this column can be used to filter or group cycle count records by storage location, helping to analyze counting patterns and discrepancies across different storage areas within the facility."
cycle_count_history,lot_id,int,YES,,,,,,,10.0,0.0,"The lot_id column in the cycle_count_history table is an optional integer field that links to specific inventory lots or batches being counted during a cycle count. This column is particularly useful when querying or filtering cycle count records for inventory items that are tracked by lot numbers, enabling analysis of count discrepancies at the lot level rather than just the overall item level."
cycle_count_history,status_code,int,YES,,,0,,,,10.0,0.0,"The status_code column in the cycle_count_history table is an integer field that indicates the current state or outcome of a cycle count event, likely using predefined status codes (e.g., 0 for pending, 1 for completed, 2 for discrepancy found). When writing queries, this column can be used to filter or group cycle counts based on their completion status, making it useful for reporting on count progress or identifying counts that require follow-up action."
cycle_count_history,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the cycle_count_history table is a required integer field that identifies which specific inventory item was counted during a cycle count. This column serves as a reference to connect each cycle count record with its corresponding product, enabling queries to analyze counting history and discrepancies for specific items."
cycle_count_history,inventory_type,int,YES,,,,,,,10.0,0.0,"The inventory_type column in the cycle_count_history table is an integer field that categorizes the type or classification of inventory being counted (e.g., 1 for raw materials, 2 for finished goods, 3 for work-in-progress). When writing SQL queries, this column can be used to filter or group cycle count records by inventory classification, helping to analyze counting patterns and discrepancies across different types of inventory items."
cycle_count_history,task_id,int,NO,,,,,,,10.0,0.0,"The task_id column in the cycle_count_history table is a required integer field that uniquely identifies each cycle count task or assignment. When writing queries, this column can be used to join with related task management tables or to filter/group specific counting events, making it essential for tracking and analyzing individual cycle count activities."
cycle_count_history,expected_qty,int,YES,,,,,,,10.0,0.0,"The expected_qty column represents the theoretical quantity of an item that should be present in inventory according to the system records before a physical count is performed. This integer value serves as a baseline for comparison against the actual counted quantity, enabling the calculation of inventory discrepancies and variances during cycle counting processes."
cycle_count_history,actual_qty,int,YES,,,,,,,10.0,0.0,"The actual_qty column in the cycle_count_history table represents the physical quantity of items found during an inventory cycle count. This integer value can be used to compare against expected quantities to calculate variances, and since it's nullable, NULL values might indicate incomplete or pending counts."
cycle_count_history,reason_code,int,YES,,,0,,,,10.0,0.0,"The reason_code column in the cycle_count_history table stores an integer value that categorizes the reason or trigger for conducting the inventory cycle count, such as routine scheduling, inventory discrepancy investigation, or audit requirements. When writing queries, this nullable field can be used to filter or group cycle counts by their initiation reason, helping to analyze patterns in count frequency and accuracy based on different triggering events."
cycle_count_history,expire_date,date,YES,,,,,,,,,"The expire_date column in the cycle_count_history table records the expiration date of counted inventory items, which is particularly relevant for perishable goods or items with limited shelf life. This optional date field helps track when products will no longer be viable for sale or use, enabling better inventory management and helping to identify items that need to be counted or removed before expiration."
cycle_count_history,reception_date,date,YES,,,,,,,,,"The reception_date column in the cycle_count_history table records the date when a physical inventory count was officially received or processed in the system. This optional date field can be useful for filtering or analyzing cycle counts based on when they were submitted, and it may differ from the actual count date if there was a delay in processing the count results."
cycle_count_history,created,datetime,NO,,,,,,,,,"The 'created' column in the cycle_count_history table stores the timestamp when each cycle count record was initially created in the system, using a datetime format. This non-nullable field is essential for temporal analysis and can be used in SQL queries to filter or sort cycle count records by their creation date, such as finding counts performed within specific date ranges or analyzing counting patterns over time."
cycle_count_history,modified,datetime,NO,,,,,,,,,"The 'modified' column in the cycle_count_history table stores the timestamp when a cycle count record was last updated, using a datetime format. This non-nullable field is essential for tracking the chronological history of inventory count modifications and can be useful in queries that need to filter or sort cycle count records based on when they were changed."
cycle_count_history,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the cycle_count_history table is a required integer field that identifies the employee or system user who performed the physical inventory count. This column can be used to join with a users or employees table to retrieve information about who conducted specific cycle counts, and is commonly referenced in WHERE clauses to filter counts by specific counters or in GROUP BY clauses to analyze counting patterns by user."
cycle_count_history,location_header_id,int,NO,,,,,,,10.0,0.0,"The location_header_id column in the cycle_count_history table is a required integer field that references the specific storage location or warehouse area where the cycle count was performed. When writing SQL queries, use this column to filter or group cycle count records by their physical location, enabling analysis of inventory accuracy across different warehouse sections or storage areas."
daily_vehicle_capacity,daily_vehicle_capacity_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The daily_vehicle_capacity_id is the primary key column that uniquely identifies each capacity setting record in the daily_vehicle_capacity table. When writing SQL queries, use this column for joining with related tables or filtering specific capacity records, particularly when you need to link vehicle capacity settings with their corresponding capacity types or daily vehicle configurations."
daily_vehicle_capacity,daily_vehicle_setting_id,int,NO,MUL,,,daily_vehicle_setting,daily_vehicle_setting_id,,10.0,0.0,"The daily_vehicle_setting_id column serves as a foreign key in the daily_vehicle_capacity table, linking each capacity record to its corresponding vehicle configuration in the daily_vehicle_setting table. When writing SQL queries, use this column to join with daily_vehicle_setting to access specific vehicle configuration details associated with each capacity setting."
daily_vehicle_capacity,capacity_type_id,int,NO,MUL,,,capacity_types,capacity_type_id,,10.0,0.0,"The capacity_type_id column in the daily_vehicle_capacity table is a required foreign key that references the capacity_types table, specifying what kind of capacity (such as weight, volume, or passenger count) is being measured for a vehicle on a given day. This column is frequently used in JOIN operations with the capacity_types table to retrieve detailed capacity type information and is essential for filtering or grouping capacity records by their measurement type."
daily_vehicle_capacity,capacity,int,NO,,,,,,,10.0,0.0,"The 'capacity' column in the daily_vehicle_capacity table stores integer values representing the specific capacity measurement for a vehicle on a given day, such as maximum weight in pounds or passenger count. This non-nullable integer field should be used in queries when analyzing or filtering vehicle capacity limits, and its specific unit of measurement is determined by the associated capacity_type record."
daily_vehicle_setting,daily_vehicle_setting_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The daily_vehicle_setting_id is the primary key column that uniquely identifies each daily configuration record for vehicles in the system. When writing SQL queries, use this column to join with related tables or to filter specific daily vehicle settings, particularly when connecting to vehicle-specific data or operational parameters."
daily_vehicle_setting,vehicle_id,int,NO,MUL,,,ww_vehicles,vehicle_id,,10.0,0.0,"The vehicle_id column in the daily_vehicle_setting table is a required integer field that serves as a foreign key reference to the ww_vehicles table, establishing a link between daily configuration settings and specific vehicles in the system. When writing SQL queries, this column can be used to join with the ww_vehicles table to access vehicle details or to filter/group daily settings by specific vehicles."
daily_vehicle_setting,date,date,YES,,,,,,,,,"The 'date' column in the daily_vehicle_setting table represents the specific calendar date for which vehicle configuration settings are applicable. When writing SQL queries, this column can be used to filter or group vehicle settings by date, making it particularly useful for analyzing how vehicle configurations change over time or retrieving settings for specific dates."
daily_vehicle_setting,max_distance,int,YES,,,,,,,10.0,0.0,"The max_distance column in the daily_vehicle_setting table represents the maximum allowed travel distance (likely in kilometers or miles) that a vehicle can cover during a single day of operation. This optional integer value helps enforce distance-based constraints when planning routes or assigning deliveries, and can be referenced in SQL queries to ensure vehicles aren't scheduled beyond their daily distance limitations."
daily_vehicle_setting,active,int,YES,,,,,,,10.0,0.0,"The 'active' column in the daily_vehicle_setting table is an integer flag that indicates whether a vehicle's configuration is currently in effect for a given day (typically 1 for active, 0 for inactive). When writing SQL queries, this column can be used to filter for only active vehicle settings or to check the operational status of specific vehicles on particular dates."
daily_vehicle_setting,routing_simulation_id,int,YES,,,,,,,10.0,0.0,"The routing_simulation_id column in the daily_vehicle_setting table is an optional integer field that links vehicle configurations to specific routing simulation scenarios. This column can be used in SQL queries to filter or group vehicle settings based on particular simulation runs, allowing analysts to track how vehicle configurations vary across different routing simulations."
daily_vehicle_skill,daily_vehicle_skill_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The daily_vehicle_skill_id column serves as the primary key identifier for each unique skill configuration assigned to a vehicle on a specific day. When writing SQL queries, use this column to uniquely identify or join skill assignments, particularly when you need to track or reference specific vehicle-skill combinations across different dates."
daily_vehicle_skill,daily_vehicle_setting_id,int,NO,MUL,,,daily_vehicle_setting,daily_vehicle_setting_id,,10.0,0.0,"The daily_vehicle_setting_id column serves as a foreign key that links to the daily vehicle settings record, representing the specific day and vehicle combination being configured. This column is essential for queries that need to join or filter vehicle skill configurations with their corresponding daily settings, enabling access to the complete context of a vehicle's operational parameters for a given day."
daily_vehicle_skill,skill_type_id,int,NO,MUL,,,skill_types,skill_type_id,,10.0,0.0,"The skill_type_id column in the daily_vehicle_skill table is a required integer field that references specific skill types or capabilities that can be assigned to vehicles. This column serves as a foreign key to link each daily vehicle configuration with a predefined skill type, enabling queries to filter or join vehicle records based on their assigned capabilities for any given day."
daily_vehicle_time_window,daily_vehicle_time_window_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The daily_vehicle_time_window_id is the primary key column that uniquely identifies each time window record in the daily_vehicle_time_window table. When writing SQL queries, use this column to join with other tables or filter specific time window entries, particularly when connecting to the daily_vehicle_setting table for retrieving vehicle scheduling and operational time parameters."
daily_vehicle_time_window,daily_vehicle_setting_id,int,NO,MUL,,,daily_vehicle_setting,daily_vehicle_setting_id,,10.0,0.0,"The daily_vehicle_setting_id column serves as a foreign key in the daily_vehicle_time_window table, linking each time window record to its corresponding vehicle configuration in the daily_vehicle_setting table. When writing SQL queries, use this column to join with daily_vehicle_setting table to access related vehicle configuration details or to filter time windows based on specific vehicle settings."
daily_vehicle_time_window,start_time,time,YES,,,,,,,,,"The start_time column in the daily_vehicle_time_window table represents the beginning time of a vehicle's operational window for a given day, stored in a standard time format (HH:MM:SS). When writing SQL queries, this column can be used to filter or sort vehicle availability periods, and it works in conjunction with daily vehicle settings to define when specific vehicles are operational or available for scheduling."
daily_vehicle_time_window,end_time,time,YES,,,,,,,,,"The end_time column in the daily_vehicle_time_window table stores the closing or ending time of a vehicle's operational window in TIME format (HH:MM:SS). When writing SQL queries, this column can be used to filter or analyze vehicle availability periods, often in combination with a corresponding start_time to define complete operational windows for specific vehicles."
daily_vehicle_time_window,break,tinyint,YES,,,,,,,3.0,0.0,"The 'break' column in the daily_vehicle_time_window table is a tinyint flag that indicates whether a specific time window represents a break period in a vehicle's operating schedule. When querying this column, use it to filter or identify break periods within a vehicle's daily time windows, where a non-zero value typically indicates a break period and 0 (or NULL) indicates regular operating hours."
daily_vehicle_time_window,service_time,int,YES,,,,,,,10.0,0.0,"The `service_time` column in the daily_vehicle_time_window table represents the duration (in minutes) required for a vehicle to complete its service at a specific location during its operating hours. When writing SQL queries, this column can be used to calculate total route durations, schedule capacity, or filter time windows based on service duration requirements."
daily_vehicle_time_window,speed,int,NO,,,3,,,,10.0,0.0,"The 'speed' column in the daily_vehicle_time_window table stores the integer value representing the vehicle's operating speed during specific time windows. This non-nullable field is essential for defining how fast a vehicle should travel during its scheduled operating hours, helping to optimize route planning and scheduling calculations."
data_for_daily_sales_forecaster,data_for_daily_sales_forecaster_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The data_for_daily_sales_forecaster_id column serves as the primary key for the data_for_daily_sales_forecaster table, uniquely identifying each daily sales record. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific sales data entries, but avoid using it for business logic calculations since it's purely a technical identifier."
data_for_daily_sales_forecaster,sale_date,date,YES,,,,,,,,,"The sale_date column in data_for_daily_sales_forecaster represents the specific calendar date when sales transactions occurred, stored in a standard date format. This column is commonly used for filtering sales data by time periods, grouping transactions by date for aggregation, and establishing time-series patterns, making it a crucial field for temporal analysis and sales forecasting queries."
data_for_daily_sales_forecaster,sale_day_of_week,tinyint,NO,,,0,,,,3.0,0.0,"The sale_day_of_week column represents the day of the week (likely 0-6 or 1-7) when a sale occurred, stored as a non-nullable tinyint value. This column can be used in SQL queries to analyze sales patterns across different days of the week or to filter/group sales data by specific weekdays."
data_for_daily_sales_forecaster,sale_month,tinyint,NO,,,0,,,,3.0,0.0,"The sale_month column in data_for_daily_sales_forecaster represents the numeric month (1-12) when a sale occurred and is stored as a non-nullable tinyint. When writing SQL queries, this column can be used to filter or group sales data by month, making it particularly useful for monthly trend analysis and seasonal comparisons in sales forecasting."
data_for_daily_sales_forecaster,sale_year,smallint,NO,,,0,,,,5.0,0.0,"The sale_year column in data_for_daily_sales_forecaster represents the four-digit year (e.g., 2023) when a sale occurred and is a required field that cannot be null. When writing SQL queries, this column can be used to filter or group sales data by year, making it particularly useful for year-over-year analysis and annual sales forecasting."
data_for_daily_sales_forecaster,is_holiday,tinyint,NO,,,0,,,,3.0,0.0,The `is_holiday` column is a binary flag (stored as tinyint) that indicates whether a given day was a holiday (1) or not (0) in the daily sales records. This flag is commonly used in sales forecasting to account for holiday-related sales patterns and can be used in WHERE clauses or GROUP BY operations to analyze holiday vs. non-holiday sales performance.
data_for_daily_sales_forecaster,is_a_weekend,tinyint,NO,,,0,,,,3.0,0.0,"The `is_a_weekend` column is a binary flag (stored as tinyint) that indicates whether a given sales record occurred on a weekend (1) or weekday (0). This column can be used in SQL queries to filter or analyze sales patterns that differ between weekdays and weekends, making it particularly useful for time-based analysis and sales forecasting."
data_for_daily_sales_forecaster,product_id,int,YES,MUL,,,,,,10.0,0.0,"The product_id column in the data_for_daily_sales_forecaster table is an integer field that uniquely identifies specific products being tracked for sales forecasting purposes. As a non-unique indexed column (indicated by the MUL key type), it can be efficiently used in JOIN operations with other product-related tables and in WHERE clauses to filter sales data for specific products, while allowing multiple records per product to support the daily time-series nature of the data."
data_for_daily_sales_forecaster,supplier_id,int,YES,,,,,,,10.0,0.0,"The supplier_id column in the data_for_daily_sales_forecaster table is an optional integer field that identifies the supplier associated with each daily sales record. When writing queries, this column can be used to filter or group sales data by specific suppliers, though its nullable nature means some records may not have a supplier assigned."
data_for_daily_sales_forecaster,category_id,smallint,YES,,,,,,,5.0,0.0,"The category_id column in the data_for_daily_sales_forecaster table is a smallint field that identifies the product category associated with each daily sales record. When writing queries, this column can be used to filter or group sales data by product category, and since it's nullable, be sure to handle NULL values appropriately using IS NULL or IS NOT NULL conditions when necessary."
data_for_daily_sales_forecaster,sub_category_id,smallint,YES,,,,,,,5.0,0.0,"The sub_category_id column in the data_for_daily_sales_forecaster table is a smallint field that identifies different product sub-categories within the sales data. When writing SQL queries, this column can be used to filter or group sales metrics by product sub-category, though its nullable property means some records may not have a sub-category assigned."
data_for_daily_sales_forecaster,sub_sub_category_id,smallint,YES,,,,,,,5.0,0.0,"The sub_sub_category_id column in the data_for_daily_sales_forecaster table represents the most granular product classification level, storing numeric identifiers for specific product sub-subcategories. When writing SQL queries, this column can be used to filter or group sales data by detailed product classifications, and its nullable property means some records may not have a sub-subcategory assigned."
data_for_daily_sales_forecaster,was_promoted_on_the_website,tinyint,NO,,,0,,,,3.0,0.0,"The was_promoted_on_the_website column is a binary flag (tinyint) that indicates whether a product was featured in website promotions on a given day (1 for yes, 0 for no). This non-nullable field can be used in SQL queries to filter or analyze sales performance based on promotional status, making it particularly useful for measuring the impact of website promotions on daily sales figures."
data_for_daily_sales_forecaster,was_flagged_as_new_product_on_the_website,tinyint,NO,,,0,,,,3.0,0.0,"This boolean column (was_flagged_as_new_product_on_the_website) indicates whether a product was marked as ""new"" on the website during the recorded sales day, using 0 for false and 1 for true. When writing queries, this column can be used to filter or analyze sales patterns specifically for newly launched products versus established ones, which is particularly useful for understanding how product novelty affects sales performance."
data_for_daily_sales_forecaster,promotion_intensity,smallint,NO,,,0,,,,5.0,0.0,"The promotion_intensity column is a required smallint field that measures the level or strength of promotional activities on a given day, with higher values indicating more aggressive promotions. This metric is essential for understanding how promotional activities impact daily sales performance and can be used in WHERE clauses or aggregations to analyze the relationship between promotion levels and sales outcomes."
data_for_daily_sales_forecaster,availability_percentage,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The availability_percentage column represents the percentage of time a product or service was available for sale during a given day, stored as a decimal number with 2 decimal places (e.g., 98.75 means 98.75% availability). When writing SQL queries, this non-nullable column can be used to filter or analyze days based on product availability levels, such as finding days with full availability (100.00) or identifying periods of limited availability that might impact sales performance."
data_for_daily_sales_forecaster,normal_retail_price_per_unit,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The normal_retail_price_per_unit column represents the standard retail price per unit of a product, stored as a precise decimal number with up to 6 decimal places. This non-nullable column is essential for sales analysis and forecasting calculations, and can be used in SQL queries to calculate revenue metrics or compare against actual selling prices."
data_for_daily_sales_forecaster,current_retail_price_per_unit,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The current_retail_price_per_unit column stores the active selling price of each unit with high precision (up to 6 decimal places) and is a required field that cannot be null. When writing SQL queries, this column can be used for price-based calculations or filtering, such as analyzing price trends or calculating revenue (by multiplying with quantity sold), and should be treated as a non-negative decimal number."
data_for_daily_sales_forecaster,product_weight_in_grams,smallint,NO,,,0,,,,5.0,0.0,"The product_weight_in_grams column represents the weight of each product in grams as a non-null small integer value. When writing SQL queries, this column can be used for filtering or aggregating products based on their weight, and since it's a required field, you don't need to handle NULL values in your calculations."
data_for_daily_sales_forecaster,purchasing_price_per_unit,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The purchasing_price_per_unit column represents the cost per unit that the company pays to acquire each item, stored as a precise decimal number with up to 6 decimal places. This non-nullable column is essential for calculating profit margins and cost analysis in daily sales forecasting, and should be used in SQL queries when analyzing cost-based metrics or performing profitability calculations."
data_for_daily_sales_forecaster,quantity_sold,mediumint,NO,,,0,,,,7.0,0.0,"The quantity_sold column in the data_for_daily_sales_forecaster table represents the total number of units sold for a given day, stored as a non-nullable mediumint value. When writing SQL queries, this column can be used for aggregating daily sales volumes or calculating moving averages, making it a key metric for sales forecasting analysis."
data_for_daily_sales_forecaster,number_of_clients,mediumint,NO,,,0,,,,7.0,0.0,"The number_of_clients column represents the total count of unique clients or customers involved in sales transactions for each day, stored as a required non-null integer value. This metric is essential for sales forecasting analysis and can be used in aggregate functions or grouping operations to understand customer engagement patterns over time."
department_approver_levels,department_approver_level_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The department_approver_level_id is the primary key column that uniquely identifies each approval level record within the department_approver_levels table. When writing SQL queries, use this column for joining to related tables or filtering specific approval level records, particularly when tracking authorization hierarchies or approval workflows across departments."
department_approver_levels,price,float,NO,,,0,,,,12.0,,"The ""price"" column in the department_approver_levels table stores the monetary threshold or limit (as a floating-point number) that determines when a specific approval level is required within a department. This value is mandatory (non-nullable) and helps establish at what dollar amount different levels of approval are needed, making it a crucial field for enforcing financial authorization rules."
department_approver_levels,department_id,int,NO,,,,,,,10.0,0.0,"The department_id column in the department_approver_levels table serves as a reference to identify specific departments within the organization's approval hierarchy system. This required integer field helps link approval levels and authorization rules to their respective departments, making it essential for queries that need to filter or join approval-related data by department."
department_approver_levels,po_approval_routing_id,int,YES,,,0,,,,10.0,0.0,The po_approval_routing_id column in the department_approver_levels table is an optional integer field that likely references a specific purchase order approval routing path or workflow. This column can be used in SQL queries to link approval hierarchies with specific PO routing sequences or to filter/group approval levels based on their associated purchase order workflow configurations.
department_approver_levels,request_type,tinyint,NO,,,,,,,3.0,0.0,"The request_type column in the department_approver_levels table is a required (non-nullable) tinyint field that categorizes different types of requests or transactions that need approval within the organizational hierarchy. When writing SQL queries, use this column to filter or group approval rules by specific request categories, where each distinct tinyint value represents a different type of request (such as 1 for expense reports, 2 for time off, etc.)."
department_approver_levels,is_default,tinyint,NO,,,0,,,,3.0,0.0,"The `is_default` column in the department_approver_levels table is a binary flag (0 or 1) that indicates whether an approval level configuration is the default setting for a department. When querying approval hierarchies, you can use this column to filter for or identify the standard/default approval paths (WHERE is_default = 1) versus special or exception-based approval configurations."
department_approver_levels,is_price_set,tinyint,NO,,,0,,,,3.0,0.0,"The `is_price_set` column in the department_approver_levels table is a boolean flag (stored as a tinyint) that indicates whether a specific approver level has pricing authority or permissions. When querying this column, use 1 to filter for approver levels with pricing authority and 0 for those without pricing authority, for example: `WHERE is_price_set = 1`."
department_approver_levels,created_at,datetime,NO,,,,,,,,,"The created_at column in the department_approver_levels table is a mandatory datetime field that records when each approval hierarchy record was initially created in the system. This timestamp can be useful for auditing purposes and tracking when approval level configurations were established, and since it's non-nullable, every record will have a creation timestamp."
department_approver_levels,updated_at,datetime,NO,,,,,,,,,The updated_at column in the department_approver_levels table is a mandatory datetime field that records when each approval hierarchy record was last modified. This timestamp helps track changes to departmental approval configurations and can be useful for auditing purposes or filtering records based on when they were last updated.
department_approver_levels,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the department_approver_levels table is a required integer field that stores the user ID of the person who created the approval hierarchy record. This column is commonly used in WHERE clauses or JOINs with user tables to track or filter approval hierarchies based on their creator, and since it's non-nullable, it ensures accountability for all hierarchy entries."
department_approver_levels,updated_by,int,YES,,,,,,,10.0,0.0,The `updated_by` column in the department_approver_levels table stores the employee ID (as an integer) of the user who last modified the approval hierarchy record. This optional field helps track changes to approval level configurations and can be used in audit queries to understand who made modifications to the authorization structure.
department_approvers,department_approver_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The department_approver_id column serves as the primary key in the department_approvers table, uniquely identifying each approver-department assignment record. This non-nullable integer field is essential for referencing specific approver assignments in SQL queries and can be used in JOIN operations when connecting to related tables in approval workflow processes."
department_approvers,department_id,int,NO,,,,,,,10.0,0.0,"The department_id column in the department_approvers table is a required integer field that identifies which department an approver is associated with. This column is commonly used to join with other department-related tables and to filter approvers by their assigned departments, making it essential for queries that need to retrieve or validate department-specific approval information."
department_approvers,po_approval_routing_id,int,YES,,,0,,,,10.0,0.0,"The po_approval_routing_id column in the department_approvers table is an integer field that likely serves as a reference to a specific purchase order approval routing path or sequence. When writing queries, this column can be used to link approval workflows to specific departments and approvers, and since it's nullable, some department approver records may not have an associated PO routing requirement."
department_approvers,approver_id,int,NO,,,,,,,10.0,0.0,"The approver_id column in the department_approvers table serves as a unique identifier for each individual approver in the organization's approval system. When writing SQL queries, this column can be used to join with other tables containing approver information or to filter specific approvers in WHERE clauses, such as ""WHERE approver_id = 123"" to find assignments for a particular approver."
department_approvers,approver_order,smallint,NO,,,,,,,5.0,0.0,"The approver_order column in the department_approvers table is a required smallint field that specifies the sequence or hierarchy level of approvers within their respective departments. This numerical ordering helps determine the approval flow sequence, where lower numbers typically indicate earlier approval stages and higher numbers represent later stages in the approval process."
department_approvers,department_approver_levels_id,int,NO,,,,,,,10.0,0.0,"The department_approver_levels_id column in the department_approvers table is a required integer field that likely represents the hierarchical approval level or tier of an approver within their department. When writing SQL queries, use this column to filter or join on specific approval levels, such as finding all approvers at a particular level or organizing approvers by their authorization tier."
department_approvers,is_default,smallint,NO,,,0,,,,5.0,0.0,"The ""is_default"" column in the department_approvers table is a required boolean flag (stored as smallint) that indicates whether an approver is the default approver for their assigned department. When querying, use this column with values 0 (not default) or 1 (default approver) to filter or identify the standard/default approvers within each department."
department_approvers,is_purchasing_admin,tinyint,NO,,,0,,,,3.0,0.0,"The `is_purchasing_admin` column in the department_approvers table is a boolean flag (stored as a tinyint) that indicates whether an approver has purchasing administrator privileges, where 0 represents false and 1 represents true. This column can be used in WHERE clauses to filter for approvers with specific purchasing admin status, such as `WHERE is_purchasing_admin = 1` to find all approvers who have purchasing administrator rights."
department_approvers,created_at,datetime,NO,,,,,,,,,"The created_at column in the department_approvers table records the exact date and time when an approver record was initially added to the system. This non-nullable datetime field is useful for auditing purposes and can be used in SQL queries to filter or sort approver records based on when they were created, such as finding recently added approvers or analyzing approver assignments within specific time periods."
department_approvers,created_by,int,NO,,,,,,,10.0,0.0,The created_by column in the department_approvers table is a required integer field that stores the user ID of the person who created each approver record. This column helps maintain an audit trail of who added approvers to departments and can be used in JOIN operations with a users table to get detailed information about who created specific approver assignments.
department_shifts,department_shift_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The department_shift_id column serves as the primary key in the department_shifts table, uniquely identifying each shift configuration within the organization's departments. This integer field is non-nullable and is essential for creating relationships with related tables like department_shifts_days and department_shifts_lang, making it a crucial field for joining queries when retrieving or managing shift-related information across the system."
department_shifts,department_id,int,NO,MUL,,,temp_departments,department_id,,10.0,0.0,"The department_id column in the department_shifts table serves as a foreign key that links each shift configuration to its corresponding department in the temp_departments table. This integer field is mandatory (non-nullable) and is used to organize and filter shift schedules by department, making it essential for queries that need to retrieve or analyze shift information for specific departments within the organization."
department_shifts,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the department_shifts table stores the descriptive title or identifier for each shift configuration (e.g., ""Morning Shift"", ""Night Shift"") as a required text field with a maximum length of 255 characters. This column is essential for identifying and referencing specific shifts when creating schedules or querying shift-related information across departments."
department_shifts_days,department_shift_day_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The department_shift_day_id column serves as the primary key in the department_shifts_days table, uniquely identifying each day-to-shift mapping record. When writing SQL queries, use this column for precise record selection or when joining with related tables that reference specific department shift day assignments."
department_shifts_days,department_shift_id,int,NO,MUL,,,department_shifts,department_shift_id,,10.0,0.0,"The department_shift_id column in the department_shifts_days table serves as a foreign key that links to the department_shifts table, establishing which department shift is being scheduled. When writing SQL queries, use this column to join with the department_shifts table to access shift details or to filter/group shift schedules by specific department shifts."
department_shifts_days,day_of_week,tinyint,NO,,,,,,,3.0,0.0,"The day_of_week column in department_shifts_days is a required numeric field (tinyint) that represents the day of the week using numbers (typically 1-7). When writing SQL queries, use this column to filter or group shift schedules by specific days, such as ""WHERE day_of_week = 1"" for Monday or ""GROUP BY day_of_week"" to analyze patterns across different days of the week."
department_shifts_days,start_time,time,NO,,,,,,,,,"The start_time column in the department_shifts_days table stores the exact time when a department's shift begins on a specific day, using a standard time format (HH:MM:SS). This required field is essential for scheduling purposes and can be used in SQL queries to filter or sort shifts based on their starting times, or to calculate shift durations when combined with end times."
department_shifts_days,end_time,time,NO,,,,,,,,,"The end_time column in the department_shifts_days table stores the time when a department's shift ends on a specific day, using a standard time format (HH:MM:SS). This required field is crucial for defining shift boundaries and scheduling purposes, helping to determine when staff members complete their work periods for specific department shifts."
department_shifts_lang,department_shift_lang_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The department_shift_lang_id column serves as the primary key for the department_shifts_lang table, uniquely identifying each language-specific translation record for department shifts. When writing SQL queries, use this column for precise record selection, joining with other tables, or maintaining referential integrity, but note that as an internal identifier, it's typically not used for business logic or display purposes."
department_shifts_lang,department_shift_id,int,NO,MUL,,,department_shifts,department_shift_id,,10.0,0.0,"The department_shift_id column serves as a foreign key in the department_shifts_lang table, linking each translation record to its corresponding base shift entry in the department_shifts table. This column is essential for querying and joining localized shift content with the main shift data, and its non-nullable integer type ensures every translation is properly associated with a valid department shift."
department_shifts_lang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the department_shifts_lang table stores language codes (e.g., 'en', 'es', 'fr') as VARCHAR(10) values to identify the specific language of translated shift content. This required field is commonly used in WHERE clauses or JOINs to filter or retrieve shift information in a particular language, making it a crucial component for implementing multilingual functionality in department shift management."
department_shifts_lang,l_name,varchar(255),NO,,,,,,255.0,,,"The l_name column in department_shifts_lang stores the localized (translated) name of a department shift in different languages, with a maximum length of 255 characters. This column is required (non-nullable) and should be used when querying or displaying shift names in specific languages, typically joined with the department_shifts table to match translations with their base shift records."
department_teams,department_team_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The department_team_id column serves as the primary key in the department_teams table, uniquely identifying each team-department relationship with an integer value. This identifier is essential for joining with other tables, particularly when connecting departments to their teams or querying team-specific information within the organizational hierarchy."
department_teams,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the department_teams table stores the official designation or title of each team within a department as a text string (up to 255 characters) and cannot be left empty. When writing SQL queries, this column can be used to filter, group, or identify specific teams by their names, making it particularly useful for queries that need to analyze or report on team-specific data within the organizational structure."
department_teams,department_id,int,NO,MUL,,,temp_departments,department_id,,10.0,0.0,"The department_id column in the department_teams table is a required foreign key that references the primary department to which a team belongs. This column is used to establish the hierarchical relationship between departments and their teams, making it essential for queries that need to filter or join teams based on their departmental association."
department_teams,hr_editable,tinyint,NO,,,0,,,,3.0,0.0,"The hr_editable column is a boolean flag (stored as tinyint) that indicates whether HR personnel have permission to modify the team's information, where 0 typically means not editable and 1 means editable by HR. When writing queries involving team management permissions, use this column to filter or check which teams can be modified by HR staff."
departments,department_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The department_id column serves as the primary key in the departments table, uniquely identifying each department within the organization. When writing SQL queries, this column can be used to join with other tables that reference departments, and since it's non-nullable, you can rely on it always having a valid value for filtering or grouping operations."
departments,department_name,varchar(255),YES,,,,,,255.0,,,"The department_name column in the departments table stores the descriptive names of organizational departments as text values up to 255 characters in length. Since this column is nullable, it can contain NULL values, and it's commonly used in SQL queries to identify or filter departments by their full names (e.g., ""Human Resources"" or ""Finance"")."
departments,weight,int,NO,,,,,,,10.0,0.0,"The 'weight' column in the departments table is a required integer field that likely represents a priority or sorting value for departments within the organization. When writing queries, this column can be used for ordering departments (ORDER BY weight) or for weighted calculations, ensuring consistent department prioritization across the system."
departments,bizrule,varchar(255),YES,,,,,,255.0,,,"The 'bizrule' column in the departments table stores business rules or policies specific to each department as a text string (up to 255 characters). This optional field can be used to query or filter departments based on their specific operational rules or guidelines, making it useful for understanding department-specific policies and constraints."
departments,role,varchar(255),YES,,,,,,255.0,,,"The 'role' column in the departments table stores text descriptions (up to 255 characters) that define the primary function or purpose of each department within the organization. When writing SQL queries, this column can be used to filter or group departments based on their functional roles, though be aware that the field is optional (nullable) and may not contain values for all department records."
departments,department_image,varchar(255),YES,,,,,,255.0,,,"The department_image column in the departments table stores file paths or URLs (up to 255 characters) that reference visual assets associated with each department, such as logos or representative images. This optional field (nullable) can be used in queries when you need to retrieve or filter departments based on their visual assets, though it's primarily used for display purposes rather than relational operations."
departments,is_active,tinyint,NO,,,1,,,,3.0,0.0,"The `is_active` column in the departments table is a boolean flag (stored as tinyint) that indicates whether a department is currently active (1) or inactive (0) within the organization. When writing queries, use this column to filter for active departments by adding `WHERE is_active = 1`, or to exclude inactive departments from results."
deployment_logs,deployment_logs_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The deployment_logs_id column serves as the primary key for the deployment_logs table, uniquely identifying each deployment event record. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific deployment events (e.g., WHERE deployment_logs_id = X)."
deployment_logs,deployment_logs_datetime,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The deployment_logs_datetime column in the deployment_logs table records the exact timestamp when each deployment event occurred, automatically populated with CURRENT_TIMESTAMP when a record is created. This non-nullable datetime field is essential for temporal queries and can be used to filter, sort, or analyze deployment activities within specific time periods, making it valuable for audit trails and deployment timeline analysis."
deployment_logs,deployment_logs_content,text,NO,,,,,,65535.0,,,"The deployment_logs_content column stores the detailed log content or message body associated with each deployment event, containing information such as deployment steps, error messages, configuration changes, or other relevant deployment-related details. This required (non-nullable) text field is essential for debugging and auditing deployment activities, and should be included in queries when analyzing specific deployment outcomes or troubleshooting deployment issues."
device_usage,device_usage_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The device_usage_id column serves as the primary key for the device_usage table, uniquely identifying each device usage record. When writing SQL queries, use this column for joining with related tables or filtering specific usage records, but avoid modifying its values as it's designed to maintain referential integrity within the database."
device_usage,date,datetime,NO,,,,,,,,,"The 'date' column in the device_usage table stores the timestamp when device activity or usage was recorded, using the datetime format. This non-nullable field is essential for temporal analysis of device usage patterns and can be used in SQL queries for filtering records by time periods, grouping usage data by date ranges, or joining with other time-based data."
device_usage,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the device_usage table is a required integer field that identifies which user the device usage record belongs to. This column is commonly used to join with user-related tables and filter or group device usage metrics by specific users, making it essential for analyzing device utilization patterns at the user level."
device_usage,device_serial,varchar(50),NO,MUL,,,,,50.0,,,"The device_serial column in the device_usage table stores unique device serial numbers as text strings (up to 50 characters) and is used to identify specific devices being tracked. As a non-nullable, indexed column (MUL), it's commonly used in WHERE clauses and JOIN operations to filter or link device-specific usage data, making it an essential field for querying device activity patterns and metrics."
dg_participant_action_log,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the dg_participant_action_log table, uniquely identifying each logged action or activity performed by participants. This non-nullable integer field is essential for referencing specific log entries and maintaining data integrity when tracking participant behaviors in the system."
dg_participant_action_log,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the dg_participant_action_log table is a required integer field that identifies which participant performed each logged action. When querying this table, user_id can be used to filter or group actions by specific participants, and it can also be joined with other tables containing participant information to enrich the audit trail data."
dg_participant_action_log,created,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The 'created' column in the dg_participant_action_log table automatically records the timestamp when each participant action is logged, using CURRENT_TIMESTAMP as the default value. This non-nullable timestamp field is essential for temporal queries and audit trail analysis, allowing you to filter, sort, or group participant actions by when they occurred."
dg_participant_action_log,company_id,int,YES,,,,,,,10.0,0.0,"The company_id column in the dg_participant_action_log table is an optional integer field that identifies which company is associated with a participant's action or activity. When writing queries, this column can be used to filter or group participant actions by company, making it useful for analyzing behavior patterns at the organizational level."
dg_participant_action_log,type,int,YES,,,,,,,10.0,0.0,"The ""type"" column in dg_participant_action_log is an integer field that categorizes the kind of action or activity performed by a participant in the system. When querying this column, you can use it to filter or group participant actions by their classification type, helping to analyze specific categories of participant behavior in the audit trail."
direct_giving_feedback,feedback_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The feedback_id column serves as the primary key in the direct_giving_feedback table, uniquely identifying each piece of feedback or response related to direct giving activities. This non-nullable integer field is essential for joining with other tables and should be referenced when querying specific feedback records."
direct_giving_feedback,original_feedback,text,NO,,,,,,65535.0,,,"The original_feedback column in the direct_giving_feedback table stores the complete, unmodified text of feedback provided by users about their direct giving or donation experience. This required (non-nullable) text field can be used in SQL queries to search for specific feedback content, analyze sentiment, or group similar feedback responses, making it valuable for understanding donor experiences and concerns."
direct_giving_feedback,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in the direct_giving_feedback table is a required integer field that identifies which user provided the feedback or response about a direct giving activity. This column can be used to join with other tables containing user information and is essential for tracking and analyzing feedback patterns by individual users.
direct_giving_feedback,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the direct_giving_feedback table records the exact date and time when each feedback entry was submitted, automatically populated with CURRENT_TIMESTAMP. This non-nullable datetime field is essential for temporal analysis of feedback patterns and can be used in SQL queries to filter, sort, or group feedback entries by their creation time."
direct_giving_feedback,last_edit_user_id,int,NO,,,,,,,10.0,0.0,"The last_edit_user_id column in the direct_giving_feedback table is a required integer field that stores the identifier of the user who most recently modified the feedback record. When writing queries, this column can be used to track who made the latest changes to feedback entries and can be joined with a users table to get detailed information about the editor."
direct_giving_feedback,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the direct_giving_feedback table records the timestamp when a feedback record was last modified, storing it as a datetime value. This column is mandatory (not nullable) and can be used to track the recency of feedback entries or filter feedback records based on when they were last updated."
direct_giving_feedback,status,tinyint,NO,,,0,,,,3.0,0.0,"The 'status' column in the direct_giving_feedback table is a required (non-nullable) tinyint field that likely represents the current state or processing stage of feedback entries. When querying this table, use this column to filter or group feedback records based on their status values (e.g., WHERE status = 1 for active feedback or status = 0 for inactive/archived feedback)."
direct_giving_feedback,edit_en_feedback,text,NO,,,,,,65535.0,,,"The edit_en_feedback column in the direct_giving_feedback table stores the English-language version of edited or processed feedback text related to direct giving activities. As a required (non-nullable) text field, it should be used when querying for formatted or finalized feedback content, particularly when working with English-language responses about donations or giving experiences."
direct_giving_feedback,edit_fr_feedback,text,NO,,,,,,65535.0,,,"The edit_fr_feedback column in the direct_giving_feedback table stores text-based feedback or comments that have been edited or modified from their original form. This required (non-nullable) text field is used to maintain a record of revised or updated feedback related to fundraising or direct giving activities, which could include edited versions of donor comments, suggestions, or responses."
direct_giving_feedback,mask_dg_identity,tinyint,NO,,,1,,,,3.0,0.0,"The mask_dg_identity column is a required boolean flag (tinyint) in the direct_giving_feedback table that indicates whether a donor's identity should be masked or hidden in their feedback. When writing queries, use this column with values 1 (true) or 0 (false) to filter or identify feedback entries where the donor has requested anonymity."
direct_giving_feedback,archive,tinyint,NO,,,0,,,,3.0,0.0,"The 'archive' column in the direct_giving_feedback table is a binary flag (tinyint) that indicates whether a feedback record is archived (1) or active (0), with a default value of 0. This column can be used in WHERE clauses to filter between active and archived feedback records, helping to manage the visibility and relevance of feedback data in queries."
disabled_subcategories,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the disabled_subcategories table, uniquely identifying each record of a user disabling a product subcategory. When writing SQL queries, this column can be used for precise record selection or joins, though typically you'll more commonly join using the user_id or subcategory_id columns for business logic purposes."
disabled_subcategories,subcategory_id,int,NO,MUL,,,productSubCategories,subcategory_id,,10.0,0.0,"The subcategory_id column in the disabled_subcategories table is a required integer field that references product subcategories from the productSubCategories table. This column is used to identify which specific product subcategory has been disabled, forming part of a composite relationship that links users to their subcategory deactivation actions."
disabled_subcategories,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the disabled_subcategories table is a required integer field that references the primary key from the users table, establishing who performed each subcategory deactivation action. When writing queries, this column can be used to join with the users table to retrieve information about which users have disabled specific product subcategories, or to filter and group deactivation records by user."
discount_log,log,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ""log"" column serves as the primary key identifier for each discount event recorded in the discount_log table, using an integer value that uniquely identifies each entry. This column is non-nullable and should be referenced when joining with other tables or filtering specific discount records in queries."
discount_log,created_at,datetime,YES,,,,,,,,,"The created_at column in the discount_log table stores the timestamp when each discount or promotional activity was initially recorded in the system. This datetime field can be used for temporal analysis of discount applications, such as filtering discount records within specific date ranges or analyzing discount patterns over time."
discount_log,product_id,int unsigned,YES,MUL,,,,,,10.0,0.0,"The product_id column in the discount_log table is a foreign key that references specific products to which discounts were applied. This column allows queries to link discount records with product information, making it useful for analyzing discount patterns and promotional effectiveness for individual products."
discount_log,purchasing_price,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The `purchasing_price` column in the `discount_log` table stores the original price of items before any discounts were applied, represented as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). When writing SQL queries, this column can be used to calculate discount amounts or to analyze price differences between original and discounted prices, and since it's nullable, you should handle potential NULL values appropriately in your calculations."
discount_log,price,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The 'price' column in the discount_log table stores the monetary value (with up to 2 decimal places) associated with each discount entry, representing either the discounted amount or the original price before the discount was applied. This column accepts NULL values and can store values up to 99999.99, making it suitable for tracking various price points in discount-related transactions."
discount_log,release_rate,int,NO,,,,,,,10.0,0.0,"The release_rate column in the discount_log table represents the percentage or rate at which a discount is released or made available to customers, stored as an integer value. This column is required (non-nullable) and can be used in queries to analyze or filter discount distributions, such as finding all discounts with specific release rates or calculating average release rates for different promotional periods."
discount_log,margin,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The 'margin' column in the discount_log table stores the profit margin (as a decimal value) that remains after applying the discount, allowing for tracking of profitability impact from promotional activities. This numeric field, with precision of 7 digits total and 2 decimal places, can be used in calculations to analyze how different discounts affect the company's profit margins, and can be NULL when margin information is not available or applicable."
discount_log,min_margin,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The min_margin column in the discount_log table represents the minimum profit margin (as a decimal value) that must be maintained when applying a discount or promotion. This column helps enforce business rules by ensuring that discounts don't reduce the profit margin below an acceptable threshold, and can be used in SQL queries to analyze or filter discount applications based on margin requirements."
discount_log,mon_qty_reserved,int,NO,,,0,,,,10.0,0.0,"The ""mon_qty_reserved"" column in the discount_log table stores the quantity of monthly discount allocations that have been reserved or set aside for a particular promotional activity. This required integer field helps track and manage the monthly quota of discounts, ensuring proper allocation and preventing overuse of promotional resources."
discount_log,mon_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The `mon_qty_sold_last_week` column in the discount_log table stores the total quantity of items sold during the previous week's Monday as an integer value. This metric can be used in SQL queries to analyze sales patterns and discount effectiveness by comparing Monday sales volumes, and since it's non-nullable, it will always contain a value (defaulting to 0 when no sales occurred)."
discount_log,mon_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The `mon_about_to_expire` column in the discount_log table is an integer field that indicates how many months remain before a discount or promotional offer expires. When querying this column, you can use it to filter or identify discounts that are approaching their expiration date, with lower numbers indicating discounts closer to expiration."
discount_log,mon_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,"The ""mon_left_over_to_sell"" column in the discount_log table represents the remaining monetary value or amount available for selling after a discount has been applied. This non-nullable integer field is useful for tracking the financial impact of discounts and can be used in queries to analyze remaining sales potential or inventory value after promotional activities."
discount_log,mon_date,date,NO,,,,,,,,,"The mon_date column in the discount_log table stores the specific date when a discount or promotional activity was recorded, using a standard date format. This column is mandatory (non-nullable) and can be used for filtering, grouping, or analyzing discount patterns by date, making it particularly useful for queries that need to track promotional activities within specific time periods."
discount_log,mon_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The mon_cust_rate column in the discount_log table stores the monthly customer discount rate as a decimal number with up to 7 total digits and 2 decimal places (e.g., 12345.67). This column is required (non-nullable) and can be used in SQL queries to analyze or calculate customer discount rates on a monthly basis, particularly useful when aggregating discount trends or comparing rates across different time periods."
discount_log,mon_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The mon_calc_magin column in the discount_log table stores the calculated monetary margin (in decimal format with 2 decimal places) for each discount transaction, representing the difference between the original price and the discounted price. This non-nullable field helps track the financial impact of discounts and promotions, with a default value of 0.00 if not specified."
discount_log,mon_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The ""mon_dyn_price"" column in the discount_log table stores the monetary dynamic price value with two decimal places, representing the adjusted price after applying discounts or promotional activities. This non-nullable decimal field, which defaults to 0.00, can be used in SQL queries to analyze price adjustments, calculate discount impacts, or track historical pricing changes in the system."
discount_log,tue_qty_reserved,int,NO,,,0,,,,10.0,0.0,"The `tue_qty_reserved` column in the discount_log table stores the integer quantity of items or slots reserved specifically for Tuesday as part of a discount or promotional offer. This non-nullable field helps track capacity management and reservation counts for Tuesday-specific promotions, with a default value of 0 when no reservations are made."
discount_log,tue_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The tue_qty_sold_last_week column in the discount_log table stores the total quantity of items sold on Tuesday of the previous week as a non-null integer value. This historical sales data can be used in SQL queries to analyze sales patterns or compare against current discount performance, particularly when evaluating the effectiveness of Tuesday-specific promotions or discounts."
discount_log,tue_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The `tue_about_to_expire` column in the discount_log table is an integer flag (0 or 1) that indicates whether a discount is approaching its expiration on Tuesday. When querying discount records, you can use this column to filter or identify discounts that are scheduled to expire on upcoming Tuesdays, which can be useful for promotional planning and customer notifications."
discount_log,tue_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,"The `tue_left_over_to_sell` column in the discount_log table represents the remaining quantity of items available for sale specifically on Tuesdays after applying discounts or promotions. This integer field, which cannot be null and defaults to 0, can be used in SQL queries to analyze inventory levels and sales capacity specifically for Tuesday operations or to track how promotional activities affect Tuesday sales availability."
discount_log,tue_date,date,NO,,,,,,,,,"The tue_date column in the discount_log table stores the specific date when a discount or promotional activity was applied, using a standard date format. This mandatory field (non-nullable) is essential for temporal analysis of discount applications and helps track the chronological sequence of promotional activities in the system."
discount_log,tue_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The tue_cust_rate column in the discount_log table stores the Tuesday customer discount rate as a decimal number with up to 7 total digits and 2 decimal places (e.g., 12345.67). This column is required (non-nullable) and is used to track specific discount rates applied to customers on Tuesdays as part of the system's promotional tracking history."
discount_log,tue_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The tue_calc_magin column in the discount_log table stores the calculated margin value (with 2 decimal places) for Tuesday-specific discount calculations, defaulting to 0.00 if not specified. This numeric field is required (non-nullable) and is commonly used in queries that analyze or calculate discount margins specifically for Tuesday promotions or discount applications."
discount_log,tue_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The `tue_dyn_price` column in the discount_log table stores the dynamic pricing amount specifically for Tuesdays, represented as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). This non-nullable field, defaulting to 0.00, can be used in SQL queries to analyze or compare Tuesday-specific pricing adjustments as part of the discount tracking system."
discount_log,wed_qty_reserved,int,NO,,,0,,,,10.0,0.0,"The ""wed_qty_reserved"" column in the discount_log table stores the quantity of items or slots reserved specifically for Wednesday-related promotions or discounts as a non-negative integer value. This column helps track and manage inventory or capacity reservations specifically allocated for Wednesday promotions, ensuring the system can properly monitor and control Wednesday-specific discount allocations."
discount_log,wed_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The `wed_qty_sold_last_week` column in the discount_log table stores the integer quantity of items sold specifically on Wednesday of the previous week, which can be used to analyze sales patterns and discount effectiveness. When querying this column, you can use it for numerical comparisons or aggregations to understand Wednesday-specific sales performance in relation to discount applications."
discount_log,wed_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The `wed_about_to_expire` column in the discount_log table is a binary integer flag (0 or 1) that indicates whether a discount was applied because a wedding registry was approaching its expiration date. When querying this column, use it as a boolean condition (WHERE wed_about_to_expire = 1) to filter for discount applications specifically related to soon-to-expire wedding registries."
discount_log,wed_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,"The ""wed_left_over_to_sell"" column in the discount_log table stores an integer value representing the remaining quantity of Wednesday-specific items or allocations available for sale after a discount application. This non-nullable field can be used in SQL queries to track inventory levels or availability specifically for Wednesday offerings, and since it has a default value of 0, it will always contain a numeric value that can be used for calculations or filtering conditions."
discount_log,wed_date,date,NO,,,,,,,,,"The `wed_date` column in the `discount_log` table stores the specific date when a discount was applied or a promotional activity occurred, using a standard date format (YYYY-MM-DD). This non-nullable field is essential for temporal analysis of discount patterns and can be used in SQL queries for filtering, grouping, or joining discount records based on specific dates or date ranges."
discount_log,wed_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The wed_cust_rate column in the discount_log table stores the special discount rate (as a decimal number with 2 decimal places) specifically applied to wedding customers, with values ranging from 0.00 to 99999.99. This required field helps track and analyze promotional rates offered to wedding-related customers, making it useful in queries that need to calculate or compare wedding customer discount percentages."
discount_log,wed_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The ""wed_calc_magin"" column in the discount_log table stores the calculated margin value (with 2 decimal places) for Wednesday-specific discount calculations, defaulting to 0.00 if not specified. This non-nullable decimal field is commonly used in SQL queries when analyzing or calculating profit margins for Wednesday promotional activities or when comparing margin differences across different days of the week."
discount_log,wed_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The `wed_dyn_price` column in the discount_log table stores the dynamic pricing amount specifically for Wednesday bookings or promotions, represented as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). This non-nullable field defaults to 0.00 and can be used in SQL queries to analyze or compare Wednesday-specific pricing adjustments within the discount tracking system."
discount_log,thu_qty_reserved,int,NO,,,0,,,,10.0,0.0,"The thu_qty_reserved column in the discount_log table stores the quantity of items or units that were reserved under a specific discount or promotional activity on Thursdays. This integer field is required (non-nullable) and defaults to 0, making it useful for tracking Thursday-specific reservation volumes in discount-related transactions."
discount_log,thu_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The thu_qty_sold_last_week column in the discount_log table stores the total quantity of items sold specifically on Thursday of the previous week, represented as a non-nullable integer value. This metric is used to track sales performance patterns and helps inform discount decisions based on historical Thursday sales data."
discount_log,thu_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The `thu_about_to_expire` column in the discount_log table is a binary integer flag (0 or 1) that indicates whether a discount is approaching its expiration on Thursday. When querying this column, use it as a boolean condition to filter or identify discounts that are scheduled to expire soon, particularly those ending on Thursdays."
discount_log,thu_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,"The `thu_left_over_to_sell` column in the discount_log table represents the remaining quantity of items available for sale on Thursday after applying discounts or promotions. This integer value, which cannot be null and defaults to 0, can be used in SQL queries to analyze inventory levels and track sales performance specifically for Thursday's promotional activities."
discount_log,thu_date,date,NO,,,,,,,,,"The thu_date column in the discount_log table stores the specific date when a discount or promotional activity was applied, using a standard date format. This mandatory field (non-nullable) is essential for temporal analysis of discount applications and helps track the chronological history of promotional activities in the system."
discount_log,thu_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The thu_cust_rate column in the discount_log table stores the customer's discount rate as a decimal number with up to 7 total digits and 2 decimal places (e.g., 12345.67). This column is required (non-nullable) and can be used in SQL queries to analyze or calculate the specific discount rates applied to customer transactions, making it useful for reporting on promotional effectiveness or customer savings."
discount_log,thu_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The thu_calc_magin column in the discount_log table stores the calculated margin value (with 2 decimal places) associated with each discount transaction, represented as a decimal number. This numeric field is required (non-nullable) and has a default value of 0.00, making it useful for tracking financial margins or threshold calculations related to discount applications."
discount_log,thu_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The thu_dyn_price column in the discount_log table stores the dynamic price value for Thursday, represented as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). This column is required (not nullable) and has a default value of 0.00, making it suitable for queries that need to analyze or compare Thursday-specific pricing in discount tracking scenarios."
discount_log,fri_qty_reserved,int,NO,,,0,,,,10.0,0.0,"The fri_qty_reserved column in the discount_log table stores the quantity of items that were reserved for Friday-specific promotions or discounts as a non-negative integer value. This column is required (not nullable) and helps track inventory allocation specifically for Friday promotional activities, which is essential for analyzing discount usage patterns and inventory management for end-of-week promotions."
discount_log,fri_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The fri_qty_sold_last_week column in the discount_log table stores the total quantity of items sold on the previous Friday, represented as a non-null integer value. This metric is likely used to analyze sales patterns and inform discount decisions based on historical Friday performance, making it useful in queries that compare promotional effectiveness with specific day-of-week sales data."
discount_log,fri_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The 'fri_about_to_expire' column in the discount_log table is a binary integer flag (0 or 1) that indicates whether a discount is approaching its expiration on a Friday. This column can be used in WHERE clauses to filter for discounts that are specifically set to expire on upcoming Fridays, which is useful for promotional planning and customer notifications."
discount_log,fri_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,"The `fri_left_over_to_sell` column in the discount_log table stores the remaining quantity of items available for sale specifically on Fridays after applying discounts or promotions. This integer value, which cannot be null and defaults to 0, can be used in SQL queries to analyze inventory levels and promotional effectiveness for Friday sales activities."
discount_log,fri_date,date,NO,,,,,,,,,"The fri_date column in the discount_log table stores the Friday date associated with each discount record, using a standard date format. This column is mandatory (non-nullable) and helps organize discount history by weekly periods, where Friday serves as the anchor date for tracking promotional activities and discount applications."
discount_log,fri_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The fri_cust_rate column in the discount_log table stores the discount rate (as a decimal number with 2 decimal places) specifically applied to first-time customers, represented as a percentage value (e.g., 15.00 for a 15% discount). When querying this column, you can use it for calculations or comparisons to analyze first-time customer discount patterns, and since it's non-nullable, every discount record will have a defined rate value."
discount_log,fri_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The fri_calc_magin column in the discount_log table stores the calculated margin value (with 2 decimal places) for Friday-specific discount calculations, defaulting to 0.00 if not specified. This non-nullable decimal field is commonly used in SQL queries to analyze or calculate Friday-specific pricing adjustments and their impact on profit margins within the discount tracking system."
discount_log,fri_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The fri_dyn_price column in the discount_log table stores the dynamic pricing amount specifically for Friday sales, represented as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). This non-nullable field is used to track special Friday pricing adjustments as part of the system's promotional history, with a default value of 0.00 when no special Friday pricing is applied."
discount_log2,discount_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The discount_log_id column serves as the primary key in the discount_log2 table, uniquely identifying each historical discount or promotional record. When querying this table, use this column for precise record selection or when joining with related tables that reference specific discount log entries."
discount_log2,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the discount_log2 table is a required integer field that serves as a foreign key reference to identify which product received a discount or promotion. This column is indexed (as indicated by the MUL key type) to optimize queries that filter or join based on product relationships, making it efficient to analyze discount history for specific products."
discount_log2,current_price,"decimal(7,2)",NO,,,,,,,7.0,2.0,"The current_price column in the discount_log2 table stores the actual selling price of an item after any discounts or promotions have been applied, with precision up to 2 decimal places and a maximum of 7 total digits. When querying historical discount records, this column can be used to analyze final pricing or calculate the discount amount by comparing it against original prices."
discount_log2,delivery_date,date,NO,,,,,,,,,"The delivery_date column in the discount_log2 table stores the date when a discount or promotional offer was delivered or became active in the system. As a required (non-nullable) date field, it can be used for temporal analysis of discount activities, such as filtering records within specific date ranges or grouping promotional data by time periods."
discount_log2,created_at,datetime,NO,MUL,,,,,,,,"The created_at column in the discount_log2 table stores the timestamp when each discount or promotional record was initially created, using the datetime format. This indexed column (MUL) is required (non-nullable) and is commonly used for filtering and sorting discount records by their creation date, making it useful for analyzing promotional activity trends over time."
discount_log2,expected_losses,int,NO,,,,,,,10.0,0.0,"The expected_losses column in the discount_log2 table stores integer values representing the anticipated financial impact or revenue reduction from applying specific discounts or promotions. This required (non-nullable) field helps track and analyze the projected costs of promotional activities, making it useful in queries that evaluate the financial implications of discount campaigns."
discount_log2,quantity_available_for_sell,int,YES,,,,,,,10.0,0.0,"The quantity_available_for_sell column in the discount_log2 table represents the number of units or items that were available for purchase under a specific discount or promotion. When writing SQL queries, this integer field can be used to analyze inventory levels during promotional periods or to track how many items were eligible for discounts at different points in time."
discount_log2,cust_rate,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The ""cust_rate"" column in the discount_log2 table stores the customer-specific discount rate as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). When writing SQL queries, this column can be used to analyze or filter discount percentages applied to specific customers, and since it's nullable, remember to handle NULL values appropriately in your calculations or comparisons."
discount_log2,reserved,int,YES,,,,,,,10.0,0.0,"The 'reserved' column in the discount_log2 table is an optional integer field that likely serves as a placeholder or flag for future system functionality related to discount tracking. When writing SQL queries, this column can be included in SELECT statements but should be handled with NULL checks since it's nullable, and its specific business purpose should be confirmed before using it in any critical logic."
discount_log2,target,int,YES,,,,,,,10.0,0.0,"The 'target' column in the discount_log2 table is an integer field that likely identifies the specific entity (such as a product, order, or customer) to which the discount was applied. When writing queries, this column can be used to filter or group discount records by their target entity, though its nullable property suggests that some discount records might not have an associated target."
discount_log2,expected_sales,int,NO,,,,,,,10.0,0.0,"The expected_sales column in the discount_log2 table stores integer values representing the anticipated or projected sales volume during a promotional period or discount campaign. This required (non-nullable) field helps track sales forecasts associated with specific discount activities, enabling comparison between expected and actual performance of promotional initiatives."
discount_log2,formula_log,varchar(60000),YES,,,,,,60000.0,,,"The formula_log column in the discount_log2 table stores detailed formula or calculation rules used to determine discount amounts, accepting variable-length text up to 60,000 characters. This column can be NULL and is typically used when querying for specific discount calculation methods or auditing how particular promotional discounts were computed in the past."
discount_log2_new,discount_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The discount_log_id column serves as the primary key in the discount_log2_new table, uniquely identifying each discount-related event or change record. As a non-nullable integer field, it ensures each log entry can be distinctly referenced in queries, making it ideal for JOIN operations or specific record lookups when tracking discount history."
discount_log2_new,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the discount_log2_new table is a non-nullable integer field that serves as a reference to identify which product was involved in a discount-related event. As indicated by the MUL key type, this column is indexed to optimize queries filtering or joining on product_id, suggesting it's frequently used to look up discount history for specific products."
discount_log2_new,current_price,"decimal(7,2)",NO,,,,,,,7.0,2.0,"The current_price column in the discount_log2_new table stores the monetary value (with 2 decimal places) of an item's price at the time a discount event was logged. This required field can hold values up to 99999.99, making it suitable for tracking price points before or after discount applications in the audit trail."
discount_log2_new,delivery_date,date,NO,MUL,,,,,,,,"The delivery_date column in the discount_log2_new table stores the date when a discount-related delivery or event occurred, using a standard date format. As a non-nullable field with a multiple-key index (MUL), this column is commonly used for filtering and joining operations, particularly when analyzing discount events within specific date ranges or when correlating with delivery schedules."
discount_log2_new,created_at,datetime,NO,MUL,,,,,,,,"The created_at column in the discount_log2_new table stores the exact timestamp (date and time) when each discount log entry was created, using a datetime format. This non-nullable column is indexed (MUL) to optimize queries that filter or sort by creation time, making it particularly useful for temporal analysis of discount events or for finding log entries within specific time periods."
discount_log2_new,expected_losses,int,NO,,,,,,,10.0,0.0,"The expected_losses column in the discount_log2_new table stores integer values representing anticipated financial losses associated with a discount event, and this field must always contain a value (non-nullable). When writing queries, this column can be used to analyze or aggregate expected financial impacts of discount activities, such as finding total expected losses across different time periods or grouping discount events by loss thresholds."
discount_log2_new,quantity_available_for_sell,int,YES,,,,,,,10.0,0.0,"The quantity_available_for_sell column in the discount_log2_new table stores the remaining number of items or units that are eligible for a discount at the time the log entry was created. When querying this column, you can use it to analyze historical discount inventory levels or track how many discounted items were available at different points in time, with NULL values indicating cases where the quantity wasn't recorded or wasn't relevant to the logged event."
discount_log2_new,cust_rate,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The cust_rate column stores decimal values representing customer-specific discount rates or percentages with up to 2 decimal places of precision. When writing queries, this column can be used to filter or analyze specific discount rates applied to customers, though its nullable nature means you should handle NULL values appropriately in your calculations or comparisons."
discount_log2_new,reserved,int,YES,,,,,,,10.0,0.0,"The ""reserved"" column in the discount_log2_new table is an optional integer field that appears to be a placeholder for future use or system-reserved functionality in the discount logging system. When writing queries, this column can be safely ignored unless specifically needed for audit purposes, and NULL values should be expected and handled appropriately."
discount_log2_new,target,int,YES,,,,,,,10.0,0.0,"The ""target"" column in the discount_log2_new table is an integer field that likely identifies the specific entity (such as a product, order, or customer) to which the discount was applied. When writing queries, this column can be used to filter or group discount events by their target identifier, though its nullable nature suggests that some discount events might not be associated with a specific target."
discount_log2_new,expected_sales,int,NO,,,,,,,10.0,0.0,"The expected_sales column in the discount_log2_new table stores integer values representing anticipated or projected sales figures associated with a discount event. This required (non-nullable) field likely captures sales volume expectations that were used in discount planning or decision-making, helping track the business rationale behind historical discount changes."
discount_log2_new,formula_log,varchar(60000),YES,,,,,,60000.0,,,"The formula_log column in discount_log2_new stores detailed formula expressions or calculations used to determine discount values, with a generous varchar length of 60,000 characters to accommodate complex discount logic. When querying this column, consider using string manipulation functions to extract or analyze specific parts of the formula, and be aware that NULL values are permitted since it's a nullable field."
discount_log_new,log,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ""log"" column serves as the primary key identifier for each discount record in the discount_log_new table, using auto-incrementing integers to ensure unique identification of each entry. This column is essential for referencing specific discount events and should be included in queries where you need to join with other tables or filter for particular discount log entries."
discount_log_new,created_at,datetime,YES,,,,,,,,,"The created_at column in the discount_log_new table stores the timestamp when each discount record was initially created, using a datetime format. This column is useful for temporal analysis of discount applications and can be used in SQL queries to filter or group discount records by specific time periods or to sort them chronologically."
discount_log_new,product_id,int unsigned,YES,MUL,,,,,,10.0,0.0,"The product_id column in the discount_log_new table is an unsigned integer that serves as a foreign key reference to identify which product received the discount. This column is indexed (MUL) to optimize queries joining with the products table, and it can contain NULL values when the discount applies to something other than a specific product (like cart-wide or category-level discounts)."
discount_log_new,purchasing_price,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The purchasing_price column in the discount_log_new table stores the original purchase price of an item before any discounts were applied, represented as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). When writing SQL queries, this column can be used to calculate discount percentages or to compare pre- and post-discount prices, and since it's nullable, remember to handle NULL values appropriately in your calculations."
discount_log_new,price,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The 'price' column in the discount_log_new table stores the original price value (before discount) with up to 5 digits before the decimal point and 2 digits after, allowing for precise price tracking up to $99,999.99. This column can contain NULL values and is commonly used in calculations to determine discount amounts or to compare prices before and after discounts were applied."
discount_log_new,release_rate,int,NO,,,,,,,10.0,0.0,"The release_rate column in the discount_log_new table stores an integer value representing the rate at which a discount is released or applied in the system. When querying this non-nullable field, you can use it to analyze or filter discount records based on their release rates, which could be useful for understanding discount distribution patterns or validating discount application rules."
discount_log_new,margin,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The 'margin' column in the discount_log_new table stores the profit margin (as a decimal number with 2 decimal places) associated with each discount transaction. When writing SQL queries, this column can be used to analyze the financial impact of discounts on profitability, and since it's nullable, remember to handle NULL values appropriately using COALESCE or IS NULL/IS NOT NULL conditions when needed."
discount_log_new,min_margin,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The min_margin column in the discount_log_new table stores the minimum profit margin (as a decimal number with 2 decimal places) that must be maintained when applying a discount. When writing SQL queries, this column can be used to filter or analyze discounts based on their minimum margin requirements, helping ensure that discounts don't reduce profits below acceptable thresholds."
discount_log_new,mon_qty_reserved,int,NO,,,0,,,,10.0,0.0,"The mon_qty_reserved column in the discount_log_new table stores an integer value representing the quantity of items or units reserved under a specific discount for monitoring purposes. This non-nullable field appears to track reservation quantities, which is useful for analyzing discount usage patterns and inventory management in the context of discount applications."
discount_log_new,mon_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The mon_qty_sold_last_week column in the discount_log_new table stores the total quantity of items sold during the previous week, represented as a non-nullable integer value. This metric is likely used to track sales performance and inform discount decisions based on historical sales volumes, making it useful for queries that analyze sales trends or discount effectiveness over time."
discount_log_new,mon_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The `mon_about_to_expire` column in the discount_log_new table is a required integer field that likely indicates the number of months remaining before a discount expires. When querying this column, you can use it to filter or analyze discounts based on their expiration timeline, such as finding discounts that are close to expiring (e.g., WHERE mon_about_to_expire <= 3)."
discount_log_new,mon_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,"The `mon_left_over_to_sell` column in the discount_log_new table is a required integer field that tracks the remaining monetary value available for sale or discount application. This column can be used in SQL queries to filter or analyze the remaining discount capacity, with zero (0) being a common default value, making it useful for identifying fully utilized versus available discount allocations."
discount_log_new,mon_date,date,NO,,,,,,,,,"The `mon_date` column in the `discount_log_new` table stores the calendar date when a discount was applied or recorded, using a standard date format. This mandatory (non-nullable) field is essential for temporal analysis of discount activities and can be used in SQL queries for date-based filtering, grouping, or reporting of discount events."
discount_log_new,mon_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The mon_cust_rate column in the discount_log_new table stores the monthly customer discount rate as a decimal number with up to 7 total digits and 2 decimal places (e.g., 12345.67). This required (non-nullable) field is used to track the specific discount rate applied to customers on a monthly basis, making it useful for queries that need to analyze or report on customer discount rates over time."
discount_log_new,mon_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The mon_calc_magin column in the discount_log_new table stores the calculated margin amount as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). This required field, which defaults to 0.00, appears to track the monetary margin associated with each discount entry, likely used for financial analysis and reporting of discount impacts."
discount_log_new,mon_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The mon_dyn_price column in the discount_log_new table stores monetary dynamic pricing values with up to 2 decimal places and a maximum of 7 total digits, representing price adjustments or dynamic pricing calculations. This non-nullable field, defaulting to 0.00, can be used in SQL queries to analyze or report on price modifications, and should be included in calculations involving discount-related financial computations."
discount_log_new,tue_qty_reserved,int,NO,,,0,,,,10.0,0.0,"The tue_qty_reserved column in the discount_log_new table stores an integer value representing the quantity of items reserved specifically for Tuesday discounts or promotions. This non-nullable field must contain a value (defaulting to 0), and it's used to track inventory allocation for Tuesday-specific discount offerings or promotional events."
discount_log_new,tue_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The tue_qty_sold_last_week column in the discount_log_new table stores the integer quantity of items sold specifically on Tuesday of the previous week, serving as a reference point for discount-related decisions. When querying this column, you can use it to analyze sales patterns or compare Tuesday performance against other days, and since it's non-nullable, you can reliably perform aggregate functions without needing to handle NULL values."
discount_log_new,tue_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The `tue_about_to_expire` column in the discount_log_new table is a required integer field that likely serves as a flag (0/1) to indicate whether a discount is approaching its expiration on Tuesday. When querying this column, use it in WHERE clauses or conditional statements to filter or identify discounts that are scheduled to expire on upcoming Tuesdays."
discount_log_new,tue_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,"The `tue_left_over_to_sell` column in the discount_log_new table represents the remaining quantity of items available for sale specifically on Tuesdays after applying discounts. This integer field, which cannot contain NULL values, is useful when writing queries to analyze inventory levels and discount effectiveness for Tuesday sales periods."
discount_log_new,tue_date,date,NO,,,,,,,,,"The `tue_date` column in the `discount_log_new` table stores the date (in DATE format) when a discount was applied or recorded, specifically representing the Tuesday of the week in which the discount event occurred. This required (non-nullable) field is useful for grouping and analyzing discount activities by weekly periods, where Tuesday serves as the reference day for weekly reporting or analysis."
discount_log_new,tue_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The tue_cust_rate column in the discount_log_new table stores the Tuesday customer discount rate as a decimal number with up to 7 total digits and 2 decimal places (e.g., 12345.67). This column is required (non-nullable) and can be used in SQL queries to analyze or filter specific Tuesday discount rates applied to customers, making it useful for reporting on day-specific discount patterns."
discount_log_new,tue_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The tue_calc_magin column in the discount_log_new table stores a calculated margin value with two decimal places, representing a financial metric related to discount calculations. This non-nullable decimal field, which defaults to 0.00, should be used in SQL queries when analyzing or reporting on margin calculations specifically for Tuesday-related discount activities or calculations."
discount_log_new,tue_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The tue_dyn_price column in the discount_log_new table stores the dynamic pricing value specifically for Tuesdays, represented as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). When querying this column, you can use it for calculations or comparisons involving Tuesday-specific pricing adjustments, and since it's non-nullable with a default of 0.00, you can always expect a valid numeric value."
discount_log_new,wed_qty_reserved,int,NO,,,0,,,,10.0,0.0,The wed_qty_reserved column in the discount_log_new table stores the integer quantity of items that have been reserved specifically for Wednesday-related discounts or promotions. This non-nullable field must contain a value (defaulting to 0) and is used to track inventory allocation for Wednesday-specific discount events or promotions.
discount_log_new,wed_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The `wed_qty_sold_last_week` column in the discount_log_new table stores the integer quantity of items sold specifically on Wednesday of the previous week, serving as a reference point for discount-related decisions. When querying this column, you can use it to analyze Wednesday-specific sales patterns or compare it with other weekday sales volumes, noting that it will always contain a value (non-nullable) with a default of 0 if no sales occurred."
discount_log_new,wed_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The `wed_about_to_expire` column in the discount_log_new table is a required integer field (non-nullable) that likely serves as a flag or indicator for discounts that are approaching their expiration on Wednesdays. When querying this column, use it as a boolean-like condition where 0 typically indicates false (not about to expire on Wednesday) and non-zero values indicate true (about to expire on Wednesday)."
discount_log_new,wed_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,"The `wed_left_over_to_sell` column in the discount_log_new table is a required integer field that tracks the remaining quantity of items available for sale specifically on Wednesdays after discounts have been applied. This column can be used in SQL queries to analyze inventory levels and discount effectiveness for Wednesday sales, with zero being a default value when no items are left to sell."
discount_log_new,wed_date,date,NO,,,,,,,,,"The wed_date column in the discount_log_new table stores the calendar date when a discount was applied or recorded, using a standard date format. This required (non-nullable) field is essential for temporal analysis of discount activities and can be used in SQL queries for date-based filtering, grouping, or joining with other date-related data."
discount_log_new,wed_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The wed_cust_rate column in the discount_log_new table stores the percentage or rate of discount specifically applied to wedding customers, represented as a decimal number with up to 7 total digits and 2 decimal places (e.g., 15.50 for a 15.5% discount). When querying this column, you can use it for calculations or comparisons involving wedding customer discount rates, and since it's non-nullable, you can expect a value to always be present."
discount_log_new,wed_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The wed_calc_magin column in the discount_log_new table stores the calculated margin value for Wednesday-specific discount calculations as a decimal number with 7 total digits and 2 decimal places. This required (non-nullable) field appears to track margin calculations specific to Wednesday discount operations, with a default value of 0.00, and should be used when analyzing or reporting on margin-related metrics for Wednesday discount activities."
discount_log_new,wed_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The ""wed_dyn_price"" column in the discount_log_new table stores the dynamic pricing amount specifically for Wednesday offerings, represented as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). Since this column is non-nullable and has a default value of 0.00, it will always contain a value, making it reliable for calculations and comparisons in queries related to Wednesday-specific pricing analysis."
discount_log_new,thu_qty_reserved,int,NO,,,0,,,,10.0,0.0,"The thu_qty_reserved column in the discount_log_new table stores an integer value representing the quantity of items or units reserved under a specific discount transaction on Thursdays. This non-nullable field is used for tracking and analyzing Thursday-specific reservation quantities, which is important for understanding discount usage patterns and inventory management on that particular day of the week."
discount_log_new,thu_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The thu_qty_sold_last_week column in the discount_log_new table stores the integer quantity of items sold specifically on Thursday of the previous week, serving as a historical sales metric. This non-nullable field can be used in SQL queries to analyze Thursday sales patterns or compare against other weekday sales volumes, particularly when evaluating discount effectiveness based on historical sales data."
discount_log_new,thu_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The `thu_about_to_expire` column in the discount_log_new table is a required integer field that likely serves as a flag (0/1) to indicate whether a discount is approaching its expiration on Thursday. When querying this column, use it in WHERE clauses or conditional statements to filter or identify discounts that are nearing their end date specifically on Thursdays."
discount_log_new,thu_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,"The `thu_left_over_to_sell` column in the discount_log_new table is a required integer field that tracks the remaining quantity of items available for sale on Thursdays after applying discounts. This column can be used in SQL queries to analyze inventory levels and discount effectiveness specifically for Thursday sales, with zero being a common default value indicating no remaining items to sell."
discount_log_new,thu_date,date,NO,,,,,,,,,"The thu_date column in the discount_log_new table stores the date when a discount was applied or recorded, using a standard date format. This mandatory field (non-nullable) is essential for temporal analysis of discount activities and helps track when specific discount events occurred in the system."
discount_log_new,thu_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The thu_cust_rate column in the discount_log_new table stores the customer's discount rate as a decimal number with up to 7 total digits and 2 decimal places (e.g., 12345.67). This required (non-nullable) field is used to track the specific percentage or rate of discount applied to a customer's transaction, making it essential for discount-related calculations and reporting."
discount_log_new,thu_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The thu_calc_magin column in the discount_log_new table stores calculated margin values with two decimal places of precision, representing a financial metric related to discount calculations. This non-nullable decimal field, which defaults to 0.00, should be used in SQL queries when analyzing or reporting on margin calculations associated with discount transactions."
discount_log_new,thu_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The thu_dyn_price column in the discount_log_new table stores the dynamic pricing amount specifically for Thursday, represented as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). When querying this column, you can use it for calculations or comparisons involving Thursday-specific pricing adjustments, and since it's non-nullable with a default of 0.00, you can rely on always having a valid numeric value."
discount_log_new,fri_qty_reserved,int,NO,,,0,,,,10.0,0.0,"The fri_qty_reserved column in the discount_log_new table stores an integer value representing the quantity of items reserved for Friday-specific discounts or promotions. This non-nullable field must contain a value (defaulting to 0), and it's used to track inventory allocation specifically for Friday-based discount activities or promotions."
discount_log_new,fri_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The fri_qty_sold_last_week column in the discount_log_new table stores the integer quantity of items sold specifically on Friday of the previous week, serving as a reference point for discount-related decisions. When querying this column, you can use it to analyze Friday-specific sales patterns or compare it with other daily sales metrics, and since it's non-nullable, you can rely on it always having a value (defaulting to 0 when no sales occurred)."
discount_log_new,fri_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The fri_about_to_expire column in the discount_log_new table is a required integer field (non-nullable) that likely serves as a flag (0/1) to indicate whether a discount is approaching its expiration on a Friday. When querying this column, use it as a boolean condition to filter or identify discounts that are scheduled to expire on upcoming Fridays, typically with WHERE fri_about_to_expire = 1 for expiring discounts or fri_about_to_expire = 0 for non-expiring ones."
discount_log_new,fri_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,"The fri_left_over_to_sell column in the discount_log_new table stores an integer value representing the remaining quantity of items available for sale on Fridays after applying discounts. This non-nullable field can be used in SQL queries to analyze inventory levels and discount effectiveness specifically for Friday sales, with a default value of 0 when no specific quantity is specified."
discount_log_new,fri_date,date,NO,,,,,,,,,"The fri_date column in the discount_log_new table stores the Friday date associated with each discount record, using a standard date format. This column appears to be used for weekly tracking or reporting purposes, likely representing the end of a business week when discounts were applied or processed."
discount_log_new,fri_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The fri_cust_rate column in the discount_log_new table stores the customer discount rate specifically applied on Fridays, represented as a decimal number with up to 7 total digits and 2 decimal places (e.g., 12345.67). When querying this column, you can use it for calculations or comparisons involving Friday-specific discount rates, and since it's non-nullable, you can expect a value to always be present."
discount_log_new,fri_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The fri_calc_magin column in the discount_log_new table stores the calculated margin value for Friday-specific discount calculations as a decimal number with 7 total digits and 2 decimal places. This column is required (non-nullable) and defaults to 0.00, suggesting it's used to track specific margin calculations or adjustments that are applied to Friday discount scenarios."
discount_log_new,fri_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The fri_dyn_price column in the discount_log_new table stores the dynamic pricing amount specifically for Fridays, represented as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). When querying this column, you can use it for calculations or comparisons involving Friday-specific pricing adjustments, and since it's non-nullable with a default of 0.00, you can always expect a valid numeric value."
discount_log_new,sat_qty_reserved,int,NO,,,0,,,,10.0,0.0,"The sat_qty_reserved column in the discount_log_new table stores an integer value representing the quantity of items or units reserved under a specific discount transaction. This required field (non-nullable) appears to track reservation quantities for discounted items, which is useful for inventory management and discount usage analysis."
discount_log_new,sat_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The `sat_qty_sold_last_week` column in the discount_log_new table stores the integer quantity of items sold during the previous week for Saturday specifically, and cannot contain NULL values. This column can be used in SQL queries to analyze weekly sales patterns or to compare Saturday sales volumes when evaluating discount effectiveness."
discount_log_new,sat_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The `sat_about_to_expire` column in the discount_log_new table is a required integer field (non-nullable) that likely serves as a flag or indicator for discounts related to subscriptions or services approaching their expiration date. When querying this column, use it as a boolean-like condition where 0 typically indicates not about to expire and other values (likely 1) indicate the discount is approaching expiration, making it useful for filtering and reporting on time-sensitive discount scenarios."
discount_log_new,sat_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,"The `sat_left_over_to_sell` column in the discount_log_new table represents the remaining quantity of items or seats available for sale after a discount has been applied. This integer field is required (non-nullable) and can be used in queries to track inventory levels or seat availability at the time a discount was recorded, making it useful for analyzing sales capacity and discount effectiveness."
discount_log_new,sat_date,date,NO,,,,,,,,,"The sat_date column in the discount_log_new table stores the calendar date when a discount was applied or became effective, using a standard date format. This mandatory field (non-nullable) helps track the temporal aspect of discount applications and can be used for date-based filtering, reporting, and analyzing discount patterns over time."
discount_log_new,sat_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The sat_cust_rate column in the discount_log_new table stores customer satisfaction ratings associated with discount transactions as a decimal number with up to 7 total digits and 2 decimal places (e.g., 12345.67). When querying this column, you can use it for numerical comparisons or aggregations to analyze customer satisfaction levels in relation to applied discounts, and since it's non-nullable, every discount record will have a satisfaction rating value."
discount_log_new,sat_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The sat_calc_magin column in the discount_log_new table stores a calculated margin value with two decimal places, representing a financial metric related to discount calculations. This non-nullable decimal field, which defaults to 0.00, should be used in SQL queries when analyzing or reporting on margin calculations associated with discount transactions."
discount_log_new,sat_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The sat_dyn_price column in the discount_log_new table stores the dynamic or adjusted price value with two decimal places of precision, formatted as a decimal number up to 99999.99. This column is required (non-nullable) and appears to track the final or calculated price after applying discounts or dynamic pricing adjustments, with a default value of 0.00."
discount_log_new,sun_qty_reserved,int,NO,,,0,,,,10.0,0.0,"The sun_qty_reserved column in the discount_log_new table stores an integer value representing the quantity of items reserved under specific discount conditions, with a default value of 0. This non-nullable field is likely used for tracking inventory or allocation counts related to discounted items, helping maintain accurate records of reserved quantities in the discount tracking system."
discount_log_new,sun_qty_sold_last_week,int,NO,,,0,,,,10.0,0.0,"The sun_qty_sold_last_week column in the discount_log_new table stores the integer quantity of items sold during the previous Sunday, serving as a weekly sales benchmark. This non-nullable field is commonly used in SQL queries to analyze weekly sales patterns and can be compared with current sales figures to track performance trends."
discount_log_new,sun_about_to_expire,int,NO,,,0,,,,10.0,0.0,"The `sun_about_to_expire` column in the discount_log_new table is a binary integer flag (0 or 1) that indicates whether a discount is approaching its expiration date. When querying this column, use it as a boolean condition (WHERE sun_about_to_expire = 1) to filter for discounts that are nearing their end date."
discount_log_new,sun_left_over_to_sell,int,NO,,,0,,,,10.0,0.0,The `sun_left_over_to_sell` column in the discount_log_new table is a required integer field that tracks the remaining quantity of items available for sale after a discount has been applied. This column can be used in SQL queries to analyze inventory levels during discount periods or to monitor how discounts affect remaining stock quantities.
discount_log_new,sun_date,date,NO,,,,,,,,,"The sun_date column in the discount_log_new table stores the calendar date when a discount was applied or recorded in the system. When writing SQL queries, this mandatory date field can be used for filtering discount records by specific dates or date ranges, and for analyzing discount patterns over time (e.g., SELECT * FROM discount_log_new WHERE sun_date BETWEEN '2023-01-01' AND '2023-12-31')."
discount_log_new,sun_cust_rate,"double(7,2)",NO,,,,,,,7.0,2.0,"The sun_cust_rate column in the discount_log_new table stores the customer-specific discount rate as a decimal number with up to 7 total digits and 2 decimal places (e.g., 12345.67). When writing SQL queries, this column can be used to filter or aggregate discount rates, and since it's non-nullable, you can rely on it always having a value."
discount_log_new,sun_calc_magin,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The sun_calc_magin column in the discount_log_new table stores a decimal value with up to 5 digits before the decimal point and 2 digits after (format: #####.##), representing a margin calculation related to discounts. When querying this non-nullable field, expect values to be precise to two decimal places, with a default value of 0.00 if no specific margin is recorded."
discount_log_new,sun_dyn_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The sun_dyn_price column in the discount_log_new table stores dynamic pricing values with up to 2 decimal places and a maximum of 7 total digits, defaulting to 0.00 when no value is specified. This non-nullable decimal field can be used in SQL queries to analyze or filter discount records based on specific dynamic pricing values, particularly useful in reporting scenarios where precise price calculations are needed."
distanceCalculation,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the distanceCalculation table, uniquely identifying each distance calculation record through a non-nullable integer value. When writing SQL queries, this column can be used for precise record selection (WHERE id = X) or for joining with any related tables that reference these distance calculations."
distanceCalculation,start_lat,"decimal(10,8)",NO,MUL,,,,,,10.0,8.0,"The start_lat column in the distanceCalculation table stores the starting latitude coordinate as a high-precision decimal number (10 digits total, 8 after decimal point) and is used in spatial distance calculations. This non-nullable column is indexed (MUL) to optimize queries involving geographic starting points, and its values should represent valid latitude coordinates within the standard range of -90 to +90 degrees."
distanceCalculation,start_lng,"decimal(11,8)",NO,,,,,,,11.0,8.0,"The start_lng column in the distanceCalculation table stores the starting longitude coordinate as a high-precision decimal number with up to 8 decimal places, representing locations in the standard longitude range (-180 to +180 degrees). This non-nullable field is essential for spatial calculations and should be included in queries where you need to reference or analyze the starting point of distance measurements."
distanceCalculation,end_lat,"decimal(10,8)",NO,,,,,,,10.0,8.0,"The end_lat column in the distanceCalculation table stores the ending latitude coordinate as a high-precision decimal number (10 digits total, 8 after decimal point) and cannot contain NULL values. When writing SQL queries, this column should be used to reference the destination point's latitude in spatial calculations, and can be compared with other latitude values using standard numeric operators."
distanceCalculation,end_lng,"decimal(11,8)",NO,,,,,,,11.0,8.0,"The end_lng column in the distanceCalculation table stores the ending longitude coordinate as a high-precision decimal number (11 digits total, 8 after decimal point) and cannot contain NULL values. When writing SQL queries, this column should be used to reference the ending longitude point of a distance measurement, typically in conjunction with other spatial coordinates for calculating distances or analyzing geographical endpoints."
distanceCalculation,distance,float,YES,,,,,,,12.0,,"The 'distance' column in the distanceCalculation table stores floating-point values representing calculated distances between spatial points or objects. As a nullable float field, it can store decimal values with varying precision and can be empty (NULL) when a distance calculation hasn't been completed or isn't applicable."
distanceCalculation,duration,varchar(50),YES,,,,,,50.0,,,"The 'duration' column in the distanceCalculation table stores the time taken to complete a distance calculation as a variable-length string up to 50 characters. This column can be used to track processing or computation time for spatial calculations, and since it's nullable, not all distance calculations require a duration value."
districts,district_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The district_id column serves as the primary key in the districts table, uniquely identifying each geographic or administrative district record. This non-nullable integer field should be used in JOIN operations when linking district information to other tables, and can be referenced in WHERE clauses when filtering for specific districts."
districts,warehouse_id,int,NO,,,,,,,10.0,0.0,"The warehouse_id column in the districts table is a required integer field that links each district to its associated warehouse facility. This column helps track which warehouse serves or is responsible for a particular district, enabling queries to analyze warehouse coverage and district-warehouse relationships."
districts,district_name,varchar(255),NO,,,,,,255.0,,,"The district_name column in the districts table stores the official name or designation of a geographic or administrative district as a text string (up to 255 characters). This required field (non-nullable) is used to uniquely identify and reference specific districts within queries, making it essential for filtering, grouping, or joining operations when analyzing district-level data."
districts,slug,varchar(255),NO,,,,,,255.0,,,"The `slug` column in the `districts` table contains URL-friendly versions of district names, stored as varchar strings up to 255 characters long. This column is required (non-nullable) and is commonly used in web applications for generating clean URLs or as unique identifiers in API endpoints when referencing specific districts."
driver_bonus_contract,driver_bonus_contract_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The driver_bonus_contract_id is the primary key column that uniquely identifies each bonus contract or incentive program record in the driver_bonus_contract table. When writing SQL queries, use this column for joining to related tables or filtering specific bonus contracts, and since it's non-nullable, you can rely on it always having a valid integer value."
driver_bonus_contract,created_at,date,NO,,,,,,,,,The created_at column in the driver_bonus_contract table records the date when a bonus contract or incentive program was initially created in the system. This non-nullable date field is essential for tracking the chronological history of bonus programs and can be useful in queries that need to filter or analyze bonus contracts by their creation date.
driver_bonus_contract,company_id,int,NO,,,,,,,10.0,0.0,"The company_id column in the driver_bonus_contract table is a required integer field that identifies which company is offering the bonus contract or incentive program to drivers. This column is essential for filtering and grouping bonus contracts by company, allowing queries to retrieve or analyze driver incentive programs specific to individual companies in the system."
driver_bonus_contract,start_date,date,NO,,,,,,,,,The start_date column in the driver_bonus_contract table represents the date when a driver's bonus contract or incentive program becomes active and begins tracking performance metrics. This mandatory date field is essential for calculating bonus eligibility periods and determining when drivers can start earning incentives under specific contract terms.
driver_bonus_contract,end_date,date,NO,,,,,,,,,"The end_date column in the driver_bonus_contract table represents the expiration or termination date of a driver's bonus contract or incentive program. This date field is mandatory (non-nullable) and can be used to filter active contracts, track contract durations, or identify expired bonus programs in queries."
driver_bonus_contract,modified_end_date,date,NO,,,,,,,,,"The modified_end_date column in the driver_bonus_contract table represents the adjusted or updated end date for a driver's bonus contract period, which may differ from the original end date due to contract modifications or amendments. When querying this mandatory (non-nullable) date field, it should be used to determine the current valid end date of bonus contracts, particularly in scenarios involving contract extensions or early terminations."
driver_bonus_contract,contract_type,"enum('HD','PUP','Stationary')",NO,,,,,,10.0,,,"The contract_type column in the driver_bonus_contract table is a required (non-nullable) enumerated field that specifies the category of bonus contract, with three possible values: 'HD', 'PUP', or 'Stationary'. When querying this column, you should use exact string matches with these three enum values to filter or group driver bonus contracts by their type."
driver_bonus_contract,one_star_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The one_star_rate column in the driver_bonus_contract table stores the decimal value representing the bonus rate or penalty associated with receiving one-star ratings from customers. This numeric field, which cannot be null and defaults to 0.00, is used to calculate financial adjustments to driver compensation based on their lowest-rated performance metrics."
driver_bonus_contract,two_star_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The two_star_rate column in the driver_bonus_contract table stores the decimal value representing the bonus rate or multiplier applied when a driver receives a two-star rating, with values stored up to 2 decimal places. This non-nullable field, defaulting to 0.00, can be used in calculations to determine bonus payouts or penalties associated with two-star performance ratings, and should be included in queries when analyzing driver performance-based compensation."
driver_bonus_contract,three_star_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The three_star_rate column in the driver_bonus_contract table stores the decimal bonus rate or multiplier applied when a driver receives three-star ratings, represented with two decimal places of precision. This column is required (non-nullable) and defaults to 0.00, making it useful in SQL queries that calculate bonus payouts or analyze incentive rates based on three-star performance metrics."
driver_bonus_contract,violation_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The violation_rate column in the driver_bonus_contract table stores the percentage or rate of violations that affect a driver's bonus eligibility, represented as a decimal number with two decimal places (e.g., 2.50 for 2.5%). When writing SQL queries, this non-nullable column can be used to filter or calculate bonus adjustments based on driver violation thresholds, and should be compared using standard decimal comparison operators."
driver_bonus_contract,late_delivery_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The late_delivery_rate column in the driver_bonus_contract table stores the percentage or rate of late deliveries that affects a driver's bonus calculation, represented as a decimal number with two decimal places (e.g., 5.25 for 5.25%). When writing SQL queries, this column can be used to filter or calculate bonus adjustments based on delivery performance, with a default value of 0.00 indicating no late deliveries."
driver_bonus_contract,empty_per_driver_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The empty_per_driver_rate column stores the monetary rate (with 2 decimal places) that drivers receive for empty or non-passenger trips as part of their bonus contract terms. When querying this column, you can use it to calculate driver compensation for empty trips or to analyze bonus rates, with values always being present (non-nullable) and defaulting to 0.00 if not specified."
driver_bonus_contract,empty_per_contractor_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The empty_per_contractor_rate column stores the monetary rate (with 2 decimal places) that applies when a contractor performs empty or non-loaded trips, represented as a decimal value. This rate is a required field (non-nullable) with a default value of 0.00, and it's used to calculate compensation for drivers when they're operating without cargo or during return trips."
driver_bonus_contract,late_basket_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The late_basket_rate column in the driver_bonus_contract table stores the decimal percentage or rate that affects a driver's bonus when they deliver orders late, represented with two decimal places of precision. This required field (non-nullable) likely serves as a penalty multiplier or adjustment factor in bonus calculations, with a default value of 0.00, and should be used in calculations where late deliveries impact driver incentive payouts."
driver_bonus_contract,reject_photo_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The reject_photo_rate column in the driver_bonus_contract table stores the percentage of rejected photos as a decimal value (with 2 decimal places) that affects a driver's bonus eligibility or calculation. This non-nullable field, defaulting to 0.00, likely represents a performance metric where higher rejection rates might reduce bonus payouts or disqualify drivers from certain incentive programs."
driver_bonus_contract,early_hd_delivery_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The early_hd_delivery_rate column in the driver_bonus_contract table stores the percentage or rate (as a decimal number) that represents a driver's successful early or on-time home delivery performance. When writing SQL queries, this non-nullable decimal field can be used to filter or calculate bonus amounts based on delivery performance metrics, with values typically ranging from 0.00 to 100.00 (if representing percentages)."
driver_bonus_contract,break_exceeds_time_limit,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The break_exceeds_time_limit column in the driver_bonus_contract table stores the decimal value (with 2 decimal places) representing the duration by which a driver's break exceeded the allowed time limit, measured in hours or minutes. This metric is likely used to track compliance with break policies and may affect bonus calculations, with a default value of 0.00 indicating no break time violations."
driver_bonus_contract,status,"enum('Valid','Nullified')",YES,,,Valid,,,9.0,,,"The 'status' column in the driver_bonus_contract table indicates whether a bonus contract is currently active ('Valid') or has been cancelled ('Nullified'). When querying for active bonus contracts, filter for status = 'Valid', and when tracking cancelled contracts, filter for status = 'Nullified'; if the status is NULL, it may indicate a contract pending validation or in a transitional state."
driver_break,driver_break_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The driver_break_id column serves as the primary key for the driver_break table, uniquely identifying each break record taken by drivers during their routes. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific break instances, as it provides a guaranteed unique reference point for each break entry."
driver_break,type,int,YES,,,,,,,10.0,0.0,"The 'type' column in the driver_break table is an integer field that categorizes different kinds of breaks taken by drivers during their routes (e.g., lunch breaks, rest periods, or mandatory safety stops). When querying this column, you can use it to filter or group break records by their specific type, helping analyze patterns in driver break behavior or verify compliance with different break type requirements."
driver_break,start_time,datetime,YES,,,,,,,,,"The start_time column in the driver_break table records the exact date and time when a driver begins their break period during a route. This datetime field is essential for calculating break durations and monitoring compliance with rest period regulations, and can be used in queries to analyze break patterns or verify if drivers are taking breaks at appropriate intervals."
driver_break,end_time,datetime,YES,,,,,,,,,"The end_time column in the driver_break table records the datetime when a driver completed their break period during a route. This column can be used in SQL queries to calculate break durations, verify break compliance, or analyze break patterns, and being nullable allows for tracking ongoing breaks where the end time hasn't yet been recorded."
driver_break,route_id,int,YES,MUL,,,ww_routes,route_id,,10.0,0.0,"The route_id column in the driver_break table is a foreign key that references the ww_routes table, linking each break record to its associated delivery route. This column allows queries to join break information with route details, making it useful for analyzing break patterns within specific routes or generating reports on driver rest compliance per route."
driver_break,user_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the driver_break table is a foreign key that references the users table, identifying which driver took the break. When querying break information, this column can be joined with the users table to retrieve driver details, and it's commonly used in WHERE clauses to filter breaks for specific drivers."
driver_break,photo_url,varchar(255),YES,,,,,,255.0,,,"The photo_url column in the driver_break table stores the URL path (as a string up to 255 characters) to a photo that may be taken during a driver's break period. This optional field can be used to verify break locations or document break compliance, and can be referenced in queries when visual proof of breaks needs to be accessed or validated."
driver_break,step_id,int,YES,,,,,,,10.0,0.0,"The step_id column in the driver_break table represents the specific point or sequence number within a route where a driver took their break. This optional integer field helps identify the chronological position of the break in relation to the route's delivery steps, allowing queries to analyze break timing and placement within the overall route sequence."
driver_notes,driver_notes_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The driver_notes_id column serves as the primary key for the driver_notes table, uniquely identifying each note or comment entry related to drivers. When writing SQL queries, use this column for precise record selection, joining with other tables, or when you need to reference a specific note entry (e.g., WHERE driver_notes_id = X)."
driver_notes,driver_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The driver_id column in the driver_notes table is a foreign key that links each note to a specific driver's record in the users table. When writing queries, you can use this column to join with the users table (WHERE driver_notes.driver_id = users.user_id) or to filter notes for specific drivers, and since it's nullable, some notes may not be associated with any driver."
driver_notes,lat,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The 'lat' column in the driver_notes table stores the latitude coordinate (in decimal degrees) where a note about a driver was recorded, with precision up to 8 decimal places. This optional geographic data point can be used in spatial queries to analyze where driver incidents or observations occurred, and can be combined with the corresponding longitude to pinpoint exact locations."
driver_notes,lng,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The 'lng' column in the driver_notes table stores the longitude coordinate (in decimal degrees) where a note about a driver was recorded, with precision up to 8 decimal places. This geographic data point can be used in spatial queries to track where driver-related incidents or observations occurred, and can be paired with a corresponding latitude value for precise location mapping."
driver_notes,apt,varchar(50),YES,,,,,,50.0,,,"The 'apt' column in the driver_notes table stores apartment or unit numbers as part of a driver's address information, allowing up to 50 characters. This optional field (as indicated by being nullable) can be used when filtering or displaying specific location details for driver-related notes, particularly useful when notes are associated with specific residential units or apartment complexes."
driver_notes,message,text,YES,,,,,,65535.0,,,"The 'message' column in the driver_notes table stores the actual content of notes or comments about drivers, containing detailed text such as observations, feedback, or incident descriptions. This free-form text field can be NULL and is typically used in SELECT queries when retrieving driver feedback or in INSERT statements when adding new notes about a driver's performance or behavior."
driver_notes,created_at,datetime,YES,,,,,,,,,"The created_at column in the driver_notes table records the timestamp when each note or comment about a driver was initially created in the system. This datetime field can be used for temporal filtering and sorting of driver notes, making it useful for queries that need to find notes within specific time periods or display notes in chronological order."
driver_processed_bonus,driver_processed_bonus_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The driver_processed_bonus_id is the primary key identifier for each unique bonus payment record in the driver_processed_bonus table. This integer column should be used in JOIN operations when linking to related driver bonus data, and can be referenced to uniquely identify specific bonus payment entries in WHERE clauses or other query conditions."
driver_processed_bonus,created_at,date,NO,,,,,,,,,"The created_at column in the driver_processed_bonus table records the date when a driver's bonus record was initially created in the system. This timestamp can be used to filter or group bonus records by date, track bonus processing timelines, or analyze bonus distribution patterns over time."
driver_processed_bonus,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the driver_processed_bonus table is a required integer field that stores the ID of the user or system that created the bonus record. When writing queries, this column can be used to track or filter bonus records by their creator, often by joining with a users or employees table to get the creator's details."
driver_processed_bonus,week_num,tinyint,NO,,,0,,,,3.0,0.0,"The week_num column in the driver_processed_bonus table represents the specific week number (1-52) for which a driver's bonus was processed and paid. This required field helps organize and track bonus payments on a weekly basis throughout the year, making it useful for filtering and grouping bonus records by time period in SQL queries."
driver_processed_bonus,year,char(5),NO,,,,,,5.0,,,The 'year' column in the driver_processed_bonus table stores the year (as a 5-character string) for which a driver's bonus was processed and paid. This column is required (non-nullable) and should be included when querying historical bonus records or analyzing bonus payments across different years.
driver_processed_bonus,data,mediumtext,NO,,,,,,16777215.0,,,"The 'data' column in the driver_processed_bonus table stores detailed bonus calculation information as a medium-length text field, which likely contains JSON or structured text data representing the complete bonus processing details. This required (non-nullable) field should be included in queries when you need to access or analyze the specific calculation parameters, rules, or other metadata associated with a driver's processed bonus payment."
driver_zipcode_ranking,driver_zipcode_ranking_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The driver_zipcode_ranking_id column serves as the primary key for the driver_zipcode_ranking table, uniquely identifying each ZIP code-based driver ranking record. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific ranking entries, but avoid using it for business logic calculations since it's an internal identifier."
driver_zipcode_ranking,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the driver_zipcode_ranking table serves as a unique identifier for individual drivers whose performance metrics are being tracked by ZIP code. When writing SQL queries, this column can be used to join with other driver-related tables or to filter/group performance statistics for specific drivers within geographic areas."
driver_zipcode_ranking,zip_code,varchar(10),NO,,,,,,10.0,,,"The zip_code column in the driver_zipcode_ranking table stores postal code identifiers (up to 10 characters) that represent specific geographic areas where drivers operate. This required field serves as a geographic grouping mechanism for driver rankings and performance metrics, enabling analysis and comparison of driver statistics across different postal regions."
driver_zipcode_ranking,rank,int,NO,,,0,,,,10.0,0.0,"The 'rank' column in the driver_zipcode_ranking table stores integer values representing a driver's numerical position or standing within their ZIP code area. This non-nullable field is essential for ordering and comparing driver performance metrics, where lower numbers typically indicate better performance or higher rankings."
driver_zipcode_ranking,delivery_date,date,YES,,,,,,,,,"The delivery_date column in the driver_zipcode_ranking table represents the specific date when driver performance metrics were recorded or aggregated for a particular ZIP code area. When writing SQL queries, this column can be used for temporal analysis, filtering records by date ranges, or grouping driver performance data by specific time periods (e.g., daily, weekly, or monthly aggregations)."
drop_instance,drop_instance_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The drop_instance_id is the primary key identifier for each unique delivery stop or drop point in the logistics system. This integer column serves as the main reference point for linking delivery-related information across the system, making it essential for joining with other tables that track marketplace capacities, orders, and routing jobs."
drop_instance,droppoint_id,int,NO,MUL,,,,,,10.0,0.0,"The droppoint_id column in the drop_instance table is a required integer field that references a physical delivery location or stop point in the logistics system. This column serves as a foreign key (indicated by the MUL key type) to link each delivery drop instance with its corresponding physical drop point location, enabling queries to join and retrieve location-specific details for delivery operations."
drop_instance,delivery_day,varchar(45),YES,MUL,,,,,45.0,,,"The delivery_day column in the drop_instance table stores the scheduled date for a delivery drop in varchar(45) format, representing when a specific delivery stop is planned to occur. This column is indexed (MUL) to optimize queries filtering or joining on delivery dates, and its nullable property allows for cases where the delivery day might not yet be assigned or is pending scheduling."
drop_instance,delivery_order,int,YES,,,0,,,,10.0,0.0,"The delivery_order column in the drop_instance table is an integer field that specifies the sequence or order in which deliveries should be made within a route or delivery schedule. This optional field (nullable) helps organize and prioritize multiple delivery stops, allowing the logistics system to optimize delivery sequences and maintain efficient routing patterns."
drop_instance,warehouse_id,int,NO,,,,,,,10.0,0.0,"The warehouse_id column in the drop_instance table is a required integer field that identifies the specific warehouse or distribution center associated with each delivery drop instance. This column helps track which warehouse is responsible for fulfilling or processing the delivery, enabling queries to analyze delivery patterns and workload distribution across different warehouse locations."
drop_instance,route_id,int,NO,,,0,,,,10.0,0.0,"The route_id column in the drop_instance table is a required integer field that links each delivery drop to its associated route in the logistics system. This column helps track which route a particular delivery stop belongs to, enabling queries to group and analyze delivery stops within the context of their complete delivery routes."
drop_instance,type,int,NO,,,1,,,,10.0,0.0,"The 'type' column in the drop_instance table is a required integer field that categorizes the nature or classification of each delivery drop instance. This column helps distinguish between different kinds of delivery stops or points in the logistics system, enabling queries to filter or group delivery instances based on their operational characteristics."
drop_instance,capacity,int,YES,,,0,,,,10.0,0.0,"The 'capacity' column in the drop_instance table represents the maximum number of items or units that can be handled at this specific delivery stop or drop point. This nullable integer field helps in capacity planning and load management, allowing systems to track and validate whether a delivery point has sufficient capacity for assigned orders."
drop_instance,take_rate,float,YES,,,,,,,12.0,,"The `take_rate` column in the drop_instance table stores the percentage or decimal value representing the platform's commission or fee taken for each delivery drop. This floating-point value can be used in calculations to determine revenue sharing between the platform and delivery partners, and can be NULL if the take rate is not applicable or not yet determined for a particular delivery instance."
drop_instance,take_rate_capacity,float,YES,,,,,,,12.0,,"The take_rate_capacity column in the drop_instance table stores a floating-point value representing the capacity allocation rate for a specific delivery drop point. This column can be used in SQL queries to analyze or filter delivery instances based on their capacity utilization rates, and being nullable, it may not have a value for all drop instances."
drop_instance,start_date,date,YES,,,,,,,,,"The start_date column in the drop_instance table represents the scheduled or planned date when a delivery drop is set to begin. This date field can be used in SQL queries to filter, sort, or analyze delivery drops by their start dates, making it particularly useful for scheduling analysis, capacity planning, and tracking delivery timelines."
drop_instance,opening_time,time,YES,,,,,,,,,"The `opening_time` column in the `drop_instance` table represents the time of day when a delivery location becomes available to receive deliveries. This time value helps logistics systems determine valid delivery windows and can be used in queries to filter or schedule deliveries based on location availability, making it essential for delivery planning and route optimization."
drop_instance,closing_time,time,YES,,,,,,,,,"The `closing_time` column in the `drop_instance` table represents the latest time of day when a delivery can be made at a specific drop location. This time field helps logistics systems determine delivery windows and schedule constraints for each delivery stop, ensuring deliveries are planned within the operational hours of the destination."
drop_instance,euf_notes,varchar(70),NO,,,,,,70.0,,,"The `euf_notes` column in the drop_instance table stores a required text field (up to 70 characters) containing notes or comments related to a specific delivery drop instance. When writing SQL queries, this column can be used to filter or retrieve additional contextual information about delivery stops, though its specific meaning should be clarified with business users as the 'euf' prefix's meaning isn't immediately clear."
drop_instance,active,int,YES,,,1,,,,10.0,0.0,The 'active' column in the drop_instance table is an integer flag (typically 1 or 0) that indicates whether a delivery drop instance is currently active or inactive in the logistics system. This column can be used in WHERE clauses to filter for active delivery drops (WHERE active = 1) or to exclude inactive drops from operational queries.
drop_instance,business_opening_time,time,YES,,,,,,,,,"The business_opening_time column in the drop_instance table stores the time when the delivery location (business) opens for the day, using a standard time format. This information is crucial for delivery scheduling and route planning, helping ensure that deliveries are scheduled during the recipient's business hours, though the field can be null if the opening time is not applicable or unknown."
drop_instance,business_closing_time,time,YES,,,,,,,,,"The business_closing_time column in the drop_instance table stores the time when the delivery location (business) closes for the day, using a standard time format. This information is crucial for delivery scheduling and routing optimization, helping ensure deliveries are planned to arrive before the business closes, though the field can be null if the closing time is unknown or not applicable."
drop_instance,ignore_ww,tinyint(1),YES,,,0,,,,3.0,0.0,"The `ignore_ww` column in the drop_instance table is a boolean flag (stored as tinyint(1)) that indicates whether a delivery drop instance should be excluded from worldwide order processing. When writing SQL queries, use this column with values 0 (false) or 1 (true) to filter delivery drops that should or should not be considered for worldwide order operations."
drop_instance,temporary_pup_transfer,tinyint(1),NO,,,0,,,,3.0,0.0,"The temporary_pup_transfer column is a boolean flag (tinyint(1)) in the drop_instance table that indicates whether a delivery drop point involves a temporary PUP (Pick-Up Point) transfer. When querying this column, use 1 to filter for temporary PUP transfers and 0 for standard delivery drops, as in `WHERE temporary_pup_transfer = 1`."
drop_instance_empty_pickups,drop_instance_empty_pickup_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The drop_instance_empty_pickup_id column serves as the primary key identifier for each empty pickup event recorded in the drop_instance_empty_pickups table. When writing SQL queries, use this column to uniquely identify specific empty pickup instances or to join with related tables that reference these events."
drop_instance_empty_pickups,droppoint_id,int,NO,,,,,,,10.0,0.0,The droppoint_id column in the drop_instance_empty_pickups table is a required integer field that identifies the specific pickup location where a driver encountered no items to collect. This column can be used to join with other tables containing droppoint information or to group and analyze empty pickup patterns at specific locations.
drop_instance_empty_pickups,next_drop_instance_id,int,NO,,,,,,,10.0,0.0,"The next_drop_instance_id column in the drop_instance_empty_pickups table represents the identifier for the subsequent delivery attempt that was scheduled after encountering an empty pickup location. This non-nullable integer field can be used to link empty pickup events with their follow-up delivery attempts, making it useful for tracking the sequence of delivery operations and analyzing how empty pickups affect subsequent delivery scheduling."
drop_instance_empty_pickups,next_delivery_date,date,NO,,,,,,,,,"The next_delivery_date column in the drop_instance_empty_pickups table stores the rescheduled date when the delivery driver should return to attempt the pickup again after finding no items at the location. This mandatory date field helps track and manage follow-up pickup attempts, ensuring failed pickups are properly rescheduled and monitored."
drop_instance_empty_pickups,routing_job_id,int,YES,,,,,,,10.0,0.0,"The routing_job_id column in the drop_instance_empty_pickups table stores the unique identifier for the assigned delivery route or job during which an empty pickup occurred. This integer field can be used to join with other routing-related tables to analyze patterns in empty pickups across different delivery routes, though its nullable property indicates that some empty pickup records might not be associated with a specific routing job."
drop_instance_empty_pickups,submission_type,tinyint,NO,,,,,,,3.0,0.0,"The submission_type column in drop_instance_empty_pickups is a required tinyint field that likely categorizes the type or method of reporting an empty pickup situation. When querying this table, use this column to filter or group empty pickup reports by their submission category, with different integer values representing distinct submission methods or channels through which drivers report finding no items at pickup locations."
drop_instance_empty_pickups,empties_to_pickup,int,NO,,,,,,,10.0,0.0,"The ""empties_to_pickup"" column represents the number of empty containers or units that were expected to be collected by the delivery driver at a specific pickup location. This integer field is required (non-nullable) and helps track the quantity of items that should have been available for pickup but weren't found at the location."
drop_instance_empty_pickups,created_date,datetime,NO,,,,,,,,,"The created_date column in the drop_instance_empty_pickups table stores the exact date and time when an empty pickup attempt was recorded in the system. This datetime field is mandatory (non-nullable) and can be used to analyze temporal patterns of empty pickups, filter records within specific time ranges, or group empty pickup incidents by various time periods (e.g., by day, week, or month)."
drop_instance_empty_pickups,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the `drop_instance_empty_pickups` table stores the user ID (as an integer) of the person or system that created the empty pickup record. This column can be used in SQL queries to track who reported or logged these empty pickup instances, and since it's nullable, some records may not have an associated creator ID."
drop_instance_empty_pickups,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the drop_instance_empty_pickups table stores the timestamp when a record about an empty pickup attempt was last modified, using a datetime format. This non-nullable field is essential for tracking the chronological history of changes to empty pickup records and can be useful in SQL queries for filtering recent updates or analyzing modification patterns over time."
drop_instance_type,drop_instance_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The drop_instance_type_id column serves as the primary key identifier for different types of drop instances or events in the system. This integer column uniquely identifies each drop instance type and, being non-nullable, ensures that every record in the drop_instance_type table has a distinct identifier."
drop_instance_type,name,varchar(10),NO,,,,,,10.0,,,"The 'name' column in the drop_instance_type table stores short text identifiers (up to 10 characters) that categorize different types of drops or drop events in the system. As a required field (non-nullable), each record in this table must have a name value, making it useful for categorizing and filtering drop instances in queries where you need to reference specific drop types."
drop_instance_type,description,varchar(255),YES,,,,,,255.0,,,"The 'description' column in the drop_instance_type table stores human-readable explanations or details about different types of instance drops, with text limited to 255 characters. When writing SQL queries, this optional (nullable) field can be used to provide more context about drop types, making it useful for filtering or displaying detailed information about drop instances in result sets."
drop_instance_type,created,datetime,NO,,,,,,,,,"The 'created' column in the drop_instance_type table records the exact date and time when each drop instance type record was initially added to the system, stored as a datetime value. This non-nullable field serves as an audit trail to track when different types of drops were defined or configured in the system."
drop_instance_type,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the drop_instance_type table is a required integer field that identifies the user associated with a particular drop instance or event. This column can be used in WHERE clauses or JOIN conditions to filter or link drop instances to specific users, making it useful for tracking who is involved with different types of drops in the system."
drop_instances_marketplaces_capacity,drop_instances_marketplaces_capacity_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The drop_instances_marketplaces_capacity_id is the primary key column that uniquely identifies each capacity record in the drop_instances_marketplaces_capacity table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific capacity entries, but avoid using it for business logic calculations since it's an internal identifier."
drop_instances_marketplaces_capacity,limit,int,YES,,,,,,,10.0,0.0,"The 'limit' column in the drop_instances_marketplaces_capacity table represents the maximum capacity or threshold value for a specific marketplace during a drop instance. This integer field can be used in SQL queries to filter or analyze capacity constraints, such as finding drop instances that exceed or are approaching their capacity limits, and since it's nullable, queries should handle potential NULL values appropriately."
drop_instances_marketplaces_capacity,drop_instance_id,int,NO,MUL,,,drop_instance,drop_instance_id,,10.0,0.0,"The drop_instance_id column serves as a foreign key that links marketplace capacity records to their corresponding drop instances in the drop_instances table. This non-nullable integer field is essential for filtering and joining queries when you need to analyze or retrieve capacity information for specific drop events, and its indexed nature (MUL) helps optimize query performance when searching or joining based on this field."
drop_instances_marketplaces_capacity,delivery_date,date,NO,,,,,,,,,"The delivery_date column in the drop_instances_marketplaces_capacity table represents the specific date when delivery is scheduled for a marketplace drop instance. This required (non-nullable) date field is essential for querying and filtering capacity information based on when deliveries are planned to occur, and can be used in date-based comparisons or grouping operations when analyzing marketplace capacity across different delivery dates."
dropinstance_transfer,transfer_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The transfer_id column serves as the primary key in the dropinstance_transfer table, uniquely identifying each transfer record for drop instances. This integer field is required (non-nullable) and is commonly used in JOIN operations with the dropinstance_transfer_users table to establish relationships between transfers and their associated users."
dropinstance_transfer,original_dropinstance_id,int,NO,MUL,,,,,,10.0,0.0,"The original_dropinstance_id column in the dropinstance_transfer table stores the unique identifier of the drop instance before a transfer operation occurs. This column is indexed (MUL) and required (non-nullable), making it efficient for queries that need to trace the history or origin of transferred resources, and it can be used to join with other tables that reference drop instances."
dropinstance_transfer,transfer_dropinstance_id,int,NO,MUL,,,,,,10.0,0.0,"The transfer_dropinstance_id column in the dropinstance_transfer table is a required integer field that identifies the specific drop instance being transferred or reassigned. This column serves as a foreign key (indicated by the MUL key type) that links to the primary drop instance record, enabling queries to track which resource is involved in each transfer operation."
dropinstance_transfer,automatic_rollback_date,date,NO,,,,,,,,,"The automatic_rollback_date column in the dropinstance_transfer table specifies the date when an automatic rollback of the transfer should occur if not completed or validated. This required (non-nullable) date field is crucial for implementing time-based safety mechanisms, ensuring that incomplete or problematic transfers don't remain in an intermediate state indefinitely."
dropinstance_transfer,rollback_status,tinyint,NO,,,0,,,,3.0,0.0,"The rollback_status column in the dropinstance_transfer table is a required tinyint field that indicates whether and how a transfer operation has been reversed or undone. When writing queries, this column can be used to filter or identify transfers based on their rollback state, with 0 likely representing no rollback and other values indicating different rollback conditions."
dropinstance_transfer,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the dropinstance_transfer table stores the timestamp when a transfer record was initially created, automatically populated with the current date and time using CURRENT_TIMESTAMP. This datetime field is useful for tracking when resource transfers occurred and can be used in SQL queries for temporal filtering, auditing, or sorting transfer records chronologically."
dropinstance_transfer,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the `dropinstance_transfer` table stores the user ID of the person who initiated the transfer operation, represented as an integer value. This column helps track the originator of transfer records and can be used in SQL queries to filter or join with user-related tables to get information about who created specific transfer entries."
dropinstance_transfer,comment,text,YES,,,,,,65535.0,,,"The 'comment' column in the dropinstance_transfer table stores optional text notes or explanations about why a particular transfer operation was performed or any relevant details about the resource reassignment. This free-form text field can be used in SQL queries to search for or filter transfers based on specific comments or keywords, though since it's nullable, queries should handle potential NULL values appropriately."
dropinstance_transfer,temporary_pup_transfer,tinyint(1),NO,,,0,,,,3.0,0.0,"The temporary_pup_transfer column is a boolean flag (tinyint(1)) in the dropinstance_transfer table that indicates whether a transfer is temporary and specifically related to PUP (Pick Up and Play) functionality. When querying this column, use 1 to filter for temporary PUP transfers and 0 for standard transfers, as this field is required (non-nullable) and defaults to 0."
dropinstance_transfer_users,transfer_user_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The transfer_user_id column serves as the primary key in the dropinstance_transfer_users table, uniquely identifying each user-transfer association record. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific user-transfer relationships, ensuring each association between users and dropinstance transfers can be uniquely referenced."
dropinstance_transfer_users,dropinstance_transfer_id,int,NO,MUL,,,dropinstance_transfer,transfer_id,,10.0,0.0,"The dropinstance_transfer_id column serves as a foreign key in the dropinstance_transfer_users table, linking to the primary transfer record in the dropinstance_transfer table. This column is essential for JOIN operations when querying transfer details associated with specific users, and being non-nullable ensures that every user-transfer association record has a valid reference to a transfer operation."
dropinstance_transfer_users,subscription_id,int,NO,MUL,,,subscriptions,subscription_id,,10.0,0.0,"The subscription_id column in the dropinstance_transfer_users table is a required integer field that links transfer operations to specific user subscriptions. This column serves as a foreign key reference, enabling queries to connect transfer records with user subscription data and is commonly used in JOIN operations to retrieve subscription-related information for transfer participants."
droppoint_applications,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the droppoint_applications table, uniquely identifying each drop point application record. When writing SQL queries, this column can be used for precise record selection and joins with related tables, particularly when tracking specific application statuses or linking to approval records."
droppoint_applications,pup_coordinator_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The pup_coordinator_id column in the droppoint_applications table is a required foreign key that references the users table, specifically identifying the coordinator responsible for managing the drop point location. When writing queries, this column can be used to join with the users table to retrieve coordinator details or to filter applications based on specific coordinators, making it essential for tracking and managing drop point oversight."
droppoint_applications,organization_name,varchar(255),YES,,,,,,255.0,,,"The organization_name column in the droppoint_applications table stores the name of the organization or entity requesting to establish a drop point location, with a maximum length of 255 characters. This optional field (as indicated by being nullable) helps identify and track which organizations are applying to become drop point locations in the system."
droppoint_applications,phone_number,varchar(45),YES,,,,,,45.0,,,"The phone_number column in the droppoint_applications table stores the contact telephone number (up to 45 characters) for the proposed drop point location. This optional field can be used in queries to filter or retrieve contact information for drop point applications, and it's particularly useful when administrators need to reach out regarding the application status or verification process."
droppoint_applications,email,varchar(100),YES,,,,,,100.0,,,"The 'email' column in the droppoint_applications table stores the contact email address (up to 100 characters) for the person or organization applying to establish a drop point location. This optional field can be used in SQL queries to filter or retrieve applications based on contact information, such as ""SELECT * FROM droppoint_applications WHERE email LIKE '%@company.com'""."
droppoint_applications,organization_description,text,YES,,,,,,65535.0,,,"The organization_description column in the droppoint_applications table stores detailed text information about the organization requesting to establish a drop point. When querying this column, you can use text-based operations to search for specific keywords or phrases within the organization descriptions, and since it's nullable, remember to handle NULL values appropriately in your WHERE clauses or joins."
droppoint_applications,address,varchar(500),YES,,,,,,500.0,,,"The 'address' column in the droppoint_applications table stores the physical location details (up to 500 characters) where a proposed drop point would be established. When writing queries, this column can be used to search for applications in specific locations or geographic areas, and since it's nullable, queries should handle potential NULL values when filtering or displaying address information."
droppoint_applications,state_id,int,YES,,,,,,,10.0,0.0,"The state_id column in the droppoint_applications table is an integer field that represents the current status or stage of a drop point application in its approval workflow. When querying this table, you can use state_id to filter applications based on their processing status (e.g., pending, approved, rejected) or to group and analyze applications by their current state."
droppoint_applications,city,varchar(255),YES,,,,,,255.0,,,"The 'city' column in the droppoint_applications table stores the city name where the proposed drop point location is situated, using a variable-length string format up to 255 characters. When writing queries, this column can be used to filter or group drop point applications by geographic location, though be aware that the field is nullable and may need NULL handling in your queries."
droppoint_applications,district_id,int,YES,,,,,,,10.0,0.0,"The district_id column in the droppoint_applications table is used to associate each drop point application with a specific geographic district or area where the drop point will be located. This optional field (as indicated by being nullable) helps organize and filter drop point applications by their intended location, enabling queries to analyze or manage applications within specific districts."
droppoint_applications,zip_code,varchar(15),YES,,,,,,15.0,,,"The zip_code column in the droppoint_applications table stores the postal code for the proposed drop point location using a variable-length string format that can accommodate up to 15 characters. This column is optional (nullable) and can be used in SQL queries to filter or group drop point applications by geographic area, making it useful for analyzing application distribution across different postal regions."
droppoint_applications,delivery_address,varchar(500),YES,,,,,,500.0,,,"The delivery_address column in the droppoint_applications table stores the physical location address where items can be dropped off or collected, with a maximum length of 500 characters. This optional field (as indicated by being nullable) provides detailed address information for the proposed drop point location, which is essential for evaluating the application and, if approved, helping users locate the drop point."
droppoint_applications,delivery_state_id,int,YES,,,,,,,10.0,0.0,"The delivery_state_id column in the droppoint_applications table is an optional foreign key that references the geographical state or region where the proposed drop point is located. This column helps in organizing and filtering drop point applications by their geographical location, enabling queries to analyze or group applications based on their delivery state."
droppoint_applications,delivery_city,varchar(255),YES,,,,,,255.0,,,"The delivery_city column in the droppoint_applications table stores the city name where the proposed drop point location would operate, accepting text values up to 255 characters. This optional field helps track the geographic distribution of drop point applications and can be useful for filtering or grouping applications by city in queries, particularly when analyzing coverage areas or managing regional drop point networks."
droppoint_applications,delivery_district_id,int,YES,,,,,,,10.0,0.0,"The delivery_district_id column in the droppoint_applications table is an integer field that references the geographical district where the proposed drop point would be located. This column helps organize and filter drop point applications by their intended service areas, making it useful in queries that need to analyze or group applications by district, though its nullable nature indicates that district information might not always be available during the application process."
droppoint_applications,delivery_zip_code,varchar(15),YES,,,,,,15.0,,,"The delivery_zip_code column in the droppoint_applications table stores the postal/ZIP code where the proposed drop point location would serve deliveries, using a variable-length string format that accommodates up to 15 characters. This optional field helps define the geographic service area of the drop point and can be used in queries to filter or group applications by their intended delivery regions."
droppoint_applications,delivery_days,text,YES,,,,,,65535.0,,,"The delivery_days column in the droppoint_applications table stores text-based information about which days a drop point location will be available for deliveries and collections. When querying this column, you can use string operations to search for specific days or patterns, and since it's nullable, always consider using NULL checks (IS NULL or IS NOT NULL) when filtering records based on delivery days."
droppoint_applications,delivery_instructions,text,YES,,,,,,65535.0,,,"The delivery_instructions column stores detailed text directions or special notes about accessing or finding the proposed drop point location. When writing queries, this nullable text field can be used to filter or display specific instructions for delivery personnel, and it's particularly useful in SELECT statements when you need to show access information or in WHERE clauses when searching for drop points with particular access requirements."
droppoint_applications,social_profiles,text,YES,,,,,,65535.0,,,"The social_profiles column in the droppoint_applications table stores text-based information about the applicant's social media presence or online profiles, which can be used for verification purposes during the drop point application process. When querying this column, you can use string operations to search for specific social media platforms or profile information, though be aware that the column can contain NULL values since it's optional."
droppoint_applications,status,int,NO,,,0,,,,10.0,0.0,"The 'status' column in the droppoint_applications table is a required integer field that tracks the current state of a drop point application using numeric codes. When writing SQL queries, this column can be used to filter or group applications based on their processing status (e.g., pending, approved, rejected), with 0 appearing to be the default initial status value."
droppoint_applications,percentage_completed,float,YES,,,,,,,12.0,,"The percentage_completed column in the droppoint_applications table stores a floating-point number representing the completion status of a drop point application, where values typically range from 0.0 to 100.0. This column can be used to track the progress of applications through their approval workflow and can be particularly useful in queries that need to filter or sort applications based on their completion status."
droppoint_applications,submitted_at,datetime,NO,,,,,,,,,"The submitted_at column in the droppoint_applications table records the exact date and time when a drop point application was submitted by a user. This non-nullable datetime field is essential for tracking application timelines and can be used in SQL queries to filter or sort applications by submission date, analyze application patterns over time, or calculate processing durations."
droppoint_applications,completed_at,datetime,YES,,,,,,,,,"The completed_at column in the droppoint_applications table stores the timestamp when a drop point application process was finalized, whether approved or rejected. This datetime field can be used to track application completion times, filter for completed applications (WHERE completed_at IS NOT NULL), or analyze application processing durations when compared against submission timestamps."
droppoint_applications,approved_at,datetime,YES,,,,,,,,,"The approved_at column in the droppoint_applications table stores the timestamp when a drop point application was officially approved by an administrator. This datetime field can be used to track approval timing, filter for applications approved within specific date ranges, or identify pending applications (where approved_at is NULL), and it works in conjunction with the approved_by column to provide a complete record of the approval process."
droppoint_applications,approved_by,int,YES,MUL,,,users,user_id,,10.0,0.0,"The approved_by column in the droppoint_applications table stores the user ID of the administrator who approved the drop point application, linking to the users table through a foreign key relationship. This column can be null (indicating a pending or unapproved application) and is commonly used in JOIN operations with the users table to retrieve information about the approving administrator or to filter applications based on approval status."
droppoint_group,droppoint_group_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The droppoint_group_id column serves as the primary key identifier for each unique collection or category of drop points in the logistics system. When writing SQL queries, use this column to join with related tables (particularly droppoint_groupLang for translations) and to uniquely identify or filter specific drop point groups."
droppoint_group,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the droppoint_group table stores the default or primary name identifier for a collection/category of drop points, with a maximum length of 255 characters and cannot be null. This column should be used when querying for or filtering drop point groups by their base names, though for language-specific versions of these names, you should join with the droppoint_groupLang table."
droppoint_group,slug,varchar(255),NO,,,,,,255.0,,,"The `slug` column in the `droppoint_group` table stores URL-friendly versions of drop point group names, using lowercase letters, numbers, and hyphens (e.g., ""north-delivery-zone"" or ""downtown-pickup-points""). This required field helps create clean, readable URLs and serves as a unique identifier for drop point groups in web applications or APIs."
droppoint_group,icon_url,varchar(500),NO,,,,,,500.0,,,"The icon_url column in the droppoint_group table stores the web URL or file path (up to 500 characters) for an icon image that visually represents a collection of drop points. This required field can be used in SQL queries to retrieve or filter drop point groups based on their associated icon images, which might be useful for displaying visual indicators in user interfaces or reports."
droppoint_groupLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column in the `droppoint_groupLang` table serves as a primary key identifier for language-specific translations of droppoint groups. When writing SQL queries, this column can be used to uniquely identify specific translations and is commonly used in JOIN operations with other localization-related tables."
droppoint_groupLang,droppoint_group_id,int,YES,MUL,,,droppoint_group,droppoint_group_id,,10.0,0.0,"The droppoint_group_id column in the droppoint_groupLang table serves as a foreign key that links to the primary droppoint_group table, establishing a relationship between groups and their translations. This column should be used in JOIN operations when combining group data with its corresponding language-specific content, and can be referenced in WHERE clauses when filtering for translations of specific groups."
droppoint_groupLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the droppoint_groupLang table stores language identifiers (such as 'en', 'es', 'fr') as character strings up to 10 characters long, and is required (non-nullable). This column is used to specify which language each translation record corresponds to, enabling the system to retrieve the appropriate localized content for droppoint groups based on the desired language."
droppoint_groupLang,l_name,varchar(255),NO,,,,,,255.0,,,"The l_name column in the droppoint_groupLang table stores the localized (translated) name of a droppoint group in different languages, with a maximum length of 255 characters. This required field is essential for multilingual applications, allowing you to query and display droppoint group names in various languages by joining with the main droppoint_group table using the droppoint_group_id."
droppoint_groupLang,l_slug,varchar(255),NO,,,,,,255.0,,,"The l_slug column in the droppoint_groupLang table stores the localized URL-friendly version of a droppoint group's name in different languages, using a varchar format limited to 255 characters. This required field helps create language-specific, SEO-friendly URLs and identifiers for droppoint groups, making it useful in queries where you need to filter or display localized group information in web applications."
droppoint_zipcode_region,droppoint_zipcode_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The droppoint_zipcode_id column serves as the primary key in the droppoint_zipcode_region junction table, uniquely identifying each droppoint-to-zipcode region mapping. When writing SQL queries, use this column to join with other tables or to uniquely reference specific droppoint-zipcode relationships, particularly in WHERE clauses or when ensuring data integrity."
droppoint_zipcode_region,droppoint_id,int,NO,MUL,,,droppoints,droppoint_id,,10.0,0.0,"The droppoint_id column in the droppoint_zipcode_region table is a required integer field that serves as a foreign key referencing the primary key of the droppoints table. When writing SQL queries, this column should be used to join with the droppoints table to retrieve information about specific droppoints and their associated zipcode regions, making it essential for filtering and grouping operations related to droppoint coverage areas."
droppoint_zipcode_region,zipcode_region_id,int,NO,MUL,,,zipcode_region,zipcode_region_id,,10.0,0.0,"The zipcode_region_id column in the droppoint_zipcode_region table is a foreign key that references the primary key of the zipcode_region table, representing a specific geographic region defined by zip codes. This column is essential for establishing the many-to-many relationship between droppoints and zipcode regions, and should be used in JOIN operations when querying for droppoints that serve particular geographic areas."
droppoint_zipcode_region,expiring,date,YES,,,,,,,,,"The ""expiring"" column in the droppoint_zipcode_region table stores the date when a droppoint's association with a particular zipcode region is set to expire. This optional date field helps track when service coverage for specific geographic areas will end, allowing for better planning of droppoint service areas and coverage transitions."
droppoints,droppoint_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The droppoint_id column serves as the primary key in the droppoints table, uniquely identifying each delivery or collection point in the system. This integer field is required (non-nullable) and should be referenced when joining with related tables to establish connections with coupons, baskets, products, territories, routes, and vehicles."
droppoints,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the droppoints table stores the descriptive title or identifier of each delivery or collection point as a variable-length text string (up to 255 characters). This column can be used in SQL queries to search, filter, or display the names of specific drop points, making it particularly useful for human-readable identification of locations in reports or user interfaces."
droppoints,address,varchar(500),YES,,,,,,500.0,,,"The 'address' column in the droppoints table stores the physical street address or location description of each delivery or collection point as a text string up to 500 characters long. This column is optional (nullable) and can be used in SQL queries to filter or display location details, particularly useful when matching delivery points to specific geographical areas or when generating delivery instructions."
droppoints,capacity,int,YES,,,,,,,10.0,0.0,"The 'capacity' column in the droppoints table represents the maximum number of orders or items that can be handled at a specific delivery or collection point at any given time. When writing SQL queries, this integer field can be used to check availability, filter locations based on capacity requirements, or analyze utilization rates of different drop points."
droppoints,closing,varchar(45),YES,,,,,,45.0,,,"The 'closing' column in the droppoints table stores the closing time or schedule information for each delivery/collection point as a text string up to 45 characters long. This field helps determine when a droppoint stops accepting deliveries or pickups, which is essential for scheduling and route planning operations."
droppoints,zip_code,varchar(15),NO,,,,,,15.0,,,"The zip_code column in the droppoints table stores postal codes (up to 15 characters) for delivery and collection point locations, and it's a required field that cannot be null. This column is essential for geographical organization and routing purposes, helping to map delivery points to specific territories and determine service availability in different areas."
droppoints,phone,varchar(45),NO,,,,,,45.0,,,"The 'phone' column in the droppoints table stores the contact telephone number (up to 45 characters) for each delivery or collection point location. This required field (non-nullable) is essential for operational communication and can be used in queries to filter or retrieve droppoints based on their contact information, particularly useful when coordinating deliveries or resolving logistics issues."
droppoints,contact_name,varchar(45),NO,,,,,,45.0,,,The contact_name column in the droppoints table stores the full name (up to 45 characters) of the primary contact person responsible for each delivery or collection point. This required field should be referenced when querying for the point of contact at specific drop-off locations or when generating reports that need to include contact information for delivery coordination.
droppoints,contact_email,varchar(45),NO,,,,,,45.0,,,"The contact_email column in the droppoints table stores the primary email address (up to 45 characters) for the person responsible for managing or coordinating activities at each delivery or collection point. This required field (non-nullable) is essential for maintaining communication with drop point contacts and can be used in queries to filter, join, or retrieve contact information for operational communications."
droppoints,delivery_instructions,text,NO,,,,,,65535.0,,,"The delivery_instructions column in the droppoints table contains specific text-based directions or requirements for accessing or delivering to a particular drop-off/collection point. This required field should be included in queries when you need to retrieve or filter specific handling instructions for deliveries, such as ""Enter through back door"" or ""Call upon arrival,"" which are essential for successful order fulfillment at each location."
droppoints,image_url,varchar(500),YES,,,,,,500.0,,,"The image_url column in the droppoints table stores web URLs (up to 500 characters) that link to images representing the physical delivery or collection points, such as photos of storefronts or location markers. This optional field can be used in queries to retrieve visual references for droppoints, particularly useful for user interfaces or documentation purposes."
droppoints,lat,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The 'lat' column in the droppoints table stores the latitude coordinate of each delivery or collection point using a decimal format with 8 decimal places of precision. This geographical data point can be used in SQL queries to perform location-based searches, calculate distances between points, or filter droppoints within specific geographical boundaries."
droppoints,lng,"decimal(11,8)",YES,,,,,,,11.0,8.0,"The 'lng' column in the droppoints table stores the longitude coordinate of each delivery or collection point as a decimal number with 8 decimal places of precision. This geographical coordinate can be used in spatial queries to determine location-based information, such as finding nearby droppoints or calculating distances between points."
droppoints,top_subtitle,varchar(255),YES,,,,,,255.0,,,"The `top_subtitle` column in the droppoints table stores a secondary descriptive text (up to 255 characters) that appears below or supplements the main title of a delivery or collection point. This optional field can be used to provide additional context or important information about the location, such as operating hours, special instructions, or distinguishing features of the drop point."
droppoints,bottom_subtitle,varchar(255),YES,,,,,,255.0,,,"The `bottom_subtitle` column in the droppoints table stores optional secondary descriptive text (up to 255 characters) that appears below the main information for a delivery or collection point. This text field can be used to provide additional context or instructions about the droppoint location, such as specific access details or operating hours, and can be referenced in queries where supplementary droppoint information needs to be displayed or filtered."
droppoints,city_name,varchar(255),NO,,,,,,255.0,,,"The city_name column in the droppoints table stores the name of the city where each delivery or collection point is located, using text values up to 255 characters in length. Since this field is marked as non-nullable, every droppoint record must have a city name specified, making it essential for geographical organization and territory management within the delivery system."
droppoints,state_id,int,NO,,,,,,,10.0,0.0,"The state_id column in the droppoints table is a required integer field that identifies the state or region where each delivery or collection point is located. This column helps in organizing and filtering droppoints by geographical areas, making it useful for queries involving regional operations or territory-based analysis."
droppoints,fax,varchar(255),YES,,,,,,255.0,,,"The 'fax' column in the droppoints table stores fax numbers (as text up to 255 characters) for delivery or collection points, allowing for optional communication via fax when needed. This field can be used in queries where fax-based communication details need to be retrieved or filtered, though its nullable property indicates that not all drop points are required to have a fax number."
droppoints,logo,varchar(500),YES,,,,,,500.0,,,"The 'logo' column in the droppoints table stores the URL or file path (up to 500 characters) to the visual branding image associated with each delivery or collection point. This optional field can be used in SQL queries to retrieve or filter droppoints based on whether they have branded imagery, or to display the appropriate logo when presenting droppoint information in user interfaces."
droppoints,website,varchar(500),YES,,,,,,500.0,,,"The 'website' column in the droppoints table stores the URL or web address (up to 500 characters) associated with each delivery or collection point. This optional field can be used in SQL queries to retrieve or filter drop points based on their online presence, which is particularly useful when needing to display or validate web-based information for these locations."
droppoints,description,text,YES,,,,,,65535.0,,,"The 'description' column in the droppoints table contains text-based details and additional information about each delivery or collection point location. This optional (nullable) field can be used to store relevant notes, special instructions, or characteristics about the drop point, which can be helpful when filtering or providing context in queries related to specific location requirements or features."
droppoints,district_id,int,NO,,,,,,,10.0,0.0,"The district_id column in the droppoints table is a required integer field that identifies the specific district or administrative area where a delivery or collection point is located. This column helps organize and group droppoints geographically, enabling efficient territory management and route planning for deliveries and collections."
droppoints,featured,tinyint,YES,MUL,,0,,,,3.0,0.0,"The 'featured' column in the droppoints table is a boolean flag (stored as a tinyint) that indicates whether a delivery/collection point is marked as featured or prominent in the system. This column can be used in queries to filter or prioritize special droppoints, with indexed searches (MUL) for efficient querying, and accepts NULL values when the featured status is undefined."
droppoints,typepup,int,YES,,,0,,,,10.0,0.0,"The ""typepup"" column in the droppoints table is an integer field that categorizes the type of pickup or delivery point, where different numeric values represent distinct classifications of locations. This column helps distinguish between various kinds of collection or delivery points (such as residential addresses, business locations, or locker facilities), enabling efficient filtering and grouping of droppoints based on their operational characteristics."
droppoints,summary,varchar(500),YES,,,,,,500.0,,,"The 'summary' column in the droppoints table stores a descriptive text (up to 500 characters) providing additional details or notes about a delivery or collection point. This optional field can be used in SQL queries to search for or filter droppoints based on specific characteristics or important information mentioned in their summaries, making it useful for both operational queries and reporting purposes."
droppoints,meta_description,varchar(255),YES,,,,,,255.0,,,"The meta_description column in the droppoints table stores SEO-friendly descriptions (up to 255 characters) of delivery or collection points, which can be used for web pages or external systems displaying these locations. This optional field can be referenced in SQL queries when you need to retrieve or filter drop points based on their descriptive content, particularly useful for search functionality or generating location listings with SEO metadata."
droppoints,coordinator_name,varchar(255),YES,,,,,,255.0,,,"The coordinator_name column in the droppoints table stores the name of the person who coordinates or manages activities at a specific delivery or collection point, with a maximum length of 255 characters. This optional field (as it's nullable) can be used in queries to filter or group drop points by their coordinator, which is particularly useful when analyzing operational responsibilities or generating coordinator-specific reports."
droppoints,coordinator_email,varchar(255),YES,,,,,,255.0,,,The coordinator_email column in the droppoints table stores the email address (up to 255 characters) of the person who coordinates activities at each delivery or collection point. This optional field can be used in SQL queries to filter or join with user-related tables to find droppoints managed by specific coordinators or to retrieve contact information for communication purposes.
droppoints,coordinator_phone,varchar(50),YES,,,,,,50.0,,,"The coordinator_phone column in the droppoints table stores the contact phone number (up to 50 characters) for the coordinator responsible for managing a specific delivery or collection point. This optional field can be used in SQL queries to filter or retrieve droppoints based on coordinator contact information, or to join with other tables that need to reference coordinator phone numbers for communication purposes."
droppoints,priority,tinyint,YES,,,0,,,,3.0,0.0,"The 'priority' column in the droppoints table is a tinyint field that indicates the relative importance or service level of each delivery/collection point, with higher values typically representing higher priority locations. This priority value can be used to optimize route planning, resource allocation, or service scheduling, and can be filtered or sorted in queries to prioritize operations for more important droppoints."
droppoints,published,int,NO,,,0,,,,10.0,0.0,"The 'published' column in the droppoints table is a binary integer flag (0 or 1) that indicates whether a delivery/collection point is currently active and visible in the system. When writing SQL queries, use this column to filter for active droppoints (WHERE published = 1) or to exclude inactive locations from operational queries."
droppoints,creation_date,date,NO,,,0000-00-00,,,,,,"The creation_date column in the droppoints table records the date when a delivery or collection point was first established in the system, stored in a standard date format (YYYY-MM-DD). This mandatory field (non-nullable) helps track the chronological history of droppoint locations and can be useful for analyzing the growth of the delivery network over time."
droppoints,auto_deposit,tinyint,NO,,,0,,,,3.0,0.0,"The `auto_deposit` column in the droppoints table is a boolean flag (stored as tinyint) that indicates whether a delivery/collection point supports automatic deposit functionality. When querying this column, use 1 to filter for droppoints with auto-deposit enabled and 0 for those without, making it useful for operations that need to distinguish between manual and automatic deposit handling."
droppoints,deposit_amount,float,NO,,,1,,,,12.0,,"The deposit_amount column in the droppoints table stores the required monetary deposit value (as a floating-point number) that must be paid when using a specific delivery or collection point. This mandatory field (non-nullable) is used to track security deposits or holding fees associated with the drop point, which could be relevant for calculations in order processing or refund operations."
droppoints,fixed_amount,tinyint,NO,,,0,,,,3.0,0.0,"The `fixed_amount` column in the droppoints table is a boolean flag (stored as a tinyint) that indicates whether the delivery/collection point has a fixed pricing structure. When writing queries, use this column to filter or identify droppoints with predetermined pricing (1) versus those with variable pricing (0), which can be essential for pricing calculations and business logic related to delivery costs."
droppoints,publish_on,date,YES,,,,,,,,,"The `publish_on` column in the droppoints table indicates the date when a delivery or collection point becomes publicly visible and available for use in the system. When writing queries, this date field can be used to filter active droppoints or schedule future locations, making it particularly useful for queries that need to show only currently published or upcoming delivery points."
droppoints,unlock_code,varchar(255),YES,,,,,,255.0,,,"The unlock_code column in the droppoints table stores access codes or PIN numbers (as text up to 255 characters) that may be needed to access secure delivery or collection points. This optional field can be used in queries to verify access permissions or generate instructions for delivery personnel, and it's particularly relevant when filtering or retrieving droppoints that require specific security credentials."
droppoints,slug,varchar(255),NO,,,,,,255.0,,,"The `slug` column in the `droppoints` table contains URL-friendly text identifiers for each delivery or collection point, stored as strings up to 255 characters long. This non-nullable field typically contains lowercase, hyphenated versions of the location names (e.g., ""north-street-depot"" or ""central-pickup-point"") and can be used in SQL queries to uniquely identify or filter specific droppoints, especially in URL routing or API endpoints."
droppoints,droppoint_group_id,int,NO,,,1,,,,10.0,0.0,"The droppoint_group_id column in the droppoints table is a required integer field that categorizes delivery/collection points into logical groups. This grouping mechanism helps organize and manage multiple droppoints that share similar characteristics or operational requirements, making it useful for filtering and aggregating related droppoints in queries."
droppoints,primary_contact_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The primary_contact_id column in the droppoints table is a foreign key that references the main contact person associated with each delivery or collection point. This integer field can be used in JOIN operations to retrieve detailed contact information from a related users or contacts table, and its nullable property allows for drop points without an assigned primary contact."
droppoints,customer_instructions,text,NO,,,,,,65535.0,,,"The customer_instructions column in the droppoints table contains mandatory text instructions or notes that specify special requirements or guidance for deliveries or collections at each drop point location. When writing SQL queries, this column can be used to filter or search for specific handling instructions, and since it's non-nullable, you can rely on it always containing some form of instruction, even if it's just a default value."
droppoints,territory_id,int,YES,MUL,,1,ww_territories,id,,10.0,0.0,"The territory_id column in the droppoints table is a foreign key that links each delivery or collection point to its associated geographical territory. This column helps in organizing and filtering droppoints by their operational regions, making it useful for queries that need to analyze or group delivery points within specific territorial boundaries."
droppoints,hd_product_id,int,YES,MUL,,,products,product_id,,10.0,0.0,"The `hd_product_id` column in the droppoints table is an integer field that links to a product specifically associated with home delivery services at this drop point location. This foreign key relationship (indicated by the MUL key type) helps identify which products are available for home delivery through specific drop points, enabling queries to filter or join drop points based on their home delivery product offerings."
droppoints,fixed_service_time,int,NO,,,300,,,,10.0,0.0,"The fixed_service_time column in the droppoints table represents the standard time (likely in seconds) required for service operations at each delivery or collection point, with a default value of 300 seconds (5 minutes). This non-nullable integer field should be used when calculating route durations or scheduling deliveries, as it provides a consistent baseline for time estimation at each location."
droppoints,per_basket_service_time,int,NO,,,30,,,,10.0,0.0,"The per_basket_service_time column represents the estimated time (in minutes) required to handle each basket at a drop point, with a default value of 30 minutes. This integer value is used for calculating total service times and scheduling deliveries, helping to optimize route planning and resource allocation for each drop point location."
droppoints,security_time_buffer,int,NO,,,0,,,,10.0,0.0,"The security_time_buffer column in the droppoints table represents the additional time (in minutes) added to delivery or collection schedules as a safety margin for operational flexibility. This required integer value helps ensure smooth logistics operations by providing buffer time for unexpected delays or early arrivals at each drop point, with a default value of 0 if no specific buffer is needed."
droppoints,accepts_alcohol,tinyint,NO,,,0,,,,3.0,0.0,"The accepts_alcohol column is a boolean flag (stored as tinyint) that indicates whether a delivery/collection point is authorized to handle alcoholic products, where 0 typically means ""no"" and 1 means ""yes"". This field is mandatory (non-nullable) and should be included in queries when filtering droppoints based on their ability to process alcohol-containing orders or when implementing business rules around alcohol delivery restrictions."
droppoints,droppoints_basket_id,int,NO,MUL,,11,baskets,basket_id,,10.0,0.0,"The droppoints_basket_id column in the droppoints table is a required integer field that creates a link between a delivery/collection point and its associated basket. This foreign key relationship (indicated by the MUL key type) enables queries to connect droppoint locations with specific basket details, which is essential for tracking and managing order fulfillment at each location."
droppointsLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'l_id' column serves as the primary key in the droppointsLang table, uniquely identifying each language-specific entry for drop points or delivery locations. This integer field is required (non-nullable) and should be referenced when joining with other tables or filtering specific language entries in queries."
droppointsLang,droppoint_id,int,NO,MUL,,,,,,10.0,0.0,"The droppoint_id column in the droppointsLang table serves as a foreign key that links to the main drop point record, enabling the storage of multilingual content for each delivery location. This column should be used in JOIN operations to connect language-specific content with the primary drop point information, and it's commonly referenced in WHERE clauses when filtering for translations of specific drop points."
droppointsLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the `droppointsLang` table stores language identifiers (such as ""en"", ""es"", ""fr"") as text strings up to 10 characters long, and is required (non-nullable). This column is used to specify which language version each drop point translation record corresponds to, enabling multi-language support for drop point information."
droppointsLang,l_name,varchar(255),NO,,,,,,255.0,,,"The `l_name` column in the `droppointsLang` table stores the localized name or translated label for drop points in different languages, with a maximum length of 255 characters. This required field (non-nullable) is essential for displaying drop point names in the appropriate language for different users or regions of the system."
droppointsLang,l_address,varchar(500),YES,,,,,,500.0,,,"The l_address column in the droppointsLang table stores localized street addresses or location descriptions for drop points, with support for up to 500 characters. This column can be used in SQL queries to retrieve or filter language-specific address information for delivery locations, and since it's nullable, some drop points may not have address information in certain languages."
droppointsLang,l_delivery_instructions,varchar(800),YES,,,,,,800.0,,,"The `l_delivery_instructions` column in the `droppointsLang` table stores localized delivery instructions or guidance text for drop points, with support for up to 800 characters. This column can be used in SQL queries to retrieve or filter language-specific delivery instructions for different drop-off locations, and since it's nullable, some drop points may not have specific instructions in certain languages."
droppointsLang,l_top_subtitle,varchar(255),YES,,,,,,255.0,,,"The `l_top_subtitle` column in the `droppointsLang` table stores localized subtitle text (up to 255 characters) that appears at the top of drop point location descriptions or interfaces. When writing queries, this column can be used to retrieve language-specific subtitles for drop points, and since it's nullable, you should handle potential NULL values appropriately in your queries."
droppointsLang,l_bottom_subtitle,varchar(255),YES,,,,,,255.0,,,"The `l_bottom_subtitle` column in the `droppointsLang` table stores localized subtitle text (up to 255 characters) that appears at the bottom of drop point information displays. When writing queries, this column can be used to retrieve or filter language-specific subtitles for drop points, and its nullable property means it's optional and may contain NULL values."
droppointsLang,l_city_name,varchar(255),YES,,,,,,255.0,,,"The `l_city_name` column in the droppointsLang table stores the localized (translated) names of cities where drop points or delivery locations are situated, with a maximum length of 255 characters. This column can be used in SQL queries to retrieve or filter city names in specific languages, making it particularly useful for displaying location information in a user's preferred language."
droppointsLang,l_description,text,YES,,,,,,65535.0,,,"The `l_description` column in the `droppointsLang` table stores localized descriptions of drop points or delivery locations in different languages, allowing for multilingual support of location details. When querying this column, you can join it with language identifiers to retrieve location descriptions in specific languages, and since it's nullable, some drop points might not have descriptions in all supported languages."
droppointsLang,l_summary,varchar(500),YES,,,,,,500.0,,,"The `l_summary` column in the `droppointsLang` table stores localized summary descriptions of drop points or delivery locations, allowing for up to 500 characters of text. This column can be used to retrieve or filter language-specific summaries of drop points, and being nullable means that not all drop point entries are required to have a summary in every language."
droppointsLang,l_meta_description,varchar(255),YES,,,,,,255.0,,,"The l_meta_description column in the droppointsLang table stores localized meta descriptions (up to 255 characters) for drop points or delivery locations in different languages, likely used for SEO purposes or display in web interfaces. When querying this column, you should typically join it with a language identifier column to retrieve the meta description in the desired language, and be aware that the field can contain NULL values."
droppointsLang,l_slug,varchar(255),NO,,,,,,255.0,,,"The `l_slug` column in the `droppointsLang` table stores URL-friendly text identifiers (slugs) for drop points in different languages, with a maximum length of 255 characters. This required field likely contains SEO-friendly versions of location names or descriptions, making it useful for generating localized URLs or performing language-specific lookups of drop points."
droppointsLang,l_customer_instructions,text,NO,,,,,,65535.0,,,"The l_customer_instructions column in the droppointsLang table stores localized delivery instructions or guidance for customers in different languages, with text content being required (non-nullable). When writing SQL queries, this column can be used to retrieve or filter language-specific instructions for drop points, typically joining with a language identifier to get instructions in the desired language."
droppoints_categories_exclusion,droppoints_categories_exclusion_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The droppoints_categories_exclusion_id is the primary key column that uniquely identifies each exclusion rule in the droppoints_categories_exclusion table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific exclusion rules (e.g., WHERE droppoints_categories_exclusion_id = X)."
droppoints_categories_exclusion,droppoint_id,int,NO,,,,,,,10.0,0.0,"The droppoint_id column in the droppoints_categories_exclusion table is a required integer field that identifies the specific droppoint location where category exclusions should be applied. This column is used to link exclusion rules to physical delivery locations, enabling queries to filter out incompatible droppoint categories for each location in the delivery system."
droppoints_categories_exclusion,category_id,int,NO,,,,,,,10.0,0.0,"The category_id column in the droppoints_categories_exclusion table stores integer identifiers that reference specific droppoint categories which should be excluded under certain conditions. This required field is essential for identifying which categories are subject to exclusion rules, and it's commonly used in WHERE clauses or JOIN operations to filter out unavailable droppoint categories for specific locations or scenarios."
droppoints_coordinators,droppoints_coordinators_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The droppoints_coordinators_id column serves as the primary key for the droppoints_coordinators table, uniquely identifying each coordinator-droppoint assignment. This auto-incrementing integer field is essential for referencing specific coordinator assignments in JOIN operations and WHERE clauses when querying relationships between droppoints and their assigned coordinators."
droppoints_coordinators,droppoints_id,int,NO,,,,,,,10.0,0.0,"The droppoints_id column in the droppoints_coordinators table is a required integer field that identifies which droppoint a coordinator is assigned to. When writing queries, this column should be used to join with the droppoints table's primary key to retrieve droppoint details or to filter coordinator assignments for specific droppoints."
droppoints_coordinators,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the droppoints_coordinators table is a required integer field that references a user who serves as a coordinator for one or more droppoints. When writing queries, this column can be joined with the users table to retrieve coordinator details, and its multiple-key (MUL) designation indicates it's part of an index that may contain duplicate values."
droppoints_coordinators,primary_coordinator,tinyint,YES,,,0,,,,3.0,0.0,"The `primary_coordinator` column in the droppoints_coordinators table is a boolean flag (stored as tinyint) that indicates whether a coordinator is the primary coordinator for a droppoint. When querying, use this column to filter or identify the main coordinator (value = 1) versus secondary coordinators (value = 0) for each droppoint."
droppoints_coordinators,auto_deposit,tinyint,NO,,,0,,,,3.0,0.0,"The `auto_deposit` column in the droppoints_coordinators table is a boolean flag (stored as tinyint) that indicates whether automatic deposits are enabled for a specific droppoint-coordinator relationship. This required field (non-nullable) uses 0 for false and 1 for true, and can be used in WHERE clauses to filter coordinator assignments based on their automatic deposit settings."
droppoints_coordinators,deposit_amount,float,NO,,,1,,,,12.0,,"The deposit_amount column in the droppoints_coordinators table stores the required monetary deposit value (as a floating-point number) that coordinators must maintain for their assigned droppoint. This non-nullable field is essential for financial tracking and accountability in the droppoint management system, and can be used in queries to monitor deposit requirements or calculate total deposits across multiple coordinators."
droppoints_subcategories_exclusion,droppoints_subcategories_exclusion_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The droppoints_subcategories_exclusion_id is the primary key column that uniquely identifies each exclusion rule in the droppoints_subcategories_exclusion table. When writing SQL queries, use this column for precise record identification, joining with related tables, or when you need to reference specific exclusion rules (e.g., WHERE clauses or JOIN conditions)."
droppoints_subcategories_exclusion,droppoint_id,int,NO,MUL,,,,,,10.0,0.0,"The droppoint_id column in the droppoints_subcategories_exclusion table serves as a foreign key that references a specific droppoint location. When writing SQL queries, use this column to filter or join with other tables to identify which droppoints have specific exclusion rules, typically by including it in WHERE clauses or JOIN conditions."
droppoints_subcategories_exclusion,subcategory_id,int,NO,,,,,,,10.0,0.0,"The subcategory_id column in the droppoints_subcategories_exclusion table is a required integer field that identifies which specific subcategory is being excluded from a droppoint. When writing queries, this column can be joined with a subcategories table to get detailed information about the excluded item types, and it's commonly used in WHERE clauses to filter exclusion rules for specific subcategories."
dry_ice_schedule,dry_ice_schedule_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The dry_ice_schedule_id column serves as the primary key for the dry_ice_schedule table, uniquely identifying each dry ice delivery or replenishment record. When writing SQL queries, use this column for joining to related tables or filtering specific delivery records, and note that it cannot contain NULL values."
dry_ice_schedule,date,date,NO,UNI,,,,,,,,"The 'date' column in the dry_ice_schedule table represents the specific calendar date when a dry ice delivery or replenishment is scheduled to occur. As a non-nullable unique key, each date can only have one scheduled delivery record, making it useful for filtering and joining operations when querying specific delivery dates (e.g., WHERE date = '2023-12-25' or JOIN ... ON date)."
dry_ice_schedule,min_hours,tinyint,NO,,,0,,,,3.0,0.0,"The min_hours column in the dry_ice_schedule table represents the minimum number of hours required for dry ice delivery or replenishment scheduling, stored as a small integer value that cannot be null. This column is likely used in queries to establish delivery time windows or to calculate the earliest possible delivery times, making it essential for filtering and scheduling operations (e.g., WHERE min_hours >= 4)."
dry_ice_schedule,updated_by,int,NO,,,,,,,10.0,0.0,"The `updated_by` column in the dry_ice_schedule table stores the unique identifier (integer) of the user or employee who last modified the dry ice delivery record, and it is a required field (non-nullable). When writing queries, this column can be used to track who made changes to delivery schedules or to filter/join with a user/employee table to get information about who updated specific dry ice delivery records."
dry_ice_schedule,updated_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `dry_ice_schedule` table automatically records the timestamp when a dry ice delivery record is modified, using the CURRENT_TIMESTAMP value. This datetime field is mandatory (non-nullable) and can be used in SQL queries to track the most recent changes to delivery schedules or filter records based on when they were last updated."
dynamic_pricing_logs,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the dynamic_pricing_logs table, uniquely identifying each individual pricing change event. When querying this table, you can use this column to join with other tables or to retrieve specific pricing log entries, and since it's non-nullable, you can rely on it always having a value."
dynamic_pricing_logs,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the dynamic_pricing_logs table is a required integer field that serves as a foreign key reference to identify which product's price was modified. When querying historical pricing data, this column can be used to join with the products table or to filter price change records for specific products."
dynamic_pricing_logs,inventory_date,date,NO,MUL,,,,,,,,"The inventory_date column in the dynamic_pricing_logs table stores the specific date when a pricing change or adjustment was recorded in the system. This date field is frequently used for filtering and grouping pricing history data, and since it's indexed (MUL) and non-nullable, it's optimal for queries that need to analyze pricing patterns or changes within specific date ranges."
dynamic_pricing_logs,log_date,datetime,NO,,,,,,,,,"The log_date column in the dynamic_pricing_logs table stores the exact timestamp when a price change or adjustment was recorded in the system. This non-nullable datetime field is essential for temporal analysis of pricing changes and can be used in SQL queries to filter, sort, or group pricing events by specific dates or time periods."
dynamic_pricing_logs,default_price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The default_price column in the dynamic_pricing_logs table stores the base or standard price (with 2 decimal places) before any dynamic adjustments were applied. This non-nullable decimal field serves as a reference point for tracking how prices change from their original values, making it essential for analyzing price modifications and calculating the magnitude of pricing adjustments."
dynamic_pricing_logs,current_price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The current_price column in the dynamic_pricing_logs table stores the actual price value (with 2 decimal places) that was set during each pricing adjustment event. This required field represents the final calculated price after all dynamic pricing factors were applied, making it useful for queries that need to analyze price points or track pricing changes over time."
dynamic_pricing_logs,new_price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The new_price column in the dynamic_pricing_logs table stores the updated price value (with 2 decimal places) that was set after a pricing adjustment occurred. When querying this column, you can use it to analyze price changes over time or compare against other price-related fields, and since it's non-nullable, you can rely on it always containing a valid price value."
dynamic_pricing_logs,action,varchar(50),NO,,,,,,50.0,,,"The 'action' column in the dynamic_pricing_logs table stores the specific type of pricing operation or modification that was performed, represented as a text string up to 50 characters long. This required field helps track and categorize different kinds of pricing adjustments (such as ""price_increase,"" ""seasonal_adjustment,"" or ""competitor_match"") made through the dynamic pricing system."
dynamic_pricing_logs,formula_log,text,YES,,,,,,65535.0,,,"The formula_log column in the dynamic_pricing_logs table stores the mathematical formulas or pricing rules that were applied during each price adjustment as a text string. This column helps track and audit how prices were calculated at specific points in time, making it useful in queries that need to analyze the logic behind historical pricing decisions or troubleshoot pricing calculations."
dynamic_pricing_logs,additional_data,text,YES,,,,,,65535.0,,,"The additional_data column in the dynamic_pricing_logs table stores supplementary information about pricing changes in JSON or text format, capturing details that don't fit into other structured columns. This flexible field can include various contextual information such as market conditions, competitor pricing data, or special event factors that influenced the pricing decision, making it useful for detailed analysis when joined with other pricing-related queries."
dynamic_pricing_logs,dp_minimal_price,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The dp_minimal_price column stores the lowest allowable price (in decimal format with 2 decimal places) that can be set for an item in the dynamic pricing system. When writing SQL queries, this column can be used to ensure prices don't fall below established minimums or to analyze price floor compliance, with values always being present (non-nullable) and defaulting to 0.00 if not specified."
dynamic_pricing_logs,purchasing_price,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The `purchasing_price` column in the `dynamic_pricing_logs` table stores the actual purchase price of items as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). This non-nullable field is essential for tracking the base cost of items before any dynamic pricing adjustments are applied, making it useful in SQL queries that analyze cost margins or calculate price adjustment percentages."
dynamic_pricing_logs,margin,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The 'margin' column in the dynamic_pricing_logs table stores the profit margin percentage (with two decimal places) associated with each pricing adjustment, represented as a decimal value (e.g., 25.50 for a 25.50% margin). When querying this column, you can use it for calculations or comparisons to analyze profitability trends, and since it's non-nullable, you can rely on it always having a value, with 0.00 being the default."
dynamic_pricing_logs,min_margin,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The min_margin column in the dynamic_pricing_logs table stores the minimum profit margin percentage (as a decimal) that was allowed during a pricing adjustment, with values like 15.50 representing a 15.5% margin. When querying this column, you can use it to analyze pricing thresholds or filter for specific margin requirements, and since it's non-nullable, you can rely on it always having a value with a default of 0.00 if not explicitly set."
dynamic_pricing_logs,target,int,NO,,,0,,,,10.0,0.0,"The 'target' column in the dynamic_pricing_logs table is a required integer field that indicates the specific pricing objective or outcome of a price adjustment. This column helps track whether pricing changes achieved their intended goals, where different integer values likely represent different target outcomes or pricing strategies in the dynamic pricing system."
dynamic_pricing_logs,sales,int,NO,,,0,,,,10.0,0.0,"The ""sales"" column in the dynamic_pricing_logs table stores the number of units sold as an integer value and cannot be null. This column helps track sales volume data that influences pricing decisions, making it useful in queries that analyze the relationship between sales performance and price adjustments."
dynamic_pricing_logs,expected_sales,int,NO,,,0,,,,10.0,0.0,"The expected_sales column in the dynamic_pricing_logs table stores the predicted number of units expected to be sold at the time of a pricing decision, represented as a non-negative integer. This required field helps track sales forecasts that influenced pricing adjustments, making it useful in queries that analyze the relationship between expected demand and price changes."
dynamic_pricing_logs,expected_orders_customized,int,NO,,,0,,,,10.0,0.0,"The expected_orders_customized column in the dynamic_pricing_logs table stores the predicted number of orders after applying customized pricing adjustments, represented as a non-null integer value. This metric helps track how pricing changes are expected to impact order volume, serving as a key indicator for evaluating the effectiveness of dynamic pricing decisions."
dynamic_pricing_logs,orders_customized,int,NO,,,0,,,,10.0,0.0,"The ""orders_customized"" column in the dynamic_pricing_logs table is an integer field that tracks the number of orders that received customized pricing adjustments during a specific pricing change event. This non-nullable field helps analyze how frequently price customizations are applied and can be used to measure the impact of dynamic pricing strategies on order modifications."
dynamic_pricing_logs,percent_remaining_shoppers,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The percent_remaining_shoppers column represents the percentage of active shoppers still in the system at the time of a pricing change, stored as a decimal value between 0.00 and 100.00. This metric can be used in SQL queries to analyze how pricing decisions correlate with shopping activity levels, and is commonly used in WHERE clauses to filter for specific shopper threshold conditions (e.g., WHERE percent_remaining_shoppers > 50.00)."
dynamic_pricing_logs,execution_id,int,YES,MUL,,,,,,10.0,0.0,"The execution_id column in the dynamic_pricing_logs table serves as a reference identifier that links each pricing change event to a specific execution instance of the dynamic pricing system. This indexed column (MUL) can be used to group or filter related pricing adjustments that occurred during the same execution cycle, making it useful for analyzing batch pricing changes or tracking specific pricing update sessions."
editor_content,editor_content_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The editor_content_id column serves as the primary key identifier for each unique piece of content created in the editor interface. This integer column should be used in WHERE clauses and JOIN conditions when you need to reference specific editor content entries or link to related tables that reference this content.
editor_content,model,varchar(255),YES,,,,,,255.0,,,"The ""model"" column in the editor_content table stores a string identifier (up to 255 characters) that indicates the type or category of content being edited, such as ""article,"" ""page,"" or ""document."" When querying this table, you can use this column to filter or group editor content by their model types, making it useful for retrieving specific categories of edited content."
editor_content,model_id,int,YES,MUL,,,,,,10.0,0.0,"The model_id column in the editor_content table serves as a foreign key reference to identify which model or entity type the edited content is associated with. This column can be used in JOIN operations to connect editor content with its parent model, and since it's nullable, some editor content entries may not be linked to a specific model."
editor_content,content,text,YES,,,,,,65535.0,,,"The 'content' column in the editor_content table stores the actual text or formatted content created through an editor interface, allowing for storage of potentially large blocks of text data. This column can be NULL and is commonly used in SELECT queries when retrieving the edited content, or in UPDATE statements when saving new revisions of the content."
editor_content,lang,varchar(6),YES,,,,,,6.0,,,"The ""lang"" column in the editor_content table stores the language code or identifier (up to 6 characters) for the edited content, using formats like 'en' for English or 'es' for Spanish. This column can be used in SQL queries to filter or group content by language, making it useful for multilingual content management and localization features."
editor_content,encoded,tinyint,YES,,,0,,,,3.0,0.0,"The `encoded` column in the `editor_content` table is a boolean flag (stored as a tinyint) that indicates whether the content has been encoded or processed in some way. When querying this column, use 0 for unencoded content and 1 for encoded content, and since it's nullable, consider handling NULL values appropriately in your WHERE clauses."
eh_employee_highlight_logs,hlog_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hlog_id column serves as the primary key identifier for each employee highlight or recognition event record in the eh_employee_highlight_logs table. When writing SQL queries, use this column to uniquely identify specific highlight records or to join with related tables that reference employee highlights."
eh_employee_highlight_logs,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the eh_employee_highlight_logs table is a required integer field that identifies which employee received recognition or was highlighted in each log entry. When querying this table, you can join this column with user/employee tables to get detailed information about the recognized employees or filter/group recognition events by specific employees."
eh_employee_highlight_logs,highlights_id,int,NO,,,,,,,10.0,0.0,The highlights_id column in the eh_employee_highlight_logs table serves as a unique identifier for each employee recognition or highlight event. This integer field is required (non-nullable) and should be referenced when querying specific highlight records or joining with related tables to access detailed information about employee recognition events.
eh_employee_highlight_logs,created_at,datetime,NO,,,,,,,,,"The created_at column in eh_employee_highlight_logs is a mandatory datetime field that records the exact timestamp when an employee recognition or highlight event was logged in the system. This column is useful for temporal queries and analysis, such as filtering recognition events within specific date ranges or ordering highlights chronologically to track employee appreciation patterns over time."
eh_employee_mood_responses,response_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The response_id column serves as the primary key in the eh_employee_mood_responses table, uniquely identifying each individual mood survey response submitted by employees. When writing SQL queries, use this column to join with related tables or to filter for specific survey responses, as it provides a reliable way to reference individual feedback entries."
eh_employee_mood_responses,response_content,text,YES,,,,,,65535.0,,,"The response_content column in eh_employee_mood_responses stores the actual text feedback or detailed responses provided by employees during mood surveys. This free-form text field can contain employees' written comments, explanations of their sentiment ratings, or specific feedback about workplace experiences, and may be NULL if an employee chooses not to provide written feedback."
eh_employee_mood_responses,channel_id,int,NO,,,,,,,10.0,0.0,"The channel_id column in eh_employee_mood_responses is a required integer field that identifies the communication or survey channel through which the employee mood response was collected. This column helps track and categorize responses based on their collection method, such as mobile app, web portal, or specific survey platform, enabling analysis of response patterns across different feedback channels."
eh_employee_mood_responses,created_at,date,NO,,,,,,,,,"The created_at column in eh_employee_mood_responses stores the date when each employee mood survey response was submitted, making it useful for tracking sentiment trends over time. This non-nullable date field can be used to filter, group, or analyze employee feedback by specific dates or date ranges, enabling temporal analysis of workplace sentiment patterns."
eh_employee_pinned_tools,employee_pinned_tool_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The employee_pinned_tool_id column serves as the primary key for the eh_employee_pinned_tools table, uniquely identifying each record of a tool that an employee has pinned or favorited. When writing SQL queries, use this column for precise record identification, joining with related tables, or when you need to update or delete specific pinned tool entries."
eh_employee_pinned_tools,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in eh_employee_pinned_tools is a required integer field that identifies which employee has pinned or favorited a specific tool. When writing queries, this column can be used to filter or join with other employee-related tables to retrieve personalization preferences for specific users."
eh_employee_pinned_tools,tools,json,NO,,,,,,,,,"The 'tools' column in eh_employee_pinned_tools stores JSON data representing the collection of tools and features that an employee has pinned or favorited, with each tool's properties and settings stored in a structured JSON format. When querying this column, use JSON operators and functions (like ->, ->>, JSON_EXTRACT) to access specific tool properties within the JSON structure, and note that this column cannot contain NULL values."
eh_employee_pinned_tools,created_at,datetime,NO,,,,,,,,,"The created_at column in eh_employee_pinned_tools stores the exact date and time when an employee first pinned or favorited a specific tool, recorded as a non-nullable datetime value. This timestamp can be used in SQL queries to analyze when users started using particular tools or to track pinning activity patterns over time."
eh_employee_pinned_tools,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in eh_employee_pinned_tools is a required integer field that stores the employee ID of the user who created the pin/favorite entry. When writing queries, this column can be used to filter or join with employee-related tables to find which tools specific employees have pinned or to analyze pinning patterns across different users."
eh_employee_pinned_tools,updated_at,datetime,NO,,,,,,,,,"The updated_at column in eh_employee_pinned_tools stores the timestamp of when an employee's tool pinning preference was last modified, automatically recording changes when tools are pinned or unpinned. This datetime field is useful for tracking the recency of pinned tool selections and can be used in queries to analyze user engagement patterns or filter for recently modified pin preferences."
eh_employee_pinned_tools,updated_by,int,NO,,,,,,,10.0,0.0,"The `updated_by` column in the eh_employee_pinned_tools table stores the employee ID of the user who last modified a pinned tool record, making it useful for audit tracking and change history. When writing queries, this column can be joined with employee tables to identify who made the most recent changes to pinned tool preferences."
eh_highlight_channels,highlight_channel_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The highlight_channel_id column serves as the primary key in the eh_highlight_channels table, uniquely identifying each highlight channel configuration record with a non-nullable integer value. When writing queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific highlight channel configuration."
eh_highlight_channels,highlight_id,int,NO,,,,,,,10.0,0.0,"The highlight_id column is a required integer field that serves as an identifier for highlight configurations within the eh_highlight_channels table. This column should be referenced when querying or joining highlight-related data, and since it's non-nullable, any INSERT operations must include a value for this field."
eh_highlight_channels,channel_id,int,NO,,,,,,,10.0,0.0,"The channel_id column in eh_highlight_channels is a required integer field that uniquely identifies different highlight channels within the event highlighting system. When writing queries, use this column to filter, join, or group highlight channel configurations, as it serves as the primary identifier for each channel record."
eh_highlight_channels,created_at,datetime,NO,,,,,,,,,"The created_at column in eh_highlight_channels stores the timestamp when each highlight channel configuration record was initially created, using a datetime format. This non-nullable field is essential for tracking the chronological order of channel creation and can be useful in queries that need to filter or sort highlight channels by their creation date."
eh_highlight_channels,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in eh_highlight_channels is a required integer field that stores the user ID of the person who created the highlight channel configuration. When writing queries, this column can be used to filter or join with user tables to track ownership and analyze channel creation patterns."
eh_highlight_channels,updated_at,datetime,NO,,,,,,,,,"The updated_at column in eh_highlight_channels is a mandatory datetime field that tracks when each highlight channel configuration record was last modified. This timestamp can be used for auditing changes, filtering records by modification date, or determining the recency of configuration updates in SQL queries."
eh_highlight_channels,updated_by,int,NO,,,,,,,10.0,0.0,"The `updated_by` column in the eh_highlight_channels table is a required integer field that stores the user ID of the person who last modified the highlight channel configuration. This column is commonly used in WHERE clauses or JOINs with user tables to track and filter changes by specific users, and its non-nullable nature ensures accountability for all configuration updates."
eh_highlights,highlight_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The highlight_id column serves as the primary key for the eh_highlights table, uniquely identifying each highlight or annotation made by users in electronic content. When writing queries, this column can be used to join with related tables or to specifically retrieve or filter individual highlights, and since it's non-nullable, you can rely on it always having a value."
eh_highlights,start_date,datetime,NO,,,,,,,,,"The start_date column in the eh_highlights table records the timestamp when a user first created a highlight or annotation in the electronic content. As a non-nullable datetime field, it must always have a value and can be used to track when highlights were made or to filter/sort highlights chronologically in queries."
eh_highlights,start_time,time,NO,,,,,,,,,The start_time column in the eh_highlights table records the specific time of day when a user created a highlight or annotation within electronic content. This required (non-nullable) time field can be used to analyze highlighting patterns throughout the day or to sort/filter highlights based on when they were made.
eh_highlights,end_date,datetime,NO,,,,,,,,,"The end_date column in the eh_highlights table records the timestamp when a highlight or annotation was removed or deactivated in the system. When writing queries, this datetime field can be used to filter for active highlights (where end_date is in the future) or to analyze highlight deletion patterns, and since it's non-nullable, every highlight record must have an end_date value."
eh_highlights,end_time,time,NO,,,,,,,,,"The end_time column in the eh_highlights table records the time when a user completed or finished making a text highlight or annotation, stored in a time format (HH:MM:SS). This timestamp can be used to track when highlighting activities were completed and to analyze user reading/annotation patterns throughout the day."
eh_highlights,status,int,NO,,,,,,,10.0,0.0,"The `status` column in the eh_highlights table is a required integer field that indicates the current state of a highlight or annotation (e.g., active, deleted, archived). When querying highlights, this column can be used to filter for specific highlight states or to exclude inactive highlights from results."
eh_highlights,en_content,json,NO,,,,,,,,,"The en_content column stores JSON-formatted data representing the actual highlighted content and its associated metadata within electronic documents. This required (non-nullable) JSON field likely contains structured information such as the highlighted text, position coordinates, and any additional properties needed to accurately render and track highlights within the source content."
eh_highlights,fr_content,json,NO,,,,,,,,,"The fr_content column stores JSON-formatted data representing the content and formatting details of highlighted text selections within electronic documents. This required (non-nullable) JSON field likely contains structured information about the highlighted content, such as the actual text, position coordinates, styling attributes, or other metadata needed to properly display and manage highlights within the content."
eh_highlights,created_at,datetime,NO,,,,,,,,,"The created_at column in the eh_highlights table records the exact date and time when a user's highlight or annotation was first created, stored as a datetime value. This non-nullable field is essential for tracking the chronological order of highlights and can be used in SQL queries for filtering highlights by date ranges or sorting them by creation time."
eh_highlights,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the eh_highlights table is a required integer field that stores the user ID of the person who created the highlight or annotation. When writing queries, this column can be used to filter or group highlights by their creator, and it likely serves as a foreign key reference to a users table (though not explicitly marked as one)."
eh_highlights,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the eh_highlights table records the timestamp of when a highlight or annotation was last modified, storing this information as a datetime value that cannot be null. This column is commonly used for tracking the recency of changes and can be helpful when querying for recently updated highlights or sorting highlights by their modification date."
eh_highlights,updated_by,int,NO,,,,,,,10.0,0.0,"The updated_by column in the eh_highlights table stores the user ID (as an integer) of the person who last modified the highlight or annotation record. This required field helps track the editing history of highlights by maintaining a reference to the user who made the most recent changes, which is useful for audit trails and user activity tracking."
eh_highlights,en_content_json,json,YES,,,,,,,,,"The en_content_json column stores JSON-formatted data representing the content and metadata associated with user highlights in electronic documents. This JSON field can be queried using JSON operators and functions to extract specific properties about the highlighted content, such as the selected text, position information, or any additional metadata associated with the highlight."
eh_highlights,fr_content_json,json,YES,,,,,,,,,"The fr_content_json column stores JSON-formatted data representing the content and formatting details of highlighted text selections in electronic documents. This JSON field can be queried using JSON operators and functions to extract specific properties about the highlighted content, such as the selected text, formatting styles, or any additional metadata associated with the highlight."
eh_highlights,title_en,varchar(255),NO,,,,,,255.0,,,"The title_en column in the eh_highlights table stores the English title or heading text (up to 255 characters) associated with the highlighted content or document section where the highlight was made. This required field (non-nullable) helps identify and organize highlights by their source material's English title, making it useful for queries that need to group or filter highlights by document title."
eh_highlights,title_fr,varchar(255),NO,,,,,,255.0,,,"The title_fr column in the eh_highlights table stores the French-language title or heading associated with the highlighted text selection, with a maximum length of 255 characters and cannot be null. This column likely serves as a localized French version of content titles, enabling multi-language support for highlighted content in the electronic highlighting system."
eh_highlights,en_content_html,longtext,NO,,,,,,4294967295.0,,,"The en_content_html column stores the actual HTML content of the highlighted text selection, preserving any formatting or markup present in the original document. When querying this column, you can expect to work with potentially large text strings containing HTML tags and should consider using appropriate text manipulation functions if you need to extract or analyze the raw text content."
eh_highlights,fr_content_html,longtext,NO,,,,,,4294967295.0,,,"The fr_content_html column stores the full HTML content or formatted text that was highlighted by the user, preserving any original formatting and structure. When querying this column, you should expect to handle long text strings containing HTML markup, and you may need to use text manipulation functions if you want to extract or search within the formatted content."
eh_monthly_questions,monthly_question_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The monthly_question_id column serves as the primary key for the eh_monthly_questions table, uniquely identifying each monthly question or inquiry record. As a non-nullable integer field, it ensures each record can be distinctly referenced in queries, making it ideal for WHERE clauses, JOINs, or when selecting specific monthly question records."
eh_monthly_questions,start_date,datetime,NO,,,,,,,,,"The start_date column in eh_monthly_questions represents the beginning date of each monthly reporting period, stored as a datetime value. This non-nullable field is essential for temporal analysis and can be used to filter or group questions/inquiries by specific months or time periods."
eh_monthly_questions,start_time,time,NO,,,,,,,,,"The start_time column in eh_monthly_questions represents the time of day when a question or inquiry was initiated, stored in a standard time format (HH:MM:SS). This non-nullable field is essential for temporal analysis of inquiries and can be used in SQL queries to filter or group questions by specific times of day, such as using BETWEEN or TIME comparisons."
eh_monthly_questions,end_date,datetime,NO,,,,,,,,,"The end_date column in eh_monthly_questions represents the last day of a given month for which question/inquiry data is being tracked. When querying this table, use this datetime field to filter or group monthly records, typically in combination with date functions like LAST_DAY() or for date range comparisons (e.g., WHERE end_date BETWEEN start_date AND some_date)."
eh_monthly_questions,end_time,time,NO,,,,,,,,,"The end_time column in eh_monthly_questions stores the time component (without date) indicating when a question or inquiry period concludes each day, using a standard time format (HH:MM:SS). This required field is essential for analyzing the temporal distribution of questions and can be used in time-based queries to filter or group inquiries based on their closing times."
eh_monthly_questions,month,varchar(10),YES,,,,,,10.0,,,"The 'month' column in eh_monthly_questions stores the month identifier as a text string (up to 10 characters) and accepts NULL values. When querying this column, use standard string comparison operators and consider formatting the month value consistently (e.g., 'January', 'Jan', or '01') to ensure accurate filtering and grouping of monthly question data."
eh_monthly_questions,status,int,NO,,,,,,,10.0,0.0,"The 'status' column in eh_monthly_questions is a required integer field that indicates the current state of each monthly question or inquiry. When writing queries, this column can be used to filter or group questions based on their processing status (e.g., WHERE status = 1 for active questions or GROUP BY status for status-based aggregations)."
eh_monthly_questions,question_en,varchar(255),YES,,,,,,255.0,,,"The question_en column stores the English version of questions or inquiries as text strings up to 255 characters in length. This column is optional (nullable) and is likely used to store standardized questions or common inquiries that occur on a monthly basis, with the '_en' suffix indicating it's specifically for English language content."
eh_monthly_questions,question_fr,varchar(255),YES,,,,,,255.0,,,"The question_fr column in eh_monthly_questions stores the French language version of questions or inquiries, with a maximum length of 255 characters. This optional field (as indicated by being nullable) likely pairs with an English version of the same question in a different column, supporting multilingual functionality in the reporting system."
eh_monthly_questions,created_at,datetime,NO,,,,,,,,,"The created_at column in eh_monthly_questions is a required datetime field that records when each question or inquiry was initially created in the system. This timestamp can be used for temporal analysis and filtering, making it particularly useful in queries that need to analyze question volumes over specific time periods or track trends across months."
eh_monthly_questions,created_by,int,NO,,,,,,,10.0,0.0,"The 'created_by' column in the eh_monthly_questions table is a required integer field that stores the identifier of the user or system entity who created the monthly question record. When writing SQL queries, this column can be used to filter or group monthly questions by their creator, and since it's non-nullable, you can rely on it always having a value."
eh_monthly_questions,updated_at,datetime,NO,,,,,,,,,"The updated_at column in eh_monthly_questions stores the timestamp of when each question record was last modified, automatically tracking changes to help maintain data integrity and audit history. This non-nullable datetime field is essential for understanding when question records were updated and can be useful for filtering recent changes or analyzing modification patterns over time."
eh_monthly_questions,updated_by,int,NO,,,,,,,10.0,0.0,"The 'updated_by' column in the eh_monthly_questions table stores the numeric identifier (integer) of the user who last modified the monthly question record. This required field (non-nullable) helps maintain an audit trail of who made changes to question entries, making it useful for tracking accountability and changes over time."
eh_monthly_servey_answers,monthly_servey_answer_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The monthly_servey_answer_id column serves as the primary key in the eh_monthly_servey_answers table, uniquely identifying each individual survey response from employees. This non-nullable integer column should be used in WHERE clauses when querying specific survey responses or when joining with related tables that reference individual survey answers."
eh_monthly_servey_answers,monthly_question_id,int,NO,,,,,,,10.0,0.0,"The monthly_question_id column in eh_monthly_servey_answers is a required integer field that identifies which specific question from the monthly health survey is being answered. When writing queries, this column can be used to filter or group survey responses by specific questions, making it essential for analyzing response patterns to particular health-related inquiries."
eh_monthly_servey_answers,channel_id,int,NO,,,,,,,10.0,0.0,"The channel_id column in the eh_monthly_servey_answers table is a required integer field that likely identifies the specific communication or survey distribution channel used to collect the employee health survey response. When querying this table, you can use channel_id to filter or group survey responses based on how they were collected (e.g., email, mobile app, web portal)."
eh_monthly_servey_answers,answer,varchar(1000),YES,,,,,,1000.0,,,"The 'answer' column in the eh_monthly_servey_answers table stores the actual text responses provided by employees in their monthly health surveys, allowing up to 1000 characters per response. When querying this column, you can use string operations and pattern matching (like LIKE or REGEXP) to analyze response content, and since it's nullable, remember to handle potential NULL values appropriately in your queries."
eh_monthly_servey_answers,created_at,datetime,NO,,,,,,,,,"The created_at column in eh_monthly_servey_answers is a mandatory datetime field that records when each employee health survey response was submitted. This timestamp can be used for temporal analysis of survey responses, such as filtering responses within specific date ranges or tracking submission patterns over time."
eh_question_channels,question_channel_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The question_channel_id column serves as the primary key in the eh_question_channels table, uniquely identifying each question channel or category in the system. When writing SQL queries, use this column to join with related tables or to filter specific channels, as it provides the fundamental reference point for all channel-specific operations and relationships."
eh_question_channels,monthly_question_id,int,NO,,,,,,,10.0,0.0,"The monthly_question_id column in eh_question_channels is a required integer field that likely references or tracks a specific question assigned to a channel for the current month. This column can be used in SQL queries to filter or join with other tables to find channels associated with particular monthly questions, making it useful for retrieving or analyzing monthly question assignments across different channels."
eh_question_channels,channel_id,int,NO,,,,,,,10.0,0.0,"The channel_id column in eh_question_channels serves as a unique numeric identifier for each question channel or category in the system. When writing SQL queries, use this column to join with related tables or filter specific channels, as it represents the primary way to reference individual question channels within the system."
eh_question_channels,created_at,datetime,NO,,,,,,,,,"The created_at column in the eh_question_channels table stores the timestamp indicating when each question channel or category was initially created in the system. This non-nullable datetime field is essential for tracking the chronological history of channel creation and can be useful for filtering, sorting, or analyzing channel creation patterns over time."
eh_question_channels,created_by,int,NO,,,,,,,10.0,0.0,"The `created_by` column in the eh_question_channels table is a required integer field that stores the user ID of the person who created the question channel or category. This column is commonly used in WHERE clauses or JOINs to filter or retrieve channel information based on the creator, and can be referenced when tracking ownership or auditing channel creation."
eh_question_channels,updated_at,datetime,NO,,,,,,,,,"The updated_at column in eh_question_channels stores the timestamp of when a question channel's configuration was last modified, using a datetime format. This column is required (non-nullable) and helps track the recency of channel settings changes, which can be useful for auditing, synchronization, or displaying ""last updated"" information in the user interface."
eh_question_channels,updated_by,int,NO,,,,,,,10.0,0.0,"The `updated_by` column in the eh_question_channels table stores the user ID (as an integer) of the person who last modified the channel configuration or settings. This mandatory field (non-nullable) helps track who made the most recent changes to question channel properties, which is useful for auditing and accountability purposes."
email_campaigns,email_campaign_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The email_campaign_id column serves as the primary key for the email_campaigns table, uniquely identifying each email marketing campaign in the system. This integer field is required (non-nullable) and should be referenced when joining with related tables like email_recipients and email_template to establish relationships between campaigns and their recipients or content templates."
email_campaigns,name,text,NO,,,,,,65535.0,,,"The 'name' column in the email_campaigns table stores the unique identifier or title of each email marketing campaign as text, and it is required (non-nullable). When writing SQL queries, use this column to search for, filter, or identify specific campaigns by their descriptive names, such as ""SELECT * FROM email_campaigns WHERE name LIKE '%Holiday%'"" to find holiday-related campaigns."
email_campaigns,status,tinyint,NO,,,1,,,,3.0,0.0,"The 'status' column in the email_campaigns table is a required tinyint field that indicates the current state of an email marketing campaign (e.g., 1 for active, 0 for inactive). When querying email campaigns, this column can be used to filter for campaigns based on their operational status, making it useful for finding active campaigns or analyzing campaign states."
email_campaigns,created_at,timestamp,NO,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The created_at column in the email_campaigns table automatically records the timestamp when each marketing campaign record is created, using CURRENT_TIMESTAMP as the default value. This non-nullable timestamp field is useful for tracking campaign creation history and can be used in SQL queries for filtering campaigns by date, analyzing campaign creation patterns over time, or sorting campaigns chronologically."
email_campaigns,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the email_campaigns table is a required integer field that stores the user ID of the person who created the email marketing campaign. When writing queries, this column can be used to filter or join with user tables to track campaign ownership and analyze campaign creation patterns by specific users."
email_clicks,email_schedule_id,int,YES,MUL,,,,,,10.0,0.0,"The email_schedule_id column in the email_clicks table is a foreign key that links each click event to its corresponding scheduled email campaign. This column helps track which specific scheduled email campaign generated the click, enabling analysis of campaign performance and user engagement patterns across different email sends."
email_clicks,link_id,int,YES,,,,,,,10.0,0.0,"The link_id column in the email_clicks table stores the unique identifier for each clickable link within marketing emails, allowing tracking of which specific links users interact with. This integer field can be used to join with other tables containing link details or to group and analyze click patterns for different links within email campaigns."
email_clicks,user_id,int,YES,,,,,,,10.0,0.0,"The user_id column in the email_clicks table stores the unique identifier of the user who clicked on an email link or campaign element. This column can be used to join with other user-related tables to analyze individual user engagement patterns, and since it's nullable, some click events might not be associated with a specific user (such as anonymous clicks)."
email_clicks,created_at,datetime,YES,,,,,,,,,"The created_at column in the email_clicks table stores the exact timestamp when a user clicked on an email link or campaign element, recorded in datetime format. This column is essential for temporal analysis of email engagement patterns and can be used in SQL queries to filter click events by date/time ranges or to analyze click activity trends over specific time periods."
email_clicks,ip_address,varchar(50),YES,,,,,,50.0,,,"The ip_address column in the email_clicks table stores the IP address of the user who clicked on an email link, recorded as a string up to 50 characters long. This column is useful for tracking geographical distribution of email engagement and detecting potential suspicious activities, though it can be NULL if the IP address wasn't captured during the click event."
email_clicks,user_comms_id,int,YES,,,,,,,10.0,0.0,"The user_comms_id column in the email_clicks table is an integer field that links to a specific user communication or email instance. This column helps track which specific email communication was clicked on, allowing analysts to connect click events with individual email sends and measure engagement rates per communication."
email_keywords,email_keyword_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The email_keyword_id column serves as the primary key in the email_keywords table, uniquely identifying each keyword or phrase entry extracted from emails. This non-nullable integer field is essential for establishing relationships with other tables and should be referenced when joining tables or filtering specific keyword entries."
email_keywords,keyword,varchar(255),YES,,,,,,255.0,,,"The 'keyword' column in the email_keywords table stores individual words or phrases (up to 255 characters) that have been extracted from email content. This column can be used in SQL queries to search for specific terms, analyze keyword frequency, or group related emails, with NULL values permitted when no relevant keywords are identified."
email_keywords,relation,varchar(255),YES,,,,,,255.0,,,"The 'relation' column in the email_keywords table stores the contextual relationship or association between a keyword and the email content, represented as a text string up to 255 characters. This column helps identify how a keyword relates to the email (e.g., ""subject_term"", ""body_mention"", ""signature_text""), enabling more nuanced analysis and classification of email content."
email_keywords,data,varchar(255),YES,,,,,,255.0,,,"The 'data' column in the email_keywords table stores individual keywords or phrases (up to 255 characters) that have been extracted from email content. This column can be used in SQL queries to search for specific terms, analyze keyword patterns, or group similar emails based on their keyword content, with NULL values being permitted when no relevant keywords are identified."
email_products,email_products_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The email_products_id column serves as the primary key identifier for each unique email product or service in the email_products table. This non-nullable integer field should be used in JOIN operations when linking to related tables and in WHERE clauses when filtering for specific email products.
email_products,email_id,int,NO,,,,,,,10.0,0.0,"The email_id column in the email_products table serves as a numeric identifier for each unique email product or service offering. This non-nullable integer field should be used in WHERE clauses and JOIN conditions when you need to reference or filter specific email products, such as ""WHERE email_id = 123"" or ""JOIN email_products ON email_id = x""."
email_products,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the email_products table serves as a unique identifier for each email-related product or service offering. When writing SQL queries, use this integer column to uniquely reference specific products, join with related tables, or filter product-specific information."
email_recipients,email_recipients_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The email_recipients_id column serves as the primary key for the email_recipients table, uniquely identifying each recipient record in the email campaign system. This integer-based identifier is required (non-nullable) and should be referenced when joining with related tables like email_campaigns, email_schedule, or notification_messages to establish relationships between recipients and their associated campaign data."
email_recipients,name,varchar(100),NO,,,,,,100.0,,,"The 'name' column in the email_recipients table stores the full name of each email campaign recipient as a required text field with a maximum length of 100 characters. This column is essential for personalizing email communications and identifying recipients within the email campaign system, and since it's marked as NOT NULL, every recipient record must include a name value."
email_recipients,query,text,NO,,,,,,65535.0,,,"The 'query' column in the email_recipients table stores SQL query definitions that can be used to dynamically generate recipient lists for email campaigns. This required text field allows for flexible recipient targeting by enabling custom filtering conditions to be defined and stored, which can then be executed to determine the exact set of recipients for a particular campaign."
email_recipients,description,text,YES,,,,,,65535.0,,,"The `description` column in the `email_recipients` table stores optional text notes or additional information about each email recipient. This free-form text field can be used to record recipient-specific details, preferences, or any relevant comments that help with recipient management and segmentation in email campaigns."
email_recipients,status,int,NO,,,1,,,,10.0,0.0,"The 'status' column in the email_recipients table is a required integer field that indicates the current state of each recipient's subscription or participation in email campaigns (e.g., active, unsubscribed, bounced). When writing SQL queries, this column can be used to filter recipients based on their current status, ensuring emails are only sent to appropriate recipients and helping maintain compliance with email marketing practices."
email_recipients,email_campaigns_id,int,YES,MUL,,,email_campaigns,email_campaign_id,,10.0,0.0,The email_campaigns_id column in the email_recipients table serves as a foreign key that links recipients to specific email campaigns. This column allows you to identify which campaign a recipient belongs to and can be used in JOIN operations with the email_campaigns table to retrieve campaign details for each recipient.
email_recipients,category,int,YES,,,,,,,10.0,0.0,"The 'category' column in the email_recipients table is an optional integer field that classifies recipients into different groups or segments for targeted email campaigns. This categorization helps in filtering and organizing recipients when creating targeted campaign lists, allowing for more personalized email marketing strategies."
email_reminders,email_reminder_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The email_reminder_id column serves as the primary key for the email_reminders table, uniquely identifying each scheduled email reminder record. This non-nullable integer field should be used in WHERE clauses and JOIN conditions when querying specific reminder records or relating reminder data to other tables."
email_reminders,user_id,int,YES,MUL,,,,,,10.0,0.0,"The user_id column in the email_reminders table is an integer field that links each reminder record to a specific user in the system, likely through a foreign key relationship. When querying this table, you can use user_id to filter or group reminder records by user, making it useful for retrieving all reminders scheduled for a particular user or analyzing reminder patterns across users."
email_reminders,email,varchar(255),YES,,,,,,255.0,,,"The 'email' column in the email_reminders table stores the recipient's email address as a string with a maximum length of 255 characters. This column is optional (nullable) and is used to specify where the scheduled reminder should be sent, making it a crucial field for the email delivery process."
email_reminders,lang,varchar(3),YES,,,,,,3.0,,,"The 'lang' column in the email_reminders table stores the three-letter ISO language code (e.g., 'eng', 'esp', 'fra') indicating the language of the email reminder content. When querying or filtering email reminders by language, use this column to ensure users receive communications in their preferred language, with NULL values potentially indicating a default language setting."
email_reminders,eval_func,varchar(255),YES,,,,,,255.0,,,"The eval_func column in the email_reminders table stores the name or identifier of a function that should be evaluated before sending the reminder email. This column allows for custom logic or conditions to be specified that determine whether the reminder should actually be sent, making it useful for implementing dynamic reminder rules or validation checks."
email_reminders,eval_json,text,YES,,,,,,65535.0,,,"The eval_json column in the email_reminders table stores JSON-formatted evaluation data or parameters related to email reminders in text format. This column can be queried using JSON functions to extract or filter specific evaluation criteria, though it's optional (nullable) and should be handled accordingly in queries where the field might be empty."
email_reminders,status,tinyint,NO,,,0,,,,3.0,0.0,"The 'status' column in the email_reminders table is a required tinyint field that tracks the delivery state of each email reminder using numeric codes (e.g., 0 might represent 'pending', 1 for 'sent', etc.). When querying this table, you can use the status column to filter or group reminders based on their current delivery state, making it useful for monitoring email reminder progress or identifying failed deliveries."
email_reminders,created_at,datetime,YES,MUL,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the email_reminders table records the timestamp when each email reminder record was initially created in the system, automatically populated with CURRENT_TIMESTAMP. This column is commonly used in queries to track when reminders were scheduled or to analyze reminder creation patterns over time, and its indexed nature (MUL) makes it efficient for filtering and sorting operations."
email_reminders,sent_at,datetime,YES,MUL,,,,,,,,"The `sent_at` datetime column in the email_reminders table records the timestamp when an email reminder was actually delivered to its recipient. This column is useful for tracking delivery timing and can be null when the reminder hasn't been sent yet, making it effective for filtering unsent reminders (WHERE sent_at IS NULL) or analyzing delivery patterns over time."
email_reply_template,email_reply_template_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The email_reply_template_id is the primary key column that uniquely identifies each email response template in the email_reply_template table. When querying or joining with this table, use this column as the main identifier to reference specific templates, such as in WHERE clauses or JOIN conditions."
email_reply_template,name,varchar(100),YES,,,,,,100.0,,,"The 'name' column in the email_reply_template table stores descriptive identifiers for each email response template, with a maximum length of 100 characters. When querying, this column can be used to search for or reference specific templates by their given names, making it useful for filtering (WHERE name LIKE '%support%') or organizing (ORDER BY name) template results."
email_reply_template,heading,text,YES,,,,,,65535.0,,,"The 'heading' column in the email_reply_template table stores the subject line or title text for each email response template. This optional text field helps identify and categorize different templates, making it easier to select the appropriate pre-written response for specific communication needs."
email_reply_template,content,text,YES,,,,,,65535.0,,,"The 'content' column in the email_reply_template table stores the actual body text of pre-written email response templates, containing the standardized message that will be sent to recipients. When writing queries, this column can be searched using text-based operations (like LIKE or CONTAINS) to find specific templates, and its nullable property means some template records might not have content defined yet."
email_reply_template,status,int,YES,,,,,,,10.0,0.0,"The 'status' column in the email_reply_template table is an integer field that indicates the current state or availability of an email template (e.g., 1 for active, 0 for inactive). When querying email templates, this column can be used to filter for only active templates or to check whether a specific template is currently enabled for use in the email response system."
email_reply_template,subject,text,YES,,,,,,65535.0,,,"The 'subject' column in the email_reply_template table stores the email subject line text for each pre-defined response template. When querying this column, you can search or filter by subject text to find specific templates, and since it's nullable, be sure to handle potential NULL values appropriately in your queries."
email_reply_templateLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the email_reply_templateLang table, uniquely identifying each localized email template record. When writing SQL queries, use this column for precise record selection, joining with related tables, or ensuring unique constraints when inserting new localized templates."
email_reply_templateLang,email_reply_template_id,int,YES,,,,,,,10.0,0.0,"The email_reply_template_id column in the email_reply_templateLang table serves as a reference to identify specific email reply templates, linking localized versions to their base template. When writing queries, use this column to join with other tables or filter for specific templates, particularly when you need to retrieve or manage different language versions of the same email template."
email_reply_templateLang,lang_id,varchar(10),YES,,,,,,10.0,,,"The lang_id column in the email_reply_templateLang table stores language identifiers (like 'en', 'es', 'fr') as variable-length strings up to 10 characters, representing the language of each email reply template. This column can be used in WHERE clauses to filter templates by specific languages or in JOIN operations to connect with other language-related tables, and its nullable property allows for templates without a specified language."
email_reply_templateLang,l_name,varchar(100),YES,,,,,,100.0,,,"The `l_name` column in the `email_reply_templateLang` table stores the localized name or title of an email reply template in different languages, with a maximum length of 100 characters. When querying this column, you can use it to filter or retrieve template names in specific languages, making it useful for displaying template options in the user's preferred language."
email_reply_templateLang,l_heading,text,YES,,,,,,65535.0,,,"The `l_heading` column in the `email_reply_templateLang` table stores the localized heading or subject line text for email reply templates in different languages. When writing queries, this column can be used to retrieve or filter template headings in specific languages, making it useful for displaying or selecting appropriate email template headers based on language preferences."
email_reply_templateLang,l_content,text,YES,,,,,,65535.0,,,"The l_content column in email_reply_templateLang stores the actual text content of email reply templates in different languages, with each row containing a localized version of a template. When querying this column, you can retrieve the template content for specific languages or templates, and since it's nullable, some template translations might not be available for all languages."
email_reply_templateLang,l_subject,text,YES,,,,,,65535.0,,,"The l_subject column in email_reply_templateLang stores the localized subject line text for email reply templates in different languages. When writing queries, this column can be used to retrieve or filter template subjects in specific languages, typically in conjunction with a language identifier column to manage multilingual email communications."
email_schedule,email_schedule_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The email_schedule_id is the primary key column in the email_schedule table, uniquely identifying each scheduled email communication record. When writing SQL queries involving scheduled emails, use this column to join with related tables or to specifically target individual email schedule entries, such as ""WHERE email_schedule_id = X"" for filtering or ""JOIN"" operations."
email_schedule,email_template_id,int,NO,MUL,,,email_template,email_template_id,,10.0,0.0,"The email_template_id column in the email_schedule table is a required foreign key that references the email template to be sent according to this schedule entry. When writing queries, use this column to join with the email_template table to access the actual content and settings of the email, or to filter schedules based on specific template IDs."
email_schedule,email_recipients_id,int,NO,MUL,,,email_recipients,email_recipients_id,,10.0,0.0,"The email_recipients_id column in the email_schedule table is a required foreign key that links each scheduled email to its intended recipients defined in the email_recipients table. This column enables the system to determine who should receive each scheduled email communication, making it a crucial field for filtering and joining queries when managing email distribution lists."
email_schedule,send_date,date,NO,MUL,,,,,,,,"The send_date column in the email_schedule table specifies the calendar date when an automated email should be sent to recipients, stored in a standard date format (YYYY-MM-DD). This column is indexed (MUL) to optimize queries that filter or sort by send date, and its NOT NULL constraint ensures that every scheduled email must have a defined send date, making it essential for queries that need to retrieve or manage email delivery timing."
email_schedule,send_time,time,NO,,,,,,,,,"The send_time column in the email_schedule table specifies the exact time of day (in HH:MM:SS format) when an automated email should be sent, working in conjunction with other scheduling fields to determine the precise timing of email delivery. When writing SQL queries, this column can be used for filtering or ordering email schedules based on specific times of day, and it's a required field (NOT NULL) that must be provided when creating or updating email schedule records."
email_schedule,status,int,NO,,,0,,,,10.0,0.0,"The 'status' column in the email_schedule table is a required integer field that tracks the current state of each scheduled email communication. When writing SQL queries, this column can be used to filter or group email schedules based on their processing status (e.g., pending, sent, failed), with different integer values representing different states in the email scheduling workflow."
email_schedule,details,text,YES,,,,,,65535.0,,,"The 'details' column in the email_schedule table stores additional information or specific instructions about the scheduled email communication in text format. This optional field can be used to include custom parameters, special handling instructions, or any relevant notes that provide context about the email scheduling, making it useful for filtering or auditing purposes in SQL queries where you need to search for or analyze specific types of scheduled emails."
email_schedule,created_at,datetime,NO,,,,,,,,,"The created_at column in the email_schedule table records the exact date and time when each email schedule entry was initially created in the system. This non-nullable datetime field is essential for auditing and tracking when email scheduling configurations were set up, and can be useful in SQL queries for filtering or sorting email schedules based on their creation timestamp."
email_schedule,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the email_schedule table stores the timestamp of when an email schedule record was last modified, automatically tracking changes to scheduling configurations. This datetime field is mandatory (non-nullable) and helps maintain an audit trail of schedule modifications, which can be useful for troubleshooting or monitoring changes to automated email delivery settings."
email_schedule,created_by,int,NO,,,0,,,,10.0,0.0,"The created_by column in the email_schedule table is a required integer field that stores the user ID of the person who created the email schedule entry. This column helps track and audit who set up specific automated email communications, enabling accountability and tracking of schedule creation across the system."
email_schedule,total_sent,int,YES,,,0,,,,10.0,0.0,"The `total_sent` column in the email_schedule table tracks the cumulative number of emails that have been successfully sent for a particular scheduled email campaign. This integer field serves as a counter to monitor email delivery performance and can be used in queries to analyze email campaign reach or to verify delivery completion, with NULL values indicating that no emails have been sent yet or the count is unknown."
email_schedule,email_sender_id,int,NO,,,1,,,,10.0,0.0,"The email_sender_id column in the email_schedule table is a required integer field that identifies the sender account or system responsible for sending the automated email. This column helps track and manage which sender account should be used when delivering scheduled emails, ensuring proper attribution and delivery configuration for each scheduled email communication."
email_schedule,display_unsubscribe_link,tinyint,NO,,,1,,,,3.0,0.0,"The display_unsubscribe_link column is a required boolean flag (tinyint) that determines whether an unsubscribe link should be included in the scheduled email communication. When querying this column, use 1 to filter for emails that should include an unsubscribe link and 0 for emails where the unsubscribe link should be omitted."
email_schedule,forward_bounce_to_cs,int,NO,,,0,,,,10.0,0.0,"The forward_bounce_to_cs column is a boolean flag (stored as an integer) that determines whether bounced emails should be forwarded to customer service for follow-up. When querying this column, use 1 to find email schedules where bounces should be forwarded to CS, and 0 for schedules where bounces should not be forwarded (e.g., SELECT * FROM email_schedule WHERE forward_bounce_to_cs = 1)."
email_schedule,email_campaign_id,int,NO,,,,,,,10.0,0.0,"The email_campaign_id column in the email_schedule table is a required integer field that identifies the specific email campaign associated with each scheduled email communication. This column helps organize and group related scheduled emails together, allowing for tracking and management of email campaigns within the automated communication system."
email_schedule,total_sms_sent,int,NO,,,,,,,10.0,0.0,"The total_sms_sent column in the email_schedule table tracks the cumulative count of SMS messages that have been successfully sent for a particular scheduled email communication. This integer field, which cannot be null, is useful for monitoring and reporting purposes, allowing queries to analyze SMS delivery metrics and track the total volume of SMS communications associated with each scheduled email campaign."
email_schedule,email_recipients_query,longtext,YES,,,,,,4294967295.0,,,"The email_recipients_query column stores SQL query strings (in longtext format) that define the criteria for selecting email recipients for scheduled communications. This column is used to dynamically determine the target audience for each scheduled email by executing the stored query at runtime, allowing for flexible and criteria-based recipient selection rather than static recipient lists."
email_schedule,schedule_type,tinyint,YES,,,0,,,,3.0,0.0,"The schedule_type column in the email_schedule table is a tinyint field that categorizes the type or nature of the email scheduling pattern (e.g., one-time, recurring, or event-triggered). When writing SQL queries, this column can be used to filter or group email schedules based on their scheduling behavior, with NULL values being permitted if the schedule type is not yet determined or applicable."
email_schedule,beanstalk_job_priority,int,NO,,,2048,,,,10.0,0.0,"The beanstalk_job_priority column in the email_schedule table is a required integer field that determines the processing priority of email jobs in the Beanstalk queue system, with a default value of 2048. When writing SQL queries, use this column to filter, sort, or analyze email jobs based on their priority level, where higher values typically indicate lower priority in Beanstalk's priority system."
email_sender,email_sender_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The email_sender_id column serves as the primary key in the email_sender table, uniquely identifying each email sending configuration record. When writing SQL queries, use this column for joining with related tables or filtering specific email sender configurations, as it provides a reliable reference point for each sender profile in the system."
email_sender,email,varchar(255),NO,,,,,,255.0,,,"The 'email' column in the email_sender table stores the email address used as the sender/from address for outbound communications, formatted as a standard email address (e.g., ""noreply@company.com""). When writing SQL queries, this required field can be used to filter or identify specific sender configurations, and it should always contain a valid email address string up to 255 characters in length."
email_sender,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the email_sender table stores the display name or identifier for email sending configurations, with a maximum length of 255 characters and cannot be null. This column is likely used to identify different email sender profiles or configurations when constructing SQL queries for email-related operations, such as ""SELECT * FROM email_sender WHERE name = 'CustomerSupport'""."
email_sender,status,tinyint,NO,,,1,,,,3.0,0.0,"The 'status' column in the email_sender table is a required (non-nullable) tinyint field that indicates the current operational state of an email sender configuration. When writing queries, this column can be used to filter active or inactive email sender configurations, where common values might be 1 for active and 0 for inactive states."
email_senderLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the email_senderLang table, uniquely identifying each language preference record for email senders. When writing SQL queries, use this column for joining with other tables or when you need to reference a specific language preference entry, ensuring that each value is a non-null integer."
email_senderLang,email_sender_id,int,YES,,,,,,,10.0,0.0,"The email_sender_id column in the email_senderLang table serves as a reference to identify specific email senders and their associated language preferences. When writing SQL queries, this nullable integer column can be used to filter or join with other tables to retrieve language settings for particular senders, making it useful for queries that need to determine a sender's preferred communication language."
email_senderLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the email_senderLang table stores language identifiers (up to 10 characters) that represent the preferred or configured language for email senders. When writing queries, this non-nullable column can be used to filter or group email senders by their language preference, typically using standard language codes (e.g., 'en', 'es', 'fr')."
email_senderLang,l_email,varchar(255),NO,,,,,,255.0,,,"The l_email column in the email_senderLang table stores email addresses as text strings (up to 255 characters) and is required for every record as indicated by its non-nullable status. When writing SQL queries, this column can be used to identify or filter specific email senders and their associated language preferences, making it useful for joins with other email-related tables or for querying language settings for particular email addresses."
email_senderLang,l_name,varchar(255),NO,,,,,,255.0,,,The l_name column in the email_senderLang table stores the name or identifier of a language (as a text string up to 255 characters) that an email sender uses or prefers. This required field (non-nullable) is used to specify the language preference for email composition and can be referenced in queries when filtering or grouping email senders by their language settings.
email_stats,email_stats_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The email_stats_id column serves as the primary key for the email_stats table, uniquely identifying each record of email performance metrics. When querying this table, use this column for precise record identification, joining with related tables, or filtering specific email statistics entries."
email_stats,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in the email_stats table is a required integer field that identifies the specific user associated with each email metric record. This column can be used to join with other user-related tables and to filter or group email performance statistics by individual users.
email_stats,email_schedule_id,int,NO,MUL,,,,,,10.0,0.0,"The email_schedule_id column in the email_stats table is a non-nullable integer field that serves as a foreign key reference, likely linking to a schedule or campaign configuration table. This column can be used to join or filter email performance metrics based on specific scheduled email campaigns, making it essential for analyzing metrics across different email scheduling configurations."
email_stats,type,tinyint,NO,MUL,,,,,,3.0,0.0,"The 'type' column in the email_stats table is a required (non-nullable) tinyint field that categorizes different types of email-related events or metrics, likely using a predefined set of numeric codes. As indicated by the MUL key type, this column is part of a multi-column index, suggesting it's frequently used in combination with other columns for filtering and grouping email statistics."
email_stats,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the email_stats table stores the timestamp when each email metric record was created, automatically populated with CURRENT_TIMESTAMP when a row is inserted. This timestamp field is mandatory (non-nullable) and can be used for temporal analysis of email performance metrics, such as filtering records by date ranges or analyzing trends over time."
email_stats,ip_address,varchar(100),NO,,,,,,100.0,,,"The ip_address column in the email_stats table stores the IP address from which emails were sent or processed, using a varchar(100) format that accommodates both IPv4 and IPv6 address formats. This required field can be used in SQL queries to analyze email performance metrics by sending IP, which is particularly useful for tracking deliverability issues or identifying patterns in email campaign performance across different sending infrastructure."
email_stats,user_comms_id,int,YES,,,,,,,10.0,0.0,"The user_comms_id column in the email_stats table is an integer field that likely serves as a reference to identify specific user communication instances or email campaigns. When querying email performance metrics, this column can be used to filter or group results for particular communication events, though its nullable nature suggests that not all email statistics records may be associated with a specific user communication ID."
email_template,email_template_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The email_template_id is the primary key identifier for each unique email template record in the email_template table, serving as a non-nullable integer that uniquely identifies each template configuration. This column is commonly used in JOIN operations to link email templates with related tables such as email logs, scheduled emails, and campaigns, and should be referenced when querying for specific template details or establishing relationships between email-related entities."
email_template,name,varchar(100),NO,,,,,,100.0,,,"The 'name' column in the email_template table stores the unique identifier or title of each email template as a string (up to 100 characters) and is required for every template record. When querying email templates, this column can be used to search for or filter specific templates by their names, making it useful for operations like SELECT queries with WHERE clauses or JOIN conditions to find related template data."
email_template,subject,varchar(255),NO,,,,,,255.0,,,"The 'subject' column in the email_template table stores the email subject line text for each email template, with a maximum length of 255 characters and cannot be null. When writing SQL queries, this column can be used to search for specific templates by their subject line or to retrieve the subject text that should be used when generating emails from these templates."
email_template,heading,text,NO,,,,,,65535.0,,,"The 'heading' column in the email_template table stores the main subject line or title text that appears at the top of an email template. When writing SQL queries, this required (non-nullable) text field can be used to search for specific templates by their heading or to display the primary title that recipients will see when receiving emails based on these templates."
email_template,content,text,NO,,,,,,65535.0,,,"The 'content' column in the email_template table stores the main body text of email templates, containing the actual message content that will be sent to recipients. This required (non-nullable) text field can include HTML markup, placeholders for dynamic content, and formatting instructions that define how the email will appear when rendered. When writing queries, you can use this column to search for specific template content or update template messages, keeping in mind that the content may contain special characters and HTML tags."
email_template,variables,varchar(255),YES,,,,,,255.0,,,"The 'variables' column in the email_template table stores a list of placeholder variables that can be dynamically replaced with actual values when the email template is used. These variables (stored as a varchar string up to 255 characters) typically follow a specific format like ${variable_name} or similar notation, and can be null if the template doesn't require any dynamic content replacement."
email_template,status,int,NO,,,1,,,,10.0,0.0,"The 'status' column in the email_template table is a required integer field that indicates the current state of an email template (e.g., active, inactive, draft). When writing SQL queries, this column can be used to filter templates based on their operational status, such as `WHERE status = 1` to retrieve only active templates."
email_template,sms_content,varchar(255),YES,,,,,,255.0,,,"The sms_content column in the email_template table stores alternative SMS message content that can be used when a template needs to be delivered via text message instead of email, with a maximum length of 255 characters. While this column is optional (nullable), it allows the system to maintain both email and SMS versions of communication templates in a single record, enabling multi-channel messaging capabilities."
email_template,email_campaigns_id,int,YES,MUL,,,email_campaigns,email_campaign_id,,10.0,0.0,"The email_campaigns_id column in the email_template table is a foreign key that links email templates to specific email campaigns, allowing templates to be associated with larger marketing or communication initiatives. This optional (nullable) integer field enables queries to filter or join templates based on their campaign association, making it useful for retrieving all templates within a particular campaign or analyzing template usage across different campaigns."
email_template,created_date,date,YES,,,,,,,,,"The created_date column in the email_template table records the date when each email template was initially created in the system. When querying email templates, this column can be used to filter or sort templates by their creation date, making it useful for tracking template age, auditing template history, or finding templates created within specific date ranges."
email_template,created_time,time,YES,,,,,,,,,"The created_time column in the email_template table stores the time of day when each email template was initially created, using the TIME data type format (HH:MM:SS). This column can be useful for filtering or sorting email templates based on their creation time within a day, though for full temporal tracking you'd typically want to use this in conjunction with a date column."
email_template,preview,varchar(255),YES,,,,,,255.0,,,"The 'preview' column in the email_template table stores a brief summary or short preview text of the email template's content, limited to 255 characters. This optional field (being nullable) can be used to quickly understand the template's purpose without reviewing the full content, making it useful in queries that need to display template listings or search through templates based on their preview text."
email_templateLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'l_id' column serves as the primary key in the email_templateLang table, uniquely identifying each localized email template record. This integer field is required (non-nullable) and should be referenced when joining with related tables or when specifically querying for individual language variants of email templates."
email_templateLang,email_template_id,int,YES,,,,,,,10.0,0.0,"The email_template_id column in the email_templateLang table serves as a reference to identify specific email templates that have been localized into different languages. When writing SQL queries, use this column to join with the main email templates table or to filter/group localized template versions, keeping in mind that the column can contain NULL values."
email_templateLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the `email_templateLang` table stores language identifiers (such as 'en', 'es', 'fr') as character strings up to 10 characters long, and is required (non-nullable) for each template translation. This column should be used in WHERE clauses or JOINs when filtering or retrieving email templates for specific languages, and it's essential for maintaining the multilingual capabilities of the email template system."
email_templateLang,l_name,varchar(100),NO,,,,,,100.0,,,"The `l_name` column in the `email_templateLang` table stores the localized name or title of an email template, with a maximum length of 100 characters and cannot be null. When querying this column, it can be used to search for or filter email templates by their localized names in different languages, making it useful for retrieving language-specific template variations."
email_templateLang,l_subject,varchar(255),NO,,,,,,255.0,,,"The l_subject column in the email_templateLang table stores the localized subject line text for email templates, with a maximum length of 255 characters. This required field (non-nullable) should be referenced when you need to retrieve or set the subject line of an email template in a specific language, making it essential for constructing multilingual email communications."
email_templateLang,l_heading,text,NO,,,,,,65535.0,,,"The `l_heading` column in the `email_templateLang` table stores the localized heading or subject line text for email templates in different languages. When writing SQL queries, this column should be used to retrieve or filter email template headings in specific languages, and since it's marked as NOT NULL, you must always provide a value when inserting new records."
email_templateLang,l_content,text,NO,,,,,,65535.0,,,"The `l_content` column in the `email_templateLang` table stores the actual content of email templates in different languages as text data. When writing SQL queries, this column should be used to retrieve or update the localized template content, and since it's marked as NOT NULL, you must always provide a value when inserting new records."
email_templateLang,l_variables,varchar(255),NO,,,,,,255.0,,,"The l_variables column in the email_templateLang table stores a list of variable placeholders that can be used within the email template content, with a maximum length of 255 characters. These variables (e.g., {CUSTOMER_NAME}, {ORDER_NUMBER}) are meant to be replaced with actual values when the email is generated, enabling personalized email content across different language versions."
email_templateLang,l_sms_content,varchar(255),YES,,,,,,255.0,,,"The `l_sms_content` column in the `email_templateLang` table stores the localized SMS message content for different language versions of communication templates, with a maximum length of 255 characters. When writing queries, this column can be used to retrieve or filter SMS message content in specific languages, and since it's nullable, you should handle potential NULL values appropriately in your conditions or joins."
email_templateLang,l_preview,varchar(255),YES,,,,,,255.0,,,"The `l_preview` column in the `email_templateLang` table stores a brief preview or summary text of the email template in the respective language, limited to 255 characters. This column can be used to quickly understand the content or purpose of an email template without viewing the full content, and since it's nullable, some templates may not have preview text defined."
email_template_associations,email_template_associations_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The email_template_associations_id column serves as the primary key for the email_template_associations table, uniquely identifying each template association record. This non-nullable integer field should be used in JOIN operations when linking template associations to other tables, and it's essential for maintaining referential integrity when managing relationships between email templates and their various use cases or triggers."
email_template_associations,location,varchar(255),YES,,,,,,255.0,,,"The 'location' column in the email_template_associations table stores a text-based identifier or path (up to 255 characters) that indicates where or in which context an email template should be used within the system. This optional field likely helps organize and categorize email templates by their intended placement or usage area, making it easier to retrieve the appropriate template for specific locations or sections of the application."
email_template_associations,function,varchar(255),YES,,,,,,255.0,,,"The 'function' column in the email_template_associations table stores the specific purpose or use case for which an email template is designated, using a text string up to 255 characters. This column helps identify when and where a particular email template should be used within the system, such as ""welcome_email"", ""password_reset"", or ""order_confirmation"", making it easier to programmatically select the appropriate template for different scenarios."
email_template_associations,email_template_id,int,YES,,,,,,,10.0,0.0,"The email_template_id column in the email_template_associations table serves as a reference to identify specific email templates that are being linked to other entities. When writing SQL queries, you can use this column to join with the primary email templates table or to filter associations based on specific template IDs, noting that NULL values are permitted which might indicate unassigned or pending template associations."
email_template_associations,email_recipients_id,int,YES,,,,,,,10.0,0.0,"The email_recipients_id column in the email_template_associations table is an integer field that references a group or list of email recipients associated with a particular email template. This optional field (as indicated by being nullable) helps determine who should receive emails based on specific template configurations, allowing for flexible recipient management in the email templating system."
email_template_auth,email_template_id,int,NO,PRI,,0,email_template,email_template_id,,10.0,0.0,"The email_template_id column serves as a primary key in the email_template_auth table and creates a direct link to the corresponding template in the email_template table. When writing SQL queries, use this column to join with the email_template table or to filter specific authorization rules for a particular email template."
email_template_auth,auth_assignment_type,varchar(255),NO,PRI,,,,,255.0,,,"The auth_assignment_type column in the email_template_auth table specifies the type of authorization assignment (such as 'USER', 'ROLE', or 'GROUP') that defines how access permissions are granted for email templates. When writing SQL queries, this column should be used in WHERE clauses or JOINs to filter or match specific authorization types, and it works in conjunction with email_template_id to create a complete authorization rule."
employee_daily_stats,employee_daily_stats_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The employee_daily_stats_id is the primary key column that uniquely identifies each daily performance record in the employee_daily_stats table. When writing SQL queries, use this column for joining with related tables or filtering specific daily statistics records, and since it's non-nullable, you can rely on it always having a valid integer value."
employee_daily_stats,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the employee_daily_stats table is a required integer field that serves as a foreign key to identify the specific employee whose daily performance metrics are being recorded. When writing queries, this column can be used to join with the user/employee table to access employee details, and it's commonly used in WHERE clauses to filter statistics for specific employees or in GROUP BY operations to aggregate metrics by employee."
employee_daily_stats,root_scheduling_id,int,YES,MUL,,,root_scheduling,id,,10.0,0.0,"The root_scheduling_id column in the employee_daily_stats table serves as a foreign key that links daily employee performance metrics to their original scheduling assignment or shift. When writing queries, this column can be used to join with scheduling-related tables to analyze performance metrics in the context of specific work schedules or to group statistics by scheduling periods."
employee_daily_stats,date,date,YES,,,,,,,,,"The 'date' column in the employee_daily_stats table stores the specific calendar date when employee performance metrics and statistics were recorded. This column is commonly used in WHERE clauses for filtering performance data by specific dates or date ranges, and it's essential for grouping and analyzing employee productivity trends over time."
employee_daily_stats,time_worked,int,NO,,,,,,,10.0,0.0,"The time_worked column in the employee_daily_stats table stores the total amount of time (likely in minutes or seconds) that an employee has worked during a specific day. This required integer field is essential for calculating productivity metrics and tracking employee work duration, making it useful in queries that analyze work patterns or calculate efficiency rates."
employee_daily_stats,on_site_time,int,NO,,,,,,,10.0,0.0,"The on_site_time column in the employee_daily_stats table stores the total time (in minutes) that an employee spent at their work location during a given day. This required integer field is essential for tracking physical presence and calculating attendance metrics, making it useful in queries that analyze workplace attendance patterns or compare actual on-site hours against scheduled hours."
employee_daily_stats,manual_hours,float,YES,,,,,,,12.0,,"The manual_hours column in the employee_daily_stats table stores the number of hours that were manually entered or adjusted for an employee's daily activities, represented as a decimal number (float). This column allows for tracking of time that may not be automatically captured by systems, such as offline work or special projects, and can be null when no manual time entries are needed for a particular daily record."
employee_daily_stats,stat_pay_hours,float,YES,,,,,,,12.0,,"The stat_pay_hours column in the employee_daily_stats table stores the number of paid hours worked by an employee during a specific day, represented as a decimal (float) value. This column is used to track actual compensable work time and can be used in calculations for payroll, productivity metrics, and labor cost analysis, with NULL values permitted when hour data is not available or applicable."
employee_daily_stats,total_fluff,int,YES,,,,,,,10.0,0.0,"The total_fluff column in the employee_daily_stats table represents the aggregate count of non-essential or supplementary activities performed by an employee during a workday. When querying this column, it can be used to analyze patterns in auxiliary work activities or to identify time spent on non-core tasks, though its nullable nature means some daily records may not have this metric tracked."
employee_daily_stats,late,tinyint(1),YES,,,,,,,3.0,0.0,"The 'late' column in the employee_daily_stats table is a boolean flag (tinyint(1)) that indicates whether an employee was late on a given day, where 1 typically represents late arrival and 0 represents on-time arrival. This column can be used in SQL queries to filter or analyze employee punctuality patterns, and being nullable, it can also handle cases where lateness status wasn't recorded."
employee_daily_stats,first_action,datetime,YES,,,,,,,,,"The first_action column in employee_daily_stats records the timestamp of an employee's initial activity or action for a given day, helping track when employees begin their work. When querying this column, it's useful for analyzing employee start times, calculating work duration patterns, or identifying early/late starts, and since it's nullable, be sure to handle NULL values appropriately in your queries using COALESCE or IS NULL/IS NOT NULL checks."
employee_daily_stats,last_action,datetime,YES,,,,,,,,,"The last_action column in employee_daily_stats stores the timestamp of the most recent activity or action performed by an employee during their workday. This datetime field can be used in SQL queries to track employee engagement patterns, identify periods of inactivity, or analyze the timing of final daily activities, making it particularly useful for queries that need to filter or sort by the most recent employee actions."
employee_daily_stats,bonus_recieved,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The bonus_recieved column in the employee_daily_stats table stores the monetary value of any bonuses awarded to employees on a given day, with precision up to two decimal places (e.g., 150.75). When querying this column, you can use it to analyze bonus distributions, calculate total compensation, or filter for days when bonuses were awarded (non-NULL values) versus regular days (NULL values)."
employee_daily_stats,bonus_deducted,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The bonus_deducted column in the employee_daily_stats table stores decimal values representing any deductions made from an employee's bonus on a given day, with precision up to two decimal places. This column can be used in SQL queries to calculate net bonus amounts or analyze penalty patterns, and since it's nullable, the absence of a value indicates no bonus deductions were made for that day's performance."
employee_daily_stats,manual_bonus,int,YES,,,0,,,,10.0,0.0,"The manual_bonus column in the employee_daily_stats table stores integer values representing additional bonus points or metrics manually assigned to employees for their daily performance. This optional field (as indicated by being nullable) allows supervisors or managers to add discretionary bonus points to an employee's daily statistics, which can be used to account for exceptional performance or special circumstances not captured by automated metrics."
employee_daily_stats,root_pay,tinyint(1),YES,,,,,,,3.0,0.0,"The root_pay column in the employee_daily_stats table is a boolean flag (tinyint(1)) that indicates whether a particular daily statistic record represents a base or root payment entry for an employee. When writing SQL queries, this column can be used to filter or identify fundamental payment records (where root_pay = 1) versus supplementary or derived payment entries (where root_pay = 0 or NULL)."
employee_daily_stats,attended,tinyint,YES,,,,,,,3.0,0.0,"The 'attended' column in the employee_daily_stats table is a boolean-like indicator (stored as a tinyint) that tracks whether an employee was present for their scheduled work period on a given day. When querying this column, use 1 to filter for days when employees attended and 0 for absences, making it useful for attendance analysis and calculating attendance rates."
employee_daily_stats,error_refund,float,YES,,,,,,,12.0,,"The error_refund column in the employee_daily_stats table stores the monetary value of refunds issued due to employee errors during their daily work activities, represented as a floating-point number. This metric helps track the financial impact of mistakes and can be used in SQL queries to analyze error-related costs per employee or to calculate total refund amounts over specific time periods."
employee_daily_stats,paid_breaks,float,YES,,,,,,,12.0,,The `paid_breaks` column in the employee_daily_stats table stores the total duration (in hours) of paid break time taken by an employee during their work day. This floating-point value helps track compensated non-working periods and can be used in SQL queries to analyze break patterns or calculate actual working hours by subtracting it from total shift duration.
employee_daily_stats_types,employee_daily_stats_types_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The employee_daily_stats_types_id is the primary key column that uniquely identifies each task-to-statistics mapping record in the employee_daily_stats_types table. When writing SQL queries, use this column for joining with related tables or filtering specific task-statistics relationships, particularly when you need to connect employee performance data with specific task type configurations."
employee_daily_stats_types,employee_daily_stats_id,int,YES,MUL,,,employee_daily_stats,employee_daily_stats_id,,10.0,0.0,"The employee_daily_stats_id column in the employee_daily_stats_types table serves as a foreign key that references an employee's daily statistics record. When writing SQL queries, use this column to join with the main employee daily statistics table to retrieve or analyze task-specific performance data for individual employee records."
employee_daily_stats_types,task_type_defaults_id,int,YES,MUL,,,task_type_defaults,task_type_id,,10.0,0.0,"The task_type_defaults_id column in the employee_daily_stats_types table is a foreign key that references predefined task type configurations, linking them to employee daily statistics records. This column can be used in JOIN operations to retrieve task type configuration details or to filter employee statistics by specific task types, and its nullable property allows for cases where a task type association might not be required."
employee_daily_stats_types,total_fluff,int,YES,,,,,,,10.0,0.0,"The `total_fluff` column in the employee_daily_stats_types table stores the number of fluff-related tasks or activities completed by an employee in a given day, represented as an integer value. This column can be used in SQL queries to analyze or aggregate fluff task counts across different employees or time periods, and since it's nullable, the absence of a value indicates that no fluff tasks were recorded for that particular record."
employee_daily_stats_types,time_worked,int,NO,,,,,,,10.0,0.0,"The `time_worked` column in the employee_daily_stats_types table stores the number of minutes an employee spent on a specific task type during their workday. This required integer field is essential for calculating time allocation and productivity metrics, and can be used in SQL queries to aggregate total time spent on different task categories or analyze time distribution across various activities."
employee_daily_stats_types,action_count,int,YES,,,,,,,10.0,0.0,"The `action_count` column in the employee_daily_stats_types table stores the number of times an employee performed a specific type of task or activity during a daily period. This integer field can be used in SQL queries to aggregate task volumes, analyze employee productivity metrics, or filter records based on activity frequency thresholds."
employee_daily_stats_types,bonus_recieved,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The `bonus_recieved` column in the employee_daily_stats_types table stores the monetary bonus amount (with up to 2 decimal places) associated with specific task types performed by employees. This optional field can be used in SQL queries to calculate total bonuses earned, analyze bonus distribution across different task types, or filter records based on bonus thresholds."
employee_daily_stats_types,bonus_deducted,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The `bonus_deducted` column in the employee_daily_stats_types table stores the monetary amount deducted from an employee's bonus for a specific task type, with precision up to two decimal places. This column can be used in SQL queries to calculate net bonus amounts or analyze bonus deductions across different task categories, and since it's nullable, tasks that don't affect bonuses can have NULL values in this field."
employee_daily_stats_types,error_count,int,YES,,,0,,,,10.0,0.0,"The `error_count` column in the employee_daily_stats_types table stores the number of errors or mistakes associated with a specific task type performed by an employee during their daily activities. This integer field can be used in SQL queries to analyze error rates across different task types or to identify patterns in employee performance, with NULL values permitted when error counts are not applicable or not recorded."
employee_daily_stats_types,speed,float,YES,,,,,,,12.0,,"The 'speed' column in the employee_daily_stats_types table stores the rate or velocity at which specific task types are performed, represented as a floating-point number. This metric can be used in SQL queries to analyze employee performance rates for different task categories, with NULL values permitted when speed measurements are not applicable or available for certain task types."
employee_daily_stats_types,error_refund,float,YES,,,,,,,12.0,,"The error_refund column in the employee_daily_stats_types table stores the monetary value or percentage of refunds associated with errors made during specific task types. This floating-point value can be used in SQL queries to analyze error-related costs or calculate refund rates for different task categories, helping to track the financial impact of mistakes across various employee activities."
employee_daily_stats_types,expected_speed,float,NO,,,0,,,,12.0,,"The `expected_speed` column in the employee_daily_stats_types table stores the standard or target performance rate (as a floating-point number) for each type of task or activity. This numerical value represents the baseline speed at which an employee is expected to complete the specific task type, making it useful for performance comparisons and productivity analysis in SQL queries that evaluate employee efficiency against established benchmarks."
employee_handling_instructions_association,employee_handling_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The employee_handling_id column serves as the primary key for the employee_handling_instructions_association table, uniquely identifying each employee-instruction mapping record. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to ensure unique identification of specific employee-instruction associations."
employee_handling_instructions_association,employee_id,int,NO,MUL,,,,,,10.0,0.0,"The employee_id column in the employee_handling_instructions_association table serves as a foreign key that references the unique identifier of an employee from the main employees table. This column is used to link specific handling instructions to individual employees, and since it's non-nullable and has a multiple key index (MUL), it's commonly used in JOIN operations and WHERE clauses to retrieve or filter handling instructions for specific employees."
employee_handling_instructions_association,handling_instruction_id,int,NO,,,,,,,10.0,0.0,"The handling_instruction_id column in the employee_handling_instructions_association table is a required integer field that references specific handling instructions or protocols assigned to employees. When writing SQL queries, use this column to join with a handling instructions reference table or to filter/group employees based on their assigned protocols."
employee_handling_instructions_association,created_at,date,YES,,,,,,,,,The created_at column in the employee_handling_instructions_association table records the date when a specific handling instruction was assigned to an employee. This timestamp can be used in SQL queries to track when associations were established or to filter/analyze instruction assignments within specific date ranges.
employee_handling_instructions_association,task_id,int,YES,,,,,,,10.0,0.0,"The task_id column in the employee_handling_instructions_association table is an integer field that references specific handling instructions or protocols assigned to employees. This column can be used in JOIN operations to link to a tasks or instructions master table, allowing queries to retrieve the detailed handling instructions associated with each employee."
employee_notes,notes_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The notes_id column serves as the primary key for the employee_notes table, uniquely identifying each note or comment entry with an integer value. This column should be used in WHERE clauses when querying specific notes, and can be referenced in JOIN operations if linking to related tables."
employee_notes,employee_id,int,NO,,,,,,,10.0,0.0,"The employee_id column in the employee_notes table is a required integer field that identifies which employee each note or comment is associated with. While not currently enforced through a foreign key constraint, this column is designed to reference employee records and serves as a crucial linking field for tracking notes and comments about specific employees."
employee_notes,manager_id,int,NO,,,,,,,10.0,0.0,"The manager_id column in the employee_notes table is a required integer field that identifies which manager created or is associated with each employee note. When writing queries, this column can be used to filter or group notes by specific managers, making it useful for retrieving all notes created by a particular manager or analyzing note patterns across different managers."
employee_notes,date,datetime,NO,,,,,,,,,"The 'date' column in the employee_notes table records the timestamp when each note or comment about an employee was created, stored in datetime format. This non-nullable field is essential for chronological tracking of employee-related documentation and can be used in SQL queries for filtering notes by specific time periods or ordering entries chronologically."
employee_notes,notes,text,NO,,,,,,65535.0,,,"The 'notes' column in the employee_notes table is a required text field that stores detailed comments or observations about employees. This column accepts any length of text content and must always contain a value (NOT NULL), making it suitable for storing comprehensive employee-related notes such as performance feedback, HR observations, or general comments."
employee_training,training_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The training_id column serves as the primary key in the employee_training table, uniquely identifying each training activity record. This non-nullable integer field is essential for joining with other tables and can be used in WHERE clauses or JOINs to retrieve specific training records or link training activities to related data."
employee_training,employee_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The employee_id column in the employee_training table serves as a foreign key that identifies which employee is associated with each training record. When writing queries, use this column to join with the employees table or to filter/group training activities by specific employees, making it essential for tracking individual employee's training progress and participation."
employee_training,task_type_defaults_id,int,NO,MUL,,,task_type_defaults,task_type_id,,10.0,0.0,"The task_type_defaults_id column in the employee_training table is a required foreign key that references default settings and parameters for different types of training tasks. This column helps standardize training configurations by linking each employee's training record to a predefined set of default values, ensuring consistency in how training tasks are initially configured and measured."
employee_training,status,"enum('In progress','Failed','Succeeded','Voided')",NO,,,,,,11.0,,,"The 'status' column in the employee_training table is a required (non-nullable) enumerated field that indicates the current state of an employee's training activity, with possible values being 'In progress', 'Failed', 'Succeeded', or 'Voided'. When writing SQL queries, this column can be used to filter or group training records based on their completion status, such as finding all successful training sessions or identifying employees with failed or in-progress training activities."
employee_training,date,date,NO,,,,,,,,,"The 'date' column in the employee_training table records the specific calendar date when a training activity was conducted or completed by an employee. This non-nullable date field is essential for temporal tracking of training events and can be used in SQL queries for filtering training records by time periods, generating chronological reports, or analyzing training patterns over time."
employee_training,task_id,int,YES,MUL,,,task,task_id,,10.0,0.0,"The task_id column in the employee_training table is a foreign key that identifies the specific training task assigned to an employee. When writing SQL queries, use this column to join with the tasks table to access task details, or to filter and group training records by specific tasks, making it particularly useful for analyzing which employees are assigned to particular training activities."
employee_training,extra_time,int,YES,,,0,,,,10.0,0.0,"The `extra_time` column in the employee_training table stores additional time (likely in minutes or seconds) that an employee needed beyond the default allocated time to complete a training task. This optional integer field can be used in SQL queries to analyze training efficiency or identify tasks that consistently require more time than initially planned, with NULL values indicating no extra time was needed or recorded."
employee_warnings,warning_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The warning_id column serves as the primary key in the employee_warnings table, uniquely identifying each disciplinary action or warning record. This auto-incrementing integer field is required (non-nullable) and should be referenced when joining to related tables or filtering specific warning records."
employee_warnings,employee_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The employee_id column in the employee_warnings table is a required foreign key that identifies which employee received the warning or disciplinary action. When writing queries, join this column with the users table's primary key to access the recipient employee's details, and note that every warning record must have an associated employee (as indicated by the NOT NULL constraint)."
employee_warnings,manager_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The manager_id column in the employee_warnings table stores the unique identifier of the manager who issued the warning or disciplinary action, linking to the users table through a foreign key relationship. When writing queries, this column can be used to join with the users table to retrieve manager details or to filter/group warnings by specific managers, and since it's non-nullable, every warning record must have an associated manager."
employee_warnings,date,datetime,NO,,,,,,,,,The 'date' column in the employee_warnings table stores the timestamp when a disciplinary action or warning was issued to an employee. This non-nullable datetime field is essential for chronologically tracking when incidents occurred and can be used for filtering warnings by time period or ordering them chronologically in queries.
employee_warnings,comment,text,NO,,,,,,65535.0,,,"The 'comment' column in the employee_warnings table stores the detailed description or explanation of the disciplinary action or warning issued to an employee. This required (non-nullable) text field should contain specific information about the incident, behavior, or performance issue that led to the warning, making it essential for documenting the exact nature and context of each disciplinary action."
employee_warnings,deleted,tinyint,NO,,,0,,,,3.0,0.0,"The 'deleted' column in the employee_warnings table is a boolean flag (stored as tinyint) that indicates whether a warning record has been soft-deleted (1) or is still active (0), with no null values allowed. When querying for active warning records, include ""WHERE deleted = 0"" in your SQL statements to exclude soft-deleted entries."
euf_action_log,euf_action_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The euf_action_log_id column serves as the primary key for the euf_action_log table, uniquely identifying each logged action or event in the EUF system. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific audit entries, as it provides a guaranteed unique reference for each action log entry."
euf_action_log,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the euf_action_log table is a required integer field that identifies which user performed the logged action or activity. This column can be used to join with user-related tables or to filter/group audit logs by specific users, making it essential for tracking and analyzing user behavior within the EUF system."
euf_action_log,class,varchar(255),NO,,,,,,255.0,,,"The 'class' column in the euf_action_log table stores the fully qualified class name or module identifier where the logged action occurred within the EUF system. When querying this column, you can use it to filter or group actions based on specific system components or modules, making it useful for analyzing patterns in system usage or troubleshooting issues within particular areas of the application."
euf_action_log,function,varchar(255),NO,MUL,,,,,255.0,,,"The 'function' column in the euf_action_log table stores the specific function or operation name that was executed within the EUF system, with a maximum length of 255 characters. When querying this column, it can be used to filter or group audit log entries by their associated function names, and since it's indexed (MUL), it's optimized for searching and joining operations."
euf_action_log,success,tinyint,NO,,,1,,,,3.0,0.0,"The 'success' column in the euf_action_log table is a required boolean flag (stored as tinyint) that indicates whether the logged action was completed successfully (1) or failed (0). When querying action logs, this column can be used to filter for successful or failed operations, making it valuable for monitoring system health and troubleshooting issues."
euf_action_log,description,text,NO,,,,,,65535.0,,,"The 'description' column in the euf_action_log table stores detailed text descriptions of actions and events that occur within the EUF system. When querying this column, you can use text-based operations (like LIKE, ILIKE, or text pattern matching) to search for specific types of actions or to analyze the nature of system events, and since it's non-nullable, every action log entry will always contain a description."
euf_action_log,created_at,datetime,NO,MUL,,,,,,,,"The created_at column in the euf_action_log table stores the timestamp when each action or event was recorded in the system, using a datetime format. This column is commonly used for filtering, sorting, and analyzing the chronological sequence of system events, and since it's non-nullable and has a multiple-column index (MUL), it's optimized for temporal queries and should always contain a valid datetime value."
euf_exclude_transactions,exclude_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The exclude_id column serves as the primary key in the euf_exclude_transactions table, uniquely identifying each fee exclusion record with a non-nullable integer value. This column is essential for maintaining data integrity and can be used in JOIN operations or WHERE clauses when tracking specific exclusion entries in the EUF calculation system."
euf_exclude_transactions,transaction_id,int,NO,UNI,,,transactions,transaction_id,,10.0,0.0,"The transaction_id column in the euf_exclude_transactions table serves as a unique identifier that links to specific transactions that should be excluded from End User Fee calculations. When writing SQL queries involving fee calculations, you should use this column in JOIN or WHERE clauses to filter out transactions that are present in this exclusion list."
events,event_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The event_id column serves as the primary key in the events table, uniquely identifying each event record with a non-nullable integer value. When writing SQL queries, use this column for precise event lookups, joining with related tables (if any are added in the future), or when you need to ensure you're working with a specific, unique event record."
events,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the events table is a required integer field that identifies the user associated with each event record. Since it's marked as non-nullable, every event must have a user_id value, making it useful for filtering events by user or joining with user-related data in queries."
events,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the events table is a required integer field that categorizes different kinds of events using numeric codes. When querying this column, you can use numeric comparisons or equality checks to filter events by their type, such as ""WHERE type = 1"" to find events of a specific category."
events,description,varchar(500),YES,,,,,,500.0,,,"The 'description' column in the events table stores detailed text descriptions of events, allowing up to 500 characters to explain what the event entails. Since this field is nullable, it can be left empty when a description isn't available, making it suitable for optional event details in SQL queries using conditions like WHERE description IS NOT NULL or LIKE operations for text searching."
events,created,datetime,NO,,,,,,,,,"The 'created' column in the events table stores the timestamp indicating when each event record was initially created in the database, using a datetime format. This non-nullable field is useful for tracking the chronological order of event entries and can be used in SQL queries for filtering events by their creation date or sorting them based on when they were added to the system."
events,updated,datetime,NO,,,,,,,,,"The 'updated' column in the events table stores the timestamp of when an event record was last modified, using a datetime format that captures both the date and time of the update. This non-nullable field is commonly used for tracking changes and can be helpful in queries that need to find recently modified events or audit when changes were made to event records."
events,staff_id,int,NO,,,,,,,10.0,0.0,"The staff_id column in the events table is a required integer field that identifies the staff member associated with an event. When writing queries, this column can be used to filter or group events by staff member, though since there's no explicit foreign key relationship mentioned, you should verify the staff IDs exist in any related staff table before joining."
external_job_websites,external_job_website_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The external_job_website_id is the primary key column in the external_job_websites table, uniquely identifying each job posting website or job board in the system. This non-nullable integer column should be used in JOIN operations when connecting to related tables and in WHERE clauses when filtering for specific job websites."
external_job_websites,name,varchar(100),NO,,,,,,100.0,,,"The 'name' column in the external_job_websites table stores the official or common name of each job posting website or job board (e.g., ""LinkedIn,"" ""Indeed,"" ""Monster"") as a required text field with a maximum length of 100 characters. When writing SQL queries, this column can be used to identify specific job boards or filter/group job posting data by website name, making it useful for tracking where job listings are being distributed."
external_job_websites,link,varchar(255),YES,,,,,,255.0,,,"The 'link' column in the external_job_websites table stores the URL or web address (up to 255 characters) for each external job posting website or job board. This column can be used in SQL queries to retrieve or filter website URLs where job postings can be published, and since it's nullable, some records may not have a URL specified."
external_job_websites,is_active,tinyint,NO,,,1,,,,3.0,0.0,"The `is_active` column in the external_job_websites table is a required boolean flag (stored as tinyint) that indicates whether a job posting website is currently available for use in the recruitment system. When writing queries, use this column to filter for active job posting websites (is_active = 1) to ensure only currently supported external job boards are included in recruitment operations."
external_job_websites,created_at,datetime,NO,,,,,,,,,"The created_at column in the external_job_websites table records the exact date and time when each job website/board entry was first added to the system. This non-nullable datetime field is useful for tracking when integrations with external job boards were established and can be used in SQL queries for auditing, filtering records by creation date, or analyzing the chronological growth of job board partnerships."
external_job_websites,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the external_job_websites table records the timestamp of when each job website record was last modified, automatically tracking changes to website configurations or credentials. This non-nullable datetime field is essential for auditing purposes and ensuring data freshness when synchronizing job postings with external platforms."
external_job_websites,created_by,int,NO,,,,,,,10.0,0.0,"The `created_by` column in the `external_job_websites` table is a required integer field that stores the user ID of the person who initially added the external job website to the system. When writing SQL queries, this column can be used to track ownership and audit who created specific job board integrations, often by joining with a users or employees table to get the creator's full details."
external_job_websites,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `external_job_websites` table stores the user ID (as an integer) of the person who last modified the job website record. This optional field helps track changes and maintain accountability for updates to external job board configurations, and can be used in queries to filter or join with a users table to see who made specific changes to job website settings."
face_encodings,face_encoding_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The face_encoding_id column serves as the primary key in the face_encodings table, uniquely identifying each facial biometric data record. When writing queries, use this column for precise record selection, joining with other tables, or when you need to reference a specific facial encoding entry."
face_encodings,user_id,int,NO,UNI,,,users,user_id,,10.0,0.0,"The user_id column in the face_encodings table is a non-nullable integer that uniquely identifies which user the facial biometric data belongs to, serving as a foreign key reference to the users table. When querying facial biometric data, this column can be used to join with the users table or filter for specific users' face encodings."
face_encodings,encoding,text,NO,,,,,,65535.0,,,"The `encoding` column in the face_encodings table stores text representations of facial biometric data vectors, which are essential for facial recognition and authentication. When querying this column, you'll typically use it in SELECT statements when retrieving biometric data for comparison, but avoid using it in WHERE clauses except for exact matches since it contains complex encoding strings."
face_encodings,updated_at,datetime,NO,,,,,,,,,The updated_at column in the face_encodings table records the timestamp of when a facial biometric encoding was last modified or updated. This datetime field is mandatory (non-nullable) and can be used in queries to track the recency of biometric data or filter records based on when they were last changed.
family_featured_texts,family_featured_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The family_featured_id column serves as the primary key in the family_featured_texts table, uniquely identifying each piece of featured text content associated with marketplace families. This non-nullable integer field is essential for establishing relationships with other tables and can be used in JOIN operations or WHERE clauses when querying for specific featured text entries."
family_featured_texts,marketplace_family_id,int,NO,MUL,,,marketplace_families,marketplace_family_id,,10.0,0.0,"The marketplace_family_id column in family_featured_texts serves as a foreign key that links each featured text entry to its corresponding marketplace family. When writing SQL queries, use this column to join with the marketplace_families table or to filter featured text content for specific marketplace families."
family_featured_texts,start_date,date,NO,,,,,,,,,"The start_date column in family_featured_texts specifies the date when a particular featured text content becomes active or visible for a marketplace family. When writing SQL queries, use this non-nullable date column to filter or retrieve featured text content that should be displayed based on specific time periods or to ensure content is only shown after its designated start date."
family_featured_texts,end_date,date,NO,,,,,,,,,"The end_date column in family_featured_texts specifies when a particular featured text content should stop being displayed or become inactive for a marketplace family. When writing SQL queries, use this date column to filter active featured text content by comparing it against the current date (e.g., WHERE end_date >= CURRENT_DATE) to ensure only currently valid promotional content is retrieved."
family_featured_texts,image_url,varchar(255),YES,,,,,,255.0,,,"The image_url column in family_featured_texts stores optional URL references to images that accompany the featured text content for marketplace families, with a maximum length of 255 characters. When writing queries, this column can be used to retrieve or filter associated image assets for featured content, though it may contain NULL values since images are not required for all featured text entries."
family_featured_texts,special_feature_text,text,YES,,,,,,65535.0,,,"The special_feature_text column in family_featured_texts stores promotional or highlighted text content for marketplace families, allowing for detailed descriptions or special features to be showcased. This text field can be used in SQL queries to retrieve or filter specific promotional content, and its nullable property means it's optional, making it suitable for cases where featured text content hasn't been defined yet."
family_featured_texts,special_feature_title,varchar(255),YES,,,,,,255.0,,,"The special_feature_title column in family_featured_texts stores optional titles for special features or promotional content associated with marketplace families, with a maximum length of 255 characters. When writing queries, this column can be used to filter or display feature titles, but since it's nullable, always consider using appropriate NULL handling (e.g., COALESCE or IS NULL checks) when referencing this column."
family_featured_texts,featured_product_1,int,YES,,,,,,,10.0,0.0,The featured_product_1 column in the family_featured_texts table stores an integer identifier that references a primary product to be featured alongside the promotional text content for a marketplace family. This optional field (as indicated by being nullable) can be used in SQL queries to join with product-related tables or to filter/select marketplace families that have specific featured products associated with their promotional content.
family_featured_texts,featured_product_2,int,YES,,,,,,,10.0,0.0,"The featured_product_2 column in the family_featured_texts table is an optional integer field that likely stores a reference to a second featured product associated with a marketplace family's promotional content. When writing queries, this column can be used to filter or join with product-related tables to retrieve secondary featured product information, though its nullable nature means you should handle NULL values appropriately in your queries."
family_featured_texts,featured_product_3,int,YES,,,,,,,10.0,0.0,"The featured_product_3 column in the family_featured_texts table is an optional integer field that likely stores a reference to a third featured product associated with a marketplace family's promotional content. When writing queries, this column can be used to retrieve or filter marketplace families based on their third featured product selection, though the nullable nature means you should handle NULL values appropriately in your conditions."
family_featured_texts,featured_product_4,int,YES,,,,,,,10.0,0.0,"The featured_product_4 column in the family_featured_texts table is an optional integer field that likely stores a reference to a fourth featured product associated with a marketplace family's promotional content. When writing queries, this column can be used to retrieve or filter specific product highlights within a family's featured content, though its nullable nature means you should handle NULL values appropriately in your conditions."
family_featured_texts,theme_color,varchar(20),YES,,,,,,20.0,,,"The theme_color column in family_featured_texts stores color values (as text strings up to 20 characters) that define the visual styling for featured text content associated with marketplace families. This optional field can be used in SQL queries to filter or group featured content by their designated color themes, helping to maintain consistent visual presentation across related marketplace content."
family_featured_texts,title,varchar(255),YES,,,,,,255.0,,,"The 'title' column in the family_featured_texts table stores the heading or title text for featured content associated with marketplace families, with a maximum length of 255 characters. This optional field (as indicated by being nullable) can be used in SQL queries to filter, sort, or display promotional content titles, and is commonly joined with marketplace_families to retrieve titled featured content for specific marketplace families."
family_featured_texts,featured_card_title,varchar(255),YES,,,,,,255.0,,,"The featured_card_title column stores the main title or heading text (up to 255 characters) that appears on promotional cards or featured content sections for marketplace families. When writing queries, this column can be used to filter or display title content for featured marketplace family cards, and since it's nullable, you should handle potential NULL values appropriately in your queries."
family_featured_texts_lang,family_featured_id_lang,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The family_featured_id_lang column serves as the primary key in the family_featured_texts_lang table, uniquely identifying each language-specific translation record for featured family content. When writing SQL queries, use this column to join with related tables or to specifically identify individual translation entries, ensuring that each translation record can be uniquely referenced and retrieved."
family_featured_texts_lang,family_featured_id,int,NO,MUL,,,family_featured_texts,family_featured_id,,10.0,0.0,"The family_featured_id column serves as a foreign key in the family_featured_texts_lang table, linking to the primary key in the family_featured_texts table. This integer column is required (non-nullable) and is used to associate language-specific translations with their corresponding featured text entries, enabling multilingual content management for family-related featured content."
family_featured_texts_lang,lang_id,varchar(10),NO,,,en,,,10.0,,,"The lang_id column in the family_featured_texts_lang table stores the language identifier (e.g., 'en' for English) for each translated version of featured family content, using a varchar(10) format. This required field is essential for filtering and retrieving language-specific content, allowing queries to fetch translations for specific languages when displaying featured family information in different locales."
family_featured_texts_lang,l_special_feature_text,text,YES,,,,,,65535.0,,,"The l_special_feature_text column stores localized versions of special feature text content for family featured items, allowing for translations in different languages. This text field can be used in SQL queries when you need to retrieve or filter language-specific special feature descriptions, and should be joined with family_featured_texts table using the family_featured_id field when combining with core featured text data."
family_featured_texts_lang,l_special_feature_title,varchar(255),YES,,,,,,255.0,,,"The l_special_feature_title column stores localized titles for special features related to family content, with a maximum length of 255 characters. When writing queries, this column can be used to retrieve or filter language-specific feature titles, and its nullable property means it's optional and can contain NULL values when a translation isn't available."
family_featured_texts_lang,l_title,varchar(255),YES,,,,,,255.0,,,"The l_title column in family_featured_texts_lang stores the translated titles of featured family content in different languages, with a maximum length of 255 characters. When writing queries, this column should be used to retrieve or filter language-specific titles that correspond to the main featured text entries, typically joined with family_featured_texts through the family_featured_id relationship."
family_featured_texts_lang,l_featured_card_title,varchar(255),YES,,,,,,255.0,,,"The l_featured_card_title column stores the localized (translated) title text for a featured family card in a specific language, with a maximum length of 255 characters. This column is used when querying for language-specific versions of featured family content titles, and can be NULL if a translation is not available for a particular language."
faq,faq_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The faq_id column serves as the primary key identifier for each FAQ entry in the faq table, using auto-incrementing integers to ensure each question-answer pair has a unique reference. When querying the faq table, this column can be used to directly access specific FAQ entries or join with related tables that reference these FAQs."
faq,faq_category_id,int,NO,,,,,,,10.0,0.0,"The faq_category_id column in the faq table is a required integer field that categorizes each FAQ entry into specific topic groups or categories. This column helps organize and filter FAQ entries by their subject matter, enabling queries to retrieve related questions and answers within the same category."
faq,question,varchar(255),NO,,,,,,255.0,,,"The 'question' column in the faq table stores the actual text of frequently asked questions, with a maximum length of 255 characters and cannot be null. When querying this column, you can use string operations (like LIKE, CONTAINS) to search for specific questions or keywords within questions, making it useful for implementing search functionality or retrieving specific FAQ entries."
faq,answer,text,NO,,,,,,65535.0,,,"The `answer` column in the `faq` table stores the complete response text for each frequently asked question, containing detailed explanations or solutions. This required (non-nullable) text field should be referenced when querying for FAQ responses, and can be used in SELECT statements or WHERE clauses when searching for specific answer content."
faq,created,datetime,NO,,,,,,,,,"The 'created' column in the FAQ table stores the timestamp indicating when each FAQ entry was initially added to the system, using a datetime format. This non-nullable field is useful for tracking the chronological order of FAQ entries and can be used in queries to filter or sort FAQ items by their creation date."
faq,updated,datetime,NO,,,,,,,,,"The ""updated"" column in the FAQ table records the timestamp of when each FAQ entry was last modified, storing it as a datetime value that cannot be null. This column is useful for tracking content freshness and can be used in SQL queries to filter or sort FAQ entries based on their last update time, such as finding recently updated questions or identifying outdated content that might need review."
faq,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the faq table is a required integer field that identifies which user created or owns each FAQ entry. When querying the faq table, this column can be used to filter or join with user-related tables to find FAQs associated with specific users or to track authorship of FAQ content."
faq,visible,int,NO,,,0,,,,10.0,0.0,"The 'visible' column in the faq table is a binary integer flag (0 or 1) that determines whether a FAQ entry should be displayed to users. When writing queries, use this column to filter FAQ entries that are currently active and should be shown (visible = 1) versus those that are hidden or inactive (visible = 0)."
faqLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the `faqLang` table, uniquely identifying each FAQ entry across different languages. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific FAQ entries (e.g., `WHERE l_id = value`)."
faqLang,faq_id,int,YES,,,,,,,10.0,0.0,"The faq_id column in the faqLang table serves as a reference identifier for FAQ entries, allowing you to link different language versions of the same FAQ content. When writing queries, you can use this column to join or filter FAQ content, particularly when you need to retrieve or manage translations of specific FAQ items."
faqLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the faqLang table stores language identifiers (like 'en', 'es', 'fr') as text strings up to 10 characters long, and is required (non-nullable) for each FAQ entry. When querying multilingual FAQ content, use this column to filter or join based on specific language requirements, such as ""WHERE lang_id = 'en'"" for English content."
faqLang,l_question,varchar(255),YES,,,,,,255.0,,,"The l_question column in the faqLang table stores the localized text of frequently asked questions, with a maximum length of 255 characters. When querying this column, you can use string operations and pattern matching (like LIKE or REGEXP) to search for specific questions across different languages, and since it's nullable, remember to handle NULL values appropriately in your queries."
faqLang,l_answer,text,YES,,,,,,65535.0,,,"The l_answer column in the faqLang table stores the full text of FAQ answers in different languages, supporting multilingual content management. When querying, this column can be used to retrieve or search through answer content, and since it's nullable, some FAQ entries might not have answers yet."
faq_category,faq_category_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The faq_category_id column serves as the primary key identifier for FAQ categories in the faq_category table, using auto-incrementing integer values to uniquely identify each category record. When writing SQL queries, use this column to join with related FAQ tables or to filter/select specific FAQ categories, as it provides the fundamental reference point for category-level operations."
faq_category,title,varchar(255),NO,,,,,,255.0,,,"The 'title' column in the faq_category table stores the display name or heading of each FAQ category (e.g., ""Account Settings"", ""Billing Questions"", ""Technical Support"") as a text string up to 255 characters. This required field is commonly used in WHERE clauses for finding specific categories or in SELECT statements when displaying category names to users."
faq_category,description,varchar(255),YES,,,,,,255.0,,,"The description column in the faq_category table stores a brief explanatory text (up to 255 characters) that provides more detail about what the FAQ category encompasses. This optional field can be used in SQL queries to search for or filter FAQ categories based on their descriptive content, such as ""WHERE description LIKE '%customer%'"" to find categories related to customer topics."
faq_category,created,datetime,NO,,,,,,,,,"The 'created' column in the faq_category table stores the timestamp indicating when each FAQ category was initially created in the system. This non-nullable datetime field can be used for auditing purposes, tracking the chronological order of category creation, and filtering FAQ categories by their creation date."
faq_category,updated,datetime,NO,,,,,,,,,"The ""updated"" column in the faq_category table records the timestamp of when a FAQ category was last modified, storing this information as a datetime value that cannot be null. This column is useful for tracking the recency of category changes and can be used in SQL queries to filter or sort FAQ categories based on their modification dates, such as finding recently updated categories or identifying categories that haven't been updated within a certain timeframe."
faq_category,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in the faq_category table is a required integer field that identifies which user created or owns the FAQ category. This column can be used to filter FAQ categories by specific users or join with a users table to get additional information about the category creator.
faq_category,slug,varchar(255),YES,,,,,,255.0,,,"The `slug` column in the `faq_category` table stores URL-friendly versions of category names, using lowercase letters, numbers, and hyphens (e.g., ""general-questions"" or ""technical-support""). This column is useful for generating clean URLs and creating user-friendly links to specific FAQ categories, and can be used in WHERE clauses or JOINs when building category-specific FAQ pages or navigation structures."
faq_categoryLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'l_id' column in the faq_categoryLang table serves as the primary key identifier for each unique language-specific FAQ category translation entry. When writing SQL queries, use this column for precise record identification, joining with related tables, or when you need to reference specific translation entries (e.g., WHERE l_id = value)."
faq_categoryLang,faq_category_id,int,YES,,,,,,,10.0,0.0,"The faq_category_id column in the faq_categoryLang table serves as a reference to the main FAQ category being translated, linking each translation record to its corresponding base category. When writing queries, this column can be used to join with the primary FAQ categories table or to filter/group translations for specific categories, making it essential for retrieving localized category information."
faq_categoryLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the faq_categoryLang table stores language identifiers (such as 'en', 'es', 'fr') as text strings up to 10 characters long, indicating which language each FAQ category translation corresponds to. Since this is a required field (not nullable), every translation record must specify its language, making it essential for filtering and joining operations when retrieving language-specific FAQ category content."
faq_categoryLang,l_title,varchar(255),YES,,,,,,255.0,,,"The `l_title` column in the `faq_categoryLang` table stores the translated titles of FAQ categories in different languages, with a maximum length of 255 characters. When writing queries, this column can be used to retrieve or filter localized category titles, and since it's nullable, you should account for potential NULL values in your conditions or joins."
faq_categoryLang,l_description,varchar(255),YES,,,,,,255.0,,,"The l_description column in the faq_categoryLang table stores localized descriptions of FAQ categories in different languages, with a maximum length of 255 characters. When querying this column, you can use it to retrieve or filter FAQ category descriptions in specific languages, typically joining it with related tables that contain the base category information and language identifiers."
faq_categoryLang,l_slug,varchar(255),YES,,,,,,255.0,,,"The `l_slug` column in the `faq_categoryLang` table stores URL-friendly versions of localized FAQ category names, using a varchar format that can contain up to 255 characters. This column can be used to create language-specific URLs or unique identifiers for FAQ categories in different languages, and since it's nullable, some language entries might not have a slug defined."
favorites,favorites_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The favorites_id column serves as the primary key for the favorites table, uniquely identifying each favorite/wishlist entry with an auto-incrementing integer. When writing SQL queries, this column is primarily used for joining or filtering specific favorite entries, though you'll more commonly use user_id or product_id for typical business queries."
favorites,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the favorites table is a required integer field that serves as a foreign key reference to the users table, identifying which user has favorited or wishlisted a product. This column is indexed (MUL) to optimize queries that filter or join on user_id, and its non-nullable nature ensures that every favorite entry must be associated with a valid user."
favorites,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the favorites table is a required foreign key that references the products table, establishing which specific product a user has favorited or added to their wishlist. When writing queries, this column can be used to join with the products table to access detailed product information, or to filter/group favorite entries by specific products."
forecasting_human_factor,pk_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The pk_id column serves as the primary key identifier for each unique record in the forecasting_human_factor table, using auto-incrementing integers. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific human factor entries (e.g., WHERE pk_id = 123)."
forecasting_human_factor,date,date,YES,,,,,,,,,"The 'date' column in the forecasting_human_factor table represents the specific calendar date when human factors or judgments were recorded or applied to forecasting models. This column can be used to filter, group, or join human factor data with other time-based forecasting data, allowing queries to analyze how human inputs correlate with predictions across different time periods."
forecasting_human_factor,factor,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The ""factor"" column in the forecasting_human_factor table stores decimal values (up to 7 digits total with 2 decimal places) that represent human-influenced adjustment multipliers or weights used in forecasting calculations. These values can be NULL and are typically used to quantify subjective human inputs or expert judgments that modify baseline forecasts, where values greater than 1.00 indicate an upward adjustment and values less than 1.00 indicate a downward adjustment."
form_timer_log,timer_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The timer_id column serves as the primary key in the form_timer_log table, uniquely identifying each form timing event or interaction record. This integer field is required (non-nullable) and should be referenced when joining with related tables or filtering specific form timing entries."
form_timer_log,form_id,int,YES,,,,,,,10.0,0.0,"The form_id column in the form_timer_log table is an integer field that identifies which specific form is being tracked for timing and event data. When writing queries, you can use this column to filter or group timing metrics for particular forms, or join with other form-related tables to get additional form details."
form_timer_log,user_type,tinyint,YES,,,,,,,3.0,0.0,"The user_type column in form_timer_log stores a small integer value that categorizes the type of user who interacted with the form, using a tinyint to efficiently represent different user classifications. When querying this column, you can use numeric comparisons to filter or group form interaction data based on user categories, though you should consult application documentation for the specific meaning of each user_type value since it's likely using an enumerated mapping (e.g., 1 = registered user, 2 = guest, etc.)."
form_timer_log,user_id,int,YES,,,,,,,10.0,0.0,"The user_id column in the form_timer_log table stores the unique identifier of the user who interacted with a form, allowing tracking of form interactions on a per-user basis. This optional integer field can be used to join with user tables or filter form timing data for specific users, making it useful for analyzing individual user behavior patterns with forms."
form_timer_log,has_started,tinyint,YES,,,,,,,3.0,0.0,"The has_started column is a boolean flag (stored as tinyint) that indicates whether a user has begun interacting with a form. This column can be used in queries to filter for form sessions that have been initiated (has_started = 1) versus those that haven't started yet (has_started = 0), helping track the beginning of form engagement."
form_timer_log,start_time,datetime,YES,,,,,,,,,"The start_time column in the form_timer_log table captures the timestamp when a user begins interacting with a form, marking the initial moment of form engagement. This datetime field is useful for calculating form completion duration when paired with end timestamps and can be used in queries to analyze patterns in when users typically begin filling out forms."
form_timer_log,end_time,datetime,YES,,,,,,,,,"The end_time column in form_timer_log records the timestamp when a user completes or exits a form interaction, stored as a datetime value. This column is commonly used in conjunction with start time data to calculate form completion duration and can be null if the form interaction wasn't completed, making it useful for analyzing form abandonment patterns."
form_timer_log,created_at,date,YES,,,,,,,,,"The created_at column in the form_timer_log table stores the date when a form interaction or event was recorded. This column can be used for filtering form events by date, analyzing form usage patterns over time, or grouping form interactions by specific dates to understand daily usage trends."
form_timer_log,updated_at,date,YES,,,,,,,,,"The updated_at column in the form_timer_log table stores the date when a form interaction record was last modified. This timestamp field is useful for tracking when form timing data was updated and can be used in SQL queries to filter or sort form interaction records by their modification date, though it can contain NULL values if no update timestamp was recorded."
fraud_scoring_log,fraud_scoring_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The fraud_scoring_id column serves as the primary key in the fraud_scoring_log table, uniquely identifying each fraud scoring event or assessment. When querying fraud scoring records, use this column to join with related tables or to filter for specific scoring events, as it provides a reliable, non-null identifier for each entry in the fraud detection history."
fraud_scoring_log,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the fraud_scoring_log table is a required integer field that references the user associated with each fraud scoring event. This column is indexed (MUL) to optimize queries that filter or join based on user identity, making it efficient to retrieve or analyze fraud scoring patterns for specific users."
fraud_scoring_log,order_id,int,NO,MUL,,,,,,10.0,0.0,"The order_id column in the fraud_scoring_log table serves as a foreign key reference to identify the specific order or transaction being evaluated for fraud. This column is indexed (MUL) to optimize queries joining with the orders table and is required (non-nullable), ensuring every fraud scoring event is linked to a valid order in the system."
fraud_scoring_log,delivery_date,date,YES,MUL,,,,,,,,"The delivery_date column in the fraud_scoring_log table represents the date when a fraud scoring result was delivered or made available in the system. This column can be used for filtering and grouping fraud scoring events by their delivery dates, and its nullable property allows for cases where the delivery timing hasn't been recorded or isn't applicable."
fraud_scoring_log,order_count,tinyint(1),YES,,,,,,,3.0,0.0,"The `order_count` column in the fraud_scoring_log table represents the number of orders associated with a particular fraud scoring event, stored as a small integer value (0-255). This column can be used in SQL queries to analyze fraud patterns based on order volume or to filter fraud scoring events based on the number of orders involved in the assessment."
fraud_scoring_log,cancel_count,int,YES,,,,,,,10.0,0.0,"The cancel_count column in the fraud_scoring_log table tracks the number of previous cancellations or terminated activities associated with the entity being evaluated for fraud. This metric serves as a risk indicator, where a higher number of cancellations might suggest potentially suspicious behavior patterns in the fraud scoring assessment."
fraud_scoring_log,refuse_count,tinyint(1),YES,,,,,,,3.0,0.0,"The `refuse_count` column in the fraud_scoring_log table is a binary indicator (0 or 1) that tracks whether a transaction was refused due to fraud scoring results. When querying this column, it can be used as a boolean filter to identify refused transactions (WHERE refuse_count = 1) or to calculate refusal rates in aggregate queries."
fraud_scoring_log,order_range,int,YES,,,,,,,10.0,0.0,"The `order_range` column in the fraud_scoring_log table represents a numerical range or category assigned to the transaction amount or order value being evaluated for fraud. This optional integer field helps segment transactions into different value brackets, enabling fraud analysis and risk assessment based on transaction size thresholds."
fraud_scoring_log,order_amount,float,YES,,,0,,,,12.0,,"The `order_amount` column in the fraud_scoring_log table stores the monetary value of the transaction being evaluated for fraud, represented as a floating-point number. This column is used to track the financial magnitude of transactions during fraud risk assessment, which can be a crucial factor in determining risk levels and patterns of fraudulent behavior."
fraud_scoring_log,categories_other_switch,tinyint(1),YES,,,,,,,3.0,0.0,"The categories_other_switch column in the fraud_scoring_log table is a boolean flag (tinyint(1)) that indicates whether additional or miscellaneous fraud categories were evaluated during the scoring process. When querying this column, use values 1 (true) or 0 (false) to filter fraud scoring events based on whether they included assessment of these supplementary categories."
fraud_scoring_log,categories_viandes_switch,tinyint,NO,,,0,,,,3.0,0.0,The categories_viandes_switch column in the fraud_scoring_log table is a binary flag (tinyint) that indicates whether a transaction involves meat category products during fraud assessment. This required field (non-nullable) uses 0 and 1 values to help track and analyze fraud patterns specifically related to meat product transactions.
fraud_scoring_log,category_fruits_de_mer,tinyint(1),YES,,,,,,,3.0,0.0,"This boolean column (category_fruits_de_mer) indicates whether the scored transaction or activity is related to seafood products or services (1 for yes, 0 for no). When querying fraud scoring events, you can use this column to filter or analyze fraud patterns specifically within the seafood category of transactions."
fraud_scoring_log,category_fruits_de_mer_above_median,tinyint(1),YES,,,0,,,,3.0,0.0,"This boolean column indicates whether the transaction's spending in the seafood (""fruits de mer"") category exceeds the median value for that category across all transactions. It serves as a binary risk indicator (1 for above median, 0 for below median) used in fraud detection analysis, particularly for identifying unusual spending patterns in seafood purchases."
fraud_scoring_log,category_pates_et_sauces,tinyint(1),YES,,,,,,,3.0,0.0,"The category_pates_et_sauces column is a boolean flag (0 or 1) in the fraud_scoring_log table that indicates whether the evaluated transaction involved items from the ""pates and sauces"" product category. When querying fraud scoring events, you can use this column to filter or analyze fraud patterns specifically related to transactions containing pasta and sauce products."
fraud_scoring_log,category_pates_et_sauces_above_median,tinyint(1),YES,,,0,,,,3.0,0.0,"This boolean column indicates whether a transaction's spending in the ""pates et sauces"" (pasta and sauces) category exceeds the median spending amount for that category (1 for above median, 0 for at or below median). It's used as one of many behavioral indicators in fraud detection analysis, helping identify unusual spending patterns that might signal fraudulent activity."
fraud_scoring_log,category_pret_a_manger,tinyint(1),YES,,,,,,,3.0,0.0,"The `category_pret_a_manger` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that indicates whether the scored transaction falls under the Pret A Manger category or business type. When querying fraud scoring events, you can use this column to filter or analyze fraud assessments specifically related to Pret A Manger transactions, where 1 typically indicates it belongs to this category and 0 (or NULL) indicates it does not."
fraud_scoring_log,category_pret_a_manger_above_median,tinyint(1),YES,,,0,,,,3.0,0.0,"This boolean column indicates whether a customer's spending at Pret A Manger (a food retailer) exceeds the median spending level across all customers (1 for above median, 0 for at or below median). It serves as a behavioral indicator used in fraud risk assessment, where unusual spending patterns at specific merchants may contribute to the overall fraud score calculation."
fraud_scoring_log,category_viande,tinyint(1),YES,,,,,,,3.0,0.0,"The `category_viande` column in the fraud_scoring_log table is a boolean flag (tinyint(1)) that indicates whether the scored transaction belongs to the meat/butcher category. When writing SQL queries, you can use this column to filter or analyze fraud scoring events specifically related to meat-category transactions, where 1 typically represents true (is a meat category transaction) and 0 represents false."
fraud_scoring_log,category_viande_above_median,tinyint(1),YES,,,0,,,,3.0,0.0,"This boolean column (category_viande_above_median) indicates whether a transaction's spending in the meat/protein category exceeds the median value for that category (1 for above median, 0 for at or below median). When writing SQL queries, you can use this column to filter or analyze transactions based on their relative meat category spending patterns, particularly useful for identifying unusual purchasing behaviors in fraud detection scenarios."
fraud_scoring_log,category_alcohol,tinyint,YES,,,0,,,,3.0,0.0,"The category_alcohol column in the fraud_scoring_log table is a binary flag (tinyint) that indicates whether a transaction or activity being evaluated for fraud is related to alcohol purchases or services. This field helps in risk assessment and fraud detection specifically for alcohol-related transactions, where a value of 1 typically indicates an alcohol-related transaction and 0 indicates non-alcohol transactions."
fraud_scoring_log,category_alcohol_above_median,tinyint(1),YES,,,0,,,,3.0,0.0,"This boolean column (category_alcohol_above_median) indicates whether the transaction's alcohol-related spending is higher than the median value (1 for above median, 0 for below or at median). It can be used in fraud detection queries to identify unusual alcohol purchase patterns, particularly when combined with other risk indicators in the fraud_scoring_log table."
fraud_scoring_log,category_juice,tinyint(1),YES,,,0,,,,3.0,0.0,"The `category_juice` column in the fraud_scoring_log table is a binary flag (0 or 1) that likely indicates whether category-based risk factors influenced or ""juiced"" the fraud score calculation for a particular transaction. When querying this column, use it as a boolean filter to identify fraud scoring events where category-specific risk adjustments were applied (1) or not applied (0)."
fraud_scoring_log,category_snacks,tinyint(1),YES,,,0,,,,3.0,0.0,"The `category_snacks` column in the `fraud_scoring_log` table is a boolean flag (tinyint(1)) that indicates whether the fraud scoring event is related to a snacks category transaction. When writing queries, you can use this column to filter or analyze fraud scoring events specifically for snack-related transactions, where 1 typically represents true (is a snack category) and 0 represents false (not a snack category)."
fraud_scoring_log,category_snacks_above_median,tinyint(1),YES,,,0,,,,3.0,0.0,"This boolean column (category_snacks_above_median) indicates whether the transaction's snack-related purchases exceed the median value for the snacks category, serving as a potential fraud signal. It can be used in WHERE clauses or aggregations to analyze transactions where snack purchases are unusually high (1) versus normal or below median (0), with NULL values indicating cases where this metric couldn't be calculated or wasn't applicable."
fraud_scoring_log,category_non_edible,tinyint(1),YES,,,0,,,,3.0,0.0,"The `category_non_edible` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that indicates whether the scored transaction involves non-edible items or categories. This flag can be used in SQL queries to filter or analyze fraud scoring events specifically related to non-edible product categories, where 1 typically indicates non-edible items and 0 indicates edible items."
fraud_scoring_log,category_non_edible_above_median,tinyint(1),YES,,,0,,,,3.0,0.0,"This boolean column (category_non_edible_above_median) indicates whether non-edible product categories in a transaction exceed the median threshold for fraud risk scoring. When querying, use this column with binary operators (0 or 1) to filter transactions where non-edible category patterns suggest elevated fraud risk, such as ""WHERE category_non_edible_above_median = 1"" to find high-risk cases."
fraud_scoring_log,category_juice_above_median,tinyint(1),YES,,,0,,,,3.0,0.0,"The category_juice_above_median column is a boolean flag (stored as tinyint(1)) that indicates whether the fraud risk score for a particular transaction's category exceeds the median score for that category. This column can be used in WHERE clauses or aggregations to filter or analyze transactions with above-average category risk levels, with 1 representing above-median cases and 0 representing at-or-below median cases."
fraud_scoring_log,cards_in_account,int,YES,,,0,,,,10.0,0.0,"The `cards_in_account` column in the fraud_scoring_log table stores the total number of payment cards associated with the account at the time of the fraud scoring event. This integer field can be useful in fraud detection queries to identify unusual patterns, such as accounts with an abnormally high number of cards, and can be NULL if the card count information wasn't available during scoring."
fraud_scoring_log,credits_in_account,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The `credits_in_account` column in the fraud_scoring_log table stores the decimal amount of credits available in the user's account at the time of the fraud scoring event, with precision up to two decimal places. This column can be used in fraud detection queries to analyze spending patterns or risk levels based on available credit balances, and since it's nullable, queries should handle potential NULL values appropriately."
fraud_scoring_log,match_error_primary_cards,tinyint(1),YES,,,0,,,,3.0,0.0,"The match_error_primary_cards column in the fraud_scoring_log table is a boolean flag (tinyint(1)) that indicates whether there was an error when attempting to match or validate primary payment cards during the fraud scoring process. This column can be used in WHERE clauses to filter for fraud scoring events that encountered card matching errors (value = 1) or successful card validations (value = 0), helping to identify potential issues in the card verification component of the fraud detection system."
fraud_scoring_log,failed_cc_attempts,int,YES,,,0,,,,10.0,0.0,"The `failed_cc_attempts` column in the fraud_scoring_log table tracks the number of failed credit card attempts associated with a particular fraud scoring event. This integer field can be used in SQL queries to identify patterns of suspicious activity, such as filtering for transactions where the number of failed attempts exceeds a certain threshold (e.g., `WHERE failed_cc_attempts > 3`)."
fraud_scoring_log,bounced_email,tinyint(1),YES,,,0,,,,3.0,0.0,"The `bounced_email` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that indicates whether an email associated with the fraud scoring event was undeliverable or bounced. This field can be used in SQL queries to filter or analyze fraud events where email delivery issues may be a potential risk signal, with NULL values indicating cases where email verification wasn't applicable or attempted."
fraud_scoring_log,whitelisted,tinyint(1),YES,,,0,,,,3.0,0.0,"The `whitelisted` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that indicates whether the transaction or activity was on an approved whitelist at the time of fraud scoring. When querying, use this column with values 1 (true) or 0 (false) to filter or analyze transactions that were explicitly marked as trusted or pre-approved during the fraud assessment process."
fraud_scoring_log,order_after_sign_up,tinyint(1),YES,,,0,,,,3.0,0.0,"The `order_after_sign_up` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that indicates whether the scored transaction occurred after the user's initial account registration. This column can be used in SQL queries to filter or analyze potentially risky transactions based on their timing relative to user sign-up, with NULL values indicating cases where this timing relationship couldn't be determined."
fraud_scoring_log,last_order_date,date,YES,,,,,,,,,"The `last_order_date` column in the fraud_scoring_log table stores the date of the customer's most recent previous order before the current fraud scoring event. This date field can be useful in fraud detection queries to analyze patterns in ordering behavior or calculate time gaps between orders, though it may be null for first-time customers or when historical order data is unavailable."
fraud_scoring_log,orders_72_hours,tinyint(1),YES,,,0,,,,3.0,0.0,"The `orders_72_hours` column in the fraud_scoring_log table is a boolean flag (tinyint(1)) that indicates whether the associated transaction has any related orders within the previous 72-hour period. This data point is commonly used in fraud detection queries to identify patterns of suspicious ordering behavior within a short timeframe, where NULL values likely indicate that this check was not performed or the data was unavailable."
fraud_scoring_log,cc_switch,tinyint(1),YES,,,,,,,3.0,0.0,"The cc_switch column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that likely indicates whether the fraud scoring event involved a credit card transaction. When writing queries, you can use this column to filter or segment fraud scoring records based on credit card involvement, where 1 typically represents credit card transactions and 0 represents non-credit card transactions."
fraud_scoring_log,cc_signup,tinyint(1),YES,,,,,,,3.0,0.0,"The cc_signup column in the fraud_scoring_log table is a boolean flag (tinyint(1)) that indicates whether the fraud scoring event is related to a credit card signup activity. When querying this column, use 1 to filter for credit card signup fraud assessments and 0 for other types of fraud scoring events, with NULL values potentially indicating cases where the signup type wasn't specified."
fraud_scoring_log,cc_after_signup,tinyint(1),YES,,,,,,,3.0,0.0,"The `cc_after_signup` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that indicates whether a credit card was added after the initial user signup process. This data point is commonly used in fraud detection queries to identify potentially suspicious patterns where credit cards are added to accounts post-registration, and can be filtered using standard boolean conditions (WHERE cc_after_signup = 1 or cc_after_signup = 0)."
fraud_scoring_log,match_error_on_total_cards,varchar(16),YES,,,,,,16.0,,,"This column in the fraud_scoring_log table indicates whether there were any discrepancies or errors when matching the total number of cards during the fraud scoring process. The varchar(16) field likely stores status values or error codes related to card count validation, helping identify potential inconsistencies in card-related fraud detection checks."
fraud_scoring_log,sh_switch,tinyint(1),YES,,,,,,,3.0,0.0,"The `sh_switch` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that likely indicates whether a specific fraud scoring rule or switch related to suspicious holder behavior was activated during the assessment. When querying this column, use it as a binary condition (0 or 1) to filter or analyze transactions based on this specific fraud detection criteria."
fraud_scoring_log,fraud_order_switch,tinyint(1),YES,,,,,,,3.0,0.0,"The `fraud_order_switch` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that indicates whether a transaction or activity has been marked as fraudulent based on the scoring evaluation. When querying this column, use values 1 (true) to find confirmed fraudulent orders or 0 (false) for non-fraudulent orders, with NULL potentially indicating cases where the fraud determination is pending or inconclusive."
fraud_scoring_log,cc_fraud_match,tinyint(1),YES,,,,,,,3.0,0.0,"The `cc_fraud_match` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that indicates whether a credit card transaction matched known fraud patterns. When querying this column, use it to filter for confirmed fraud matches (value = 1) or non-matches (value = 0), with NULL values potentially indicating inconclusive or pending assessments."
fraud_scoring_log,hd_fraud_match,tinyint(1),YES,,,,,,,3.0,0.0,"The `hd_fraud_match` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that indicates whether a transaction matched predefined high-risk fraud patterns or criteria. When querying this column, use values 1 (true) to find transactions that triggered high-risk fraud matches and 0 (false) for those that didn't, with NULL potentially indicating cases where the fraud match evaluation couldn't be completed."
fraud_scoring_log,status,tinyint(1),YES,MUL,,,,,,3.0,0.0,"The `status` column in the fraud_scoring_log table is a tinyint(1) field that indicates the current state or outcome of a fraud scoring evaluation. When querying this column, use values like 0 or 1 to filter fraud scoring events based on their completion or approval status, and note that the MUL key type suggests this column is part of a multi-column index for optimized searching."
fraud_scoring_log,comment,text,YES,,,,,,65535.0,,,"The `comment` column in the fraud_scoring_log table stores optional text notes or explanations related to fraud scoring events. This free-form text field can be used to document specific observations, justifications for risk assessments, or additional context about the fraud evaluation process, making it useful for filtering or analyzing fraud events with specific characteristics or annotations."
fraud_scoring_log,risk,tinyint(1),YES,MUL,,,,,,3.0,0.0,"The `risk` column in the fraud_scoring_log table is a binary indicator (0 or 1) that represents whether a transaction or activity was flagged as risky during fraud assessment. When querying this column, use it as a boolean filter (WHERE risk = 1) to identify high-risk transactions or group results by risk level (GROUP BY risk) to analyze fraud patterns."
fraud_scoring_log,raw_risk,int,YES,,,,,,,10.0,0.0,"The raw_risk column in the fraud_scoring_log table stores the initial, unprocessed numerical risk score calculated during fraud detection evaluation. This integer value represents the raw risk assessment before any normalization or thresholding, where higher values typically indicate greater fraud risk potential, and NULL values may indicate scoring failures or incomplete assessments."
fraud_scoring_log,gift_credit_over_200,int,NO,,,0,,,,10.0,0.0,The `gift_credit_over_200` column in the fraud_scoring_log table is a binary indicator (0 or 1) that flags whether a transaction involved a gift credit amount exceeding $200. This flag is commonly used in fraud detection queries to identify high-value gift credit transactions that may require additional scrutiny or have different risk thresholds.
fraud_scoring_log,gift_credit_amount,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The gift_credit_amount column in the fraud_scoring_log table stores the monetary value (with two decimal places) of any gift credit involved in the transaction being evaluated for fraud. This required field helps track and assess risk patterns specifically related to gift credit transactions, with a default value of 0.00 when no gift credit is involved."
fraud_scoring_log,consecutive_digits_in_phone,tinyint(1),YES,,,0,,,,3.0,0.0,"The consecutive_digits_in_phone column in the fraud_scoring_log table is a binary flag (0 or 1) that indicates whether a phone number associated with the transaction contains consecutive repeating digits, which can be a potential fraud signal. This column can be used in WHERE clauses or JOIN conditions to filter or analyze transactions based on this specific fraud risk indicator, such as ""WHERE consecutive_digits_in_phone = 1"" to find cases where suspicious phone number patterns were detected."
fraud_scoring_log,credit_card_in_multiple_accounts,tinyint(1),YES,,,0,,,,3.0,0.0,"The credit_card_in_multiple_accounts column is a boolean flag (0 or 1) that indicates whether the credit card involved in the transaction has been detected across multiple user accounts, which is a potential fraud signal. When querying this column, use it as a binary condition (WHERE credit_card_in_multiple_accounts = 1) to identify transactions where the same credit card appears in different accounts, helping to surface potential account sharing or card theft patterns."
fraud_scoring_log,score_adjusted,tinyint,YES,,,,,,,3.0,0.0,"The `score_adjusted` column in the fraud_scoring_log table is a tinyint field that indicates whether the original fraud score was manually adjusted or modified after the initial automated scoring. When querying this column, use it as a boolean flag (typically 0 for no adjustment, 1 for adjusted) to filter or identify transactions where human intervention or manual review resulted in score modifications."
fraud_scoring_log,scoring_details,json,NO,,,,,,,,,"The scoring_details column in the fraud_scoring_log table stores detailed fraud assessment information in JSON format, containing structured data about the specific rules triggered, risk factors identified, and scoring parameters used during the fraud evaluation. This required (non-nullable) JSON field enables complex querying of fraud scoring attributes and can be accessed using JSON operators to extract specific scoring components or criteria that contributed to the fraud risk assessment."
fraud_scoring_log,phone_match,tinyint(1),YES,,,,,,,3.0,0.0,"The `phone_match` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that indicates whether the phone number provided in a transaction matches verified phone records. When querying this column, use values 1 (true) or 0 (false) to filter transactions based on phone number verification status, with NULL values potentially indicating cases where phone verification wasn't performed or applicable."
fraud_scoring_log,pup_change,tinyint(1),YES,,,,,,,3.0,0.0,"The `pup_change` column in the fraud_scoring_log table is a boolean flag (stored as tinyint(1)) that indicates whether a potentially unwanted program (PUP) change was detected during the fraud scoring event. When querying this column, use it as a binary condition (0 or 1) to filter or analyze transactions where PUP changes were identified as part of the fraud risk assessment."
fraud_scoring_whitelist,fraud_scoring_whitelist_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The fraud_scoring_whitelist_id is the primary key column that uniquely identifies each trusted entity in the fraud scoring whitelist table. When writing SQL queries, use this column for precise record lookups, joins to related tables, or when you need to reference a specific whitelist entry, as it serves as the main identifier for each allowlisted entity."
fraud_scoring_whitelist,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the fraud_scoring_whitelist table stores unique integer identifiers for trusted users who are exempt from standard fraud checks. This column is indexed (MUL) for efficient lookups and requires a non-null value, making it ideal for JOIN operations with other user-related tables or for quickly verifying if a specific user is whitelisted."
fraud_scoring_whitelist,email,varchar(255),NO,,,,,,255.0,,,"The 'email' column in the fraud_scoring_whitelist table stores email addresses (up to 255 characters) of trusted entities that are exempt from fraud checks. This required field (non-nullable) can be used in WHERE clauses to quickly verify if an email address is whitelisted, or in JOIN operations to match against user email addresses from other tables."
fraud_scoring_whitelist,name,varchar(45),NO,,,,,,45.0,,,"The 'name' column in the fraud_scoring_whitelist table stores the identifier (up to 45 characters) for a trusted entity that should bypass fraud checks, and it cannot contain NULL values. When writing SQL queries, use this column to look up specific whitelisted entities or to verify if a particular user, IP, or account is exempt from fraud screening."
fraud_scoring_whitelist,delivery_day,varchar(45),YES,,,,,,45.0,,,"The delivery_day column in the fraud_scoring_whitelist table stores the specific day(s) when a trusted entity's whitelist status is applicable, represented as a string up to 45 characters. When writing queries, this column can be used to filter or match whitelisted entities based on their approved delivery days, though it's optional (nullable) which means some whitelist entries might apply to all days."
fraud_scoring_whitelist,shipped,tinyint(1),YES,,,0,,,,3.0,0.0,"The `shipped` column in the `fraud_scoring_whitelist` table is a boolean flag (stored as tinyint(1)) that indicates whether the whitelisted entity has successfully completed transactions that were shipped. This column can be used in WHERE clauses to filter for trusted entities with verified shipping history, such as `WHERE shipped = 1` for entities with confirmed shipments."
fraud_scoring_whitelist,canceled,tinyint(1),YES,,,0,,,,3.0,0.0,"The 'canceled' column in the fraud_scoring_whitelist table is a boolean flag (tinyint(1)) that indicates whether a trusted entity's whitelist status has been revoked, where 0 typically means active/valid and 1 means canceled. When writing queries to check for valid whitelist entries, you should include ""WHERE canceled = 0"" to ensure only active whitelist records are considered."
fraud_scoring_whitelist,declined,tinyint(1),YES,,,0,,,,3.0,0.0,"The `declined` column in the `fraud_scoring_whitelist` table is a boolean flag (stored as tinyint) that indicates whether a whitelisted entity's bypass privileges have been revoked (1) or remain active (0). When writing queries, this column can be used to filter for only active whitelist entries by adding the condition `WHERE declined = 0`, ensuring that revoked entries are not considered in fraud bypass logic."
fraud_scoring_whitelist,notes,text,YES,,,,,,65535.0,,,"The `notes` column in the `fraud_scoring_whitelist` table stores optional text comments or explanations about why a particular entity was added to the whitelist. When writing queries, this column can be used for auditing purposes or to search for specific whitelist entries based on their documented justification, though be aware that it may contain NULL values since it's not a required field."
fraud_scoring_whitelist,last_order_date,date,YES,,,,,,,,,"The last_order_date column in the fraud_scoring_whitelist table records the date when the whitelisted entity last placed an order in the system. This column can be useful for filtering or analyzing trusted entities based on their order history, and since it's nullable, some whitelisted entities may not have any associated order dates."
fraud_scoring_whitelist,created_date,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_date column in the fraud_scoring_whitelist table automatically records the timestamp when a trusted entity is added to the whitelist, using CURRENT_TIMESTAMP as the default value. This column is useful for auditing purposes and can be used in SQL queries to filter or analyze when specific entities were whitelisted, such as finding recently added entries or tracking historical whitelisting patterns."
fraud_scoring_whitelist,updated_date,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The updated_date column in the fraud_scoring_whitelist table automatically records the timestamp when a trusted entity's whitelist entry was last modified, defaulting to CURRENT_TIMESTAMP. This column is useful for auditing purposes and can be used in SQL queries to filter or sort whitelist entries based on when they were last updated, such as finding recently modified entries or identifying stale whitelist records that might need review."
fraud_scoring_whitelist,active,tinyint(1),YES,,,0,,,,3.0,0.0,"The 'active' column in the fraud_scoring_whitelist table is a boolean flag (stored as tinyint(1)) that indicates whether a whitelist entry is currently in effect. When writing queries, use this column to filter for only active whitelist entries (WHERE active = 1) or to exclude inactive entries, ensuring that fraud bypass rules are only applied to currently valid trusted entities."
fraud_scoring_whitelist,type,tinyint(1),NO,,,,,,,3.0,0.0,"The 'type' column in the fraud_scoring_whitelist table is a required tinyint(1) field that categorizes the type of entity being whitelisted (e.g., 1 for users, 2 for IPs, 3 for accounts). When writing SQL queries, use this column to filter or group whitelisted entities by their specific type, which is essential for applying the correct bypass rules in fraud detection processes."
fraud_scoring_whitelist,order_id_on_listed,int,YES,,,0,,,,10.0,0.0,"The order_id_on_listed column in the fraud_scoring_whitelist table stores the order ID that was active when an entity was added to the whitelist, serving as a reference point for when the whitelisting occurred. This optional integer field can be used in queries to track the historical context of when trusted entities were approved for bypass, and can be joined with order tables to analyze the circumstances that led to whitelisting decisions."
fraudulent_reasons,fraudulent_reasons_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The fraudulent_reasons_id column serves as the primary key in the fraudulent_reasons table, uniquely identifying each predefined fraud reason or category. When writing SQL queries, use this column to join with other tables that reference specific fraud reasons or to filter and group fraud-related data by their classification types."
fraudulent_reasons,fraud_type,int,YES,,,,,,,10.0,0.0,"The `fraud_type` column in the `fraudulent_reasons` table is an integer field that uniquely identifies different categories or types of fraud. When writing SQL queries, this column can be used to join with other tables or filter transactions based on specific fraud classifications, making it useful for fraud analysis and reporting scenarios."
fraudulent_reasons,fraud_name_en,varchar(255),NO,,,,,,255.0,,,"The fraud_name_en column in the fraudulent_reasons table stores the English-language name or description of a specific fraud category or reason, with a maximum length of 255 characters. This required field (non-nullable) is used to provide human-readable labels for different types of fraud classifications, making it useful in SELECT queries where you need to display or filter fraud reasons in English."
fraudulent_reasons,fraud_name_fr,varchar(255),NO,,,,,,255.0,,,"The fraud_name_fr column in the fraudulent_reasons table stores the French language version of fraud reason names or categories, with a maximum length of 255 characters. This required (non-nullable) field should be used when displaying or filtering fraud reasons in French-language contexts, and is commonly paired with queries involving fraud classification or reporting where French localization is needed."
fraudulent_reasons,fraud_message_en,text,YES,,,,,,65535.0,,,"The `fraud_message_en` column in the `fraudulent_reasons` table stores the English-language description or explanation of a specific fraud reason or category. When writing SQL queries, this column can be used to retrieve human-readable fraud descriptions or to search for specific types of fraud using text-based conditions (e.g., LIKE, ILIKE, or full-text search operations)."
fraudulent_reasons,fraud_message_fr,text,YES,,,,,,65535.0,,,"The `fraud_message_fr` column in the `fraudulent_reasons` table stores the French language version of fraud reason descriptions, allowing for multilingual support in fraud classification and reporting. When writing queries that need to display fraud reasons in French, you can reference this column directly, and its nullable property means some entries might not have a French translation available."
gh_crop,crop_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The crop_id column serves as the primary key in the gh_crop table, uniquely identifying each crop record in the greenhouse crop database. When writing SQL queries, use this column for precise record selection or when joining with related tables that reference greenhouse crops."
gh_crop,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the gh_crop table stores the common or scientific names of greenhouse crops as text strings up to 255 characters in length. Since this field is marked as NOT NULL, every crop record must have a name value, making it essential for identifying and referencing specific crops in queries."
gh_crop,status,tinyint,YES,,,1,,,,3.0,0.0,"The 'status' column in the gh_crop table is a tinyint field that likely represents the current state or condition of greenhouse crops using numeric codes (e.g., 1 for active, 0 for inactive). When querying this column, you can use standard numeric comparisons (=, >, <), and since it's nullable, remember to handle NULL values appropriately with IS NULL or IS NOT NULL conditions."
gh_crop_variety,crop_variety_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The crop_variety_id column serves as the primary key in the gh_crop_variety table, uniquely identifying each crop variety record with a non-nullable integer value. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific crop variety entry."
gh_crop_variety,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the gh_crop_variety table stores the unique name or designation of each crop variety as a text string (up to 255 characters) and is required for every record. When writing SQL queries, this column can be used to search, filter, or identify specific crop varieties by their names, making it particularly useful in SELECT statements with WHERE clauses or JOIN operations when linking to other agricultural data."
gh_crop_variety,crop_id,int,NO,,,,,,,10.0,0.0,"The crop_id column in the gh_crop_variety table is a required integer field that identifies the base crop type (such as corn, wheat, or soybeans) to which a variety belongs. When writing queries, this column can be used to filter or group crop varieties by their parent crop type, and it's commonly used to join with other crop-related tables to access broader crop information."
gh_crop_variety,min_weight,int,YES,,,,,,,10.0,0.0,"The min_weight column in the gh_crop_variety table represents the minimum expected weight (likely in grams or kilograms) for a specific crop variety at harvest or maturity. This integer field can be used in SQL queries to filter or analyze crop varieties based on their minimum weight requirements, helping farmers and agricultural planners make informed decisions about crop selection and yield expectations."
gh_crop_variety,max_weight,int,YES,,,,,,,10.0,0.0,"The max_weight column in the gh_crop_variety table represents the maximum expected weight (likely in grams or kilograms) that a specific crop variety can typically achieve at maturity. This integer field can be used in SQL queries to filter or analyze crop varieties based on their size potential, though it can contain NULL values if the maximum weight is unknown or not applicable for certain varieties."
gh_crop_variety,status,tinyint,YES,,,1,,,,3.0,0.0,"The 'status' column in the gh_crop_variety table is a tinyint field that likely indicates the current state or availability status of a crop variety (e.g., 1 for active/available, 0 for inactive/discontinued). When querying this table, you can use this column to filter crop varieties based on their status, such as `WHERE status = 1` to retrieve only active crop varieties."
global_stats,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the global_stats table, uniquely identifying each set of system-wide statistics and metrics. When querying this table, use this column for precise record selection or joins, though in most cases you'll be more interested in the actual metric columns since this table typically contains aggregate statistics."
global_stats,type,tinyint,NO,,,0,,,,3.0,0.0,"The 'type' column in the global_stats table is a required tinyint field that categorizes different types of system-wide statistics using numeric codes. When querying this column, use integer values to filter or group statistics by their category type, which helps in organizing and analyzing different classes of global metrics (e.g., SELECT * FROM global_stats WHERE type = 1)."
global_stats,date,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The 'date' column in the global_stats table is a non-nullable timestamp field that automatically records when each statistical record was created or updated, using the current timestamp as its default value. This column is essential for temporal analysis of system-wide metrics and helps track when specific global statistics were recorded in the system."
global_stats,value,varchar(128),NO,,,,,,128.0,,,"The 'value' column in the global_stats table stores string-based metric values or statistics with a maximum length of 128 characters, and cannot contain NULL values. When querying this column, you can expect to find textual representations of various system-wide metrics, which may include formatted numbers, status indicators, or other statistical values that represent global application metrics."
group_vacation_communities,group_vacation_communities_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The group_vacation_communities_id column serves as the primary key identifier for each unique vacation planning community in the group_vacation_communities table. This non-nullable integer column should be used in JOIN operations when linking to related tables and in WHERE clauses when filtering for specific communities.
group_vacation_communities,group_vacation_setting_id,int,NO,,,,,,,10.0,0.0,"The group_vacation_setting_id column is a required integer field that uniquely identifies different vacation settings or destinations within the group_vacation_communities table. When writing queries, this column can be used to filter or join related vacation planning data, particularly when you need to analyze or group community information by specific travel destinations or settings."
group_vacation_communities,community_assign_to,int,NO,,,,,,,10.0,0.0,"The community_assign_to column in the group_vacation_communities table is a required integer field that likely represents an ID reference to an entity (such as a moderator, administrator, or organizing member) responsible for managing the vacation planning community. When querying this column, it can be used to filter or join with other tables to find communities assigned to specific individuals or to analyze community management distribution patterns."
group_vacation_setting,group_vacation_setting_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The group_vacation_setting_id column serves as the primary key identifier for each unique vacation setting record in the group_vacation_setting table. This integer-based identifier is non-nullable and should be referenced when joining with related tables or filtering specific group vacation configurations.
group_vacation_setting,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the group_vacation_setting table is a required integer field that identifies the specific user associated with group vacation settings or preferences. This column likely serves as a reference to link vacation settings to individual users within their respective groups, enabling user-specific vacation configurations while maintaining group-level organization."
group_vacation_setting,community_representative_group_id,int,NO,,,,,,,10.0,0.0,"The community_representative_group_id column in the group_vacation_setting table is a required integer field that identifies the specific group for which vacation settings are being configured. When writing queries, use this column to join with other group-related tables or to filter vacation settings for specific community representative groups."
group_vacation_setting,agent_id,int,YES,,,,,,,10.0,0.0,"The agent_id column in the group_vacation_setting table is an optional integer field that identifies specific agents associated with group vacation settings. This column can be used to link individual agents to their vacation-related configurations within a group, enabling queries to filter or join vacation settings by specific agent identifiers."
group_vacation_setting,start_date,date,YES,,,,,,,,,"The start_date column in the group_vacation_setting table represents the beginning date of a vacation-related setting or rule for a group. When writing queries, this date field can be used to filter or sort group vacation settings by their effective start dates, and since it's nullable, queries should handle potential NULL values appropriately using IS NULL or IS NOT NULL conditions when necessary."
group_vacation_setting,end_date,date,YES,,,,,,,,,"The end_date column in the group_vacation_setting table represents the final date of a group's vacation-related configuration or policy period. When writing queries, this date field can be used to filter active settings, check policy expiration, or determine if a specific date falls within a group's vacation policy range, making it particularly useful in WHERE clauses and date-based comparisons."
hr_applicant_archive_infos,hr_applicant_archive_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_applicant_archive_id column serves as the primary key in the hr_applicant_archive_infos table, uniquely identifying each archived job applicant record. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference specific historical applicant records (e.g., SELECT * FROM hr_applicant_archive_infos WHERE hr_applicant_archive_id = 123)."
hr_applicant_archive_infos,hr_applicant_info_id,int,NO,,,,,,,10.0,0.0,"The hr_applicant_info_id column in the hr_applicant_archive_infos table serves as an identifier for each archived job applicant record. When writing SQL queries, use this column to uniquely identify or join with specific applicant records in the archive, particularly when you need to retrieve or analyze historical applicant information."
hr_applicant_archive_infos,hr_hiring_request_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_request_id column in the hr_applicant_archive_infos table is a required integer field that links archived applicant records to their original hiring request. When querying historical applicant data, this column can be used to group or filter applicants by their associated hiring request, making it useful for analyzing applicant pools for specific hiring initiatives."
hr_applicant_archive_infos,hr_setting_archive_option_id,int,YES,,,,,,,10.0,0.0,"The hr_setting_archive_option_id column in the hr_applicant_archive_infos table is an integer field that likely references specific archival settings or rules that were applied when storing the applicant's information. When querying historical applicant data, this column can be used to filter or group records based on different archival configurations, though its nullable nature suggests that not all archived records may have an associated archive option."
hr_applicant_archive_infos,valid_reason,text,YES,,,,,,65535.0,,,"The 'valid_reason' column in the hr_applicant_archive_infos table stores text explanations for why an applicant's information was archived or deemed valid for archival purposes. When querying this column, it can be used to filter or analyze the justifications for archiving applicant records, though be aware that it allows NULL values which should be handled appropriately in your queries."
hr_applicant_archive_infos,email_reason,text,YES,,,,,,65535.0,,,"The email_reason column in hr_applicant_archive_infos stores text descriptions explaining why specific emails were sent to job applicants during their hiring process. When querying this column, it can be used to filter or analyze communication patterns with applicants, though be aware that it allows NULL values for cases where no email reason was recorded."
hr_applicant_archive_infos,status,tinyint(1),NO,,,,,,,3.0,0.0,"The 'status' column in the hr_applicant_archive_infos table is a required boolean field (tinyint(1)) that indicates whether an archived applicant record is active (1) or inactive (0). When querying historical applicant data, this column can be used to filter records based on their current status, helping to distinguish between active and inactive archived applications."
hr_applicant_archive_infos,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in hr_applicant_archive_infos is a required integer field that uniquely identifies each job applicant in the historical records. When writing queries, this column can be used to track individual applicants' information and can serve as a reference point for joining with other HR-related tables that contain additional applicant data."
hr_applicant_archive_infos,created_at,datetime,NO,,,,,,,,,"The created_at column in hr_applicant_archive_infos stores the timestamp when each applicant record was initially created in the system, making it useful for tracking when candidates first entered the hiring process. This non-nullable datetime field can be used in SQL queries to filter or analyze applicant data by time period, such as finding all applications submitted within a specific date range or analyzing application trends over time."
hr_applicant_archive_infos,updated_at,datetime,NO,,,,,,,,,"The updated_at column in hr_applicant_archive_infos stores the timestamp of when an applicant's record was last modified in the system, using a datetime format. This column is mandatory (non-nullable) and can be used to track changes in applicant records over time, making it particularly useful for filtering records by date ranges or sorting applicants by their most recent updates."
hr_applicant_emergency_infos,hr_applicant_emergency_info_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_applicant_emergency_info_id column serves as the primary key for the hr_applicant_emergency_infos table, uniquely identifying each emergency contact record for job applicants. This non-nullable integer column should be used in JOIN operations when linking emergency contact information to other HR system tables, and can be referenced in WHERE clauses when looking up specific emergency contact records."
hr_applicant_emergency_infos,hr_applicant_info_id,int,NO,MUL,,,,,,10.0,0.0,"The hr_applicant_info_id column serves as a foreign key in the hr_applicant_emergency_infos table, linking each emergency contact record to its corresponding job applicant in the HR system. When writing queries, use this column to join with the main applicant table or to filter emergency contact records for specific applicants."
hr_applicant_emergency_infos,contact1,varchar(255),YES,,,,,,255.0,,,"The ""contact1"" column in the hr_applicant_emergency_infos table stores the name of the primary emergency contact for job applicants as a variable-length text string (up to 255 characters). When writing SQL queries, this column can be used to search, filter, or retrieve emergency contact names, and since it's nullable, queries should account for possible NULL values when performing operations or comparisons."
hr_applicant_emergency_infos,contact1_lname,varchar(50),YES,,,,,,50.0,,,"The contact1_lname column in hr_applicant_emergency_infos stores the last name of an applicant's primary emergency contact as a variable-length string up to 50 characters. When writing queries, this column can be used to search or filter emergency contacts by surname, and since it's nullable, you should consider handling NULL values appropriately in your WHERE clauses or joins."
hr_applicant_emergency_infos,contact1_relationship,varchar(255),YES,,,,,,255.0,,,"The contact1_relationship column in hr_applicant_emergency_infos stores the relationship between the job applicant and their primary emergency contact (e.g., ""Spouse"", ""Parent"", ""Sibling""). When querying this column, you can use string operations to filter or group emergency contacts based on their relationship to the applicant, and since it's nullable, be sure to handle NULL values appropriately in your queries."
hr_applicant_emergency_infos,contact1_phone_number,varchar(255),YES,,,,,,255.0,,,"The contact1_phone_number column in hr_applicant_emergency_infos stores the primary emergency contact's phone number for job applicants, accepting phone numbers up to 255 characters in length. Since this field is nullable, SQL queries should handle potential NULL values when filtering or displaying emergency contact phone numbers, and it's commonly used in WHERE clauses for searching specific emergency contacts or in SELECT statements when retrieving contact information."
hr_applicant_emergency_infos,contact2,varchar(255),YES,,,,,,255.0,,,"The 'contact2' column in the hr_applicant_emergency_infos table stores the name of a secondary emergency contact person for job applicants, allowing up to 255 characters. This optional field (as indicated by being nullable) can be used in SQL queries to retrieve or filter secondary emergency contact information, typically used in conjunction with other contact details to provide a comprehensive view of an applicant's emergency contacts."
hr_applicant_emergency_infos,contact2_lname,varchar(50),YES,,,,,,50.0,,,"The contact2_lname column stores the last name of a secondary emergency contact for job applicants, allowing up to 50 characters. This optional field (as indicated by being nullable) can be used in SQL queries to search, filter, or display secondary emergency contact surnames, often in conjunction with other contact information fields in the hr_applicant_emergency_infos table."
hr_applicant_emergency_infos,contact2_relationship,varchar(255),YES,,,,,,255.0,,,"The contact2_relationship column in hr_applicant_emergency_infos stores the relationship between the job applicant and their second emergency contact (e.g., ""spouse,"" ""parent,"" ""sibling""). This optional text field can be used in SQL queries to filter or group applicants based on their secondary emergency contact relationships, or to verify that applicants have provided contacts with specific relationship types."
hr_applicant_emergency_infos,contact2_phone_number,varchar(255),YES,,,,,,255.0,,,"The contact2_phone_number column in hr_applicant_emergency_infos stores the phone number for an applicant's secondary emergency contact as a variable-length string up to 255 characters. This optional field (nullable) can be used in SQL queries to retrieve or filter secondary emergency contact phone numbers for job applicants, typically used alongside other emergency contact details."
hr_applicant_emergency_infos,created_by,int,NO,,,0,,,,10.0,0.0,"The `created_by` column in the hr_applicant_emergency_infos table is a required integer field that tracks which user or system process created each emergency contact record. When writing queries, this column can be used to filter or join with user tables to identify who added specific emergency contact entries, and since it's non-nullable, you can always expect a value to be present."
hr_applicant_emergency_infos,updated_by,int,NO,,,0,,,,10.0,0.0,"The `updated_by` column in the hr_applicant_emergency_infos table is a required integer field that tracks the ID of the user who last modified an emergency contact record. When writing queries, this column can be used to join with a users table to identify who made changes to emergency contact information, or to filter records based on specific updaters."
hr_applicant_emergency_infos,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in hr_applicant_emergency_infos records the timestamp when an emergency contact record was first added to the system, automatically populated with CURRENT_TIMESTAMP. When querying emergency contact records, this column can be used to track when contacts were initially entered or to filter records based on their creation date, making it useful for auditing and temporal analysis."
hr_applicant_emergency_infos,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `hr_applicant_emergency_infos` table automatically records the timestamp when an emergency contact record is modified, using the CURRENT_TIMESTAMP value. When writing SQL queries, this column can be useful for tracking the most recent changes to emergency contact information or filtering records based on when they were last updated."
hr_applicant_favourites,hr_applicant_favourite_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_applicant_favourite_id column serves as the primary key in the hr_applicant_favourites table, uniquely identifying each favorite/shortlisted applicant record. This non-nullable integer column should be referenced when joining with other tables or when specifically querying individual favorite applicant entries."
hr_applicant_favourites,hr_applicant_info_id,int,NO,,,,,,,10.0,0.0,"The hr_applicant_info_id column in the hr_applicant_favourites table serves as a reference to identify specific job applicants who have been marked as favorites by HR personnel. When writing SQL queries, this non-nullable integer column can be used to join with the main applicant information table and filter or group favorite candidates."
hr_applicant_favourites,hr_hiring_request_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_request_id column in the hr_applicant_favourites table is a required integer field that links favorited applicants to specific hiring requests or job requisitions. When querying this table, you can use this column to filter or join with related hiring request data to understand which job openings the favorited candidates were being considered for."
hr_applicant_favourites,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the hr_applicant_favourites table represents the unique identifier of the HR personnel or recruiter who marked an applicant as a favorite. When writing SQL queries, this column can be used to filter or group favorite applicants by specific HR users, and since it's non-nullable, every favorite entry must be associated with an HR user."
hr_applicant_favourites,rating_count,int,NO,,,0,,,,10.0,0.0,The rating_count column in hr_applicant_favourites is a required integer field that tracks the number of times an applicant has been rated or marked as a favorite by HR personnel. This metric can be useful in SQL queries to identify the most frequently favored candidates or to sort applicants based on their popularity among recruiters.
hr_applicant_favourites,do_not_hire,tinyint(1),YES,,,0,,,,3.0,0.0,"The `do_not_hire` column in the hr_applicant_favourites table is a boolean flag (tinyint(1)) that indicates whether an applicant should not be considered for future hiring opportunities, where 0 typically means they can be hired and 1 means they should not be hired. When querying this column, it can be used in WHERE clauses to filter out candidates marked as do-not-hire (e.g., `WHERE do_not_hire = 0` to show only hirable candidates)."
hr_applicant_favourites,created_at,datetime,NO,,,,,,,,,"The created_at column in hr_applicant_favourites records the exact date and time when an applicant was first marked as a favorite by HR personnel. This non-nullable datetime field is useful for filtering and sorting favorite applicants by when they were added to the shortlist, and can be used in SQL queries to analyze favorite marking patterns or find recently flagged candidates."
hr_applicant_favourites,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_applicant_favourites table records the timestamp of when a favorite applicant record was last modified, automatically updating whenever changes are made to the entry. This datetime field is mandatory (non-nullable) and can be useful for tracking the recency of favorite applicant selections or filtering for recently updated favorite statuses in recruitment workflows."
hr_applicant_infos,hr_applicant_info_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_applicant_info_id is the primary key column in the hr_applicant_infos table, uniquely identifying each job applicant record in the HR system. When writing SQL queries, use this column for joining with related tables or filtering specific applicant records, and note that it cannot contain NULL values."
hr_applicant_infos,hr_hiring_request_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_request_id column in the hr_applicant_infos table is a required integer field that links each job applicant to their corresponding hiring request or job requisition. When writing queries, this column can be used to filter or join applicant records with related hiring request data, making it essential for tracking which position each candidate applied for."
hr_applicant_infos,hr_job_role_id,int,YES,,,,,,,10.0,0.0,"The hr_job_role_id column in the hr_applicant_infos table is an integer field that links each job applicant to their desired job role position. When writing queries, this column can be used to filter or group applicants by specific job positions, and it's commonly used in JOIN operations with a job roles reference table to get detailed position information, though the column is optional as indicated by its nullable property."
hr_applicant_infos,external_job_website_id,int,YES,,,,,,,10.0,0.0,"The external_job_website_id column in the hr_applicant_infos table is an optional integer field that identifies which external job board or website the candidate applied through (such as LinkedIn, Indeed, or other job platforms). This column can be used to analyze application sources and track which recruitment channels are most effective, though its nullable property means not all applicants will have this information if they applied through other means."
hr_applicant_infos,first_name,varchar(50),NO,,,,,,50.0,,,"The first_name column in the hr_applicant_infos table stores the given name of job applicants as a required text field with a maximum length of 50 characters. When querying applicant data, this column can be used to search, filter, or display candidate first names, and since it's non-nullable, you can rely on it always containing a value."
hr_applicant_infos,last_name,varchar(50),NO,,,,,,50.0,,,The last_name column in the hr_applicant_infos table stores the family name or surname of job applicants as a required text field with a maximum length of 50 characters. This column is commonly used in WHERE clauses for searching specific candidates or in ORDER BY clauses to sort applicants alphabetically by last name.
hr_applicant_infos,email,varchar(100),NO,,,,,,100.0,,,"The email column in the hr_applicant_infos table stores the primary email address for each job applicant as a string up to 100 characters long. Since this field is marked as non-nullable, it's a required field for all applicant records and can be reliably used in WHERE clauses or JOIN conditions when querying applicant contact information."
hr_applicant_infos,phone,varchar(250),NO,,,,,,250.0,,,"The 'phone' column in the hr_applicant_infos table stores the contact phone number for job applicants as a required text field (varchar) that can hold up to 250 characters. When querying applicant information, this column can be used to filter or retrieve candidates based on their phone numbers, though care should be taken to consider potential variations in phone number formats since it's stored as a text field."
hr_applicant_infos,referrer_info,varchar(100),YES,,,,,,100.0,,,"The referrer_info column in the hr_applicant_infos table stores information about how the applicant was referred to the company, such as employee referrals, job boards, or recruitment agencies, with a maximum length of 100 characters. When querying this column, it can be useful for analyzing recruitment sources and tracking the effectiveness of different referral channels, though the field may be null if the referral source is unknown or not applicable."
hr_applicant_infos,referrer_info_id,int,YES,,,,,,,10.0,0.0,"The referrer_info_id column in the hr_applicant_infos table is an integer field that links to information about who referred the job applicant to the company. When querying applicant data, this column can be used to join with a referrer information table to access details about employee referrals, though the field is optional as indicated by its nullable status."
hr_applicant_infos,employee_id,int,YES,,,,,,,10.0,0.0,"The employee_id column in the hr_applicant_infos table represents a unique identifier for job applicants who are current employees applying for internal positions. Since this field is nullable, it's only populated when the applicant is an existing employee, making it useful for queries that need to identify or filter internal candidates within the recruitment process."
hr_applicant_infos,language,char(2),YES,,,,,,2.0,,,"The 'language' column in the hr_applicant_infos table stores the preferred or primary language of job applicants using a two-character language code (e.g., 'EN' for English, 'ES' for Spanish). When querying this column, you can use standard string comparison operators, but be mindful that it's nullable and should handle NULL values appropriately in your WHERE clauses or joins."
hr_applicant_infos,resume,varchar(255),NO,,,,,,255.0,,,"The 'resume' column in the hr_applicant_infos table stores the file path or URL reference to an applicant's resume document, with a maximum length of 255 characters. This required field (non-nullable) can be used in SQL queries to access or verify resume documentation for job candidates, and is commonly used in conjunction with application status fields to track complete application submissions."
hr_applicant_infos,social_link,text,YES,,,,,,65535.0,,,"The social_link column in the hr_applicant_infos table stores URLs or handles for applicants' social media profiles (such as LinkedIn, Twitter, or GitHub), allowing recruiters to review candidates' online professional presence. When querying this optional text field, consider using string manipulation functions or NULL checks since not all applicants may provide social media links."
hr_applicant_infos,employment_start_date,date,YES,,,,,,,,,"The employment_start_date column in the hr_applicant_infos table records the date when an applicant is expected to or has started their employment with the company. This optional date field can be used in SQL queries to filter or analyze applicant records based on their employment timeline, such as finding all applicants who started within a specific date range or identifying pending start dates."
hr_applicant_infos,status,tinyint(1),NO,MUL,,1,,,,3.0,0.0,"The 'status' column in the hr_applicant_infos table is a required tinyint(1) field that indicates the current state of a job applicant in the recruitment process, where different numeric values represent distinct application statuses (e.g., 0 for pending, 1 for active, etc.). This indexed column (MUL) is commonly used in WHERE clauses to filter applicants by their current status and in JOIN operations to connect with related status lookup tables."
hr_applicant_infos,do_not_hire,tinyint(1),YES,,,0,,,,3.0,0.0,"The `do_not_hire` column in the hr_applicant_infos table is a boolean flag (stored as tinyint(1)) that indicates whether an applicant should not be considered for future employment. When querying this column, use 1 to filter for candidates marked as ""do not hire"" and 0 for eligible candidates, with NULL potentially indicating that no determination has been made yet."
hr_applicant_infos,access_code,varchar(16),YES,,,,,,16.0,,,"The access_code column in hr_applicant_infos stores a unique alphanumeric identifier (up to 16 characters) that may be assigned to job applicants for accessing their application portal or tracking their application status. Since this field is nullable, not all applicants may have an access code assigned, so queries should handle NULL values appropriately when filtering or joining based on this column."
hr_applicant_infos,referrer_employee_id,int,YES,,,,,,,10.0,0.0,"The referrer_employee_id column in the hr_applicant_infos table is used to track which existing employee (if any) referred the job applicant to the company. When querying this nullable integer column, you can join it with an employees table to get information about the referring employee, or use it to analyze employee referral patterns in the recruitment process."
hr_applicant_infos,additional_email1,varchar(100),YES,,,,,,100.0,,,"The additional_email1 column in the hr_applicant_infos table stores a secondary email address for job applicants, allowing for alternative contact methods during the recruitment process. When writing queries, this optional field (nullable) can be used to reach candidates through multiple channels, though you should always check for NULL values when filtering or joining on this column."
hr_applicant_infos,additional_email2,varchar(100),YES,,,,,,100.0,,,"The additional_email2 column in the hr_applicant_infos table stores a secondary alternate email address for job applicants, allowing for multiple contact methods. When writing queries, this optional field can be used to reach candidates through an alternative email channel, though it may be NULL since not all applicants provide multiple email addresses."
hr_applicant_infos,additional_email3,varchar(100),YES,,,,,,100.0,,,"The additional_email3 column in the hr_applicant_infos table stores an optional tertiary email address for job applicants, allowing up to 100 characters. This field can be used in SQL queries when you need to access alternative contact information for candidates, though being nullable means you should handle potential NULL values appropriately in your queries."
hr_applicant_infos,additional_phone1,varchar(250),YES,,,,,,250.0,,,"The additional_phone1 column in the hr_applicant_infos table stores an optional secondary phone number for job applicants, allowing for alternative contact methods when the primary phone number is unavailable. When querying this column, keep in mind that it may contain NULL values since it's not mandatory, and you should use appropriate NULL handling functions (like COALESCE or IS NULL) when filtering or displaying this data."
hr_applicant_infos,additional_phone2,varchar(250),YES,,,,,,250.0,,,"The additional_phone2 column in the hr_applicant_infos table stores a secondary alternate phone number for job applicants, allowing for multiple contact options when primary methods are unavailable. When querying this optional field, be aware that it may contain NULL values, and it accepts phone numbers in various formats up to 250 characters in length."
hr_applicant_infos,additional_phone3,varchar(250),YES,,,,,,250.0,,,"The additional_phone3 column in the hr_applicant_infos table stores an optional third alternative phone number for job applicants, allowing up to 250 characters in varchar format. When querying this column, keep in mind that it may contain NULL values since it's not required, and it should be used in conjunction with primary contact information when needing to reach applicants through multiple channels."
hr_applicant_infos,birthday,date,YES,,,,,,,,,"The birthday column in the hr_applicant_infos table stores the date of birth for job applicants in a standard date format (YYYY-MM-DD). This column can be used in SQL queries to calculate applicants' ages, filter candidates by age requirements, or perform age-related analytics, though it's worth noting that the field is optional (nullable) in the database."
hr_applicant_infos,other_languages,text,YES,,,,,,65535.0,,,"The `other_languages` column in the `hr_applicant_infos` table stores text data about additional languages that job applicants can speak or write, beyond their primary language. When querying this column, you can use text-based operations to search for specific language skills or patterns, and since it's nullable, remember to handle NULL values appropriately when filtering or analyzing language requirements for positions."
hr_applicant_infos,address,varchar(255),YES,,,,,,255.0,,,"The `address` column in the `hr_applicant_infos` table stores the physical mailing address of job applicants as a text string up to 255 characters long. Since this field is nullable, it can be used in SQL queries with NULL checks when filtering or analyzing applicant location data, and it's commonly used for geographic analysis or communication purposes in the recruitment process."
hr_applicant_infos,city,int,YES,,,,,,,10.0,0.0,"The 'city' column in the hr_applicant_infos table stores the city identifier (as an integer) where each job applicant is located, and can be null if the city information is not provided. When writing queries, this column can be joined with a cities reference table to get the actual city names, and it's commonly used for filtering applicants by location or analyzing geographical distribution of candidates."
hr_applicant_infos,province,int,YES,,,,,,,10.0,0.0,"The 'province' column in the hr_applicant_infos table stores the numerical identifier (ID) representing the province or state where the job applicant resides. When querying applicant data, this integer value can be used to filter or group candidates by their geographical location, though the column allows NULL values for cases where the province information is not provided or applicable."
hr_applicant_infos,postal_code,varchar(255),YES,,,,,,255.0,,,"The postal_code column in the hr_applicant_infos table stores the zip or postal code of job applicants' addresses as a variable-length string. This optional field can be used in SQL queries to filter or group applicants by geographic location, making it useful for analyzing candidate distribution or targeting recruitment efforts in specific areas."
hr_applicant_infos,created_at,datetime,NO,,,,,,,,,The created_at column in the hr_applicant_infos table records the exact date and time when an applicant's record was first created in the HR system. This non-nullable datetime field is useful for tracking application submission timing and can be used in SQL queries to filter or sort applicants based on when they entered the recruitment process.
hr_applicant_infos,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_applicant_infos table records the timestamp of when an applicant's record was last modified, automatically tracking changes to any applicant information. This datetime field is mandatory (non-nullable) and can be used to track the recency of applicant data or filter candidates based on when their information was last updated."
hr_applicant_linked_profiles,hr_applicant_linked_profile_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_applicant_linked_profile_id is the primary key column in the hr_applicant_linked_profiles table, uniquely identifying each external professional profile link associated with job applicants. This non-nullable integer column should be used in JOIN operations when connecting applicant profile links to other recruitment-related tables, and can be referenced in WHERE clauses when querying specific profile entries."
hr_applicant_linked_profiles,hr_applicant_info_id,int,NO,,,,,,,10.0,0.0,"The hr_applicant_info_id column serves as a reference to connect external professional profiles with their corresponding job applicant records. When writing SQL queries, use this column to join with the main applicant information table to retrieve or filter profile links for specific candidates."
hr_applicant_linked_profiles,profile_type,tinyint(1),NO,,,,,,,3.0,0.0,"The profile_type column in hr_applicant_linked_profiles is a required numeric field using tinyint(1) that categorizes the type of professional profile link being stored (e.g., 1 for LinkedIn, 2 for GitHub, etc.). When querying this column, use numeric values to filter or group different types of professional profiles, such as ""WHERE profile_type = 1"" to find all LinkedIn profiles associated with job applicants."
hr_applicant_linked_profiles,profile_type_id,int,NO,,,,,,,10.0,0.0,"The profile_type_id column is a required integer field that categorizes the type of professional profile being stored (such as LinkedIn, GitHub, or personal portfolio). When writing queries, this column can be used to filter or group external profile links by their platform type, making it easier to find specific types of professional profiles for job applicants."
hr_applicant_linked_profiles,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in hr_applicant_linked_profiles records the timestamp when each professional profile link was first added to the system, automatically populated with CURRENT_TIMESTAMP when a new record is inserted. This datetime field is useful for tracking when applicant profiles were linked and can be used in SQL queries for temporal analysis, such as finding recently added profiles or filtering links added within specific time periods."
hr_applicant_linked_profiles,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `hr_applicant_linked_profiles` table automatically records the timestamp when a professional profile link record is modified, using the CURRENT_TIMESTAMP value. When writing SQL queries, this column can be useful for tracking the recency of profile link updates or filtering records based on when they were last changed, such as finding all profile links updated within the last 30 days."
hr_applicant_reactivates,reactivate_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The reactivate_id column serves as the primary key in the hr_applicant_reactivates table, uniquely identifying each instance when a job applicant is reactivated in the hiring system. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific reactivation events (e.g., WHERE reactivate_id = X)."
hr_applicant_reactivates,reason_id,int,NO,,,,,,,10.0,0.0,"The reason_id column in hr_applicant_reactivates is a required integer field that references the specific reason why an applicant was reactivated in the hiring system. When querying this table, use this column to filter or group reactivation instances by their associated reasons, likely joining with a reference table that contains the full descriptions of these reactivation reasons."
hr_applicant_reactivates,hr_hiring_step_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_step_id column in the hr_applicant_reactivates table is a required integer field that identifies the specific hiring step or stage where the applicant is being reactivated in the recruitment process. When querying this column, it can be used to join with other hiring-related tables to understand at which point in the hiring workflow the reactivation occurred, or to analyze patterns in where applicants are most commonly reactivated."
hr_applicant_reactivates,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_applicant_reactivates table records the exact date and time when an applicant's record was reactivated in the hiring system. This non-nullable datetime field is essential for tracking the chronological sequence of reactivations and can be used in SQL queries for filtering, sorting, or analyzing patterns in applicant reactivation timing."
hr_applicant_reactivates,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_applicant_reactivates table records the exact date and time when an applicant's reactivation record was last modified. This non-nullable datetime field is essential for tracking the chronological sequence of changes in applicant reactivation records and can be used in SQL queries for filtering recent updates, generating audit trails, or analyzing reactivation patterns over time."
hr_applicant_reactivates,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_applicant_reactivates table is a required integer field that stores the ID of the user (likely an HR staff member or system administrator) who initiated the applicant reactivation process. When writing queries, this column can be used to join with a users or employees table to identify who performed specific reactivation actions, or to filter/group reactivation records by the person who created them."
hr_applicant_reactivates,updated_by,int,NO,,,,,,,10.0,0.0,"The `updated_by` column in the hr_applicant_reactivates table stores the unique identifier (integer) of the HR staff member or system user who performed the applicant reactivation action. This mandatory field (non-nullable) helps maintain an audit trail of who authorized or processed each applicant reactivation, which is crucial for accountability and tracking purposes in the hiring system."
hr_applicant_steps,hr_applicant_steps_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_applicant_steps_id is the primary key column that uniquely identifies each step record in the hiring process workflow. When writing queries, use this column for joining to related tables or filtering specific applicant steps, as it serves as the main identifier for tracking individual stages in the recruitment process."
hr_applicant_steps,hr_applicant_info_id,int,NO,,,,,,,10.0,0.0,"The hr_applicant_info_id column serves as a reference to connect each applicant's recruitment steps with their main profile information. When writing SQL queries, use this column to join with the primary applicant information table to access comprehensive details about the candidate while analyzing their progress through the hiring workflow."
hr_applicant_steps,hr_hiring_process_step_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_process_step_id column in the hr_applicant_steps table serves as a reference to identify specific steps within the hiring process workflow. When writing SQL queries, use this integer column to filter, join, or group applicant records by their respective hiring process steps, such as when tracking which candidates are in specific stages like initial screening, interviews, or background checks."
hr_applicant_steps,created_at,datetime,NO,,,,,,,,,The created_at column in the hr_applicant_steps table records the exact date and time when each applicant step record was initially created in the system. This timestamp can be used to track when applicants entered specific stages of the hiring process and is commonly used in queries for filtering recent entries or analyzing the timeline of the recruitment workflow.
hr_applicant_steps,updated_at,datetime,NO,,,,,,,,,"The `updated_at` column in the `hr_applicant_steps` table stores the timestamp of when an applicant's recruitment step was last modified, automatically recording changes to their application progress. This datetime field is mandatory (non-nullable) and is useful for tracking the chronological sequence of recruitment activities, making it valuable for queries that need to analyze recent changes or track the timeline of an applicant's journey through the hiring process."
hr_applicant_timelines,hr_applicant_timeline_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_applicant_timeline_id is the primary key column in the hr_applicant_timelines table, uniquely identifying each recruitment event or milestone record. Use this column when you need to join with related tables or filter specific timeline entries, particularly in WHERE clauses or JOIN conditions where unique identification of recruitment events is required."
hr_applicant_timelines,hr_applicant_id,int,YES,,,,,,,10.0,0.0,"The hr_applicant_id column serves as a reference identifier linking each timeline entry to a specific job applicant in the recruitment process. This integer field can be used to filter or join with other HR tables to track an individual applicant's progress through various recruitment stages, making it essential for queries that need to analyze or report on specific applicant journeys."
hr_applicant_timelines,hr_request_id,int,YES,,,,,,,10.0,0.0,"The hr_request_id column in the hr_applicant_timelines table serves as a reference to the original HR request or job requisition associated with an applicant's recruitment journey. When querying applicant timeline events, this column can be used to filter or join with related HR request data to understand which job opening or position the timeline events belong to."
hr_applicant_timelines,email,varchar(255),NO,,,,,,255.0,,,"The 'email' column in the hr_applicant_timelines table stores the applicant's email address as a unique identifier and primary means of contact throughout the recruitment process. This required field (non-nullable) can be used to join with other HR tables or filter specific applicant records, making it essential for tracking and querying individual candidate's recruitment journey."
hr_applicant_timelines,event_name,varchar(255),NO,,,,,,255.0,,,"The event_name column in hr_applicant_timelines stores the specific name or type of recruitment event that occurred, such as ""Initial Application Submitted,"" ""Phone Interview,"" or ""Final Offer Extended."" This required (non-nullable) text field is essential for querying and filtering applicant timeline events, and can be used to analyze the progression of candidates through different recruitment stages."
hr_applicant_timelines,old_value,text,NO,,,,,,65535.0,,,"The ""old_value"" column in the hr_applicant_timelines table stores the previous state or value of an applicant's status before a change occurred in their recruitment process. When constructing SQL queries, this column can be used to track historical changes and analyze transitions between different recruitment stages, making it particularly useful in before-and-after comparisons or audit trail queries."
hr_applicant_timelines,new_value,text,NO,,,,,,65535.0,,,"The ""new_value"" column in hr_applicant_timelines stores the updated status or value that an applicant's recruitment stage has changed to during the hiring process (e.g., ""Interview Scheduled"", ""Assessment Complete"", ""Offer Extended""). When querying this column, it's commonly used to track status transitions or filter for specific recruitment stages, and since it's non-nullable, every timeline entry will have a defined new state."
hr_applicant_timelines,reason,text,NO,,,,,,65535.0,,,"The ""reason"" column in hr_applicant_timelines stores the explanation or justification for each status change or milestone in an applicant's recruitment journey. This required text field helps document why specific decisions were made or actions were taken during the recruitment process, such as reasons for advancing candidates to next stages, scheduling delays, or rejection rationales."
hr_applicant_timelines,hr_hiring_process_step_id,int,YES,,,,,,,10.0,0.0,"The hr_hiring_process_step_id column in hr_applicant_timelines serves as a reference to identify specific stages or steps in the recruitment process, such as initial screening, first interview, or final offer. When writing SQL queries, this column can be used to filter or group applicant timeline events by specific recruitment stages, helping track where candidates are in the hiring pipeline."
hr_applicant_timelines,user_id,int,YES,,,,,,,10.0,0.0,"The user_id column in hr_applicant_timelines serves as a reference to identify individual job applicants throughout their recruitment journey. This nullable integer field can be used to filter or group recruitment timeline events by specific applicants, making it useful for queries that need to analyze or track the progression of particular candidates through the hiring process."
hr_applicant_timelines,created_id,int,YES,,,,,,,10.0,0.0,"The `created_id` column in the `hr_applicant_timelines` table stores the unique identifier of the user or system that created the timeline entry, allowing for audit tracking of who initiated each recruitment process event. This optional integer field can be used in JOIN operations with user/system tables to retrieve creator information, and is commonly used in WHERE clauses when filtering timeline entries by their creator."
hr_applicant_timelines,created_at,timestamp,YES,,,,,,,,,"The created_at column in the hr_applicant_timelines table stores the timestamp when an applicant's recruitment event or milestone was first recorded in the system. This timestamp can be used to chronologically order recruitment events, track application progress over time, and is particularly useful in queries that need to analyze the timing of different stages in the recruitment process (e.g., ""SELECT * FROM hr_applicant_timelines WHERE created_at >= '2023-01-01'"")."
hr_applicant_timelines,updated_at,timestamp,YES,,,,,,,,,"The `updated_at` column in the hr_applicant_timelines table stores the timestamp of when a particular recruitment event or status change was last modified. This column is useful for tracking the recency of recruitment activities and can be used in SQL queries to analyze application processing times, identify recent changes, or sort events chronologically."
hr_department_images,dept_image_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The dept_image_id column serves as the primary key identifier for each image record in the hr_department_images table, using auto-incrementing integers to ensure unique identification. When writing queries, use this column to uniquely reference specific HR department images, join with related tables, or filter image records."
hr_department_images,department_image,varchar(255),YES,,,,,,255.0,,,"The department_image column in hr_department_images stores file paths or URLs (as text strings up to 255 characters) that point to HR-related image assets like employee photos or event pictures. When querying this column, you can use standard string operations to search, filter, or join based on image file paths, and since it's nullable, remember to handle potential NULL values appropriately in your queries."
hr_department_images,department_id,int,NO,,,,,,,10.0,0.0,"The department_id column in the hr_department_images table is a required integer field that identifies which department an image belongs to, though it appears to be specifically used for HR department assets. When querying this table, use this column to filter or join with other department-related tables to find images associated with specific departments."
hr_department_images,parent_id,int,NO,,,,,,,10.0,0.0,"The parent_id column in the hr_department_images table is a required integer field that establishes hierarchical relationships between images, likely connecting an image to its parent resource (such as linking an employee photo to their employee record or connecting an event photo to its event entry). When writing queries, this column can be used in JOIN operations to connect images with their parent records or to filter images based on their associated parent resources."
hr_department_images,team_id,int,NO,,,,,,,10.0,0.0,"The team_id column in the hr_department_images table is a required integer field that associates each image with a specific team or department within the organization. This column can be used to filter or group images by team, making it useful for queries that need to retrieve images related to particular organizational units or departments."
hr_department_images,is_default_image,tinyint,NO,,,,,,,3.0,0.0,"The `is_default_image` column in the hr_department_images table is a boolean flag (stored as tinyint) that indicates whether an image is designated as the default or primary image for its associated HR asset or material. When querying this table, you can use this column with values 0 (false) or 1 (true) to filter for or identify default images, which is particularly useful when you need to retrieve the main representative image from a set of related images."
hr_department_images,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in the hr_department_images table is a required (non-nullable) tinyint field that likely represents the current state of an HR image asset using numeric codes (e.g., 1 for active, 0 for inactive, 2 for archived, etc.). When querying this table, the status column can be used to filter images based on their current state, helping to identify which images are available for use in HR materials or require attention."
hr_department_images,size,"decimal(11,0)",YES,,,,,,,11.0,0.0,"The 'size' column in the hr_department_images table stores the file size of HR-related images in bytes, represented as a decimal number up to 11 digits. This column can be used to filter or sort images based on their file size, which is particularly useful when managing storage space or identifying large files that might need optimization, and can be NULL if the file size is unknown or not recorded."
hr_department_images,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_department_images table records the timestamp when each image file was initially added to the HR department's image repository. When querying this column, you can use datetime functions and comparisons to filter or sort images based on their upload dates, with the default value being automatically set to the current timestamp when no explicit value is provided."
hr_direct_report_role,hr_approver_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_approver_id column is a primary key in the hr_direct_report_role table that uniquely identifies supervisors or managers who have direct reports in the organization. When writing SQL queries, use this column to join with employee tables or filter for specific approvers, particularly when tracking reporting relationships or building organizational hierarchy queries."
hr_direct_report_role,role_id,int,NO,,,,,,,10.0,0.0,"The role_id column in the hr_direct_report_role table is a required integer field that identifies specific roles within the organizational reporting structure. When writing queries, this column can be used to filter or join on specific reporting roles, helping to analyze or retrieve information about particular positions in the organizational hierarchy."
hr_direct_report_role,approver_id,int,NO,,,,,,,10.0,0.0,"The approver_id column in the hr_direct_report_role table represents the unique identifier of the employee who serves as a supervisor or manager in a reporting relationship. When writing SQL queries, use this mandatory integer column to join with employee tables or filter reporting relationships based on specific supervisors, making it essential for queries involving management hierarchy analysis or approval chain workflows."
hr_direct_report_role,approver_type,tinyint,NO,,,,,,,3.0,0.0,"The approver_type column in the hr_direct_report_role table is a required numeric field (tinyint) that classifies the type or level of approval authority within the organizational hierarchy. When writing SQL queries, this column can be used to filter or group reporting relationships based on different approval categories, making it useful for identifying specific types of supervisory roles or approval workflows in the reporting structure."
hr_direct_report_role,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_direct_report_role table stores the employee ID (as an integer) of the user who created the reporting relationship record. This mandatory field (non-nullable) is commonly used in WHERE clauses or JOINs to track or audit who established specific reporting relationships, and can be joined with an employee or user table to get the creator's details."
hr_direct_report_role,updated_by,int,NO,,,,,,,10.0,0.0,"The `updated_by` column in the `hr_direct_report_role` table stores the employee ID (as an integer) of the user who last modified a reporting relationship record. This required field is essential for audit tracking and accountability, helping to maintain a history of who made changes to reporting line assignments within the organization's hierarchy."
hr_direct_report_role,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_direct_report_role table records the exact date and time when a direct reporting relationship was first established in the system. This non-nullable datetime field is useful for auditing purposes and can be used in SQL queries to filter or analyze when reporting relationships were created, such as finding new reporting assignments within a specific time period or tracking historical organizational changes."
hr_direct_report_role,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_direct_report_role table stores the timestamp of when a reporting relationship or role assignment was last modified, using a datetime format. This column is mandatory (non-nullable) and can be used in SQL queries to track changes, filter for recent updates, or analyze the history of reporting relationship modifications within the organization's hierarchy."
hr_document_access_code,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the hr_document_access_code table, uniquely identifying each access code record with an auto-incrementing integer value. When writing queries, this column can be used for precise record selection, joining with related tables, or tracking specific access code entries in the HR document system."
hr_document_access_code,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the hr_document_access_code table is a required integer field that identifies which user is associated with a particular document access code. This column can be used to join with user tables or filter access codes by specific users, making it essential for tracking who has been granted access to HR documents."
hr_document_access_code,user_type,int,NO,,,,,,,10.0,0.0,"The user_type column in the hr_document_access_code table is a required integer field that categorizes the type of user who has been granted access to HR documents (e.g., 1 for employees, 2 for managers, 3 for HR staff, etc.). When writing queries, this column can be used to filter or group access codes based on user roles, helping to enforce proper access control and generate role-based access reports."
hr_document_access_code,access_code,varchar(15),NO,,,,,,15.0,,,"The access_code column in the hr_document_access_code table stores unique alphanumeric codes (up to 15 characters) that are used to grant and control access to HR documents. When writing SQL queries, this required field can be used to look up specific document access permissions or validate access attempts, commonly appearing in WHERE clauses or JOIN conditions (e.g., WHERE access_code = 'ABC123')."
hr_document_access_code,access_token,text,NO,,,,,,65535.0,,,"The access_token column in the hr_document_access_code table stores unique text-based security tokens that are used to authenticate and authorize access to HR documents. This required field (non-nullable) serves as a secure identifier for document access permissions, and should be included in queries when validating or tracking document access attempts."
hr_document_access_code,access_url,text,NO,,,,,,65535.0,,,"The access_url column in the hr_document_access_code table stores the complete URL path used to access HR documents through a secure link system. When writing SQL queries, this required text field can be used to retrieve or verify document access paths, and it's commonly used in WHERE clauses to look up specific document access records or in JOIN operations to connect with related document access activities."
hr_document_access_code,status,tinyint,NO,,,0,,,,3.0,0.0,"The 'status' column in the hr_document_access_code table is a required (non-nullable) tinyint field that indicates the current state of an access code, likely using predefined numeric values (e.g., 0 for inactive, 1 for active). When writing queries, this column can be used to filter access codes based on their operational status, such as finding only active codes or identifying expired/revoked access permissions."
hr_document_access_code,created_by,int,NO,,,0,,,,10.0,0.0,"The `created_by` column in the hr_document_access_code table stores the employee ID (as an integer) of the person who generated the access code, and this field is mandatory (non-nullable). When writing queries, this column can be used to track or filter access codes by their creator, and it's commonly joined with an employee or user table to get the creator's details."
hr_document_access_code,updated_by,int,NO,,,0,,,,10.0,0.0,"The `updated_by` column in the hr_document_access_code table stores the employee ID (as an integer) of the person who last modified the access code record, and this field is mandatory (non-nullable). When writing queries, this column can be used to track who made changes to access codes and can be joined with an employee or user table to get detailed information about who performed updates."
hr_document_access_code,created_at,datetime,YES,,,,,,,,,"The created_at column in the hr_document_access_code table records the timestamp when each access code was initially generated in the system. This datetime field can be used in SQL queries to filter or sort access codes by their creation date, which is particularly useful for auditing purposes or identifying recently generated codes."
hr_document_access_code,updated_at,datetime,YES,,,,,,,,,The `updated_at` column in the `hr_document_access_code` table records the timestamp of when an access code record was last modified. This datetime field helps track changes to access code records and can be useful for auditing purposes or filtering records based on when they were last updated.
hr_document_settings,hr_document_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_document_id column serves as the primary key in the hr_document_settings table, uniquely identifying each HR document configuration record. When writing SQL queries, use this non-nullable integer column for joining with related tables or when specifically targeting individual HR document settings records."
hr_document_settings,document,varchar(255),NO,,,,,,255.0,,,"The 'document' column in the hr_document_settings table stores the name or identifier of specific HR document types (as a string up to 255 characters) for which configuration settings are being defined. When writing SQL queries, this required field can be used to filter or group settings by document type, such as ""offer_letter"", ""performance_review"", or ""termination_notice""."
hr_document_settings,document_fr,varchar(255),NO,,,,,,255.0,,,"The document_fr column in the hr_document_settings table stores the French language version or translation of HR document names, labels, or descriptions, with a maximum length of 255 characters. This required field (non-nullable) is essential for maintaining multilingual support in HR document management, particularly for French-language interfaces or documentation needs."
hr_document_settings,document_type,int,NO,,,,,,,10.0,0.0,"The document_type column in the hr_document_settings table is a required integer field that categorizes different types of HR documents (such as contracts, performance reviews, or benefits forms) for configuration purposes. When writing queries, this column can be used to filter or group HR document settings based on specific document categories, making it essential for retrieving type-specific configuration parameters."
hr_document_settings,expiry_date,int,NO,,,,,,,10.0,0.0,"The expiry_date column in the hr_document_settings table stores the number of days that HR documents should be retained before expiration, represented as an integer value. This required field is essential for implementing document retention policies and can be used in SQL queries to calculate when specific HR documents should be archived or deleted (e.g., WHERE document_date + expiry_date < CURRENT_DATE)."
hr_document_settings,onboarding_package,tinyint,NO,,,0,,,,3.0,0.0,"The onboarding_package column in the hr_document_settings table is a required boolean-like field (tinyint) that controls whether a standard onboarding document package is enabled or disabled for new hires. When querying this column, use 0 or 1 values to filter or update settings related to the onboarding package configuration, such as ""WHERE onboarding_package = 1"" to find enabled onboarding package settings."
hr_document_settings,allow_deadline_date,int,NO,,,,,,,10.0,0.0,"The allow_deadline_date column in the hr_document_settings table is a required integer field that controls whether deadline dates can be set for HR documents. When querying this column, use it as a boolean flag (typically 0 or 1) to determine if deadline date functionality is enabled or disabled for document processing workflows."
hr_document_settings,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in the hr_document_settings table is a required integer field that identifies the specific user associated with HR document configuration preferences. This column can be used to filter or join queries when you need to retrieve or modify document settings for particular users within the HR system.
hr_document_settings,description,text,YES,,,,,,65535.0,,,"The 'description' column in the hr_document_settings table stores detailed explanatory text about specific HR document configuration settings or preferences. This optional (nullable) text field can be used to provide context, purpose, or additional information about each configuration entry, making it useful for filtering or documenting settings in queries where you need to understand the purpose of specific HR document configurations."
hr_document_settings,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_document_settings table records the timestamp when each HR document configuration setting was initially created in the system, automatically populated with CURRENT_TIMESTAMP. When querying this column, it's useful for auditing purposes and tracking when specific HR document settings were established, and can be used in WHERE clauses or ORDER BY statements to filter or sort records based on their creation time."
hr_document_settings,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_document_settings table automatically tracks when HR document configuration settings were last modified, storing this information as a datetime value. This column is useful for auditing changes and can be used in SQL queries to filter or sort settings based on their modification time, such as finding recently updated configurations or identifying settings that haven't been reviewed within a certain timeframe."
hr_document_settings,allow_multiples,tinyint,NO,,,0,,,,3.0,0.0,"The `allow_multiples` column in the hr_document_settings table is a boolean flag (stored as tinyint) that determines whether multiple instances of the same document type are permitted in the HR system. When querying this column, use 0 to filter for document types that must remain unique and 1 to identify document types that can have multiple versions or copies."
hr_document_settings,action_required,int,YES,,,,,,,10.0,0.0,"The action_required column in the hr_document_settings table is an integer flag that indicates whether specific HR documents require user action or intervention. When querying this column, use it to filter or identify document settings that need attention (typically where action_required = 1) versus those that don't require any action (action_required = 0 or NULL)."
hr_document_settings,status,tinyint,YES,,,,,,,3.0,0.0,"The 'status' column in the hr_document_settings table is a tinyint field that indicates the current state or activation status of HR document configuration settings. When writing queries, this column can be used to filter active or inactive document settings configurations, typically using values like 1 for active and 0 for inactive settings."
hr_document_types,hr_document_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_document_type_id column serves as the primary key in the hr_document_types table, uniquely identifying each type of HR document in the system. When writing SQL queries, use this column to join with other tables that reference HR document types or to specifically filter and retrieve information about particular document types."
hr_document_types,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the hr_document_types table stores the descriptive titles of different HR document types (e.g., ""Employment Contract,"" ""Performance Review,"" ""Benefits Enrollment Form"") as text strings up to 255 characters long. This required field serves as a human-readable identifier for each document type and can be used in SQL queries to filter, group, or join with other tables that reference specific HR document categories."
hr_documents,hr_document_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_document_id column serves as the primary key identifier for each document record in the hr_documents table, using auto-incrementing integer values. When querying HR documents, this column can be used to uniquely identify specific documents and establish relationships with other tables through foreign key references."
hr_documents,file_name,varchar(255),NO,,,,,,255.0,,,"The file_name column in the hr_documents table stores the name of each HR document or file, including its extension (e.g., ""employee_handbook.pdf"", ""vacation_request_form.docx""), with a maximum length of 255 characters. Since this is a required field (not nullable), every HR document record must have a file name specified, making it useful for searching, filtering, and identifying specific HR documents in queries."
hr_documents,hr_document_type_id,int,YES,,,,,,,10.0,0.0,"The hr_document_type_id column in the hr_documents table is an integer field that categorizes different types of HR documents (such as policies, forms, or employee records) through a type identifier. This column can be used in WHERE clauses to filter for specific document types or in JOIN operations to connect with a document types reference table, and since it's nullable, some documents may not have a specified type."
hr_documents,refrence_type,smallint,YES,,,,,,,5.0,0.0,"The ""refrence_type"" column in the hr_documents table is a smallint field that categorizes HR documents into different reference types or classifications. This column helps organize and filter HR documents based on their purpose or document category (such as policies, procedures, forms, etc.), making it useful in queries where you need to retrieve specific types of HR documentation."
hr_documents,referring_id,int,YES,,,,,,,10.0,0.0,"The referring_id column in the hr_documents table is an optional integer field that can be used to link HR documents to related records in other tables, such as employee IDs or policy reference numbers. This column enables tracking document relationships and hierarchies, allowing queries to establish connections between different HR-related documents or to their associated entities."
hr_documents,size,"decimal(11,0)",NO,,,,,,,11.0,0.0,"The 'size' column in the hr_documents table stores the file size of HR documents in bytes as a decimal number, allowing for large files up to 99,999,999,999 bytes (approximately 100GB). When querying this column, you can use it to filter or sort documents based on their file size, such as finding large documents that may need archiving or small documents like forms."
hr_documents,type,varchar(50),YES,,,,,,50.0,,,"The ""type"" column in the hr_documents table categorizes HR-related documents using text values up to 50 characters in length, indicating classifications such as 'policy', 'procedure', 'form', or 'employee_record'. When querying this column, you can use it to filter or group HR documents by their document type, making it useful for retrieving specific categories of HR documentation (e.g., SELECT * FROM hr_documents WHERE type = 'policy')."
hr_documents,status,tinyint,NO,,,,,,,3.0,0.0,"The `status` column in the hr_documents table is a required (non-nullable) tinyint field that indicates the current state of HR documents, likely using numeric codes to represent statuses such as active, archived, pending, or deleted. When querying HR documents, this column can be used to filter records based on their current status, making it useful for retrieving documents in specific states or monitoring document lifecycle stages."
hr_documents,created_at,datetime,YES,,,,,,,,,"The created_at column in the hr_documents table records the date and time when each HR document was initially added to the system. This datetime field can be used in SQL queries to filter documents by their creation date, track document chronology, or sort HR materials by age, making it particularly useful for auditing purposes and managing document lifecycles."
hr_documents,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the hr_documents table records the timestamp of when each HR document was last modified or updated in the system. This datetime field can be used to track document version history, filter for recently changed documents, or sort documents by their modification date, making it valuable for auditing changes and maintaining document chronology."
hr_documents,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the hr_documents table stores the user ID (as an integer) of the employee or system user who originally created or uploaded the HR document. This column can be used to track document ownership and authorship, and is commonly joined with a users or employees table to retrieve the creator's full details, though it can be null in cases where the creator is unknown or not tracked."
hr_documents,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the hr_documents table stores the user ID (as an integer) of the person who last modified the HR document record. This column helps track document changes and maintain an audit trail of who made updates to HR files, though it can be null if the last modifier is unknown or not recorded."
hr_email_flows,hr_email_flow_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_email_flow_id column serves as the primary key identifier for each unique email workflow configuration in the hr_email_flows table. When writing SQL queries, use this column to uniquely identify or join specific email workflow records, such as ""SELECT * FROM hr_email_flows WHERE hr_email_flow_id = 123"" for retrieving a specific workflow's details."
hr_email_flows,email_type,tinyint,NO,,,1,,,,3.0,0.0,"The `email_type` column in the `hr_email_flows` table is a required tinyint field that categorizes different types of HR email communications using numeric codes. When writing queries, use this column to filter or group email workflows by their specific type (e.g., onboarding emails, offboarding notifications, or general HR announcements), where each type is represented by a distinct numeric value."
hr_email_flows,email_template_id,int,NO,,,,,,,10.0,0.0,"The email_template_id column in the hr_email_flows table is a required integer field that identifies the specific email template used within an HR automated workflow. This column links to the template containing the actual email content and formatting, enabling the system to reference the correct template when executing HR communication processes like onboarding notifications or employee updates."
hr_email_flows,to_receipient,text,NO,,,,,,65535.0,,,"The `to_receipient` column in the `hr_email_flows` table stores the email address or recipient identifier for HR automated communications, and it's a required field (non-nullable). When writing queries, this column can be used to filter or group email workflows by their intended recipients, making it useful for analyzing communication patterns or managing email distributions to specific employees or groups."
hr_email_flows,stage,tinyint,YES,,,,,,,3.0,0.0,"The 'stage' column in the hr_email_flows table is a tinyint field that indicates the sequential position or phase of an email within an HR communication workflow. When querying this column, you can use it to filter or order emails based on their position in the workflow sequence (e.g., WHERE stage = 1 for initial emails or ORDER BY stage to see the full sequence of communications)."
hr_email_flows,employee_status,tinyint,YES,,,,,,,3.0,0.0,"The employee_status column in hr_email_flows is a tinyint field that indicates the employment state of recipients for whom the email workflow is relevant (e.g., 1 for active, 2 for terminated, 3 for on leave). When writing queries, this column can be used to filter or segment email workflows based on the intended recipient's employment status, making it useful for targeting specific groups of employees with appropriate HR communications."
hr_email_flows,applicant_status,tinyint,YES,,,,,,,3.0,0.0,"The `applicant_status` column in the hr_email_flows table is a tinyint field that indicates the current status of an applicant in the HR email workflow process. When writing SQL queries, this column can be used to filter or segment email templates based on different applicant stages (e.g., 1 for new applications, 2 for in review, 3 for interviewed), helping to target the appropriate email communications for each stage of the hiring process."
hr_email_flows,document_status,tinyint,YES,,,,,,,3.0,0.0,"The document_status column in hr_email_flows is a tinyint field that indicates the current state of an email workflow document, likely using small numeric values to represent statuses such as draft, active, archived, or pending. When querying this table, you can use this column to filter email workflows based on their operational status, helping to identify which templates and configurations are currently in use or ready for deployment in HR communications."
hr_email_flows,event_status,tinyint,YES,,,,,,,3.0,0.0,"The event_status column in hr_email_flows is a tinyint field that indicates the current state of an email workflow event (e.g., 0 for pending, 1 for active, 2 for completed, etc.). When querying this column, you can use numeric comparisons to filter email workflows based on their status, making it useful for tracking the progress of HR communication sequences and identifying workflows in specific states."
hr_email_flows,absence_status,tinyint,YES,,,,,,,3.0,0.0,"The `absence_status` column in the hr_email_flows table is a tinyint flag that indicates whether an email workflow is currently active or temporarily disabled due to absence-related conditions. When querying this table, you can use this column to filter or identify email workflows based on their availability status, where typical values might be 0 for active workflows and 1 for temporarily suspended ones."
hr_email_flows,email_days_before,int,YES,,,,,,,10.0,0.0,"The `email_days_before` column in the `hr_email_flows` table specifies the number of days before a scheduled HR event that an automated email should be sent. This integer value helps control the timing of automated HR communications, allowing for scheduling emails in advance of key events (for example, setting it to 7 would trigger an email 7 days before an onboarding date or other HR milestone)."
hr_email_flows,email_time,time,YES,,,,,,,,,"The email_time column in the hr_email_flows table specifies the scheduled time of day when automated HR emails should be sent, stored in a standard time format (HH:MM:SS). This column is used to control the timing of automated email dispatches within HR workflows, allowing queries to filter or schedule emails based on specific times of day, though it can be left null if timing is not relevant for a particular email flow."
hr_email_flows,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_email_flows table records the exact date and time when each email workflow configuration was initially created in the system. This non-nullable datetime field is useful for auditing purposes and can be used in SQL queries to filter or sort email workflows by their creation date, such as finding recently created workflows or analyzing workflow creation patterns over time."
hr_email_flows,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_email_flows table is a mandatory datetime field that records when each email workflow configuration was last modified. This timestamp automatically updates whenever changes are made to an email workflow record, making it useful for tracking the recency of workflow configurations and auditing changes to HR communication templates."
hr_email_flows,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_email_flows table is a required integer field that stores the user ID of the employee who created the email workflow configuration. This column helps track ownership and accountability of email templates and workflows, and can be used to join with a users or employees table to get detailed information about who created specific HR email configurations."
hr_email_flows,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the hr_email_flows table stores the user ID (as an integer) of the employee who last modified the email workflow configuration or template. This column helps track changes and maintain accountability in the HR email system, though it can be null if the update tracking is not required or if it's an automated system update."
hr_email_flows,birth_versary_mail_sent_date,datetime,YES,,,,,,,,,"The birth_versary_mail_sent_date column in hr_email_flows records the timestamp when birthday or work anniversary-related automated emails were last sent to employees. This column can be used to track and manage the timing of celebratory email communications, helping prevent duplicate sends and enabling queries to determine when the next batch of birthday/anniversary emails should be scheduled."
hr_email_flows,engagement_hub_status,tinyint,YES,,,,,,,3.0,0.0,"The engagement_hub_status column in hr_email_flows is a tinyint flag that indicates whether an email workflow is currently active or integrated with the HR engagement hub system. When querying this column, use it to filter or check the operational status of email workflows, where common values might be 1 for active/integrated and 0 for inactive/non-integrated states."
hr_email_flows,time_tracking_tool_status,tinyint,YES,,,,,,,3.0,0.0,"The time_tracking_tool_status column in hr_email_flows is a tinyint flag that indicates the current status of time tracking tool setup within an HR email workflow sequence. When querying this column, use it to filter or check the state of time tracking tool configurations (typically 0 or 1), which helps determine whether time tracking-related email notifications should be triggered or processed within the HR communication flow."
hr_email_receivers,hr_email_receiver_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_email_receiver_id column serves as the primary key in the hr_email_receivers table, uniquely identifying each email recipient record for HR communications. When writing SQL queries, use this column for joining to related tables or when you need to reference specific HR email recipients, and since it's non-nullable, you can rely on it always having a value."
hr_email_receivers,hr_email_template_id,int,NO,,,,,,,10.0,0.0,"The hr_email_template_id column in the hr_email_receivers table is a required integer field that links to specific HR email templates used for communications. When writing queries, this column can be used to filter or join with an email templates table to determine which type of HR communication template should be used for each recipient."
hr_email_receivers,receiver_type,tinyint(1),NO,,,,,,,3.0,0.0,"The receiver_type column in hr_email_receivers is a required binary flag (tinyint(1)) that categorizes email recipients into two distinct types, likely distinguishing between different classes of HR communication receivers (such as employees vs. external contacts, or primary vs. secondary recipients). When writing SQL queries, this column can be used in WHERE clauses to filter for specific recipient types using values 0 or 1."
hr_email_receivers,sent_message,text,NO,,,,,,65535.0,,,"The ""sent_message"" column in the hr_email_receivers table stores the actual content or body of HR-related messages that have been sent to recipients. This required (non-nullable) text field can be used to track and reference the full message content of HR communications, making it useful for queries that need to search through message history or verify what communications were sent."
hr_email_templates,hr_email_template_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_email_template_id column serves as the primary key identifier for each unique email template in the hr_email_templates table, using auto-incrementing integers. When querying the table, use this column to uniquely identify or join specific email templates, such as in WHERE clauses (e.g., WHERE hr_email_template_id = 1) or JOIN conditions."
hr_email_templates,subject,varchar(50),NO,,,,,,50.0,,,"The 'subject' column in the hr_email_templates table stores the email subject line text for each HR template, with a maximum length of 50 characters and cannot be null. When querying this column, it can be used to search for specific template types or to retrieve the appropriate subject line when generating HR communications from templates."
hr_email_templates,message,text,NO,,,,,,65535.0,,,"The 'message' column in the hr_email_templates table contains the main body text of HR email templates, storing the complete content with placeholders for customizable fields (e.g., {employee_name}, {start_date}). When querying this column, you can use text-based operations like LIKE or REGEXP to search for specific template content, and the column should always contain a value as it's marked as non-nullable."
hr_email_templates,send_message,varchar(255),NO,,,,,,255.0,,,"The `send_message` column in the `hr_email_templates` table contains the actual message content for HR email templates, with a maximum length of 255 characters. This required field (non-nullable) stores the standardized text that forms the body of HR communications, and may include placeholder variables that get replaced with specific information when the template is used."
hr_email_templates,send_type,tinyint(1),NO,,,1,,,,3.0,0.0,"The `send_type` column in the `hr_email_templates` table is a required boolean flag (tinyint(1)) that specifies the delivery method for the email template. When querying this column, use 1 to filter for templates that are sent one way and 0 for the alternative method, making it useful for segmenting templates by their intended delivery approach."
hr_email_templates,created_by,int,NO,,,,,,,10.0,0.0,The created_by column in the hr_email_templates table is a required integer field that stores the employee ID of the HR staff member who created the email template. This column helps track template authorship and can be joined with an employees or users table to retrieve information about the template creator.
hr_email_templates,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_email_templates table records the exact date and time when each email template was initially created in the system. This non-nullable datetime field is useful for tracking template version history and can be used in SQL queries to filter or sort templates by their creation date, such as finding recently added templates or analyzing template creation patterns over time."
hr_email_templates,updated_by,int,NO,,,,,,,10.0,0.0,"The updated_by column in hr_email_templates stores the employee ID (as an integer) of the HR staff member who last modified the email template. This mandatory field (non-nullable) helps track template changes and maintain accountability for content updates, making it useful in queries that need to audit template modifications or filter templates by their last editor."
hr_email_templates,updated_at,datetime,NO,,,,,,,,,"The updated_at column in hr_email_templates records the timestamp of when each email template was last modified, automatically tracking version history of template changes. This datetime field is commonly used in WHERE clauses to find recently modified templates or in ORDER BY clauses to sort templates by their modification date, helping HR staff identify the most current versions of their communication templates."
hr_employee_blacklists,hr_employee_blacklist_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_employee_blacklist_id is the primary key column in the hr_employee_blacklists table, serving as a unique identifier for each blacklist record. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific blacklist entries (e.g., WHERE hr_employee_blacklist_id = X)."
hr_employee_blacklists,type,tinyint,NO,MUL,,,,,,3.0,0.0,"The 'type' column in the hr_employee_blacklists table is a required tinyint field that categorizes the nature or severity of the blacklist entry, likely using predefined numeric codes to represent different types of violations or concerns. When querying this table, you can use the 'type' column to filter or group blacklist records based on specific categories of incidents, and its MUL key type indicates it's part of a multi-column index for optimized searching."
hr_employee_blacklists,type_id,int,NO,,,,,,,10.0,0.0,"The type_id column in hr_employee_blacklists is a required integer field that categorizes the specific reason or classification for an employee's blacklist status. When querying this table, use type_id to filter or group blacklist records by their classification type, such as misconduct, policy violations, or performance issues."
hr_employee_blacklists,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the hr_employee_blacklists table stores the full name of employees who have been blacklisted or flagged for concerns, requiring a non-null varchar value up to 255 characters. When querying this column, it's commonly used in WHERE clauses for exact matches or LIKE operations to search for specific individuals, and it's essential for identifying blacklisted employees during hiring processes."
hr_employee_blacklists,email,varchar(255),NO,,,,,,255.0,,,"The 'email' column in the hr_employee_blacklists table stores the email address of blacklisted employees as a required varchar field with a maximum length of 255 characters. This column can be used to uniquely identify blacklisted individuals and cross-reference with other HR systems, making it essential for queries that need to check if a potential hire or current employee has any blacklist records."
hr_employee_blacklists,phone_number,varchar(255),NO,,,,,,255.0,,,"The phone_number column in hr_employee_blacklists stores the contact telephone number of blacklisted employees as a required text field (maximum 255 characters). This column is essential for identifying and tracking blacklisted individuals across hiring processes, ensuring that recruiters can cross-reference candidates' phone numbers against this list to prevent rehiring of ineligible individuals."
hr_employee_blacklists,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_employee_blacklists table is a required integer field that stores the employee ID or user ID of the person who created the blacklist record. This column is essential for audit tracking and accountability, helping identify which HR staff member or system user added an employee to the blacklist."
hr_employee_blacklists,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_employee_blacklists table records the exact date and time when a blacklist entry was first created in the system. This non-nullable datetime field is useful for tracking when employees were added to the blacklist and can be used in SQL queries for temporal analysis, auditing, or filtering blacklist records by their creation date."
hr_employee_contacts,hr_employee_contact_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_employee_contact_id column serves as the primary key for the hr_employee_contacts table, uniquely identifying each contact record for employees in the HR system. This non-nullable integer column should be used in JOIN operations when linking employee contact information with other HR-related tables, and can be referenced in WHERE clauses when looking up specific contact records."
hr_employee_contacts,hr_employee_info_id,int,NO,MUL,,,,,,10.0,0.0,"The hr_employee_info_id column serves as a foreign key in the hr_employee_contacts table, linking each contact record to the corresponding employee's main information record. This integer column is required (non-nullable) and is indexed (MUL) to optimize join operations and lookups when connecting employee contact details with their primary employee records."
hr_employee_contacts,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the hr_employee_contacts table serves as a foreign key that links each contact record to a unique employee in the system. When writing queries, this column can be used to join with other employee-related tables and filter or group contact information for specific employees."
hr_employee_contacts,contact_type,varchar(255),YES,,,,,,255.0,,,"The contact_type column in the hr_employee_contacts table specifies the category or nature of the contact information being stored (such as 'email', 'phone', 'emergency_contact', or 'mailing_address'). When writing SQL queries, this column can be used to filter or group different types of contact information, making it useful for retrieving specific categories of employee contact details."
hr_employee_contacts,contact,varchar(255),YES,,,,,,255.0,,,"The 'contact' column in the hr_employee_contacts table stores various forms of contact information for employees as a text string up to 255 characters in length. When writing queries, this column can be used to search for or filter specific contact details, though its nullable property means you should handle potential NULL values appropriately in your WHERE clauses or joins."
hr_employee_contacts,is_primary,tinyint(1),NO,,,0,,,,3.0,0.0,"The `is_primary` column in the hr_employee_contacts table is a boolean flag (stored as tinyint(1)) that indicates whether a contact record is the employee's primary contact information. When querying this table, you can use this column to filter for primary contact records (WHERE is_primary = 1) or to ensure you're retrieving the main contact details for employees."
hr_employee_contacts,created_by,int,NO,,,0,,,,10.0,0.0,"The created_by column in the hr_employee_contacts table is a required integer field that tracks which user or system process created each employee contact record. This column is commonly used in WHERE clauses or JOINs to filter or analyze records based on their creator, and since it's non-nullable, it ensures accountability for every contact record in the system."
hr_employee_contacts,updated_by,int,NO,,,0,,,,10.0,0.0,"The `updated_by` column in the hr_employee_contacts table is a required integer field that tracks the ID of the user or system who last modified the contact record. When writing queries, this column can be used to audit changes or filter contact records based on who updated them, and should always be included when inserting or updating records since it cannot be null."
hr_employee_contacts,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_employee_contacts table records the timestamp when each employee contact record was initially created in the system, automatically populated with CURRENT_TIMESTAMP. When querying employee contact information, this column can be useful for auditing purposes or filtering records based on when they were added to the system, such as finding recently created contacts or analyzing contact record creation patterns over time."
hr_employee_contacts,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_employee_contacts table automatically tracks when an employee's contact information was last modified, storing this as a datetime value that defaults to the current timestamp. This column is useful for auditing changes and filtering records based on when they were last updated, making it valuable for queries that need to identify recently modified contact information or track the history of contact detail changes."
hr_employee_coupon,coupon_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The coupon_id column serves as the primary key in the hr_employee_coupon table, uniquely identifying each employee coupon or discount code record. When writing SQL queries, use this column for precise record lookups, joining with related tables, or filtering specific coupon records (e.g., SELECT * FROM hr_employee_coupon WHERE coupon_id = 123)."
hr_employee_coupon,coupon_type,text,NO,,,,,,65535.0,,,"The coupon_type column in the hr_employee_coupon table is a required text field that categorizes different types of employee discounts or benefits (e.g., 'MEAL', 'TRANSPORTATION', 'WELLNESS'). When querying this column, use string comparisons to filter or group coupons by their type, which is essential for analyzing benefit distribution and usage patterns across different categories of employee perks."
hr_employee_coupon,user_acount,varchar(255),NO,,,,,,255.0,,,"The user_acount column in the hr_employee_coupon table stores the unique identifier or username of employees who are associated with specific coupon codes. When writing SQL queries, this required (non-nullable) varchar field can be used to link coupon records to specific employees and track who has been assigned or has used particular discount codes."
hr_employee_coupon,user_id,int,YES,,,,,,,10.0,0.0,"The user_id column in the hr_employee_coupon table stores the unique identifier of employees who have been assigned or have used coupon codes in the HR system. This nullable integer field can be used to link coupon records with specific employees, making it useful for filtering coupon usage by employee or joining with other employee-related tables."
hr_employee_coupon,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_employee_coupon table stores the exact date and time when each employee coupon record was initially created in the system. This non-nullable datetime field is useful for tracking coupon creation history and can be used in SQL queries to filter or sort coupons by their creation date, such as finding recently created coupons or analyzing coupon creation patterns over time."
hr_employee_coupon,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the `hr_employee_coupon` table stores the employee ID (as an integer) of the HR staff member who created the coupon record. This optional field can be used in SQL queries to track or filter coupons based on their creator, and it's commonly joined with an employee or user table to retrieve the creator's details."
hr_employee_coupon,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `hr_employee_coupon` table stores the employee ID (as an integer) of the person who last modified the coupon record. This column is commonly used in WHERE clauses or JOINs with employee tables to track who made changes to coupon records, and being nullable means some coupon records may not have tracking information for their last update."
hr_employee_documents,hr_employee_document_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_employee_document_id column serves as the primary key in the hr_employee_documents table, uniquely identifying each employee document record with a non-nullable integer value. This column should be used in WHERE clauses when querying specific documents or when joining with related tables that reference employee documents."
hr_employee_documents,hr_employee_status_info_id,int,NO,,,,,,,10.0,0.0,"The hr_employee_status_info_id column in the hr_employee_documents table is a required integer field that links employee documents to their corresponding status information. This column can be used in JOIN operations to connect document records with employee status details, making it useful for queries that need to analyze document records in the context of an employee's current status or employment situation."
hr_employee_documents,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the hr_employee_documents table is a required integer field that identifies which employee a document belongs to. This column is commonly used to join with employee tables and filter documents for specific employees, making it essential for queries that need to retrieve or manage employee-specific documentation."
hr_employee_documents,user_type,"enum('employee','applicant')",NO,,,employee,,,9.0,,,"The user_type column in hr_employee_documents is a required field that categorizes document owners as either 'employee' or 'applicant', helping distinguish between current staff and potential hires. When querying this table, you can use this column to filter documents based on the user's status (e.g., WHERE user_type = 'employee' to retrieve only current employee documents)."
hr_employee_documents,hr_document_setting_id,int,NO,,,,,,,10.0,0.0,"The hr_document_setting_id column in the hr_employee_documents table is a required integer field that references document configuration settings for employee files. This column helps link each employee document to specific HR document policies, templates, or handling rules, enabling consistent document management across the organization."
hr_employee_documents,file_format,tinyint,YES,,,0,,,,3.0,0.0,"The `file_format` column in the hr_employee_documents table uses a tinyint value to indicate the format type of stored employee documents (such as PDF, DOC, JPG, etc.). When querying this column, you can use numeric values to filter or group documents by their file format, making it useful for operations like finding all documents of a specific type or validating format compatibility."
hr_employee_documents,file_name,varchar(255),YES,,,,,,255.0,,,"The file_name column in the hr_employee_documents table stores the name of employee-related documents, including their file extensions (e.g., ""john_smith_contract.pdf"", ""certification_2023.docx""), with a maximum length of 255 characters. When querying this column, it can be used to search for specific documents by name or to filter documents based on file types, though note that the column can contain NULL values if a file name hasn't been assigned yet."
hr_employee_documents,document_link,text,YES,,,,,,65535.0,,,"The document_link column in hr_employee_documents stores the URL or file path that points to the actual location of employee documents, such as contracts or certifications, in the system's storage. When querying this column, you can use string operations to search for specific document paths or patterns, and since it's nullable, remember to handle NULL values appropriately when documents haven't been uploaded yet."
hr_employee_documents,status,int,NO,,,,,,,10.0,0.0,"The 'status' column in the hr_employee_documents table is a required integer field that indicates the current state of an employee document (e.g., 1 for active, 2 for expired, 3 for pending review). When writing SQL queries, this column can be used to filter or group documents based on their current status, making it useful for tracking document validity and compliance requirements."
hr_employee_documents,expiring_date,date,YES,,,,,,,,,"The expiring_date column in the hr_employee_documents table represents the date when a specific employee document or certification becomes invalid or needs renewal. This optional date field is particularly useful for tracking document expirations in SQL queries, such as finding documents that are about to expire (WHERE expiring_date BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE, INTERVAL 30 DAY)) or identifying expired documents (WHERE expiring_date < CURRENT_DATE)."
hr_employee_documents,resubmission_reason,tinyint,YES,,,,,,,3.0,0.0,"The resubmission_reason column in hr_employee_documents uses a tinyint to encode different reasons why an employee document needed to be resubmitted (such as document expiration, errors, or quality issues). When querying this column, use numeric values to filter or group documents by their resubmission reasons, and consider that NULL values are allowed to indicate documents that haven't required resubmission."
hr_employee_documents,resubmission_desc,text,YES,,,,,,65535.0,,,"The resubmission_desc column in the hr_employee_documents table stores text descriptions explaining why a document needs to be resubmitted or was resubmitted by an employee. This optional field helps HR track the history and reasons for document resubmissions, such as ""expired certification"" or ""updated version required,"" making it useful in queries that analyze document compliance issues or track resubmission patterns."
hr_employee_documents,is_mail_sent,int,NO,,,0,,,,10.0,0.0,"The `is_mail_sent` column in the hr_employee_documents table is a binary flag (stored as an integer) that indicates whether a notification email has been sent regarding the document, where 0 typically means no email was sent and 1 means an email was sent. When querying this column, it can be used in WHERE clauses to filter documents based on their notification status, such as finding all documents where notifications are pending (`WHERE is_mail_sent = 0`)."
hr_employee_documents,uploaded_at,datetime,YES,,,,,,,,,"The uploaded_at column in the hr_employee_documents table records the date and time when each employee document was uploaded into the system. This datetime field can be used in SQL queries to filter documents by upload date, track document age, or sort documents chronologically, making it valuable for auditing document history and managing document lifecycle."
hr_employee_documents,uploaded_by,int,YES,,,,,,,10.0,0.0,"The `uploaded_by` column in the hr_employee_documents table is an integer field that stores the employee ID or user ID of the person who uploaded the document to the system. When writing queries, this column can be joined with an employees or users table to retrieve information about who uploaded specific documents, and it can be null in cases where the uploader information is not recorded or has been removed."
hr_employee_documents,created_by,int,YES,,,0,,,,10.0,0.0,"The `created_by` column in the hr_employee_documents table stores the employee ID (as an integer) of the user who initially uploaded or created the document record. This column helps track document ownership and audit trails, allowing queries to identify who added specific HR documents to the system, though it can be null in certain cases."
hr_employee_documents,updated_by,int,YES,,,0,,,,10.0,0.0,The `updated_by` column in the hr_employee_documents table stores the employee ID (as an integer) of the user who last modified the document record. This column helps track document changes for audit purposes and can be used to join with an employees table to get information about who made updates to HR documents.
hr_employee_documents,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_employee_documents table records the timestamp when an employee document was initially added to the system, automatically populated with CURRENT_TIMESTAMP when a new record is inserted. This datetime field is useful for tracking document chronology and can be used in SQL queries to filter or sort employee documents by their creation date, such as finding recently uploaded documents or analyzing document submission patterns over time."
hr_employee_documents,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_employee_documents table automatically tracks when an employee document record was last modified, storing this information as a datetime value. This column is useful for auditing document changes and can be used in SQL queries to filter or sort documents based on their last update time, such as finding recently modified documents or identifying records that haven't been updated within a specific timeframe."
hr_employee_documents,deadline_date,date,YES,,,,,,,,,"The deadline_date column in the hr_employee_documents table represents the due date or expiration date for employee-related documents, such as when certifications need to be renewed or when documents require updates. This optional date field helps HR teams track and manage document deadlines, enabling them to proactively maintain compliance and ensure timely document updates."
hr_employee_documents,employee_id,int,YES,,,,,,,10.0,0.0,"The employee_id column in the hr_employee_documents table serves as a reference to identify which employee a particular document belongs to. This column can be used in WHERE clauses to filter documents for specific employees or in JOIN operations to connect with other employee-related tables, making it essential for queries that need to retrieve or manage employee documents."
hr_employee_documents,is_signature_requested,int,NO,,,0,,,,10.0,0.0,"The `is_signature_requested` column in the hr_employee_documents table is a binary flag (stored as an integer) that indicates whether a signature is required for the document, where 0 typically means no signature is needed and 1 means a signature has been requested. When querying this column, it can be used in WHERE clauses to filter documents based on their signature requirements, such as finding all documents awaiting signatures or those that don't require signatures."
hr_employee_emergency_infos,hr_employee_emergency_info_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_employee_emergency_info_id column serves as the primary key for the hr_employee_emergency_infos table, uniquely identifying each emergency contact and medical information record. When writing SQL queries, use this column for precise record selection, joining with related tables, or ensuring data integrity, as it's a non-nullable integer that uniquely identifies each entry in the emergency information system."
hr_employee_emergency_infos,hr_employee_info_id,int,NO,MUL,,,,,,10.0,0.0,"The hr_employee_info_id column serves as a foreign key in the hr_employee_emergency_infos table, linking each emergency contact record to its corresponding employee in the main HR system. When writing SQL queries, use this column to join with the primary employee table or to filter emergency contact records for specific employees."
hr_employee_emergency_infos,user_id,int,NO,UNI,,,,,,10.0,0.0,"The user_id column in hr_employee_emergency_infos serves as a unique identifier that links each emergency contact record to a specific employee in the HR system. This column should be used in JOIN operations with other HR tables to retrieve or combine employee-related emergency information, and its unique constraint ensures that each employee can have only one emergency contact record."
hr_employee_emergency_infos,contact1,varchar(255),YES,,,,,,255.0,,,"The 'contact1' column in the hr_employee_emergency_infos table stores the name of an employee's primary emergency contact person as a text string up to 255 characters long. When writing queries, this column can be used to search for or filter employees based on their emergency contact's name, though be aware that it can contain NULL values if no primary contact has been specified."
hr_employee_emergency_infos,contact1_lname,varchar(50),YES,,,,,,50.0,,,"The contact1_lname column stores the last name of an employee's primary emergency contact person, allowing up to 50 characters. When writing queries involving emergency contacts, this column should be used in conjunction with other contact-related fields (like contact1_fname) to retrieve or filter complete contact information, and since it's nullable, queries should handle potential NULL values appropriately."
hr_employee_emergency_infos,contact1_relationship,varchar(255),YES,,,,,,255.0,,,"The contact1_relationship column in hr_employee_emergency_infos stores the relationship between the employee and their primary emergency contact (e.g., ""Spouse"", ""Parent"", ""Sibling""). When querying this column, you can use string operations to filter or group emergency contacts by their relationship type, though be aware that the field may contain NULL values since it's nullable."
hr_employee_emergency_infos,contact1_phone_number,varchar(255),YES,,,,,,255.0,,,"The contact1_phone_number column in hr_employee_emergency_infos stores the primary emergency contact's phone number for each employee, formatted as a string up to 255 characters. When writing queries, this column can be used to retrieve or filter emergency contact phone numbers, though be aware it's nullable since not all employees might have provided this information."
hr_employee_emergency_infos,contact2,varchar(255),YES,,,,,,255.0,,,"The `contact2` column in the `hr_employee_emergency_infos` table stores the name of a secondary emergency contact person for employees, allowing up to 255 characters. This optional field (as indicated by being nullable) provides a backup contact when the primary emergency contact cannot be reached, and it should be included in queries where comprehensive emergency contact information needs to be retrieved."
hr_employee_emergency_infos,contact2_lname,varchar(50),YES,,,,,,50.0,,,"The contact2_lname column stores the last name of an employee's secondary emergency contact person, allowing up to 50 characters. This optional field (as indicated by being nullable) is part of the backup contact information set in the emergency contact records, and should be used in conjunction with other contact2_* fields when querying for complete secondary contact details."
hr_employee_emergency_infos,contact2_relationship,varchar(255),YES,,,,,,255.0,,,"The contact2_relationship column in hr_employee_emergency_infos stores the relationship type between an employee and their secondary emergency contact (e.g., ""Spouse"", ""Parent"", ""Sibling""). This optional text field helps HR personnel understand the connection between the employee and their backup emergency contact, which can be useful when determining who to contact if the primary contact is unavailable."
hr_employee_emergency_infos,contact2_phone_number,varchar(255),YES,,,,,,255.0,,,"The contact2_phone_number column stores the phone number for an employee's secondary emergency contact as a string value up to 255 characters long. This optional field (nullable) serves as a backup contact method when the primary emergency contact cannot be reached, and it should be included in queries where comprehensive emergency contact information needs to be retrieved."
hr_employee_emergency_infos,created_by,int,NO,,,0,,,,10.0,0.0,"The created_by column in the hr_employee_emergency_infos table is a required integer field that tracks which user or system process created each emergency contact record. When writing SQL queries, this column can be used to filter or join with user tables to identify who entered the emergency contact information, making it useful for audit trails and data validation purposes."
hr_employee_emergency_infos,updated_by,int,NO,,,0,,,,10.0,0.0,"The `updated_by` column in the hr_employee_emergency_infos table stores the employee ID (as an integer) of the HR staff member who last modified the emergency contact record. This mandatory field (non-nullable) helps track who made changes to emergency contact information, which is useful for auditing purposes and ensuring accountability in managing sensitive employee medical and contact data."
hr_employee_emergency_infos,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `created_at` column in the `hr_employee_emergency_infos` table automatically records the timestamp when each emergency contact record is initially created, using the CURRENT_TIMESTAMP as the default value. This datetime field is useful for auditing purposes and tracking when emergency contact information was first added to the system, though it can be null in some cases."
hr_employee_emergency_infos,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `hr_employee_emergency_infos` table automatically tracks when emergency contact or medical information was last modified, using a datetime format. This timestamp helps HR personnel verify the recency of emergency contact details and can be useful in queries that need to identify recently updated records or verify when information was last reviewed."
hr_employee_infos,hr_employee_info_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_employee_info_id column serves as the primary key in the hr_employee_infos table, uniquely identifying each employee record with a non-nullable integer value. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific employee record (e.g., WHERE hr_employee_info_id = 123)."
hr_employee_infos,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the hr_employee_infos table serves as a foreign key that links to a user's record in a related authentication or user management table. This non-nullable integer field is commonly used in JOIN operations to connect employee HR data with user account information, and its indexed nature (MUL) optimizes these join queries."
hr_employee_infos,offer_letter_id,int,YES,,,,,,,10.0,0.0,"The offer_letter_id column in the hr_employee_infos table is an integer field that references the unique identifier of an employee's offer letter document. When querying employee records, this column can be used to link to related offer letter documentation or to filter employees based on their offer letter status, though it's optional as indicated by its nullable property."
hr_employee_infos,job_role,int,YES,,,,,,,10.0,0.0,"The job_role column in the hr_employee_infos table is an integer field that represents an employee's position or role within the organization, likely using predefined role codes or IDs. When querying this column, you can use it to filter or group employees by their job positions, though be aware that the column can contain NULL values for employees whose roles haven't been assigned yet."
hr_employee_infos,location,int,YES,,,,,,,10.0,0.0,"The 'location' column in the hr_employee_infos table is an integer field that represents the employee's assigned work location, likely referencing a location ID from a separate locations table. When querying employee data, this column can be used to filter or group employees by their work location, and since it's nullable, some employees may not have an assigned location value."
hr_employee_infos,direct_report,int,YES,,,,,,,10.0,0.0,"The direct_report column in hr_employee_infos represents the employee ID of an individual's immediate supervisor or manager, creating a hierarchical relationship between employees. When querying this column, you can use it to find an employee's supervisor or to build organizational charts by joining the table with itself, and since it's nullable, some employees (like top executives) may have NULL values indicating they don't report to anyone."
hr_employee_infos,presence,int,NO,,,,,,,10.0,0.0,"The 'presence' column in the hr_employee_infos table is a required integer field that likely tracks an employee's attendance or availability status. When writing SQL queries, this column can be used to filter or group employees based on their presence status, where different integer values presumably represent different states of attendance or availability."
hr_employee_infos,direct_report_two,int,NO,,,,,,,10.0,0.0,"The direct_report_two column in the hr_employee_infos table is a required integer field that identifies a secondary supervisor or manager to whom an employee reports. When writing queries, this column can be used to create hierarchical relationships between employees or to find all employees who report to a specific secondary manager by joining the table with itself using this column as a foreign key reference."
hr_employee_infos,employment_type,int,YES,,,,,,,10.0,0.0,"The employment_type column in the hr_employee_infos table is an integer field that categorizes employees based on their employment classification (e.g., 1 for full-time, 2 for part-time, 3 for contractor, etc.). When querying this column, you can use numeric comparisons or equality operators to filter employees by their employment type, and since it's nullable, remember to handle NULL values appropriately using IS NULL or IS NOT NULL conditions when necessary."
hr_employee_infos,on_probation,tinyint(1),YES,,,0,,,,3.0,0.0,"The `on_probation` column in the hr_employee_infos table is a boolean flag (stored as tinyint(1)) that indicates whether an employee is currently in their probationary period, where 1 represents true (on probation) and 0 represents false (not on probation). This column can be used in WHERE clauses to filter employees based on their probationary status, and since it's nullable, NULL values may indicate that the probation status is unknown or not applicable."
hr_employee_infos,is_extended_probation,tinyint(1),YES,,,0,,,,3.0,0.0,"The `is_extended_probation` column in the hr_employee_infos table is a boolean flag (stored as tinyint(1)) that indicates whether an employee's probation period has been extended beyond the standard duration. When querying, use this column with values 1 (true) or 0 (false) to filter or identify employees who are on extended probation status."
hr_employee_infos,probation_period,int,YES,,,,,,,10.0,0.0,"The probation_period column in the hr_employee_infos table represents the duration (in days) of an employee's initial probationary period at the company. When querying this column, you can use it to identify employees currently in probation or to analyze probation durations across different employee groups, with NULL values potentially indicating employees exempt from probation periods."
hr_employee_infos,probation_start_date,date,YES,,,,,,,,,"The probation_start_date column in hr_employee_infos records the date when an employee's probationary period began, stored in a standard date format. This column can be used in SQL queries to track probation periods, calculate probation durations, or filter employees based on their probation status, with NULL values indicating employees who may not have a probation period or haven't started one yet."
hr_employee_infos,probation_end_date,date,YES,,,,,,,,,"The probation_end_date column in hr_employee_infos stores the date when an employee's probationary period is scheduled to end, allowing HR to track and manage employee probation status. This nullable date field can be used in queries to identify employees currently in probation, monitor upcoming probation completions, or filter employees based on their probation status (e.g., WHERE probation_end_date > CURRENT_DATE for employees still in probation)."
hr_employee_infos,pay_system,int,YES,,,,,,,10.0,0.0,"The pay_system column in hr_employee_infos is an integer field that indicates which payroll system or payment method is assigned to each employee. When querying this column, you can use it to filter or group employees based on their payment processing system, with NULL values indicating employees who haven't been assigned to a specific pay system yet."
hr_employee_infos,preferred_language,int,YES,,,,,,,10.0,0.0,"The preferred_language column in hr_employee_infos stores an integer value representing an employee's preferred language for communications and documentation. This optional field (as it's nullable) likely references language codes or IDs from a separate lookup table, making it useful for queries that need to filter or group employees by their language preferences, such as when generating localized communications or reports."
hr_employee_infos,customer_profile,int,YES,,,,,,,10.0,0.0,"The customer_profile column in the hr_employee_infos table is an optional integer field that likely represents a reference or classification code for categorizing employees based on their customer-facing roles or service profiles. When writing queries, this column can be used to filter or group employees based on their customer interaction profiles, though be aware that NULL values are possible and should be handled appropriately in your queries."
hr_employee_infos,other_languages,text,YES,,,,,,65535.0,,,"The 'other_languages' column in the hr_employee_infos table stores text data about additional languages that employees can speak or understand beyond their primary language. When querying this column, you can use string operations to search for specific languages or language combinations, and since it's nullable, remember to handle NULL values appropriately in your queries using IS NULL or IS NOT NULL conditions."
hr_employee_infos,emp_professional_email,varchar(255),YES,,,,,,255.0,,,"The emp_professional_email column in hr_employee_infos stores the official work email addresses of employees, formatted as a string with a maximum length of 255 characters. When querying this column, you can use it to filter or retrieve employee contact information, though be aware that it can contain NULL values since it's nullable, which should be handled appropriately in your queries using IS NULL or IS NOT NULL conditions when necessary."
hr_employee_infos,address_one,varchar(255),YES,,,,,,255.0,,,"The address_one column in the hr_employee_infos table stores the primary street address or first line of an employee's residential address as a text string up to 255 characters. When writing queries, this column can be used to filter or retrieve employee location information, though be aware it's nullable so you may need to handle NULL values appropriately in your WHERE clauses or address-related operations."
hr_employee_infos,address_two,varchar(255),YES,,,,,,255.0,,,"The address_two column in the hr_employee_infos table stores the secondary or additional address line for employees, such as apartment numbers, suite numbers, or building names. This optional field (being nullable) can be used in SQL queries when you need to retrieve or filter employees based on their complete address details, though it may be empty for employees who don't have a secondary address line."
hr_employee_infos,city,int,YES,,,,,,,10.0,0.0,"The 'city' column in the hr_employee_infos table stores a numeric identifier (foreign key) that represents the city where an employee is located, though the actual city names are likely stored in a separate reference table. When querying employee locations, join this column with the corresponding city reference table to get the actual city names, and since it's nullable, use appropriate NULL handling in your queries when necessary."
hr_employee_infos,province,int,YES,,,,,,,10.0,0.0,"The 'province' column in the hr_employee_infos table stores the numerical identifier (ID) representing the province or state where an employee is located. When writing queries, this integer value can be used to join with a reference table of provinces/states or to filter employees by their geographical location, though the column can be null if the province information is not available."
hr_employee_infos,postal_code,varchar(255),YES,,,,,,255.0,,,"The postal_code column in the hr_employee_infos table stores the postal or ZIP code of employees' residential addresses as a variable-length string. This column can be used in SQL queries to filter or group employees by geographic location, though it's worth noting that the field is optional (nullable) and may not contain values for all employee records."
hr_employee_infos,status,int,YES,,,,,,,10.0,0.0,"The 'status' column in the hr_employee_infos table is an integer field that indicates the current employment status of an employee (e.g., 1 for active, 2 for terminated, 3 for on leave, etc.). When querying employee records, this column can be used to filter employees based on their current employment status, making it useful for generating reports or analyzing employee data by their active/inactive state."
hr_employee_infos,is_active,tinyint(1),YES,,,1,,,,3.0,0.0,"The `is_active` column in the hr_employee_infos table is a boolean flag (stored as tinyint(1)) that indicates whether an employee is currently active in the organization, where 1 typically represents active employees and 0 represents inactive ones. This column is useful for filtering queries to include only active employees (e.g., `WHERE is_active = 1`) or to identify inactive employees, and being nullable allows for cases where the active status might be unknown or undefined."
hr_employee_infos,joining_date,date,YES,,,,,,,,,"The joining_date column in the hr_employee_infos table represents the date when an employee started working at the company, stored in a standard date format. When writing SQL queries, this column can be used for filtering employees based on their tenure, calculating length of service, or analyzing employee hiring patterns over time, and since it's nullable, be sure to handle NULL values appropriately in your queries."
hr_employee_infos,department_shift_id,int,YES,,,,,,,10.0,0.0,"The department_shift_id column in the hr_employee_infos table is an integer field that links employees to their assigned work shifts within specific departments. When writing queries, this column can be used to filter or group employees based on their shift assignments, and it can be left NULL if an employee doesn't have a specific shift assignment."
hr_employee_infos,department_team_id,int,YES,,,,,,,10.0,0.0,"The department_team_id column in the hr_employee_infos table is an integer field that serves as a reference to identify which department or team an employee belongs to. This optional field (as it's nullable) can be used in SQL queries to filter, group, or join with other tables to analyze employee distribution across different departments or teams within the organization."
hr_employee_infos,absence_approver,int,YES,,,,,,,10.0,0.0,"The absence_approver column in the hr_employee_infos table stores the employee ID (as an integer) of the person responsible for approving time-off requests for each employee. This optional field (nullable) helps establish the approval hierarchy within the organization and can be used to join with the same table to get the approver's details, making it useful for queries related to leave management and approval workflows."
hr_employee_infos,salary_approver,int,YES,,,,,,,10.0,0.0,"The salary_approver column in the hr_employee_infos table stores the employee ID (as an integer) of the person authorized to approve salary changes for a given employee, creating a self-referential relationship within the employee hierarchy. When querying this column, you can join it back to the same table to get the approver's details, though the NULL values indicate employees who either don't need approval or are at the top of the approval chain."
hr_employee_infos,created_by,int,NO,,,0,,,,10.0,0.0,"The created_by column in the hr_employee_infos table is a required integer field that tracks which user or system created each employee record. When writing SQL queries, this column can be used to filter or join with user tables to identify record creators, and since it's non-nullable, you should always include a value when inserting new records."
hr_employee_infos,updated_by,int,NO,,,0,,,,10.0,0.0,"The ""updated_by"" column in the hr_employee_infos table is a required integer field that tracks the ID of the user or system who last modified the employee record. When writing queries, this column can be used to audit changes to employee records or join with a users table to identify who made specific updates to employee information."
hr_employee_infos,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_employee_infos table records the timestamp when each employee record was initially created in the system, automatically populated with CURRENT_TIMESTAMP. This datetime field can be useful for tracking when employees were first added to the HR system and for auditing purposes, and can be used in SQL queries for filtering or sorting records based on their creation date."
hr_employee_infos,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_employee_infos table automatically tracks when an employee's record was last modified, storing this information as a datetime value that defaults to the current timestamp. This column is useful for auditing purposes and can be used in SQL queries to filter or sort employee records based on their last update time, such as finding recently modified employee records or identifying records that haven't been updated within a certain timeframe."
hr_employee_infos,on_contract,int,NO,,,0,,,,10.0,0.0,"The ""on_contract"" column in the hr_employee_infos table is a required integer field (not nullable) that indicates whether an employee is a contract worker, likely using a binary flag where 0 represents regular employees and 1 represents contract workers. When querying employee data, this column can be used to filter or segment employees based on their employment type, making it useful for HR reporting and analysis."
hr_employee_infos,test_account,int,NO,,,0,,,,10.0,0.0,"The test_account column in hr_employee_infos is a required integer field that indicates whether an employee record is a test/dummy account (typically 1) or a real employee record (typically 0). When writing queries, this column can be used to filter out test accounts from real employee data, which is particularly useful when generating reports or analyzing actual employee information."
hr_employee_infos,google_drive_link,varchar(255),YES,,,,,,255.0,,,"The google_drive_link column in hr_employee_infos stores URLs (as text strings up to 255 characters) that point to employee-related documents stored in Google Drive. When querying this column, you can use string operations to search, filter, or validate Google Drive links, and its nullable property means some employees might not have associated document links."
hr_employee_infos,document_link,varchar(255),YES,,,,,,255.0,,,"The document_link column in hr_employee_infos stores URLs or file paths (as text strings up to 255 characters) that point to employee-related documents such as contracts, certifications, or other HR files. When querying this column, you can use string operations to search or filter document links, and since it's nullable, always consider handling NULL values appropriately in your queries."
hr_employee_referrals,hr_employee_referral_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_employee_referral_id is the primary key column in the hr_employee_referrals table, uniquely identifying each employee referral record with a non-nullable integer value. This column should be used when joining to related tables or when specifically querying individual referral records, and it's commonly referenced in WHERE clauses or JOIN conditions (e.g., WHERE hr_employee_referral_id = 123 or JOIN other_table ON other_table.referral_id = hr_employee_referrals.hr_employee_referral_id)."
hr_employee_referrals,referal_user_id,int,NO,,,,,,,10.0,0.0,"The referal_user_id column in the hr_employee_referrals table stores the unique identifier of the employee who made the referral, linking to the referring employee's record. This mandatory integer field is essential for tracking who referred each candidate and can be used to join with other employee-related tables to access the referrer's details."
hr_employee_referrals,referal_info_id,int,NO,,,,,,,10.0,0.0,The referal_info_id column serves as a unique identifier for each employee referral record in the hr_employee_referrals table. This integer field is required (non-nullable) and should be used when joining to related tables or when specifically identifying individual referral records in queries.
hr_employee_referrals,joining_date,date,YES,,,,,,,,,The joining_date column in the hr_employee_referrals table records the date when a referred candidate officially joined the company as an employee. This date field is optional (nullable) and can be used to track successful referrals or calculate referral bonuses based on when referred candidates start their employment.
hr_employee_referrals,is_paid,int,NO,,,0,,,,10.0,0.0,"The `is_paid` column in the hr_employee_referrals table is a binary integer flag (0 or 1) that indicates whether a referral bonus has been paid to the referring employee. When querying this column, use it as a boolean condition (WHERE is_paid = 1 for paid referrals or is_paid = 0 for unpaid referrals) to filter or analyze referral bonus payment status."
hr_employee_referrals,paid_date,date,YES,,,,,,,,,"The `paid_date` column in the `hr_employee_referrals` table records the date when a referral bonus or reward was paid to the referring employee. This nullable date field can be used to track completed referral payments and identify pending payments (where `paid_date` is NULL), making it useful for filtering and reporting on referral reward statuses."
hr_employee_referrals,created_by,int,NO,,,0,,,,10.0,0.0,The `created_by` column in the hr_employee_referrals table is a required integer field that stores the employee ID of the user who created the referral record. This column is commonly used in WHERE clauses or JOINs with the employees table to track or filter referrals based on who entered them into the system.
hr_employee_referrals,updated_by,int,NO,,,0,,,,10.0,0.0,The `updated_by` column in the hr_employee_referrals table stores the employee ID (as an integer) of the staff member who last modified the referral record. This mandatory field (non-nullable) helps maintain an audit trail of changes to referral records and can be used to join with an employees table to get details about who made the most recent updates.
hr_employee_referrals,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_employee_referrals table stores the timestamp when each referral record was initially created in the system, automatically populated with the current date and time. When querying referral data, this column can be used to filter or sort records by their creation date, making it useful for analyzing referral patterns over time or finding referrals made within specific date ranges."
hr_employee_referrals,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `hr_employee_referrals` table automatically records the timestamp when a referral record is modified, using the CURRENT_TIMESTAMP value. When writing SQL queries, this column can be useful for tracking the most recent changes to referral records or filtering referrals based on when they were last updated, though it can be NULL in some cases."
hr_employee_referrals,bonus_type,int,NO,,,,,,,10.0,0.0,"The bonus_type column in hr_employee_referrals is a required integer field that categorizes the type of referral bonus or reward associated with each employee referral. When querying this column, you can use it to filter or group referrals based on their bonus category, such as filtering for specific bonus types (e.g., WHERE bonus_type = 1) or analyzing the distribution of different bonus types across referrals."
hr_employee_referrals,bonus_amount,"float(10,2)",NO,,,,,,,10.0,2.0,"The bonus_amount column in hr_employee_referrals stores the monetary value of the referral bonus awarded to employees for successful candidate referrals, with precision to two decimal places. This non-nullable float column can be used in SQL queries to calculate total referral costs, analyze bonus distributions, or filter referrals based on bonus values (e.g., SELECT * FROM hr_employee_referrals WHERE bonus_amount > 1000.00)."
hr_employee_referrals,bonus_issuedate,date,NO,,,,,,,,,"The bonus_issuedate column in the hr_employee_referrals table records the specific date when a referral bonus was issued to an employee for successfully referring a candidate. This mandatory date field helps track when referral rewards were distributed and can be useful for financial reporting, bonus payment reconciliation, and analyzing referral program effectiveness over time."
hr_employee_referrals,bonus_details,text,NO,,,,,,65535.0,,,"The bonus_details column in the hr_employee_referrals table stores textual information about the referral bonus or reward associated with each employee referral. This required field (non-nullable) can be used to track specific bonus amounts, payment terms, eligibility criteria, or other reward-related details for successful referrals, and is commonly used in WHERE clauses or SELECT statements when analyzing or reporting on referral compensation."
hr_employee_referrals,bonus_memo,varchar(255),NO,,,,,,255.0,,,"The bonus_memo column in hr_employee_referrals stores textual notes or comments regarding the referral bonus status or decision for each employee referral record. This required field (non-nullable) can contain up to 255 characters and is typically used to document specific details about bonus eligibility, payment status, or any special considerations related to the referral reward."
hr_employee_referrals,payout_deadline_date,date,YES,,,,,,,,,"The payout_deadline_date column in hr_employee_referrals represents the final date by which a referral bonus or reward must be paid to the referring employee. When writing queries involving referral payments or bonus tracking, you can use this date field to identify upcoming payment deadlines or filter for referrals whose payout deadlines have passed."
hr_employee_referrals,payout_days,int,YES,,,0,,,,10.0,0.0,"The `payout_days` column in the hr_employee_referrals table represents the number of days after which a referral bonus becomes payable to the referring employee. This integer field can be used in SQL queries to calculate payout dates or filter referrals based on their payout timeframes, and being nullable suggests that some referrals might not have a defined payout period."
hr_employee_status_infos,hr_employee_status_info_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_employee_status_info_id is the primary key column in the hr_employee_status_infos table, uniquely identifying each employee status record. This integer column should be used in JOIN operations when linking employee status information with other HR tables, and it's commonly referenced in WHERE clauses when querying specific employee status records."
hr_employee_status_infos,hr_employee_info_id,int,NO,MUL,,,,,,10.0,0.0,"The hr_employee_info_id column is a non-nullable integer field that serves as a foreign key in the hr_employee_status_infos table, linking each status record to its corresponding employee in a related employee information table. When writing queries, this column should be used to join with the main employee table to access comprehensive employee details or to filter status records for specific employees."
hr_employee_status_infos,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in hr_employee_status_infos is a non-nullable integer field that serves as a foreign key reference to uniquely identify employees across the HR system. When writing queries, this column can be used to join with other employee-related tables and filter or group employee status information, making it a crucial field for tracking individual employee records."
hr_employee_status_infos,action,int,NO,,,,,,,10.0,0.0,"The ""action"" column in the hr_employee_status_infos table is a required integer field that represents specific actions or changes made to an employee's status. When writing SQL queries, this column can be used to filter or group employee status records based on different types of status changes or actions taken, such as status updates, employment type modifications, or work arrangement adjustments."
hr_employee_status_infos,contract_start_date,date,YES,,,,,,,,,"The contract_start_date column in hr_employee_status_infos stores the date when an employee's work contract or employment agreement began, using a standard date format. This column can be used in SQL queries to filter employees based on their tenure, analyze employment patterns over time, or calculate length of service, and since it's nullable, some employees may not have a contract start date recorded."
hr_employee_status_infos,contract_end_date,date,YES,,,,,,,,,"The contract_end_date column in hr_employee_status_infos stores the date when an employee's contract is scheduled to terminate, using a standard date format. This nullable field is particularly useful for filtering and reporting on contract expirations, such as identifying employees whose contracts are ending soon or have already ended, and can be used in conjunction with other status fields to maintain accurate employee records."
hr_employee_status_infos,leave_start_date,date,YES,,,,,,,,,"The leave_start_date column in hr_employee_status_infos stores the date when an employee begins a leave of absence or temporary departure from work. This optional date field can be used in SQL queries to track and filter employees based on when their leaves began, making it useful for reporting on employee absences and workforce planning."
hr_employee_status_infos,leave_end_date,date,YES,,,,,,,,,"The leave_end_date column in hr_employee_status_infos stores the expected return date for employees who are on various types of leave (such as medical, parental, or sabbatical leave). When querying this column, NULL values indicate either that the employee is not currently on leave or that the return date is indefinite, making it useful for filtering active versus on-leave employees or calculating remaining leave durations."
hr_employee_status_infos,termination_reason,tinyint(1),YES,,,,,,,3.0,0.0,"The `termination_reason` column in the `hr_employee_status_infos` table stores a single-digit code (0-9) indicating why an employee's employment was terminated, with NULL values permitted for active employees. When writing queries, this column can be used to filter or analyze employee terminations, though you should refer to the organization's specific termination reason codes for accurate interpretation of the values."
hr_employee_status_infos,termination_date,date,YES,,,,,,,,,"The termination_date column in hr_employee_status_infos stores the date when an employee's employment ended, using a standard date format. This nullable field can be used to identify inactive employees (where termination_date is not null) or to calculate employment duration, and it's commonly used in queries that need to filter or report on former employees."
hr_employee_status_infos,reactive_reason,tinyint(1),YES,,,,,,,3.0,0.0,"The `reactive_reason` column in the `hr_employee_status_infos` table is a boolean flag (tinyint(1)) that indicates whether an employee's status change was due to reactivation of their employment. When querying this column, use it to filter or identify cases where employees have been reactivated, with NULL values potentially indicating either no reactivation has occurred or the reactivation reason is not recorded."
hr_employee_status_infos,reactivate_role,int,YES,,,,,,,10.0,0.0,"The `reactivate_role` column in the hr_employee_status_infos table is an optional integer field that indicates the role or position an employee should be assigned when reactivated from an inactive status. This column can be used in SQL queries to help manage employee role transitions during reactivation processes, and its nullable property allows for cases where a reactivation role hasn't been predetermined."
hr_employee_status_infos,reactivate_department,int,YES,,,,,,,10.0,0.0,The reactivate_department column in hr_employee_status_infos stores the department ID where an employee should be reassigned when reactivating their employment status. This optional (nullable) integer field is particularly useful when writing queries to manage employee reactivation workflows or to analyze department-level reactivation patterns.
hr_employee_status_infos,reactivate_sub_department,int,YES,,,,,,,10.0,0.0,The reactivate_sub_department column in hr_employee_status_infos stores the ID of the sub-department where an employee should be reassigned when reactivated from an inactive status. This optional (nullable) integer field is particularly useful when writing queries to manage employee reactivation processes or to track planned department assignments for returning employees.
hr_employee_status_infos,rehire_step,int,YES,,,,,,,10.0,0.0,"The rehire_step column in hr_employee_status_infos is an optional integer field that tracks the current stage or step in an employee's rehiring process. When querying this column, it can be used to filter or group employees based on their progress in the rehiring workflow, with NULL values likely indicating employees who are not in the rehiring process."
hr_employee_status_infos,on_probation,tinyint(1),YES,,,,,,,3.0,0.0,"The `on_probation` column in the hr_employee_status_infos table is a boolean flag (stored as tinyint(1)) that indicates whether an employee is currently in their probationary period. When querying this column, use 1 to filter for employees on probation and 0 for those who have completed their probation period, with NULL potentially indicating an undetermined probation status."
hr_employee_status_infos,is_extended_probation,tinyint(1),YES,,,0,,,,3.0,0.0,"The `is_extended_probation` column in the hr_employee_status_infos table is a boolean flag (stored as tinyint(1)) that indicates whether an employee's probation period has been extended beyond the standard duration. When querying this column, use 1 to filter for employees with extended probation periods and 0 for those without extensions, or NULL if the probation extension status is not yet determined."
hr_employee_status_infos,probation_start_date,date,YES,,,,,,,,,"The probation_start_date column in hr_employee_status_infos stores the date when an employee's probationary period began, using a standard date format. This nullable field can be used in SQL queries to track probation periods, calculate probation durations, or identify employees currently in probation by comparing it with the current date."
hr_employee_status_infos,probation_end_date,date,YES,,,,,,,,,"The probation_end_date column in hr_employee_status_infos stores the date when an employee's probationary period is scheduled to end or has ended. This nullable date field can be used in SQL queries to identify employees currently in probation (where probation_end_date is in the future) or to track completed probationary periods, making it valuable for HR reporting and employee status monitoring."
hr_employee_status_infos,document_type,int,YES,,,0,,,,10.0,0.0,"The `document_type` column in the `hr_employee_status_infos` table is an integer field that categorizes different types of documentation associated with an employee's status changes or work arrangements. When querying this column, you can use it to filter or group employee records based on specific document categories, though its nullable property means some records might not have a document type assigned."
hr_employee_status_infos,document_name,int,YES,,,0,,,,10.0,0.0,"The ""document_name"" column in the hr_employee_status_infos table is an optional integer field that likely references or identifies specific HR documents associated with an employee's status changes or work arrangements. When writing queries, this column can be used to link to related documentation or to filter employee records based on specific document identifiers."
hr_employee_status_infos,additional_file_name,varchar(255),YES,,,,,,255.0,,,The additional_file_name column in hr_employee_status_infos stores the filename of supplementary documents related to an employee's status changes or work arrangements. This optional (nullable) field can contain up to 255 characters and is useful when querying for employees with specific documentation attached to their status records.
hr_employee_status_infos,document_id,tinyint,YES,,,,,,,3.0,0.0,"The document_id column in hr_employee_status_infos is a tinyint field that likely serves as a reference to employee documentation or status-related paperwork. When querying employee status information, this column can be used to link to specific HR documents or to filter employees based on their documentation status, though its nullable property suggests that not all employee status records require associated documentation."
hr_employee_status_infos,is_active,tinyint(1),NO,,,1,,,,3.0,0.0,"The `is_active` column in the hr_employee_status_infos table is a boolean flag (stored as tinyint(1)) that indicates whether an employee is currently active (1) or inactive (0) in the organization. When writing SQL queries, this column can be used to filter for active/inactive employees, and since it's non-nullable, you can rely on it always having a value for employment status checks."
hr_employee_status_infos,is_executed,tinyint(1),NO,,,0,,,,3.0,0.0,"The `is_executed` column in the `hr_employee_status_infos` table is a boolean flag (stored as tinyint(1)) that indicates whether a particular employee status record has been processed or executed. When querying this column, use 1 to filter for executed status records and 0 for non-executed ones, for example: `WHERE is_executed = 1` to find all processed employee status changes."
hr_employee_status_infos,created_by,int,NO,,,0,,,,10.0,0.0,"The created_by column in the hr_employee_status_infos table is a required integer field that stores the ID of the user who created each employee status record. When writing queries, this column can be used to track or filter employee status records based on their creator, often by joining with a users or employees table to get the creator's details."
hr_employee_status_infos,updated_by,int,NO,,,0,,,,10.0,0.0,"The `updated_by` column in the hr_employee_status_infos table stores the employee ID (as an integer) of the person who last modified the status record, and this field is mandatory (non-nullable). When writing queries, this column can be used to track who made changes to employee status records and can be joined with an employees table to get the details of the person who made the update."
hr_employee_status_infos,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in hr_employee_status_infos stores the timestamp when an employee status record was initially created, automatically populated with CURRENT_TIMESTAMP when a new record is inserted. This datetime field can be used in SQL queries to filter or analyze employee status changes over time, such as finding recently added status records or tracking historical status creation patterns."
hr_employee_status_infos,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `hr_employee_status_infos` table automatically records the timestamp when an employee's status information is modified, using the CURRENT_TIMESTAMP value. This datetime field can be used in SQL queries to track when changes were made to employee statuses, making it useful for auditing purposes and filtering records based on when they were last updated."
hr_employee_training,hr_employee_training_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_employee_training_id is the primary key column that uniquely identifies each training record in the hr_employee_training table. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific training entry, but avoid using it for business logic filtering since it's an internal identifier."
hr_employee_training,employee_id,int,YES,,,,,,,10.0,0.0,"The employee_id column in the hr_employee_training table serves as a reference to identify which employee each training record belongs to, likely linking to a primary employee table. This integer field can be used in JOIN operations to connect training records with employee details, or in WHERE clauses to filter training records for specific employees."
hr_employee_training,lufa_form_id,int,YES,,,,,,,10.0,0.0,"The lufa_form_id column in the hr_employee_training table stores an integer identifier that likely references a specific LUFA (Learning/User Form Authorization) form associated with an employee's training record. When querying training records, this column can be used to link to related form documentation or to filter/group training records based on their associated form IDs."
hr_employee_training,status,int,YES,,,,,,,10.0,0.0,"The 'status' column in the hr_employee_training table is an integer field that indicates the current state of an employee's training record, likely using predefined status codes (e.g., 1 for 'In Progress', 2 for 'Completed', 3 for 'Failed', etc.). When writing queries, this column can be used to filter or group training records based on their completion status, making it useful for reporting on training progress and compliance tracking."
hr_employee_training,deadline_complete_course_date,date,NO,,,,,,,,,"The deadline_complete_course_date column in the hr_employee_training table represents the mandatory date by which an employee must complete their assigned training or certification course. When writing SQL queries, this date field can be used to identify overdue training (comparing against CURRENT_DATE), track upcoming deadlines, or filter training records based on completion timeline requirements."
hr_employee_training,completion_date,date,YES,,,,,,,,,"The completion_date column in the hr_employee_training table stores the date when an employee finished a specific training course or certification program. This date field can be used in SQL queries to filter training records by time periods, track recent completions, or identify expired certifications, and since it's nullable, some training records might not yet have a completion date if they're still in progress."
hr_employee_training,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_employee_training table automatically records the timestamp when a training record is first inserted, using CURRENT_TIMESTAMP as the default value. This column is useful for tracking when training records were initially created and can be used in SQL queries for auditing purposes or filtering training records by their creation date."
hr_employee_training,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_employee_training table automatically records the timestamp when a training record is modified, using CURRENT_TIMESTAMP as the default value. This column is useful for tracking the most recent changes to employee training records and can be used in SQL queries to filter or sort records based on when they were last updated."
hr_employee_training,created_by,int,YES,,,,,,,10.0,0.0,The created_by column in the hr_employee_training table stores the employee ID of the person who created or entered the training record into the system. This optional integer field is commonly used for audit tracking and can be joined with the employees table to retrieve information about who recorded each training entry.
hr_event_attachments,hr_event_attachment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_event_attachment_id column serves as the primary key for the hr_event_attachments table, uniquely identifying each file attachment or document record in the HR system. When writing SQL queries, use this column for precise record selection, joining with related tables, or tracking specific HR documents, for example: ""SELECT * FROM hr_event_attachments WHERE hr_event_attachment_id = 123""."
hr_event_attachments,hr_event_id,int,NO,MUL,,,,,,10.0,0.0,"The hr_event_id column in the hr_event_attachments table is a required integer field that serves as a foreign key, linking each attachment record to its corresponding HR event. When writing queries, this column can be used to join with the primary HR events table or to filter attachments related to specific HR events."
hr_event_attachments,file_name,varchar(255),NO,,,,,,255.0,,,"The file_name column in the hr_event_attachments table stores the original name of uploaded HR-related documents and files as a text string (up to 255 characters). Since this is a required field (not nullable), every attachment record must have a file name, making it useful for queries that need to search, filter, or display HR document names."
hr_event_attachments,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_event_attachments table records the timestamp of when an HR document or attachment record was last modified, automatically updating to the current timestamp whenever changes are made. This column is useful for tracking document version history and can be used in SQL queries to filter or sort attachments based on their last modification date, such as finding recently updated documents or identifying stale records that haven't been modified in a while."
hr_event_checklists,hr_event_checklist_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_event_checklist_id is the primary key column in the hr_event_checklists table, uniquely identifying each standardized HR checklist or procedure. When writing SQL queries, use this column to join with related tables or to filter for specific checklists, as it serves as the main identifier for each checklist record."
hr_event_checklists,hr_event_guest_id,int,NO,,,,,,,10.0,0.0,"The hr_event_guest_id column in the hr_event_checklists table is a required integer field that identifies a specific guest or participant involved in an HR event checklist. When writing queries, use this column to link HR checklist items to specific individuals who need to complete or participate in HR processes, or to filter and group checklist items by participant."
hr_event_checklists,hr_event_id,int,NO,,,,,,,10.0,0.0,"The hr_event_id column in the hr_event_checklists table serves as a reference to identify specific HR events or processes that have associated checklist items. When writing SQL queries, use this column to filter or join with other tables to retrieve checklist items for particular HR events, such as finding all checklist items for a specific onboarding process or performance review."
hr_event_checklists,type_id,int,NO,,,,,,,10.0,0.0,"The type_id column in the hr_event_checklists table is a required integer field that categorizes different types of HR checklists or procedures (such as onboarding, offboarding, or performance reviews). When querying this table, use type_id to filter or group checklists by their specific HR process type, making it useful for retrieving all checklist items related to a particular HR event category."
hr_event_checklists,type,tinyint,NO,,,1,,,,3.0,0.0,"The 'type' column in the hr_event_checklists table is a required tinyint field that categorizes different types of HR checklists or procedures using numeric codes. When writing queries, this column can be used to filter or group HR checklists by their specific type (e.g., WHERE type = 1 for onboarding checklists, or type = 2 for offboarding checklists), making it useful for retrieving specific sets of HR procedures."
hr_event_checklists,attendance,tinyint,YES,,,,,,,3.0,0.0,"The 'attendance' column in the hr_event_checklists table is a boolean-like indicator (stored as a tinyint) that likely flags whether attendance tracking is required for a particular HR checklist or procedure. When writing queries, this column can be filtered using 0 or 1 values to identify HR processes that either do or don't require attendance monitoring."
hr_event_checklists,contract_name,varchar(255),YES,,,,,,255.0,,,"The contract_name column in the hr_event_checklists table stores the name or identifier of specific employment contracts or agreements associated with HR checklist items. This optional field (being nullable) can be used to filter or group checklist items by their related contract types, making it useful for queries that need to retrieve procedures specific to certain employment agreement categories."
hr_event_checklists,contract_link,text,YES,,,,,,65535.0,,,"The contract_link column in hr_event_checklists stores URL or file path references to related HR contract documents or agreements associated with specific checklist items. When writing SQL queries, this column can be used to retrieve or filter checklist items based on their associated contract documentation, though its nullable nature means some checklist items may not have linked contracts."
hr_event_checklists,contract_file_format,tinyint,NO,,,0,,,,3.0,0.0,"The contract_file_format column in hr_event_checklists is a required tinyint field that specifies the format type of HR-related contract documents using a numeric code system. This column helps standardize how contract documents should be handled or processed within the HR system, where different values likely represent different file formats (e.g., 0 for PDF, 1 for DOC, etc.)."
hr_event_checklists,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_event_checklists table records the timestamp when each checklist entry was initially created in the system, automatically populated with CURRENT_TIMESTAMP. When querying this column, it's useful for tracking when specific HR procedures were established or for filtering checklists based on their creation date, such as finding recently added procedures or analyzing checklist creation patterns over time."
hr_event_checklists,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_event_checklists table automatically records the timestamp when a checklist record is modified, using CURRENT_TIMESTAMP as the default value. This column is useful for tracking the most recent changes to HR procedures and can be used in SQL queries to filter or sort checklists based on their last update time, such as finding recently modified procedures or identifying outdated checklists that may need review."
hr_event_dates,hr_event_date_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_event_date_id column serves as the primary key in the hr_event_dates table, uniquely identifying each HR-related event or date entry. This non-nullable integer field is essential for joining with other tables and should be referenced when querying specific HR events, such as holidays or company meetings, from the calendar system."
hr_event_dates,hr_event_id,int,NO,,,,,,,10.0,0.0,"The hr_event_id column serves as a unique identifier for each HR-related event or date entry in the hr_event_dates table. When writing SQL queries, use this column to uniquely reference specific events, join with related tables, or filter event records."
hr_event_dates,date,date,NO,,,,,,,,,"The 'date' column in the hr_event_dates table stores the specific calendar date when an HR-related event occurs, using a standard date format (YYYY-MM-DD). This required field serves as a temporal reference point for querying and organizing various human resources activities, such as holidays, meetings, and employee milestones."
hr_event_dates,start_time,time,YES,,,,,,,,,"The start_time column in the hr_event_dates table stores the specific time when an HR-related event begins, using a standard time format (HH:MM:SS). This column can be used to filter or sort HR events by their starting times, and since it's nullable, events without a specific start time can be recorded with a NULL value in this field."
hr_event_dates,end_time,time,YES,,,,,,,,,"The end_time column in the hr_event_dates table stores the time when an HR-related event concludes, using a standard time format (HH:MM:SS). This column can be used in SQL queries to filter or sort events based on their completion times, and being nullable means some events may not have a specified end time."
hr_event_dates,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_event_dates table automatically records the timestamp when a calendar event entry is modified, using CURRENT_TIMESTAMP as the default value. This column is useful for tracking the most recent changes to HR events and can be used in SQL queries to filter or sort events based on their last update time, such as finding recently modified calendar entries."
hr_event_guests,hr_event_guest_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_event_guest_id column serves as the primary key in the hr_event_guests table, uniquely identifying each guest record for HR events. This non-nullable integer column should be referenced when joining to related tables or when specifically querying individual guest records within the HR event tracking system."
hr_event_guests,hr_event_id,int,NO,,,,,,,10.0,0.0,"The hr_event_id column in the hr_event_guests table is a required integer field that identifies which HR event a guest is associated with. This column likely serves as a foreign key linking to a primary events table, enabling queries to connect guest information with specific HR functions or company gatherings."
hr_event_guests,type_id,int,NO,,,,,,,10.0,0.0,"The type_id column in the hr_event_guests table is a required integer field that categorizes the type of guest attending HR events (e.g., employee, external visitor, vendor, or VIP). When writing queries, this column can be used to filter or group guests by their classification type, and since it's non-nullable, you can rely on every guest record having a valid type assignment."
hr_event_guests,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_event_guests table automatically records the timestamp when a guest's information was last modified, using CURRENT_TIMESTAMP as the default value. This column is useful for tracking the recency of guest data changes and can be particularly helpful in queries that need to filter or sort records based on when they were last updated."
hr_event_guests,has_checkedin,tinyint,YES,,,0,,,,3.0,0.0,"The `has_checkedin` column in the `hr_event_guests` table is a boolean flag (stored as tinyint) that indicates whether a guest has checked in at an HR event, where 0 typically means not checked in and 1 means checked in. This column can be used in WHERE clauses to filter guests based on their check-in status (e.g., `WHERE has_checkedin = 1` to find all guests who have arrived) or in aggregate functions to count attendance metrics."
hr_event_guests,type,tinyint,NO,,,1,,,,3.0,0.0,"The 'type' column in the hr_event_guests table is a required (non-nullable) tinyint field that likely represents a categorization or classification of guests attending HR events. When querying this table, you can use this column to filter or group guests by their type designation (e.g., employee, external visitor, vendor, etc.), where different numeric values correspond to specific guest categories."
hr_event_guests,event_type,tinyint,NO,,,1,,,,3.0,0.0,"The event_type column in the hr_event_guests table is a required (non-nullable) tinyint field that categorizes the type of HR event a guest is associated with. When writing queries, you can use this column to filter or group guests by different event categories, with the values likely representing specific event types through a predefined numeric coding system (e.g., 1 = training, 2 = interview, etc.)."
hr_event_organisers,hr_event_organiser_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_event_organiser_id column serves as the primary key in the hr_event_organisers table, uniquely identifying each HR event organizer with a non-nullable integer value. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific organizer records (e.g., WHERE hr_event_organiser_id = X)."
hr_event_organisers,hr_event_id,int,NO,,,,,,,10.0,0.0,"The hr_event_id column in the hr_event_organisers table serves as a reference to specific HR events that organizers are associated with. This integer field is required (non-nullable) and can be used to join with other tables to connect organizers to their respective events, making it useful in queries that need to retrieve or analyze event-organizer relationships."
hr_event_organisers,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the hr_event_organisers table is a required integer field that uniquely identifies each event organizer in the system. When writing queries, this column can be used to join with other tables containing user information or to filter specific organizers, making it essential for tracking and associating HR event responsibilities with individual organizers."
hr_event_organisers,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `hr_event_organisers` table automatically records the timestamp of the most recent modification made to an organizer's record, using the CURRENT_TIMESTAMP value. When writing SQL queries, this column can be useful for tracking changes to organizer information over time or filtering records based on when they were last modified."
hr_event_recurring_settings,hr_event_recurring_setting_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_event_recurring_setting_id is the primary key column in the hr_event_recurring_settings table, uniquely identifying each recurring HR event configuration. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific recurring event settings (e.g., WHERE hr_event_recurring_setting_id = [value])."
hr_event_recurring_settings,hr_event_id,int,NO,,,,,,,10.0,0.0,"The hr_event_id column in the hr_event_recurring_settings table serves as a reference to identify specific HR events that have recurring settings. When writing SQL queries, use this column to join with other HR-related tables or to filter and retrieve recurring settings for particular HR events, as it represents the unique identifier for each HR event that needs to be scheduled repeatedly."
hr_event_recurring_settings,frequency,tinyint(1),NO,,,,,,,3.0,0.0,"The 'frequency' column in the hr_event_recurring_settings table is a required tinyint(1) field that specifies how often an HR event should repeat (e.g., 1 for daily, 2 for weekly, etc.). When writing SQL queries, this column can be used to filter or group recurring HR events based on their repetition pattern, making it essential for scheduling and automation logic."
hr_event_recurring_settings,intervals,int,NO,,,,,,,10.0,0.0,"The 'intervals' column in the hr_event_recurring_settings table specifies the frequency at which an HR event repeats, stored as an integer value. When writing SQL queries, this column can be used to filter or group recurring HR events based on their repetition pattern, such as finding events that occur every X intervals (where X is the stored integer value)."
hr_event_recurring_settings,week_day,varchar(255),YES,,,,,,255.0,,,"The 'week_day' column in the hr_event_recurring_settings table stores the specific day(s) of the week when an HR event should occur, represented as text values (e.g., 'Monday', 'Tuesday', etc.). When writing SQL queries, this column can be used to filter or group recurring HR events by their scheduled day of the week, making it useful for scheduling reports or analyzing event patterns across different weekdays."
hr_event_recurring_settings,start_date,date,YES,,,,,,,,,"The start_date column in hr_event_recurring_settings specifies the initial date from which a recurring HR event begins its schedule. This optional date field helps establish the starting point for recurring HR activities, and when used in queries, it can be particularly useful for filtering events that begin within specific time periods or for calculating the duration of recurring event patterns."
hr_event_recurring_settings,end_date,date,YES,,,,,,,,,"The end_date column in hr_event_recurring_settings specifies the final date until which an HR event should continue to recur, acting as a termination point for the recurring schedule. When writing queries, this column can be used to filter active recurring events (where end_date is either NULL or greater than the current date) or to identify events that have concluded (where end_date is less than the current date)."
hr_event_recurring_settings,month_day,int,YES,,,0,,,,10.0,0.0,"The `month_day` column in the `hr_event_recurring_settings` table specifies the day of the month (1-31) when a recurring HR event should occur. When writing queries, this column can be used to filter or schedule HR events that need to happen on specific days of the month, with NULL values potentially indicating events that don't follow a monthly pattern."
hr_event_recurring_settings,month_week_day,varchar(255),YES,,,,,,255.0,,,"The month_week_day column in hr_event_recurring_settings stores a string value that specifies which day of which week in a month an HR event should occur (e.g., 'FIRST_MONDAY', 'THIRD_WEDNESDAY'). When writing SQL queries, this column can be used to filter or group recurring HR events based on their scheduled occurrence pattern within a month, making it particularly useful for scheduling regular meetings, reviews, or other periodic HR activities."
hr_event_recurring_settings,occurrences,int,YES,,,0,,,,10.0,0.0,"The 'occurrences' column in the hr_event_recurring_settings table specifies the number of times an HR event should repeat, with NULL indicating infinite repetition and 0 being the default value. When writing queries, this column can be used to filter or identify HR events based on their repetition count, such as finding one-time events (occurrences = 1) or ongoing events (occurrences IS NULL)."
hr_event_recurring_settings,is_event_created,tinyint,YES,,,0,,,,3.0,0.0,"The `is_event_created` column in the `hr_event_recurring_settings` table is a boolean flag (stored as a tinyint) that indicates whether a recurring HR event has been successfully created in the system. When querying this column, use 1 to filter for created events and 0 for events that haven't been created yet, making it useful for tracking the status of event generation in recurring HR activities."
hr_event_recurring_settings,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_event_recurring_settings table records the timestamp when a recurring HR event setting was initially created, automatically populated with the current timestamp when a new record is inserted. This datetime field can be useful for auditing purposes and tracking when specific recurring HR event configurations were established in the system."
hr_event_recurring_settings,updated_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_event_recurring_settings table automatically records the timestamp of when a recurring HR event setting was last modified, using the CURRENT_TIMESTAMP value. This column is useful for tracking changes to recurring event configurations and can be used in SQL queries to filter or sort records based on their last update time, such as finding recently modified event settings or auditing configuration changes."
hr_event_series,hr_event_series_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_event_series_id is the primary key column in the hr_event_series table, uniquely identifying each recurring HR event series record. When writing SQL queries, use this column to join with related tables or to filter specific recurring HR events, as it serves as the main identifier for recurring events like training sessions and cyclical HR processes."
hr_event_series,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the hr_event_series table stores the descriptive title or identifier for recurring HR events, such as ""Monthly Safety Training"" or ""Quarterly Performance Reviews."" This required (non-nullable) text field, with a maximum length of 255 characters, should be used in queries when searching for or referencing specific recurring HR event series by their designated names."
hr_event_series,color,varchar(50),YES,,,grey,,,50.0,,,"The 'color' column in the hr_event_series table stores the visual color identifier (as a text string) associated with recurring HR events, defaulting to 'grey' if not specified. This column can be used for UI display purposes or event categorization, helping to visually distinguish different types of recurring HR events in calendars or dashboards."
hr_event_series,description,text,YES,,,,,,65535.0,,,"The 'description' column in the hr_event_series table stores detailed text explanations of recurring HR events, providing context about the purpose, scope, and nature of the event series. This optional (nullable) text field can be used to search for specific types of HR events or to provide more comprehensive information about event series when generating reports or displaying event details to users."
hr_event_series,is_guest_prompted,tinyint,YES,,,0,,,,3.0,0.0,"The `is_guest_prompted` column in the hr_event_series table is a boolean flag (stored as tinyint) that indicates whether attendees are prompted to bring guests to the recurring HR event. When querying this column, use 1 to filter for events where guest attendance is prompted and 0 for events where it isn't, making it useful for identifying which recurring HR events are open to additional attendees."
hr_event_series,is_training_event,tinyint,YES,,,0,,,,3.0,0.0,"The `is_training_event` column in the hr_event_series table is a boolean flag (stored as tinyint) that indicates whether a recurring event is specifically a training session (1) or not (0). When querying training-related events, use this column to filter or identify training sessions from other types of recurring HR events."
hr_event_series,is_attendance,tinyint,YES,,,0,,,,3.0,0.0,"The `is_attendance` column in the `hr_event_series` table is a boolean flag (stored as tinyint) that indicates whether attendance tracking is required for a recurring HR event series. This column helps distinguish between events that need attendance monitoring (value = 1) versus those that don't (value = 0), making it useful in queries that filter or analyze HR events based on their attendance requirements."
hr_event_series,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_event_series table records the timestamp when a recurring HR event series was initially created in the system, automatically populated with the current timestamp when a new record is inserted. This column is useful for tracking when event series were established and can be used in SQL queries for auditing purposes or filtering event series by their creation date."
hr_event_series,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_event_series table automatically records the timestamp when a recurring HR event's configuration is modified, using CURRENT_TIMESTAMP as the default value. This column is useful for tracking the most recent changes to event series configurations and can be used in SQL queries to filter or sort events based on their last update time, such as finding recently modified recurring events or auditing changes to HR event schedules."
hr_event_settings,hr_event_setting_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_event_setting_id column serves as the primary key in the hr_event_settings table, uniquely identifying each configuration record for HR-related events and activities. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference specific HR event configuration settings (e.g., WHERE hr_event_setting_id = X)."
hr_event_settings,event_type_name,varchar(255),NO,,,,,,255.0,,,"The event_type_name column in the hr_event_settings table stores the descriptive name or category of different HR-related events (e.g., ""New Hire Orientation"", ""Performance Review"", ""Benefits Enrollment"") as text strings up to 255 characters. This required field can be used in SQL queries to filter, group, or join HR event configurations by their type, making it useful for retrieving settings specific to particular HR processes or activities."
hr_event_settings,event_name,varchar(255),NO,,,,,,255.0,,,"The event_name column in the hr_event_settings table stores the unique identifier or descriptive name for different HR-related events and activities (e.g., ""New Hire Onboarding"", ""Performance Review"", ""Leave Request""). When writing SQL queries, this required (non-nullable) varchar field can be used to filter, group, or join HR event configurations, making it a key reference point for accessing specific event settings and parameters."
hr_event_settings,event_colour_code,varchar(255),NO,,,,,,255.0,,,"The event_colour_code column in the hr_event_settings table stores color codes (likely in hexadecimal, RGB, or named color format) used for visual representation of HR events in the system's interface. When querying this column, you can use it to filter or group HR events by their display colors, which is particularly useful for UI-related queries or when generating reports that need to maintain consistent color coding for different types of HR events."
hr_event_settings,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_event_settings table records the timestamp when each HR configuration setting was initially created, automatically populated with CURRENT_TIMESTAMP. This non-nullable datetime field is useful for auditing purposes and can be used in SQL queries to filter or sort HR settings based on their creation date, such as finding recently added configurations or tracking historical changes to HR event parameters."
hr_events,hr_event_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_event_id column serves as the primary key in the hr_events table, uniquely identifying each HR-related event or activity record. This non-nullable integer field is essential for referencing specific HR events in queries and can be used for joining with related tables or filtering individual event records."
hr_events,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the hr_events table is a required integer field that categorizes different kinds of HR-related activities and incidents. When querying this table, use this column to filter or group events by their classification (e.g., WHERE type = 1 for trainings, type = 2 for incidents, etc.), ensuring that all queries provide a valid integer value as this field cannot be null."
hr_events,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the hr_events table stores the descriptive title or identifier of each HR-related event or activity, such as ""Annual Performance Review"" or ""New Employee Orientation."" This required (non-nullable) varchar field can contain up to 255 characters and is commonly used in WHERE clauses or JOIN conditions when querying specific HR events or generating event-related reports."
hr_events,start_date,date,YES,,,,,,,,,"The start_date column in the hr_events table stores the calendar date when an HR-related event or activity began. This column accepts NULL values and can be used to filter, sort, or analyze HR events by their commencement dates, making it particularly useful for queries that need to find events within specific date ranges or track when various HR activities were initiated."
hr_events,start_time,time,YES,,,,,,,,,"The start_time column in the hr_events table stores the specific time of day when an HR-related event begins, using a standard time format (HH:MM:SS). This column is useful for querying events that begin at particular times of day or for calculating event durations, and since it's nullable, some events may not have a specified start time."
hr_events,end_date,date,YES,,,,,,,,,"The end_date column in the hr_events table stores the completion or conclusion date of HR-related activities and events, such as when a training program finished or when an HR incident was resolved. When querying this column, you can use date comparison operators to find events that ended within specific date ranges or to identify activities that have concluded, though note that the column can contain NULL values for ongoing or open-ended events."
hr_events,end_time,time,YES,,,,,,,,,"The end_time column in the hr_events table stores the time when an HR-related activity or event concludes, using a standard time format (HH:MM:SS). When writing queries, this column can be used to filter or analyze the duration of HR events, such as finding activities that end after a certain time or calculating event lengths, and since it's nullable, be sure to handle NULL values appropriately in your queries."
hr_events,google_meet_link,varchar(255),YES,,,,,,255.0,,,"The google_meet_link column in the hr_events table stores the URL for Google Meet video conferencing sessions associated with HR activities, such as virtual interviews, remote training sessions, or online meetings. When querying this column, you can expect either a valid Google Meet URL (typically starting with ""meet.google.com/"") or NULL if the event was conducted in-person or through other means."
hr_events,location_id,int,YES,,,,,,,10.0,0.0,"The location_id column in the hr_events table is an integer field that references the physical location where an HR event took place, such as an office, meeting room, or training facility. This optional field (as indicated by being nullable) helps in analyzing and filtering HR activities by their geographical or facility-specific location, enabling queries to track events that occurred at specific company locations."
hr_events,cutoff,int,YES,,,,,,,10.0,0.0,"The ""cutoff"" column in the hr_events table represents a numerical threshold or limit value associated with HR-related events, such as maximum participant counts, deadline periods, or capacity restrictions. When writing SQL queries, this column can be used to filter or compare events based on their numerical limits, for example, finding events that have reached their cutoff values or identifying activities with available capacity."
hr_events,max_guests,tinyint,YES,,,,,,,3.0,0.0,"The max_guests column in the hr_events table represents the maximum number of attendees or participants allowed for a specific HR-related event, stored as a small integer value. This column is useful when querying events with attendance limits, such as training sessions or meetings, and can be used to filter or analyze events based on their capacity constraints."
hr_events,no_max_capacity,tinyint(1),NO,,,0,,,,3.0,0.0,"The `no_max_capacity` column in the hr_events table is a boolean flag (stored as tinyint(1)) that indicates whether an HR event has unlimited capacity for attendees. When this column is set to 1, it means the event has no attendance limit, while 0 indicates there is a maximum capacity restriction in place."
hr_events,no_specific_guests,tinyint(1),NO,,,0,,,,3.0,0.0,"The `no_specific_guests` column in the hr_events table is a boolean flag (0 or 1) that indicates whether an HR event has an open attendance policy without specific guest restrictions. When querying this column, use it as a filter condition to distinguish between events that are open to all employees (1) versus those with a specific guest list (0)."
hr_events,description,text,YES,,,,,,65535.0,,,"The 'description' column in the hr_events table stores detailed text explanations of HR-related activities and incidents, such as meeting notes, training summaries, or incident descriptions. When querying this column, you can use text-based operations (like LIKE, ILIKE, or CONTAINS) to search for specific keywords or phrases within the event descriptions, though be mindful that the column allows NULL values."
hr_events,created_by,int,NO,,,0,,,,10.0,0.0,"The `created_by` column in the hr_events table is a required integer field that stores the employee ID or user ID of the person who created or logged the HR event record. When writing queries, this column can be used to filter or join with user/employee tables to track who initiated specific HR activities, and since it's non-nullable, you can always expect a valid user reference."
hr_events,updated_by,int,NO,,,0,,,,10.0,0.0,"The `updated_by` column in the hr_events table stores the employee ID (as an integer) of the staff member who last modified the HR event record. This mandatory field (non-nullable) helps maintain accountability and audit trails by tracking who made the most recent changes to each HR event entry, making it useful for filtering events by modifier or joining with an employees table to get modifier details."
hr_events,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_events table stores the timestamp when each HR-related event or activity was initially recorded in the system, automatically populated with the current date and time when a record is created. When querying this column, you can use datetime functions and comparisons to filter or analyze HR events based on when they were entered into the system, such as finding recently created records or analyzing event creation patterns over time."
hr_events,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `hr_events` table stores the timestamp of when each HR event record was last modified, automatically updating to the current time whenever changes are made to the record. This datetime field can be used in SQL queries to track modification history, filter for recently updated events, or sort HR activities based on their last update time, making it valuable for audit trails and tracking changes to HR-related records."
hr_events,hr_event_series_id,int,YES,,,0,,,,10.0,0.0,"The hr_event_series_id column in the hr_events table is used to group related HR events that are part of the same series or sequence (such as recurring training sessions or multi-part meetings). This optional integer field allows queries to easily identify and retrieve all events belonging to the same series, making it useful for analyzing patterns in recurring HR activities or tracking completion of multi-step processes."
hr_events,cutoff_type,tinyint,YES,,,0,,,,3.0,0.0,"The `cutoff_type` column in the hr_events table is a tinyint field that likely categorizes HR events based on their deadline or cutoff classification. When querying this column, you can use numeric values to filter or group HR events by their cutoff categories, though you should verify the specific numeric codes used in your organization's system as they may represent different types of deadlines or cutoff periods."
hr_events,color,varchar(50),YES,,,#A6B2B9,,,50.0,,,"The 'color' column in the hr_events table stores color codes or color names (as varchar) that are likely used for visual categorization or status indication of HR events in the organization's interface. When querying this column, you can use it to filter or group HR events by their assigned colors, with values typically stored in formats like hex codes (e.g., '#A6B2B9') or color names, and since it's nullable, be sure to handle NULL values appropriately in your queries."
hr_events,is_recurring_event,tinyint,YES,,,0,,,,3.0,0.0,"The `is_recurring_event` column in the hr_events table is a boolean flag (stored as tinyint) that indicates whether an HR event occurs on a repeating basis (1) or is a one-time occurrence (0). This column can be used in SQL queries to filter or group HR activities based on their recurrence pattern, making it particularly useful when analyzing regular trainings, periodic meetings, or other cyclical HR events."
hr_events,parent_event_id,int,YES,,,0,,,,10.0,0.0,"The parent_event_id column in the hr_events table is used to establish hierarchical relationships between HR events, where one event can be a sub-event or follow-up to another event. When querying, this column can be used to trace event relationships or group related events together, with NULL values indicating top-level events that don't have a parent."
hr_events,recurring_settings,text,YES,,,,,,65535.0,,,"The recurring_settings column in the hr_events table stores configuration details for events that repeat on a regular basis, typically in JSON or structured text format. This column can be used to specify recurrence patterns (e.g., ""every Monday,"" ""first day of each month"") and related settings for recurring HR activities like regular team meetings, monthly training sessions, or periodic performance reviews."
hr_events,is_event_complete,tinyint,YES,,,0,,,,3.0,0.0,"The `is_event_complete` column in the hr_events table is a boolean flag (stored as a tinyint) that indicates whether a specific HR event has been completed (1) or is still pending (0). This column can be used in WHERE clauses to filter for completed or pending HR activities, making it useful for tracking the status of various human resources events such as trainings, meetings, or incidents."
hr_events,is_checkin_mail_sent,tinyint,YES,,,0,,,,3.0,0.0,"The `is_checkin_mail_sent` column in the hr_events table is a boolean flag (stored as tinyint) that indicates whether a check-in email notification has been sent for a particular HR event. When querying this column, use 1 to filter for events where the check-in mail was sent and 0 for events where it wasn't sent, making it useful for tracking communication status in HR-related activities."
hr_events,checkin_mail_sent_date,datetime,YES,,,,,,,,,"The checkin_mail_sent_date column in the hr_events table stores the timestamp when follow-up or check-in emails were sent regarding HR-related activities or incidents. This nullable datetime field can be used to track communication timing and filter or analyze when HR follow-ups occurred, making it useful for queries that need to monitor communication patterns or ensure timely follow-ups."
hr_form_answers,hr_form_answer_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_form_answer_id column serves as the primary key in the hr_form_answers table, uniquely identifying each individual response submitted through HR forms and questionnaires. This non-nullable integer column should be used in JOIN operations when linking form answers to related tables, and in WHERE clauses when querying for specific form responses."
hr_form_answers,hr_form_question_id,int,NO,MUL,,0,,,,10.0,0.0,"The hr_form_question_id column in the hr_form_answers table is a required foreign key that links each answer to its corresponding question in a related HR form questions table. When querying, this column can be used to join with the questions table to retrieve question details or to filter/group answers by specific questions, making it essential for analyzing responses to particular HR form questions."
hr_form_answers,hr_form_id,int,NO,MUL,,0,,,,10.0,0.0,"The hr_form_id column in the hr_form_answers table is a required integer field that serves as a foreign key to link each answer record to its corresponding HR form or questionnaire. When writing queries, this column is commonly used to filter or group answers by specific form types, or to join with the parent forms table to access form metadata and specifications."
hr_form_answers,user_type,tinyint,YES,,,0,,,,3.0,0.0,"The user_type column in hr_form_answers is a tinyint field that categorizes the type of user who submitted the form response (e.g., employee, candidate, or other HR system user). When querying this table, you can use this column to filter or group form responses based on the submitter's category, with different numeric values representing different user types."
hr_form_answers,user_id,int,NO,MUL,,0,,,,10.0,0.0,"The user_id column in the hr_form_answers table is a required integer field that identifies which user submitted each form response, linking to a user record in another table. When querying form responses, this column can be used to filter or group answers by specific users, or to join with user-related tables to access additional information about the form respondent."
hr_form_answers,answer,text,YES,,,,,,65535.0,,,"The ""answer"" column in the hr_form_answers table stores the actual text responses provided by users when filling out HR forms and questionnaires. This column can contain various types of free-form text responses, such as open-ended feedback, explanations, or detailed answers to HR-related questions, and may be NULL if no response was provided for a particular question."
hr_form_answers,hr_hiring_request_id,int,YES,,,0,,,,10.0,0.0,"The hr_hiring_request_id column in the hr_form_answers table is an optional integer field that links form responses to specific hiring requests in the HR system. When querying form responses related to hiring processes, you can use this column to filter or join with the corresponding hiring request records, though the NULL values indicate that not all form responses are necessarily associated with a hiring request."
hr_form_answers,retake_count,int,YES,,,0,,,,10.0,0.0,"The retake_count column in hr_form_answers tracks how many times a user has resubmitted or retaken a particular HR form or questionnaire, with 0 indicating the first attempt. This optional integer field helps HR administrators monitor multiple submission attempts and can be useful when analyzing form completion patterns or identifying assessments that frequently require multiple attempts."
hr_form_answers,point_value,"decimal(4,2)",YES,,,0.00,,,,4.0,2.0,"The point_value column in hr_form_answers stores numerical scores or weighted values (with up to 2 decimal places) associated with individual form responses, likely used for scoring assessments or evaluating responses. This optional field can be used in aggregate functions (like AVG, SUM) to calculate overall scores or analyze response values across form submissions."
hr_form_answers,is_manually_evaluated,tinyint,YES,,,0,,,,3.0,0.0,"The `is_manually_evaluated` column in the hr_form_answers table is a boolean flag (stored as tinyint) that indicates whether a form response has been manually reviewed or evaluated by HR personnel. When querying this column, use 1 to filter for manually evaluated responses and 0 for responses that haven't undergone manual evaluation, making it useful for identifying which submissions require human review or tracking evaluation status."
hr_form_answers,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_form_answers table records the timestamp when each form response or questionnaire submission was initially created, automatically populated with CURRENT_TIMESTAMP. This datetime field is useful for tracking submission timing, filtering responses by date ranges, and analyzing submission patterns over time."
hr_form_answers,is_archived,tinyint,NO,,,0,,,,3.0,0.0,"The `is_archived` column in the `hr_form_answers` table is a boolean flag (stored as tinyint) that indicates whether a form response has been archived (1) or is still active (0). When querying form responses, you can use this column to filter for either active records (`WHERE is_archived = 0`) or archived records (`WHERE is_archived = 1`), helping to manage and retrieve relevant HR form submissions based on their archive status."
hr_form_question_options,hr_form_question_options_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The hr_form_question_options_id column serves as the primary key identifier for each unique answer option in the HR form question options table. This integer-based identifier is required (non-nullable) and should be referenced when joining to related tables or filtering specific answer options in HR forms and surveys.
hr_form_question_options,hr_form_question_id,int,NO,MUL,,0,,,,10.0,0.0,The hr_form_question_id column serves as a foreign key that links each answer option to its parent question in the HR forms system. This column is required (non-nullable) and indexed (MUL) to optimize queries that need to retrieve all possible answer choices for a specific HR form question.
hr_form_question_options,hr_form_id,int,NO,MUL,,0,,,,10.0,0.0,"The hr_form_id column in the hr_form_question_options table is a required integer field that links answer options to their corresponding HR form, serving as a foreign key reference. When writing queries, this column is commonly used to filter or join with the parent HR form table to retrieve all available answer options for a specific form or questionnaire."
hr_form_question_options,hr_form_question_type_id,int,NO,MUL,,0,,,,10.0,0.0,"The hr_form_question_type_id column is a required foreign key that links each answer option to its corresponding question type in the HR forms system. This column helps categorize and organize answer options based on the type of question they belong to (e.g., multiple choice, rating scale, etc.), enabling proper filtering and grouping of options when constructing form questions."
hr_form_question_options,option_name,varchar(255),YES,,,,,,255.0,,,"The option_name column in hr_form_question_options stores the text label or description of each possible answer choice that can be selected in HR forms and surveys, with a maximum length of 255 characters. When writing SQL queries, this column can be used to filter, display, or group answer options based on their displayed text, and since it's nullable, queries should handle potential NULL values appropriately."
hr_form_question_options,option_value,varchar(255),YES,,,,,,255.0,,,"The option_value column in hr_form_question_options stores the actual text or content of individual answer choices that users can select when responding to HR form questions. When writing SQL queries, this column can be used to retrieve, filter, or group specific answer options, such as ""SELECT option_value FROM hr_form_question_options WHERE option_value LIKE '%agree%'"" to find all agreement-related response options."
hr_form_question_options,option_answer,varchar(255),YES,,,,,,255.0,,,"The option_answer column in hr_form_question_options stores the actual text content of predefined answer choices that users can select when responding to HR form questions. When querying this column, you can use string operations to search or filter specific answer options, and since it's nullable, remember to handle NULL values appropriately in your WHERE clauses or JOIN conditions."
hr_form_question_options,user_answer,varchar(255),YES,,,,,,255.0,,,"The `user_answer` column in the `hr_form_question_options` table stores the actual text of predefined answer choices that users can select when responding to HR form questions, with a maximum length of 255 characters. When querying this column, it's useful for filtering or displaying specific answer options, and since it's nullable, be sure to handle NULL values appropriately in your queries using IS NULL or COALESCE when necessary."
hr_form_question_options,position,int,NO,,,0,,,,10.0,0.0,"The 'position' column in hr_form_question_options is a required integer field that determines the display order of answer options within a question. When writing queries, use this column to sort or arrange answer choices in a specific sequence, ensuring they appear in the intended order when presented to users completing HR forms and surveys."
hr_form_question_options,created_by,int,NO,,,0,,,,10.0,0.0,"The `created_by` column in the `hr_form_question_options` table is a required integer field that stores the user ID of the person who created each answer option. When writing queries, this column can be used to track authorship of answer options and can be joined with a user table to get detailed information about who created specific question choices in HR forms."
hr_form_question_options,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_form_question_options table records the timestamp when each answer option was initially added to the system, automatically populated with CURRENT_TIMESTAMP when a new record is created. This datetime field is useful for tracking when answer choices were introduced and can be helpful in filtering or auditing changes to available form options over time."
hr_form_question_sections,hr_form_question_section_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_form_question_section_id column serves as the primary key identifier for sections within HR forms, using unique integer values to distinguish between different question groupings or categories. This column is non-nullable and should be referenced when joining to related tables or filtering specific form sections."
hr_form_question_sections,hr_form_id,int,NO,MUL,,0,,,,10.0,0.0,"The hr_form_id column in the hr_form_question_sections table serves as a foreign key that links question sections to their parent HR form. When writing queries, use this column to join with the main HR forms table or to filter question sections belonging to a specific form, as it's a required field (non-nullable) that helps maintain the hierarchical relationship between forms and their section groupings."
hr_form_question_sections,title,varchar(255),NO,,,,,,255.0,,,"The 'title' column in hr_form_question_sections stores the descriptive name or heading text for each section within HR forms, such as ""Personal Information,"" ""Employment History,"" or ""Benefits Selection."" This required varchar field (maximum 255 characters) helps identify and label distinct groupings of related questions, making it essential for organizing form content and providing clear navigation for users completing HR documents."
hr_form_question_sections,section_type,tinyint,YES,,,0,,,,3.0,0.0,"The section_type column in hr_form_question_sections uses a tinyint value to classify different types of question sections within HR forms, such as personal information, employment history, or benefits selections. When writing queries, this column can be used to filter or group questions by their section category, helping to organize and retrieve related questions that belong to the same logical section of an HR form."
hr_form_question_sections,is_required,tinyint,NO,,,0,,,,3.0,0.0,"The `is_required` column in the hr_form_question_sections table is a boolean flag (stored as tinyint) that indicates whether a particular question section must be completed in an HR form. When writing queries, use this column with values 0 (not required) or 1 (required) to filter or identify mandatory versus optional form sections."
hr_form_question_sections,position,int,NO,,,0,,,,10.0,0.0,"The 'position' column in hr_form_question_sections is a required integer field that determines the display order of question sections within HR forms. This numeric value helps maintain a consistent and logical sequence of sections when rendering forms, with lower numbers typically appearing before higher numbers in the form layout."
hr_form_question_sections,created_by,int,NO,,,0,,,,10.0,0.0,"The created_by column in hr_form_question_sections stores the user ID (as an integer) of the person who created each form section, making it mandatory through its non-null constraint. When writing queries, this column can be used to track section authorship or join with user tables to get creator details, commonly used in WHERE clauses like ""WHERE created_by = [user_id]"" or in JOIN operations with user/employee tables."
hr_form_question_sections,updated_by,int,NO,,,0,,,,10.0,0.0,"The updated_by column in hr_form_question_sections stores the user ID (as an integer) of the person who last modified the question section record, making it useful for audit trails and tracking changes. When writing queries, this column can be joined with a users or employees table to get details about who made the most recent updates to form sections, and since it's non-nullable, you can always expect a valid user reference."
hr_form_question_sections,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in hr_form_question_sections stores the timestamp when each question section was initially created in the system, automatically populated with CURRENT_TIMESTAMP. When writing queries, this column can be used to filter or sort question sections by their creation date, which is particularly useful for auditing changes or finding recently added form sections."
hr_form_question_sections,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in hr_form_question_sections stores the timestamp of when a question section was last modified, automatically updating to the current time whenever a record is changed. When writing queries, this column is useful for tracking changes over time and filtering for recently modified sections, though it can be null in some cases."
hr_form_question_types,hr_form_question_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_form_question_type_id column serves as the primary key identifier for different types of HR form questions in the hr_form_question_types table. When writing SQL queries, use this column to uniquely identify or join with specific question types, such as when you need to filter for particular question formats or establish relationships with other tables that reference question types."
hr_form_question_types,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the hr_form_question_types table stores the descriptive labels for different types of questions used in HR forms and surveys (e.g., ""Multiple Choice"", ""Text Input"", ""Rating Scale""). When writing SQL queries, this required (non-nullable) varchar column can be used to filter, group, or join based on question type names, making it useful for organizing and categorizing form questions by their format."
hr_form_question_types,key,varchar(255),NO,,,,,,255.0,,,"The 'key' column in the hr_form_question_types table stores unique identifiers for different types of HR form questions, using a text format with a maximum length of 255 characters. This required field (non-nullable) typically contains descriptive keys like 'multiple_choice', 'text_input', or 'rating_scale' that can be referenced when creating or querying HR forms and surveys."
hr_form_questions,hr_form_question_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_form_question_id column serves as the primary key identifier for each unique question in the hr_form_questions table, using auto-incrementing integers. When writing SQL queries, use this column to uniquely identify or join specific HR form questions with related tables, such as responses or form templates."
hr_form_questions,hr_form_id,int,NO,MUL,,0,,,,10.0,0.0,"The hr_form_id column in the hr_form_questions table is a non-nullable integer field that serves as a foreign key, linking each question to its associated HR form or survey. When writing SQL queries, this column can be used to filter or join questions based on their parent form, making it essential for retrieving all questions belonging to a specific HR assessment or grouping questions by form."
hr_form_questions,hr_form_question_section_id,int,NO,MUL,,0,,,,10.0,0.0,"The hr_form_question_section_id column is a required integer field that serves as a foreign key to link questions with their respective sections within HR forms and surveys. This column helps organize questions into logical groupings or sections, enabling structured navigation and organization of form content."
hr_form_questions,question_type,tinyint,YES,,,0,,,,3.0,0.0,"The question_type column in the hr_form_questions table is a tinyint field that categorizes the type or format of HR survey questions (such as multiple choice, yes/no, or free text). When querying this table, you can use this column to filter or group questions based on their type, making it easier to retrieve specific question formats for different HR assessment needs."
hr_form_questions,question,varchar(255),NO,,,,,,255.0,,,"The 'question' column in the hr_form_questions table stores the actual text content of HR-related survey or form questions, with a maximum length of 255 characters. This required field (non-nullable) contains the specific wording of questions used across various HR assessments, making it a crucial column for querying or displaying question content in HR forms and surveys."
hr_form_questions,photo,text,YES,,,,,,65535.0,,,"The 'photo' column in the hr_form_questions table stores image-related data or references (as text) that may be associated with HR form questions, such as diagrams, illustrations, or visual aids that help clarify the question content. When querying this column, keep in mind that it's nullable, meaning some questions may not have associated images, so it's good practice to use NULL checks when filtering or displaying this data."
hr_form_questions,photo_align,varchar(255),YES,,,,,,255.0,,,"The photo_align column in the hr_form_questions table specifies the alignment preference for any images associated with HR form questions, stored as a text value (e.g., 'left', 'right', 'center'). When querying this column, it can be used to determine how images should be positioned relative to question text in form layouts, though the column may contain NULL values if no image alignment is specified."
hr_form_questions,video,text,YES,,,,,,65535.0,,,"The 'video' column in the hr_form_questions table stores optional video content URLs or video-related instructions associated with HR form questions, such as video prompts or demonstration links. When querying this column, be aware that it can contain NULL values and should be handled accordingly in SQL queries, particularly when filtering or joining based on video content."
hr_form_questions,video_align,varchar(255),YES,,,,,,255.0,,,"The video_align column in the hr_form_questions table specifies the alignment or positioning preference for any video content associated with an HR form question, stored as a text value (e.g., 'left', 'center', 'right'). When querying this column, it can be used to filter or sort questions based on their video presentation layout, which is particularly relevant when displaying questions that include video content in HR forms and surveys."
hr_form_questions,position,int,NO,,,0,,,,10.0,0.0,"The 'position' column in the hr_form_questions table is a required integer field that determines the display order of questions within HR forms and surveys. When writing queries, this column can be used to sort questions in their intended sequence (e.g., ORDER BY position ASC) or to reorder questions within a form."
hr_form_questions,point_value,tinyint,YES,,,0,,,,3.0,0.0,"The `point_value` column in the `hr_form_questions` table represents the numerical weight or score assigned to individual HR survey questions, stored as a small integer value. This optional field can be used in SQL queries to calculate total scores for assessments or to filter questions based on their relative importance, with NULL values indicating questions that don't contribute to numerical scoring."
hr_form_questions,option_answer_count,tinyint,YES,,,0,,,,3.0,0.0,"The option_answer_count column in the hr_form_questions table indicates the number of predefined answer options available for a particular HR form question, such as in multiple choice questions. This optional field (allowing NULL values) uses a tinyint data type to efficiently store small integer values, making it useful for tracking questions that may have anywhere from zero to several answer choices."
hr_form_questions,created_by,int,NO,,,0,,,,10.0,0.0,"The created_by column in the hr_form_questions table is a required integer field that stores the employee ID or user ID of the person who created each HR form question. When writing queries, this column can be used to track authorship of questions and can be joined with user/employee tables to get detailed information about question creators."
hr_form_questions,updated_by,int,NO,,,0,,,,10.0,0.0,"The updated_by column in the hr_form_questions table is a required integer field that stores the employee ID or user ID of the person who last modified the question record. When writing queries, this column can be used to track question modifications and join with user/employee tables to get information about who made changes to HR form questions."
hr_form_questions,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_form_questions table records the timestamp when each HR form question was initially added to the system, automatically populated with CURRENT_TIMESTAMP. When querying this column, it's useful for tracking question creation history and filtering questions by their creation date, making it valuable for auditing and analyzing the evolution of HR form content over time."
hr_form_questions,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_form_questions table automatically tracks the most recent modification timestamp for each HR form question record. This datetime field is useful for auditing changes and filtering questions based on when they were last modified, making it particularly valuable when you need to identify recently updated questions or track the evolution of question content over time."
hr_form_setting_maps,hr_form_setting_map_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_form_setting_map_id column serves as the primary key identifier for each unique form-configuration mapping record in the hr_form_setting_maps table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific form setting mappings (e.g., WHERE hr_form_setting_map_id = X)."
hr_form_setting_maps,hr_form_setting_id,int,NO,MUL,,,,,,10.0,0.0,"The hr_form_setting_id column serves as a foreign key in the hr_form_setting_maps table, linking to configuration settings for HR forms. When writing SQL queries, use this column to join with the corresponding settings table to retrieve specific form configuration parameters, or to filter form mappings based on particular setting IDs."
hr_form_setting_maps,hr_form_id,int,NO,MUL,,,,,,10.0,0.0,"The hr_form_id column in hr_form_setting_maps serves as a foreign key that links to the primary form record in a related HR forms table, establishing which form a particular configuration setting belongs to. When writing queries, this column is commonly used in JOIN operations to connect form settings with their parent forms, and it's indexed (MUL) to optimize these relationship-based queries."
hr_form_setting_maps,setting_value,varchar(255),YES,,,,,,255.0,,,"The setting_value column in hr_form_setting_maps stores the actual configuration values or parameters that define how specific HR form elements should behave or be displayed, with values stored as text strings up to 255 characters in length. When querying this column, you can use string comparison operators and pattern matching (like LIKE or REGEXP) to find forms with specific configuration values, and since it's nullable, remember to handle NULL cases appropriately in your WHERE clauses."
hr_form_settings,hr_form_setting_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_form_setting_id column serves as the primary key in the hr_form_settings table, uniquely identifying each configuration record for HR forms and documents. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference specific form settings (e.g., SELECT * FROM hr_form_settings WHERE hr_form_setting_id = 123)."
hr_form_settings,section_type,tinyint,YES,,,0,,,,3.0,0.0,"The section_type column in hr_form_settings is a tinyint field that categorizes different sections or components within HR forms using numeric codes. When querying this column, you can use it to filter or group form settings based on their section classifications, where different values (typically 0-255) represent distinct section types within the HR document structure."
hr_form_settings,setting_item,varchar(255),NO,,,,,,255.0,,,"The setting_item column in hr_form_settings stores the unique identifier or name of a specific HR form configuration parameter as a text string (up to 255 characters). When writing SQL queries, use this column to filter, group, or identify specific form settings, such as ""default_approval_workflow"" or ""required_fields_list"", making it essential for retrieving or updating configuration values for particular HR form features."
hr_form_settings,setting_value,varchar(255),YES,,,,,,255.0,,,"The setting_value column in hr_form_settings stores the actual configuration values for various HR form parameters as text strings up to 255 characters in length. When writing queries, this column can be used to retrieve or update specific form settings, and since it's nullable, you should handle potential NULL values appropriately when performing comparisons or data manipulation."
hr_form_settings,is_editable,int,YES,,,0,,,,10.0,0.0,"The `is_editable` column in the hr_form_settings table is a binary flag (stored as an integer) that determines whether a particular HR form or document can be modified by users. When querying this column, use 1 to filter for editable forms and 0 for read-only forms (e.g., `WHERE is_editable = 1` to find forms that users can modify)."
hr_form_settings,is_manual_setting,tinyint(1),YES,,,0,,,,3.0,0.0,"The `is_manual_setting` column in the hr_form_settings table is a boolean flag (stored as tinyint(1)) that indicates whether a form configuration was manually set by a user (1) or uses system-generated default values (0). When querying this column, use it to filter or differentiate between manually configured form settings and automatically generated ones, which is particularly useful when you need to identify customized HR form configurations."
hr_form_settings,json_data,json,YES,,,,,,,,,"The json_data column in the hr_form_settings table stores flexible configuration data for HR forms in JSON format, allowing for storage of complex, nested settings and preferences. When querying this column, use JSON operators and functions (like ->, ->>, JSON_EXTRACT) to access specific properties within the stored JSON objects, and remember that the column can contain NULL values."
hr_forms,hr_form_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_form_id column serves as the primary key identifier for each HR document or form stored in the hr_forms table, using a unique integer value. This column should be used in WHERE clauses when querying specific HR forms or when joining with related tables that reference HR forms."
hr_forms,title,varchar(255),NO,,,,,,255.0,,,"The 'title' column in the hr_forms table stores the descriptive name or heading of each HR document or form, with a maximum length of 255 characters. This required field (non-nullable) should be used when searching for specific HR documents or when displaying form listings, making it ideal for WHERE clauses and SELECT statements when users need to locate particular HR forms by their names."
hr_forms,form_type,tinyint,YES,,,,,,,3.0,0.0,"The form_type column in the hr_forms table is a tinyint field that categorizes different types of HR documents using numeric codes (e.g., 1 for contracts, 2 for policies, etc.). When querying HR documents, you can use this column to filter or group results by document type, making it useful for retrieving specific categories of HR forms or analyzing document distribution across different types."
hr_forms,description,text,YES,,,,,,65535.0,,,"The 'description' column in the hr_forms table contains detailed explanatory text about each HR document or form, providing context about its purpose and usage. When querying this column, you can use text-based operations (like LIKE, ILIKE, or CONTAINS) to search for specific forms based on their descriptions, and since it's nullable, remember to handle NULL values appropriately in your queries."
hr_forms,test_questions_count,tinyint,NO,,,0,,,,3.0,0.0,"The test_questions_count column in the hr_forms table represents the number of assessment questions associated with an HR form or document, stored as a small integer value that cannot be null. This column is useful when querying forms that contain evaluations or assessments, and can be used to filter or analyze forms based on their question count."
hr_forms,passing_grade,"decimal(4,2)",NO,,,0.00,,,,4.0,2.0,The passing_grade column in the hr_forms table stores the minimum score (as a decimal number with two decimal places) required to pass or successfully complete an HR-related form or assessment. This required field can store values up to 99.99 and is commonly used in queries to evaluate whether employees have met the minimum performance threshold for specific HR documents or training materials.
hr_forms,slug,varchar(255),NO,,,,,,255.0,,,"The 'slug' column in the hr_forms table contains URL-friendly string identifiers for HR documents, making them easily referenceable in web applications and APIs. When querying HR forms, you can use this column to search for or filter specific documents using human-readable strings (e.g., 'employee-handbook-2023' or 'vacation-request-form')."
hr_forms,status,tinyint,YES,,,0,,,,3.0,0.0,"The 'status' column in the hr_forms table uses a tinyint value to indicate the current state of HR documents and forms, where different numeric values likely represent states such as draft, active, archived, or deprecated. When querying this table, you can filter documents based on their status using simple numeric comparisons (e.g., WHERE status = 1), making it efficient to retrieve forms in specific states."
hr_forms,created_by,int,NO,,,0,,,,10.0,0.0,"The `created_by` column in the `hr_forms` table is a required integer field that stores the employee ID or user ID of the person who created the HR document or form. When writing queries, this column can be used to track document authorship and is commonly joined with a users or employees table to retrieve the creator's details."
hr_forms,updated_by,int,NO,,,0,,,,10.0,0.0,The `updated_by` column in the `hr_forms` table is a required integer field that stores the employee ID or user ID of the person who last modified the HR document or form. This column is essential for maintaining an audit trail of document changes and helps track who made the most recent updates to HR forms and templates.
hr_forms,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_forms table records the date and time when each HR document or form was initially added to the system, automatically populated with CURRENT_TIMESTAMP when a new record is created. This timestamp field is useful for tracking document history and can be used in SQL queries to filter or sort HR forms by their creation date, such as finding recently added documents or analyzing document creation patterns over time."
hr_forms,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_forms table automatically records the timestamp when a form or document was last modified, using the CURRENT_TIMESTAMP value. This datetime field is useful for tracking document version history and can be used in SQL queries to filter or sort HR documents based on their last update time, such as finding recently modified forms or identifying documents that haven't been updated within a specific timeframe."
hr_forms,days_to_complete,int,YES,,,,,,,10.0,0.0,"The `days_to_complete` column in the `hr_forms` table represents the number of days allowed or expected for completing a particular HR form or document. This optional integer field helps track deadlines and processing timeframes for various HR-related documents, enabling teams to monitor and manage document completion timelines effectively."
hr_forms,is_onboarding_package,int,YES,,,,,,,10.0,0.0,"The `is_onboarding_package` column in the `hr_forms` table is a boolean flag (stored as an integer) that indicates whether a particular HR document is part of the new employee onboarding package. When querying, use this column with values 1 (true) or 0 (false) to filter or identify forms specifically used in the employee onboarding process."
hr_forms,department_id,int,YES,,,,,,,10.0,0.0,"The department_id column in the hr_forms table is an optional integer field that links HR forms to specific departments within the organization. This column can be used to filter or group HR documents by department, making it useful for queries that need to retrieve department-specific forms or analyze form distribution across different organizational units."
hr_hiring_colaborators,hr_hiring_colaborator_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_hiring_colaborator_id is the primary key column in the hr_hiring_colaborators table, uniquely identifying each external collaborator or contractor involved in the hiring process. This non-nullable integer column should be used in JOIN operations when linking to other tables that reference external collaborators, and it's essential for filtering or retrieving specific collaborator records."
hr_hiring_colaborators,hr_hiring_process_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_process_id column in the hr_hiring_colaborators table serves as a reference to link external collaborators to specific hiring processes. This required integer field enables tracking which collaborators are involved in each hiring process, making it essential for queries that need to analyze collaborator participation or filter collaborators by specific hiring processes."
hr_hiring_colaborators,collaborator_id,int,NO,,,,,,,10.0,0.0,"The collaborator_id column serves as a unique identifier for each external collaborator or contractor in the hiring process. This integer field is required (non-nullable) and should be referenced when joining with other tables or filtering specific collaborator records in queries involving recruiters, interviewers, or assessment providers."
hr_hiring_colaborators,created_at,datetime,NO,,,,,,,,,The created_at column in the hr_hiring_colaborators table records the exact date and time when a collaborator's record was first added to the system. This non-nullable datetime field is useful for tracking when external hiring partners began their association with the organization and can be used for auditing purposes or analyzing collaborator engagement timelines.
hr_hiring_leads,hr_request_hiring_lead_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_request_hiring_lead_id is the primary key column in the hr_hiring_leads table, uniquely identifying each potential job candidate or hiring lead in the HR system. This non-nullable integer column should be used in WHERE clauses when looking up specific candidates, and in JOIN operations when connecting hiring lead data with related tables in the HR database."
hr_hiring_leads,hr_hiring_process_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_process_id column in the hr_hiring_leads table is a required integer field that identifies a specific hiring process or pipeline stage for each job candidate. This column can be used to join with other HR-related tables or to filter candidates based on their current stage in the hiring process, making it useful for queries that need to track or analyze candidate progression through the recruitment pipeline."
hr_hiring_leads,hiring_lead_id,int,NO,,,,,,,10.0,0.0,"The hiring_lead_id column serves as the primary identifier for each unique job candidate or hiring lead in the hr_hiring_leads table. This non-nullable integer column should be used in WHERE clauses and JOIN conditions when you need to reference or filter specific candidates, or when connecting candidate information to related tables in the hiring system."
hr_hiring_leads,created_at,datetime,NO,,,,,,,,,The created_at column in the hr_hiring_leads table records the exact date and time when a potential candidate's record was first added to the hiring pipeline system. This non-nullable datetime field is useful for tracking how long candidates have been in the pipeline and can be used to analyze recruitment timelines or filter candidates based on when they entered the system.
hr_hiring_onboarding_settings,hr_hiring_onboarding_setting_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_hiring_onboarding_setting_id is the primary key column that uniquely identifies each configuration setting record in the hr_hiring_onboarding_settings table. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific HR hiring and onboarding configuration settings."
hr_hiring_onboarding_settings,hr_hiring_request_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_request_id column in the hr_hiring_onboarding_settings table serves as a reference identifier for specific hiring requests within the HR onboarding system. When writing SQL queries, use this non-nullable integer column to filter, join, or group configuration settings related to particular hiring requests, such as ""SELECT * FROM hr_hiring_onboarding_settings WHERE hr_hiring_request_id = 123"" to retrieve settings for a specific hiring request."
hr_hiring_onboarding_settings,type,tinyint,NO,,,,,,,3.0,0.0,"The 'type' column in the hr_hiring_onboarding_settings table is a required (non-nullable) tinyint field that categorizes different types of HR configuration settings or parameters. When querying this table, use this column to filter or group settings by their specific type (e.g., recruitment settings vs. onboarding settings), where each distinct numeric value represents a different category of HR process configuration."
hr_hiring_onboarding_settings,type_id,int,NO,,,,,,,10.0,0.0,"The type_id column in hr_hiring_onboarding_settings is a required integer field that categorizes different types of HR configuration settings and parameters. This column can be used to filter or group related settings (for example, to distinguish between hiring-related configurations versus onboarding-related ones) and should be included in WHERE clauses when querying for specific types of HR process settings."
hr_hiring_onboarding_settings,deadline_configuration,tinyint,YES,,,,,,,3.0,0.0,"The deadline_configuration column in hr_hiring_onboarding_settings is a tinyint field that specifies how deadlines should be handled during the hiring and onboarding processes. When writing queries, this column can be used to filter or group hiring settings based on different deadline handling configurations, with NULL values indicating that default deadline settings should be applied."
hr_hiring_onboarding_settings,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_hiring_onboarding_settings table is a required integer field that stores the user ID of the person who created each configuration setting or parameter record. When writing queries, this column can be used to track ownership of settings, filter configurations by creator, or join with user tables to get additional information about who established specific HR process parameters."
hr_hiring_onboarding_settings,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_hiring_onboarding_settings table records the exact date and time when each configuration setting or parameter was initially created in the system. This non-nullable datetime field is useful for auditing purposes and can be used in SQL queries to filter or sort settings based on when they were established, such as finding recently added configurations or tracking historical changes to HR process settings."
hr_hiring_process,hr_hiring_process_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_hiring_process_id is the primary key column that uniquely identifies each recruitment workflow record in the hr_hiring_process table. When writing SQL queries, use this column for joining with related tables or filtering specific hiring process records, as it serves as the main identifier for tracking individual recruitment activities and their progression through the hiring pipeline."
hr_hiring_process,hr_hiring_request_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_request_id column in the hr_hiring_process table serves as a reference to identify specific hiring requests within the recruitment workflow. This integer field is mandatory (non-nullable) and can be used to track and query individual hiring processes, making it useful for filtering and joining with related recruitment data."
hr_hiring_process,hr_job_role_id,int,NO,,,,,,,10.0,0.0,"The hr_job_role_id column in the hr_hiring_process table is a required integer field that identifies the specific job position being recruited for in each hiring process record. This column helps link the hiring process to the corresponding job role, enabling queries to filter and analyze recruitment activities by position, making it essential for tracking and reporting on role-specific hiring metrics."
hr_hiring_process,lead,int,NO,,,,,,,10.0,0.0,"The ""lead"" column in the hr_hiring_process table is a required integer field that identifies the HR team member or hiring manager responsible for managing a specific hiring process instance. This column is essential for tracking ownership and accountability in the recruitment workflow, enabling queries to filter or group hiring activities by the assigned lead personnel."
hr_hiring_process,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_hiring_process table is a required integer field that stores the employee ID of the HR staff member or system user who initiated or created the hiring process record. This column is essential for tracking accountability and maintaining an audit trail of who started each recruitment workflow, making it useful in queries that need to filter or group hiring processes by their creators."
hr_hiring_process,notes,text,YES,,,,,,65535.0,,,"The 'notes' column in the hr_hiring_process table stores detailed textual comments, feedback, and observations related to candidates throughout the recruitment process. This free-form text field can be used to document interviewer feedback, candidate qualifications, concerns, or any other relevant information that helps track the candidate's progress through the hiring workflow."
hr_hiring_process,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_hiring_process table records the exact date and time when a hiring process record was initially created in the system. This timestamp is mandatory (non-nullable) and can be used to track when candidates entered the recruitment pipeline, analyze recruitment timelines, or filter hiring activities by specific time periods in SQL queries."
hr_hiring_process_step_documents,hr_hiring_process_step_document_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_hiring_process_step_document_id is the primary key column that uniquely identifies each document record in the hr_hiring_process_step_documents table. When writing SQL queries, use this column for joining to related tables, filtering specific documents, or retrieving individual document records from the hiring process workflow."
hr_hiring_process_step_documents,hr_hiring_process_step_id,int,YES,,,,,,,10.0,0.0,"This column serves as a foreign key reference to link documents with specific steps in the hiring process workflow. When querying, use hr_hiring_process_step_id to join with the hiring process steps table or to filter documents associated with a particular step in the recruitment workflow."
hr_hiring_process_step_documents,document_category_id,int,YES,,,,,,,10.0,0.0,"The document_category_id column in hr_hiring_process_step_documents is an integer field that classifies documents into different categories within the hiring process (e.g., identification documents, employment forms, background checks). When querying, this column can be used to filter or group documents by their category type, and since it's nullable, some documents may not have a category assigned."
hr_hiring_process_step_documents,document_id,int,YES,,,,,,,10.0,0.0,"The document_id column in hr_hiring_process_step_documents serves as a reference identifier for individual documents and files within the hiring process workflow. This integer field can be used in SQL queries to uniquely identify or filter specific documents, and since it's nullable, some workflow steps may not have associated documents."
hr_hiring_process_step_documents,created_at,datetime,NO,,,,,,,,,"The created_at column records the exact date and time when a document or file was initially added to the hiring process workflow system. This timestamp field is mandatory (non-nullable) and can be used to track document submission chronology, filter records by creation date, or analyze document processing timelines in the recruitment process."
hr_hiring_process_step_documents,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column stores the user ID (as an integer) of the person who initially uploaded or created the document record in the hiring process workflow. This optional field can be used to track document ownership and audit who added specific paperwork to the hiring process, making it useful for queries that need to filter or join documents based on their creator."
hr_hiring_process_steps,hr_hiring_process_step_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_hiring_process_step_id is the primary key identifier for each unique step in the organization's hiring workflow process. This integer column can be used to join with other recruitment-related tables and to uniquely reference specific stages of the hiring process, such as initial screening or final interviews."
hr_hiring_process_steps,hr_hiring_step_id,int,NO,,,,,,,10.0,0.0,The hr_hiring_step_id column serves as a unique identifier for each distinct step in the organization's hiring process workflow. This integer column can be used in SQL queries to reference specific hiring stages (like initial screening or interviews) and is commonly joined with other recruitment-related tables to track candidates' progress through the hiring pipeline.
hr_hiring_process_steps,hr_hiring_process_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_process_id column serves as a unique identifier for each distinct step or stage in the organization's hiring workflow process. This integer column can be used in SQL queries to join with other recruitment-related tables or to filter/group specific hiring process steps, helping track and manage the progression of candidates through standardized recruitment stages."
hr_hiring_process_steps,hr_job_role_id,int,NO,,,,,,,10.0,0.0,The hr_job_role_id column in the hr_hiring_process_steps table is a required integer field that links specific hiring process steps to their associated job roles. This column helps organize and customize the recruitment workflow by allowing different job positions to have their own defined set of hiring stages and requirements.
hr_hiring_process_steps,option_name,varchar(50),YES,,,,,,50.0,,,"The option_name column in hr_hiring_process_steps stores descriptive labels for individual steps within the hiring workflow, such as ""Phone Screen"" or ""Technical Interview."" This column can be used to filter, group, or display human-readable names of hiring process steps in queries, helping to identify specific stages when analyzing or managing recruitment workflows."
hr_hiring_process_steps,option_value,text,NO,,,,,,65535.0,,,"The `option_value` column in the hr_hiring_process_steps table stores the actual text label or name of each hiring process step (e.g., ""Initial Phone Screen"", ""Technical Interview"", ""Reference Check""). When writing SQL queries, this column can be used to filter, group, or display specific hiring stages by their descriptive names, making it essential for reporting and tracking the recruitment workflow."
hr_hiring_process_steps,hr_notes,text,YES,,,,,,65535.0,,,"The hr_notes column stores optional free-form text comments and observations made by HR personnel about specific hiring process steps or stages. This column can be used to capture important details, special instructions, or internal notes about how a particular recruitment stage should be conducted or what needs to be considered, making it useful for filtering or analyzing process steps that have specific HR requirements or considerations."
hr_hiring_process_steps,seq_id,int,YES,,,0,,,,10.0,0.0,"The seq_id column in hr_hiring_process_steps is an integer field that defines the sequential order in which hiring process steps should be executed. This column can be used to sort and arrange hiring stages in their correct chronological order when querying the workflow steps, making it useful for displaying or validating the proper sequence of recruitment activities."
hr_hiring_process_steps,is_required,tinyint,YES,,,1,,,,3.0,0.0,"The `is_required` column in the `hr_hiring_process_steps` table is a boolean flag (stored as tinyint) that indicates whether a particular hiring process step is mandatory in the recruitment workflow. When querying this column, use 1 to filter for required steps and 0 for optional steps, which can help in enforcing or identifying mandatory stages in the hiring process."
hr_hiring_process_steps,created_at,datetime,NO,,,,,,,,,"The created_at column in hr_hiring_process_steps records the exact date and time when each hiring process step was initially added to the system, stored as a non-nullable datetime value. This timestamp can be used in SQL queries to analyze when hiring stages were established, track process changes over time, or filter for steps created within specific time periods."
hr_hiring_process_steps,created_by,int,NO,,,,,,,10.0,0.0,The created_by column stores the unique identifier (user ID) of the employee or system user who initially created each hiring process step record. This mandatory integer field enables tracking of who established different stages in the recruitment workflow and supports audit trail requirements.
hr_hiring_requests,hr_hiring_request_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_hiring_request_id is the primary key column in the hr_hiring_requests table, uniquely identifying each hiring request record in the HR system. When writing SQL queries, use this column for precise record selection, joining with related tables, or tracking specific hiring requests (e.g., WHERE hr_hiring_request_id = X or JOIN conditions)."
hr_hiring_requests,department_id,int,NO,MUL,,,,,,10.0,0.0,The department_id column in hr_hiring_requests is a required integer field that serves as a foreign key to link hiring requests with their respective departments. This column enables queries to filter or group hiring requests by department and can be used to join with a departments table to access additional department-related information.
hr_hiring_requests,sub_department_id,int,YES,,,,,,,10.0,0.0,"The sub_department_id column in the hr_hiring_requests table is an integer field that identifies the specific sub-department within the organization where the hiring request originated. This optional field (as indicated by being nullable) can be used to filter or group hiring requests by sub-department, enabling more granular analysis of hiring needs across different organizational units."
hr_hiring_requests,department_shift_id,int,YES,,,,,,,10.0,0.0,"The department_shift_id column in the hr_hiring_requests table is an optional integer field that links a hiring request to a specific shift within a department. When writing queries, this column can be used to filter or group hiring requests by their associated department shifts, helping to analyze staffing needs across different work schedules."
hr_hiring_requests,department_team_id,int,YES,,,,,,,10.0,0.0,"The department_team_id column in the hr_hiring_requests table is an integer field that identifies which department or team within the organization is requesting to hire a new employee. When writing queries, this column can be used to filter or group hiring requests by specific departments, and it can likely be joined with a departments or teams reference table to get additional department details, though it's optional as indicated by its nullable status."
hr_hiring_requests,hr_job_role_id,int,NO,,,,,,,10.0,0.0,"The hr_job_role_id column in the hr_hiring_requests table is a required integer field that identifies the specific job role associated with each hiring request. This column likely serves as a reference to a job roles lookup table, allowing queries to join and retrieve detailed information about the position being requested, such as job title, department, and role requirements."
hr_hiring_requests,hr_request_detail_id,int,NO,,,,,,,10.0,0.0,The hr_request_detail_id column in the hr_hiring_requests table serves as a unique identifier for individual hiring request details. This integer field is required (non-nullable) and can be used to reference specific hiring request records when querying or joining with other related tables in the HR system.
hr_hiring_requests,approval_type,tinyint(1),NO,,,,,,,3.0,0.0,"The approval_type column in the hr_hiring_requests table is a required binary flag (tinyint(1)) that indicates the type of approval process used for a hiring request. When writing queries, this column can be used to filter or group hiring requests based on their approval workflow type, typically representing two distinct approval paths or methodologies within the HR system."
hr_hiring_requests,job_fill_date,datetime,NO,,,,,,,,,"The job_fill_date column in hr_hiring_requests represents the actual date and time when a position was successfully filled with a hired candidate. Since this field is non-nullable, it must be populated when a hiring request is completed, making it useful for tracking when positions were filled and analyzing hiring timelines."
hr_hiring_requests,approver_id,int,NO,,,,,,,10.0,0.0,"The approver_id column in the hr_hiring_requests table is a required integer field that identifies the employee responsible for reviewing and approving the hiring request. When writing queries, this column can be used to join with an employees or users table to retrieve approver details, or to filter hiring requests based on specific approvers."
hr_hiring_requests,approver_note,text,YES,,,,,,65535.0,,,"The approver_note column in hr_hiring_requests stores optional text comments or feedback provided by hiring request approvers during the review process. This free-form text field can be used to document approval justifications, concerns, or specific conditions related to the hiring request, and can be NULL if no notes were provided."
hr_hiring_requests,no_of_position,int,NO,,,,,,,10.0,0.0,"The ""no_of_position"" column in the hr_hiring_requests table represents the number of positions needed to be filled for a specific hiring request. This required integer field helps HR track vacancy quantities, making it useful in queries that need to calculate total open positions or filter requests based on headcount requirements (e.g., SELECT * FROM hr_hiring_requests WHERE no_of_position > 1)."
hr_hiring_requests,status,tinyint(1),NO,,,,,,,3.0,0.0,"The 'status' column in the hr_hiring_requests table is a required (non-nullable) tinyint field that represents the current state of a hiring request using a numeric code. When querying this table, you can filter or group hiring requests based on their status values to identify requests in specific stages of the hiring process (e.g., WHERE status = 1 for active requests)."
hr_hiring_requests,close_reason_id,int,YES,,,,,,,10.0,0.0,"The close_reason_id column in the hr_hiring_requests table is an optional integer field that references the reason why a hiring request was closed or canceled (such as position filled, budget cuts, or request withdrawn). When querying hiring requests, this field can be used to filter or analyze the outcomes of hiring processes, with NULL values typically indicating the request is still open or active."
hr_hiring_requests,close_reason_detail,varchar(250),YES,,,,,,250.0,,,"The close_reason_detail column in hr_hiring_requests stores detailed explanations for why a hiring request was closed or canceled, allowing up to 250 characters of text. This optional field (as indicated by being nullable) can be used to provide specific context about hiring request closures, such as ""position filled internally"" or ""budget constraints,"" making it valuable for filtering and analyzing hiring request outcomes."
hr_hiring_requests,is_fake_request,tinyint(1),NO,,,0,,,,3.0,0.0,"The `is_fake_request` column in the hr_hiring_requests table is a boolean flag (stored as tinyint(1)) that indicates whether a hiring request is legitimate or has been identified as fraudulent/test data. When writing queries, use this column with values 0 (false) or 1 (true) to filter out or identify fake hiring requests, which is particularly useful for data quality control and system testing purposes."
hr_hiring_requests,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_hiring_requests table stores the timestamp when each hiring request was initially created in the system. This non-nullable datetime field is useful for tracking when requests were submitted and can be used in SQL queries for filtering requests by date ranges, analyzing hiring request patterns over time, or sorting requests chronologically."
hr_hiring_requests,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_hiring_requests table stores the timestamp of when a hiring request record was last modified, automatically tracking changes to any request details. This datetime field is mandatory (non-nullable) and is essential for auditing changes and understanding the chronological history of hiring requests."
hr_hiring_requests,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_hiring_requests table stores the employee ID (as an integer) of the person who initiated the hiring request. This mandatory field (non-nullable) helps track who created each hiring request record, enabling accountability and workflow tracking within the HR system."
hr_hiring_requests,updated_by,int,NO,,,,,,,10.0,0.0,The updated_by column in the hr_hiring_requests table stores the employee ID (as an integer) of the person who last modified the hiring request record. This mandatory field (non-nullable) helps maintain an audit trail of changes made to hiring requests and can be used to join with an employees table to get details about who made the most recent updates.
hr_hiring_settings,hr_hiring_setting_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_hiring_setting_id is the primary key column in the hr_hiring_settings table, uniquely identifying each configuration record for the HR hiring process. This non-nullable integer column should be used in JOIN operations when linking hiring settings to other HR-related tables, and in WHERE clauses when querying for specific hiring configuration records."
hr_hiring_settings,notes,text,YES,,,,,,65535.0,,,"The 'notes' column in the hr_hiring_settings table stores optional text descriptions or comments related to specific hiring configuration settings. This free-form text field can be used to document explanations, justifications, or additional context about why certain hiring parameters were set, making it useful for queries that need to search or retrieve configuration documentation."
hr_hiring_settings,hr_hiring_request_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_request_id column in the hr_hiring_settings table serves as a reference to specific hiring requests within the HR system. This integer field is required (non-nullable) and can be used to link configuration settings to particular hiring requests, making it useful in JOIN operations or WHERE clauses when querying for settings related to specific recruitment workflows."
hr_hiring_settings,hr_job_role_id,int,NO,,,,,,,10.0,0.0,"The hr_job_role_id column in the hr_hiring_settings table is a required integer field that links specific hiring configuration settings to their corresponding job roles in the HR system. This column helps organize and manage different hiring parameters and workflows based on the type of position being filled, allowing for customized recruitment processes per job role."
hr_hiring_settings,external_job_websites,text,NO,,,,,,65535.0,,,"The external_job_websites column in hr_hiring_settings stores a list of job posting websites or platforms where the company publishes their job openings, likely in a comma-separated or structured text format. When writing SQL queries, this required (non-nullable) text field can be used to filter or analyze which external job boards are configured for job posting distribution, helping track where the organization advertises its positions."
hr_hiring_settings,pin_to_career,tinyint(1),YES,,,,,,,3.0,0.0,"The pin_to_career column is a boolean flag (tinyint(1)) in the hr_hiring_settings table that determines whether job postings should be automatically pinned or featured on the career page. When writing queries, you can use this column with values 1 (true) or 0 (false) to filter or identify hiring configurations where job postings are set to be prominently displayed on the career portal."
hr_hiring_settings,website_not_mentioned,text,YES,,,,,,65535.0,,,The website_not_mentioned column in hr_hiring_settings stores text content that should be displayed when a job candidate hasn't specified a personal website or portfolio URL during the application process. This optional text field can be used in SQL queries to retrieve or update the default messaging or handling instructions for scenarios where website information is missing in candidate applications.
hr_hiring_settings,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_hiring_settings table records the exact date and time when each hiring configuration record was initially created in the system. This non-nullable datetime field is useful for auditing purposes and tracking when specific hiring settings were established, and can be used in SQL queries for temporal filtering or sorting of configuration records (e.g., finding the most recent settings or configurations created within a specific time period)."
hr_hiring_settings,updated_at,datetime,NO,,,,,,,,,The updated_at column in the hr_hiring_settings table is a mandatory datetime field that tracks when each hiring configuration record was last modified. This timestamp helps in auditing changes to hiring process settings and can be useful for filtering or sorting records based on when configuration updates occurred.
hr_hiring_settings,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_hiring_settings table is a required integer field that stores the user ID of the employee who created or established each hiring configuration record. When writing queries, this column can be used to track ownership of settings, filter configurations by creator, or join with user/employee tables to get additional information about who set up specific hiring parameters."
hr_hiring_settings,updated_by,int,NO,,,,,,,10.0,0.0,"The updated_by column in the hr_hiring_settings table is a required integer field that stores the user ID of the employee who last modified any hiring configuration settings. This column is essential for audit tracking and accountability, helping to maintain a record of who made changes to the HR system's hiring parameters and workflows."
hr_hiring_steps,hr_hiring_step_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_hiring_step_id is the primary key identifier for each unique step in the company's hiring process workflow. This integer column can be used to join with other recruitment-related tables and to uniquely reference specific stages in the hiring pipeline, such as initial screening or technical interviews."
hr_hiring_steps,name,varchar(50),NO,,,,,,50.0,,,"The ""name"" column in the hr_hiring_steps table stores the descriptive labels for each distinct step in the company's hiring process, such as ""Phone Screen"" or ""Technical Interview."" This required varchar(50) field is commonly used in WHERE clauses or JOIN conditions when querying specific hiring stages, and it helps identify and organize the sequential recruitment activities that candidates progress through."
hr_hiring_steps,is_default,tinyint(1),NO,,,,,,,3.0,0.0,"The `is_default` column in the hr_hiring_steps table is a boolean flag (0 or 1) that indicates whether a particular hiring step is part of the company's standard/default recruitment workflow. When querying, use this column to filter for or identify the baseline hiring steps that are typically included in most recruitment processes, as opposed to optional or specialized steps."
hr_hiring_steps,is_active,tinyint(1),NO,,,,,,,3.0,0.0,"The `is_active` column in the hr_hiring_steps table is a boolean flag (stored as tinyint(1)) that indicates whether a particular hiring step is currently in use within the company's recruitment process. When writing queries, use this column to filter for active hiring steps (is_active = 1) or inactive steps (is_active = 0), ensuring that only relevant recruitment stages are included in workflow-related operations."
hr_hiring_steps,created_at,datetime,NO,,,,,,,,,The created_at column in the hr_hiring_steps table records the exact date and time when a hiring step or stage was first added to the recruitment workflow system. This non-nullable datetime field is useful for tracking when hiring process changes were implemented and can be used to analyze the evolution of recruitment workflows over time.
hr_hiring_steps,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_hiring_steps table stores the employee ID (as an integer) of the HR staff member who created or defined each hiring process step. This mandatory field (non-nullable) helps maintain accountability and track ownership of different recruitment workflow components, enabling queries to identify who established specific hiring stages or made process modifications."
hr_job_postings,hr_job_posting_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_job_posting_id column serves as the primary key for the hr_job_postings table, uniquely identifying each job posting record with a non-nullable integer value. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific job postings (e.g., WHERE hr_job_posting_id = 123)."
hr_job_postings,external_job_website_id,int,NO,,,,,,,10.0,0.0,"The external_job_website_id column in the hr_job_postings table is a required integer field that identifies which third-party job board or career website the position is posted on. This column can be used to track and analyze job posting distribution across different external platforms, and is commonly used in WHERE clauses when filtering for postings on specific job websites."
hr_job_postings,hr_job_role_id,int,NO,,,,,,,10.0,0.0,"The hr_job_role_id column in the hr_job_postings table is a required integer field that uniquely identifies different job roles within the organization's job postings. When writing SQL queries, this column can be used to filter or join with other HR-related tables to access specific job posting details or to group job postings by their associated role."
hr_job_postings,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_job_postings table records the exact date and time when each job posting was initially created in the system, stored as a datetime value. This column is mandatory (not nullable) and can be used in SQL queries to filter job postings by creation date, track posting age, or sort listings chronologically, making it particularly useful for analyzing posting patterns or finding recently added positions."
hr_job_postings,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_job_postings table records the timestamp of when a job posting was last modified, automatically tracking any changes made to posting details. This datetime field is commonly used in WHERE clauses to find recently updated job postings or in ORDER BY clauses to sort postings by their modification date, making it useful for monitoring posting changes and maintaining data audit trails."
hr_job_postings,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_job_postings table is a required integer field that stores the employee ID of the person who created the job posting. This column is commonly used to track ownership and accountability of job postings, and can be joined with an employees or users table to retrieve information about who created each posting."
hr_job_postings,updated_by,int,NO,,,,,,,10.0,0.0,"The updated_by column in the hr_job_postings table is a required integer field that stores the employee ID of the person who last modified the job posting record. This column is commonly used in WHERE clauses to filter job postings by their last modifier, or in JOIN operations with employee/user tables to retrieve information about who made recent changes to job postings."
hr_job_roles,hr_job_role_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_job_role_id column serves as the primary key in the hr_job_roles table, uniquely identifying each job position or role within the organization. This non-nullable integer field is essential for establishing relationships with other HR-related tables and should be referenced when querying specific job role information or joining with related employee or department data."
hr_job_roles,role_name,varchar(100),NO,,,,,,100.0,,,"The role_name column in the hr_job_roles table stores the official job title or position name (up to 100 characters) for each role within the organization, such as ""Senior Software Engineer"" or ""Marketing Manager"". This required field (non-nullable) serves as a standardized reference for job titles and can be used in SQL queries to filter, group, or join with other HR-related tables when analyzing organizational roles and positions."
hr_job_roles,department_id,int,NO,,,,,,,10.0,0.0,"The department_id column in the hr_job_roles table is a required integer field that links job positions to their respective organizational departments. This column is essential for grouping and filtering job roles by department, enabling queries to analyze job positions within specific organizational units or perform department-based workforce analysis."
hr_job_roles,is_archived,int,YES,,DEFAULT_GENERATED,0,,,,10.0,0.0,"The `is_archived` column in the `hr_job_roles` table is a binary flag (stored as an integer) that indicates whether a job role is currently active (0) or has been archived (1). This column helps filter out obsolete or discontinued job positions while maintaining historical records, making it useful in queries where you need to focus on either active roles (WHERE is_archived = 0) or review historical job positions (WHERE is_archived = 1)."
hr_job_roles,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_job_roles table is a required integer field that stores the employee ID or user ID of the person who created each job role record. This column is commonly used in WHERE clauses or JOINs with user/employee tables to track or filter job roles based on their creator, and since it's non-nullable, it ensures accountability for all job role entries in the system."
hr_job_roles,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_job_roles table records the exact date and time when each job role record was initially created in the system, stored as a datetime value. This non-nullable field is useful for tracking the chronological history of job role definitions and can be used in SQL queries for auditing purposes or filtering job roles based on when they were added to the system."
hr_job_roles,updated_by,int,NO,,,,,,,10.0,0.0,"The updated_by column in the hr_job_roles table stores the employee ID (as an integer) of the user who last modified the job role record, making it useful for audit tracking and change management. This mandatory field (non-nullable) can be used in JOIN operations with employee tables to identify who made changes to job role definitions, and is commonly used in WHERE clauses when filtering for records modified by specific users."
hr_job_roles,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_job_roles table records the timestamp of when a job role record was last modified, automatically tracking changes to job positions and their descriptions. This non-nullable datetime field is essential for auditing purposes and helps maintain data integrity by providing a chronological history of updates to job role information."
hr_leads,hr_hiring_lead_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_hiring_lead_id column serves as the primary key in the hr_leads table, uniquely identifying each job candidate or recruitment lead in the hiring pipeline. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific candidates (e.g., WHERE hr_hiring_lead_id = X)."
hr_leads,hr_hiring_process_id,int,NO,,,,,,,10.0,0.0,The hr_hiring_process_id column in the hr_leads table is a required integer field that identifies the specific hiring process or workflow stage for each job candidate. This column can be used to join with related hiring process tables or to filter/group candidates based on their current stage in the recruitment pipeline.
hr_leads,hr_lead_id,int,NO,,,,,,,10.0,0.0,"The hr_lead_id column serves as a unique identifier for each job candidate or recruitment lead in the hr_leads table. When writing SQL queries, use this column to uniquely reference specific candidates, join with related tables, or filter recruitment records."
hr_leads,created_at,datetime,YES,,,,,,,,,"The created_at column in the hr_leads table stores the timestamp when a job candidate or recruitment lead was first added to the hiring pipeline. This datetime field can be used for tracking how long candidates have been in the pipeline, filtering leads by time period, or analyzing recruitment trends over time."
hr_leads,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the hr_leads table stores the employee ID (as an integer) of the staff member who initially added the job candidate or recruitment lead to the system. This column can be used to join with an employees or users table to track who sourced each lead, and since it's nullable, some leads may not have an associated creator."
hr_leads,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the hr_leads table stores the timestamp of when a candidate's record was last modified, using a datetime format. This column helps track the recency of candidate information and can be useful for filtering recent updates or sorting leads based on when their information was last changed."
hr_leads,updated_by,int,YES,,,,,,,10.0,0.0,The updated_by column in the hr_leads table stores the employee ID (as an integer) of the HR staff member who last modified the candidate's record. This column helps track who made the most recent changes to a lead's information and can be used to join with an employees or users table to get the full details of the person who performed the update.
hr_marketing_reviews,hr_marketing_review_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_marketing_review_id column serves as the primary key identifier for each unique marketing performance review record in the hr_marketing_reviews table. As a non-nullable integer field, it should be used in JOIN operations and WHERE clauses when you need to reference specific marketing review entries or link them to related data in other tables."
hr_marketing_reviews,hr_hiring_request_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_request_id column in the hr_marketing_reviews table is a required integer field that links performance reviews to specific hiring requests or positions within the marketing department. This column can be used to join or filter marketing performance reviews with corresponding hiring or position records, enabling queries to analyze performance data in the context of specific roles or hiring initiatives."
hr_marketing_reviews,hr_job_role_id,int,NO,,,,,,,10.0,0.0,"The hr_job_role_id column in the hr_marketing_reviews table is a required integer field that identifies the specific marketing job role being evaluated in each performance review. This column helps categorize and filter performance reviews based on different marketing positions (such as Marketing Manager, Content Specialist, Campaign Coordinator, etc.), enabling queries to analyze performance patterns and feedback across various marketing roles."
hr_marketing_reviews,is_posted_to_marketing,tinyint(1),NO,,,,,,,3.0,0.0,"The is_posted_to_marketing column is a boolean flag (stored as tinyint(1)) that indicates whether a marketing performance review has been officially posted or published to the marketing department's system. When querying this column, use 1 to filter for reviews that have been posted and 0 for reviews that haven't been posted yet, making it useful for tracking the status of review submissions."
hr_marketing_reviews,note_for_marketing,text,YES,,,,,,65535.0,,,"The note_for_marketing column in hr_marketing_reviews stores detailed textual feedback and observations specifically about an employee's marketing-related performance and contributions. This optional text field can be used to capture qualitative assessments, specific examples of marketing achievements, areas for improvement, and other relevant comments about the employee's work on marketing campaigns and initiatives."
hr_marketing_reviews,language_edited,tinyint(1),YES,,,,,,,3.0,0.0,"The language_edited column in hr_marketing_reviews is a boolean flag (tinyint(1)) that indicates whether the performance review text has undergone language editing or proofreading. When querying marketing team performance reviews, you can use this column to filter for either edited (1) or unedited (0) review content, with NULL values indicating reviews where the editing status is unknown."
hr_marketing_reviews,date_needed,datetime,YES,,,,,,,,,"The date_needed column in hr_marketing_reviews represents the target date by which a marketing employee's performance review should be completed or feedback is required. This optional datetime field helps track review deadlines and can be used to filter or sort performance evaluations based on their timing requirements, making it useful for queries that need to identify upcoming or overdue marketing team assessments."
hr_marketing_reviews,status,tinyint(1),NO,,,,,,,3.0,0.0,"The 'status' column in the hr_marketing_reviews table is a required binary field (tinyint(1)) that indicates whether a marketing performance review is active/current or inactive/archived. When writing queries, this column can be used to filter reviews based on their current status, typically using values of 1 for active reviews and 0 for inactive ones."
hr_marketing_reviews,created_at,datetime,YES,,,,,,,,,"The created_at column in the hr_marketing_reviews table records the timestamp when each marketing performance review was initially created in the system. This datetime field can be used to track when reviews were submitted, filter reviews by specific time periods, or analyze review patterns over time, making it particularly useful in queries that need to sort or filter marketing employee evaluations chronologically."
hr_marketing_reviews,updated_at,datetime,YES,,,,,,,,,The updated_at column in the hr_marketing_reviews table records the timestamp of when a marketing employee's performance review record was last modified or updated. This datetime field helps track the chronological history of review modifications and can be useful for filtering recent changes or auditing review update patterns.
hr_marketing_reviews,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the hr_marketing_reviews table stores the employee ID (as an integer) of the person who created or submitted the marketing performance review. This column can be used to join with an employees table to retrieve information about the review creator, and being nullable indicates that some historical or system-generated reviews might not have an associated creator."
hr_marketing_reviews,updated_by,int,YES,,,,,,,10.0,0.0,"The updated_by column in the hr_marketing_reviews table stores the employee ID (as an integer) of the person who last modified the performance review record. This column helps track who made the most recent changes to marketing performance evaluations, though it can be null if the update tracking is not required or available. When writing queries, this column can be joined with an employees table to get details about who updated the review, or used in WHERE clauses to filter reviews based on who modified them."
hr_offer_letter,hr_offer_letter_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_offer_letter_id is the primary key column in the hr_offer_letter table, uniquely identifying each offer letter record in the hiring process. When writing SQL queries, use this column for joining with related tables or filtering specific offer letter records, as it serves as the main identifier for all offer letter-related data."
hr_offer_letter,user_type_id,int,NO,,,,,,,10.0,0.0,"The user_type_id column in the hr_offer_letter table is a required integer field that identifies the category or role of the user associated with the offer letter (e.g., full-time employee, contractor, intern). When querying this table, you can use user_type_id to filter or group offer letters based on different types of employment positions, and since it's non-nullable, every offer letter record must have a valid user type assigned."
hr_offer_letter,user_type,tinyint(1),NO,,,0,,,,3.0,0.0,"The user_type column in the hr_offer_letter table is a required binary flag (tinyint(1)) that likely distinguishes between different categories of potential employees receiving offer letters. When writing SQL queries, this column can be filtered using 0 or 1 values to segment offer letters by user classification, making it useful for analyzing or reporting on different types of employment offers."
hr_offer_letter,salary_type,tinyint,YES,,,,,,,3.0,0.0,"The salary_type column in the hr_offer_letter table is a tinyint field that categorizes the type of salary structure offered to candidates (e.g., 1 for hourly, 2 for monthly, 3 for annual). When querying this column, you can use numeric comparisons or JOIN with a reference table to translate the numeric codes into meaningful salary type descriptions, and since it's nullable, remember to handle NULL values appropriately in your conditions."
hr_offer_letter,job_type,tinyint(1),YES,,,,,,,3.0,0.0,"The job_type column in the hr_offer_letter table is a tinyint(1) field that indicates the employment type being offered to the candidate (likely using a numeric code to represent categories like full-time, part-time, contract, etc.). When querying this column, you can use numeric values to filter or group offer letters by employment type, though you should refer to the application's documentation for the specific mapping of numbers to job types."
hr_offer_letter,is_contract_position,tinyint(1),YES,,,,,,,3.0,0.0,"The `is_contract_position` column in the `hr_offer_letter` table is a boolean flag (stored as tinyint(1)) that indicates whether the offer is for a contract position (1/true) or a permanent position (0/false). When querying offer letters, you can use this column to filter or segment offers based on the employment type, helping distinguish between contract and permanent role offers."
hr_offer_letter,salary,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The 'salary' column in the hr_offer_letter table stores the annual or base salary amount offered to candidates, represented as a decimal number with up to 10 digits total and 2 decimal places (e.g., 75000.00). When querying this column, you can perform numerical comparisons and calculations, and since it's nullable, remember to handle NULL values appropriately when analyzing salary data across offer letters."
hr_offer_letter,schedule_hours,varchar(50),YES,,,,,,50.0,,,"The schedule_hours column in the hr_offer_letter table stores the proposed working schedule or hours pattern offered to the candidate, represented as a text string up to 50 characters long. This field can be used to specify arrangements like ""Full-time 40 hours/week,"" ""Part-time 20 hours/week,"" or other schedule variations, and can be NULL if the schedule information is not yet determined or not applicable."
hr_offer_letter,vacation,varchar(50),YES,,,,,,50.0,,,"The 'vacation' column in the hr_offer_letter table stores the vacation benefits or paid time off (PTO) details offered to potential employees, represented as a text string up to 50 characters. When querying this column, you can filter or retrieve vacation benefit information such as ""20 days per year"" or ""15 days + 5 personal days"" to analyze or compare offer letter terms."
hr_offer_letter,additional_requirments,varchar(255),YES,,,,,,255.0,,,"The additional_requirments column in the hr_offer_letter table stores any special conditions or supplementary requirements that a candidate must fulfill as part of their offer letter agreement. This optional text field (up to 255 characters) might include requirements such as background checks, drug tests, certification verifications, or other specific conditions that must be met before or after employment begins."
hr_offer_letter,start_date,date,NO,,,,,,,,,The start_date column in the hr_offer_letter table represents the proposed employment start date for a candidate as specified in their offer letter. This mandatory date field is essential for tracking when new hires are expected to begin their employment and can be used in SQL queries to filter or analyze offer letters based on planned start dates.
hr_offer_letter,end_date,date,YES,,,,,,,,,"The end_date column in the hr_offer_letter table represents the expiration date of an offer letter sent to a candidate. This date field helps track when an offer letter becomes invalid if not accepted, and can be used in queries to identify expired offers or filter active offers (where end_date is either NULL or has not yet passed)."
hr_offer_letter,additional_notes,text,YES,,,,,,65535.0,,,"The additional_notes column in the hr_offer_letter table stores supplementary text information and comments related to a candidate's offer letter. This free-form text field can be used to capture any relevant details that don't fit into other structured columns, such as special arrangements, negotiation notes, or specific conditions of the offer."
hr_offer_letter,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in the hr_offer_letter table is a required integer field that identifies the candidate or potential employee to whom the offer letter is being sent. This column serves as a link to user information and is essential for tracking offer letters across the hiring process.
hr_offer_letter,on_probation,tinyint(1),NO,,,0,,,,3.0,0.0,"The `on_probation` column in the `hr_offer_letter` table is a boolean flag (stored as tinyint(1)) that indicates whether the potential employee's offer includes a probationary period. When querying this column, use 1 to filter for offers with probation periods and 0 for offers without probation, for example: `WHERE on_probation = 1`."
hr_offer_letter,offer_letter,varchar(255),YES,,,,,,255.0,,,"The offer_letter column in the hr_offer_letter table stores the file name or path reference to the actual offer letter document sent to candidates. This VARCHAR(255) field can be used to locate and track individual offer letter documents within the hiring process, and being nullable indicates that an offer letter document might not yet be generated or uploaded for all records."
hr_offer_letter,is_offer_letter_accepted,int,YES,,,0,,,,10.0,0.0,"The `is_offer_letter_accepted` column in the hr_offer_letter table is a boolean flag stored as an integer (0 or 1) that indicates whether a candidate has accepted their offer letter. When querying this column, use it to filter or check the acceptance status of offer letters, where 1 typically represents an accepted offer and 0 represents an unaccepted or declined offer."
hr_offer_letter,is_offer_letter_sent,int,YES,,,0,,,,10.0,0.0,"The `is_offer_letter_sent` column in the hr_offer_letter table is a binary indicator (stored as an integer) that tracks whether an offer letter has been sent to a candidate, where 0 typically indicates not sent and 1 indicates sent. This column can be used in WHERE clauses to filter offer letters based on their sending status or in reporting queries to track the progress of offer letter distribution."
hr_offer_letter,offer_letter_sent_date,date,YES,,,,,,,,,"The offer_letter_sent_date column in the hr_offer_letter table records the date when an offer letter was sent to a candidate during the hiring process. This nullable date field can be used to track when formal job offers were dispatched and is useful for queries involving offer letter timing, follow-ups, and recruitment timeline analysis."
hr_offer_letter,offer_letter_sent_user,int,YES,,,,,,,10.0,0.0,"The offer_letter_sent_user column in the hr_offer_letter table stores the user ID (as an integer) of the HR staff member or system user who sent the offer letter to the candidate. This column can be used to track who initiated the offer letter sending process and can be joined with a users or employees table to get detailed information about the sender, though it's optional as indicated by its nullable property."
hr_offer_letter,offer_letter_accepted_date,date,YES,,,,,,,,,"The offer_letter_accepted_date column in the hr_offer_letter table records the date when a candidate formally accepted their job offer. This nullable date field can be used to track acceptance timing, filter for accepted offers, or analyze the time between offer acceptance and other hiring milestones."
hr_offer_letter,offer_letter_date,date,YES,,,,,,,,,"The offer_letter_date column in the hr_offer_letter table records the date when an offer letter was issued to a candidate. This date field can be used in SQL queries to track offer letter timing, analyze hiring timelines, or filter offer letters within specific date ranges, and since it's nullable, some offer letters may not have a date assigned yet."
hr_offer_letter,direct_report_one,int,YES,,,,,,,10.0,0.0,The direct_report_one column in the hr_offer_letter table stores the employee ID of the primary supervisor or manager that the candidate will report to once hired. This optional integer field helps establish the reporting structure for new hires and can be used to join with the employees table to get the supervisor's details.
hr_offer_letter,direct_report_two,int,YES,,,,,,,10.0,0.0,"The direct_report_two column in the hr_offer_letter table is an optional integer field that likely stores the employee ID of a secondary manager or supervisor to whom the potential employee would report. This column can be used in JOIN operations with employee tables to retrieve information about additional reporting relationships in the organizational structure, though its nullable nature suggests not all offer letters require a secondary reporting manager."
hr_offer_letter,commitment_duration,tinyint(1),YES,,,,,,,3.0,0.0,"The commitment_duration column in the hr_offer_letter table represents the length of the initial employment commitment period, stored as a small integer value. This column can be used in queries to filter or analyze offer letters based on the duration of employment commitment required from candidates, with NULL values indicating that no specific commitment period was specified in the offer."
hr_offer_letter,commitment_time,int,YES,,,,,,,10.0,0.0,"The commitment_time column in the hr_offer_letter table represents the duration (in months) of the employment commitment specified in the offer letter. This optional integer field can be used to filter or analyze offer letters based on their commitment periods, such as finding all offers with commitments longer than 12 months or grouping offers by commitment duration."
hr_offer_letter,acceptance_deadline,date,YES,,,,,,,,,"The acceptance_deadline column in the hr_offer_letter table represents the date by which a candidate must respond to accept or decline their job offer. When querying this column, you can use date comparisons (e.g., WHERE acceptance_deadline < CURRENT_DATE) to identify offers that are approaching their deadline or have expired, and since it's nullable, remember to handle NULL values appropriately in your queries."
hr_offer_letter,status,tinyint,YES,,,,,,,3.0,0.0,"The 'status' column in the hr_offer_letter table uses a tinyint value to track the current state of an offer letter in the hiring process. This column can be used in WHERE clauses to filter offer letters based on their current status (e.g., pending, accepted, declined) and is commonly used to generate reports or track the progress of offers through the hiring pipeline."
hr_offer_letter,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_offer_letter table records the timestamp when an offer letter record was initially created in the system, automatically populated with CURRENT_TIMESTAMP. This datetime field is useful for tracking when offer letters were first drafted or entered into the system, and can be used in SQL queries for filtering, sorting, or analyzing the timing of offer letter creation."
hr_offer_letter,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_offer_letter table automatically tracks the most recent date and time when any modifications were made to an offer letter record. This timestamp field is useful for auditing changes to offer letters and can be used in SQL queries to filter or sort records based on when they were last modified, such as finding recently updated offer letters or tracking the history of changes."
hr_past_versions,hr_past_version_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_past_version_id column serves as the primary key in the hr_past_versions table, uniquely identifying each historical record of HR-related changes. This non-nullable integer column should be used in JOIN operations when linking to other tables or when specifically querying for individual version records in the HR audit trail."
hr_past_versions,hr_hiring_request_id,int,YES,,,,,,,10.0,0.0,"The hr_hiring_request_id column in the hr_past_versions table is an optional integer field that references the specific hiring request associated with a historical HR record change. When querying historical HR data, you can use this column to filter or join with hiring request records to track changes specifically related to the hiring process, though its nullable nature means not all historical records will be tied to a hiring request."
hr_past_versions,hr_job_role_id,int,NO,,,,,,,10.0,0.0,"The hr_job_role_id column in the hr_past_versions table is a required integer field that references the specific job role associated with a historical HR record. When querying historical employee data, this column can be used to track changes in job roles over time and is essential for analyzing career progression or organizational structure modifications."
hr_past_versions,template_id,int,YES,,,,,,,10.0,0.0,"The template_id column in the hr_past_versions table is an optional integer field that references the template or form structure used when creating or modifying the HR record. When querying historical HR data, this column can be used to filter or group records based on specific form templates, helping to analyze how different types of HR documents or forms have been modified over time."
hr_past_versions,team_id,int,YES,,,,,,,10.0,0.0,"The team_id column in hr_past_versions represents the identifier of the team or department associated with the historical HR record being tracked. When querying historical employee data, you can use this column to filter or group changes by specific teams, making it useful for analyzing team-level HR changes over time."
hr_past_versions,location_id,int,YES,,,,,,,10.0,0.0,"The location_id column in the hr_past_versions table is an optional integer field that references the physical location associated with a historical HR record change. When querying historical employee data changes, you can use this column to filter or group changes by specific office locations, though its nullable nature means some records may not have an associated location."
hr_past_versions,job_description_content_en,mediumtext,YES,,,,,,16777215.0,,,"The job_description_content_en column stores the English-language version of job descriptions as part of the HR record versioning system, containing detailed text content about roles and responsibilities. When querying historical HR data, this column can be used to track how job descriptions have evolved over time or to retrieve specific versions of job descriptions from the past."
hr_past_versions,job_description_content_fr,mediumtext,YES,,,,,,16777215.0,,,"The job_description_content_fr column stores the French-language version of job descriptions as part of the HR record versioning system, allowing for historical tracking of how French job descriptions have changed over time. This text field can contain medium-length content (up to 16MB) and is optional (nullable), making it suitable for organizations that may not always require French translations of job descriptions."
hr_past_versions,content_html,text,YES,,,,,,65535.0,,,"The content_html column in hr_past_versions stores the HTML-formatted content of historical HR records, capturing the complete formatted representation of employee data, benefits, or HR information at specific points in time. This text field can be used in SQL queries to retrieve or compare formatted versions of HR records, though be aware that it may contain HTML markup and should be handled accordingly when displaying or processing the data."
hr_past_versions,content_html_fr,text,YES,,,,,,65535.0,,,"The content_html_fr column stores the French-language HTML content version of HR-related records, allowing for multilingual tracking of historical changes in a formatted HTML structure. This column can be used in queries when you need to retrieve or analyze the French version of HR record content, particularly when maintaining audit trails or displaying historical HR information in French-language interfaces."
hr_past_versions,content,json,NO,,,,,,,,,"The 'content' column in the hr_past_versions table stores the complete JSON representation of an HR record at a specific point in time, capturing all fields and values as they existed when the version was created. This non-nullable JSON field is essential for audit purposes, allowing systems to compare different versions of HR records and understand exactly what changed between versions."
hr_past_versions,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_past_versions table stores the user ID (as an integer) of the person who created each historical record entry, making it mandatory for tracking accountability. This column is essential for audit purposes, allowing HR teams to identify which system user or employee initiated specific changes in the HR records history."
hr_past_versions,status,tinyint(1),NO,,,,,,,3.0,0.0,"The 'status' column in the hr_past_versions table is a required boolean flag (tinyint(1)) that indicates whether a historical HR record version is active or inactive. When querying historical HR data, this column can be used to filter for valid or invalidated record versions, helping to maintain data integrity in audit trails."
hr_past_versions,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_past_versions table stores the exact timestamp when a historical version of an HR record was created, using a datetime format. This column is essential for temporal queries and audit trails, allowing you to determine precisely when changes were made to employee data, and can be used in WHERE clauses or ORDER BY statements to analyze HR data modifications within specific time periods."
hr_past_versions,bi_weekly_hours_id,int,YES,,,,,,,10.0,0.0,"The bi_weekly_hours_id column in the hr_past_versions table is an integer field that references historical bi-weekly working hour records for employees. When querying historical HR data, this column can be used to track changes in employee work schedules over time as part of the overall audit trail functionality."
hr_past_versions,salary_type_id,int,YES,,,,,,,10.0,0.0,"The salary_type_id column in the hr_past_versions table is an integer field that references the type or category of salary structure that was in effect for a particular historical HR record. When querying historical employee compensation data, this column can be used to filter or group records based on different salary classifications (such as hourly, salaried, commission-based, etc.) that were applicable at specific points in time."
hr_referral_settings,hr_referrer_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_referrer_id column serves as the primary key in the hr_referral_settings table, uniquely identifying each configuration record for the employee referral program. When writing SQL queries, use this column to join with other related tables or to specifically target individual referral program settings, ensuring that each setting can be precisely referenced and managed."
hr_referral_settings,role,varchar(255),NO,,,,,,255.0,,,"The 'role' column in the hr_referral_settings table specifies the job role or position type for which specific referral program settings apply. This required varchar field helps segment and customize referral program rules and bonus structures based on different positions within the organization, allowing for role-specific referral policies and incentives."
hr_referral_settings,bonus_period,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The bonus_period column in hr_referral_settings specifies the duration (in months) that must pass before a referral bonus becomes payable, stored as a decimal number with up to 2 decimal places. This value is used to enforce waiting periods before referral bonuses are awarded, ensuring referred employees remain with the company for a minimum time period before the referrer receives their bonus payment."
hr_referral_settings,user_id,int,YES,,,,,,,10.0,0.0,"The user_id column in the hr_referral_settings table identifies the employee or user associated with specific referral program configurations or settings. This optional field (nullable) allows for user-specific customization of referral program parameters, enabling different rules or bonus structures to be applied to different users within the system."
hr_referral_settings,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_referral_settings table records the exact date and time when each referral program configuration record was initially created in the system. This non-nullable datetime field is useful for auditing configuration changes and tracking when specific referral program settings were established, making it valuable for queries that need to analyze the history or timeline of referral program policy changes."
hr_referral_settings,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_referral_settings table records the timestamp of when a referral program configuration was last modified, making it useful for tracking changes and versioning of program settings. This non-nullable datetime field can be used in SQL queries to filter or sort referral settings based on their modification time, helping identify the most recent changes or audit configuration updates within specific time periods."
hr_request_details,hr_request_detail_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_request_detail_id column serves as the primary key in the hr_request_details table, uniquely identifying each HR request record. When writing SQL queries, use this column for precise record selection, joining with related tables, or tracking specific HR requests through their lifecycle."
hr_request_details,hr_job_role_id,int,NO,,,,,,,10.0,0.0,"The hr_job_role_id column in the hr_request_details table is a required integer field that identifies the specific job role associated with an HR request. This column is essential for linking HR requests to particular positions or roles within the organization, enabling proper tracking and processing of role-specific HR inquiries and requests."
hr_request_details,location_id,int,NO,MUL,,,,,,10.0,0.0,"The location_id column in the hr_request_details table is a required integer field that references the specific office or facility location where the HR request originated. This column is indexed (MUL) to optimize queries filtering or joining by location, and its non-nullable nature ensures that every HR request must be associated with a valid location within the organization."
hr_request_details,presence_id,tinyint,YES,,,,,,,3.0,0.0,"The presence_id column in the hr_request_details table is a small integer field that likely indicates the attendance or presence status associated with an HR request. This optional field (as it's nullable) can be used to filter or group HR requests based on different presence-related categories, such as in-office, remote work, or leave-related requests."
hr_request_details,job_type,int,NO,,,,,,,10.0,0.0,"The job_type column in the hr_request_details table is a required integer field that categorizes the type of job or position associated with an HR request. This column likely uses predefined numeric codes to represent different job categories or classifications (e.g., 1 for full-time, 2 for part-time, 3 for contract), making it useful for filtering and grouping HR requests by job type in queries."
hr_request_details,pay_system_id,int,YES,,,,,,,10.0,0.0,"The pay_system_id column in the hr_request_details table is an optional integer field that references the payroll system associated with an HR request. When writing queries, this column can be used to filter or join HR requests based on their related payroll system, though its nullable nature means you should account for potential NULL values in your conditions."
hr_request_details,direct_report_to,json,NO,,,,,,,,,"The `direct_report_to` column in the hr_request_details table stores JSON-formatted data containing information about the employee's direct supervisor or reporting manager. When querying this column, use JSON operators and functions to extract specific supervisor details, and since it's marked as NOT NULL, you can expect every HR request to have reporting hierarchy information."
hr_request_details,is_contract_position,tinyint(1),YES,,,,,,,3.0,0.0,"The `is_contract_position` column in the `hr_request_details` table is a boolean flag (stored as tinyint(1)) that indicates whether an HR request pertains to a contract position (1/true) or a permanent position (0/false). When querying HR requests, this column can be used to filter or segment requests based on the position type, allowing for separate analysis of contract-related and permanent position-related requests."
hr_request_details,contract_duration_type,int,YES,,,,,,,10.0,0.0,"The contract_duration_type column in the hr_request_details table is an integer field that categorizes the duration or term type of employment contracts associated with HR requests. When writing queries, this column can be used to filter or group HR requests based on different contract duration categories (likely using predefined codes, such as 1 for permanent, 2 for fixed-term, etc.), and since it's nullable, queries should handle NULL values appropriately when this information isn't applicable or hasn't been specified."
hr_request_details,contract_duration,int,YES,,,,,,,10.0,0.0,"The contract_duration column in the hr_request_details table represents the length or duration of a contract in a standardized unit (likely months or days) associated with an HR request. This optional field (as it's nullable) is particularly relevant for contract-related HR requests, such as new hire contracts or contract extensions, and can be used in queries to filter or analyze requests based on their intended contract length."
hr_request_details,formal_job_title_fr,varchar(160),YES,,,,,,160.0,,,"The formal_job_title_fr column in the hr_request_details table stores the French version of official job titles associated with HR requests, supporting bilingual HR operations. This optional (nullable) text field can contain up to 160 characters and is typically used in conjunction with queries requiring French language job title information or multilingual reporting purposes."
hr_request_details,formal_job_title_en,varchar(160),YES,,,,,,160.0,,,"The formal_job_title_en column in the hr_request_details table stores the official English-language job title associated with an HR request, with a maximum length of 160 characters. This column can be used to filter or group HR requests by job position, though it may contain NULL values when the job title is not applicable or not yet specified for a particular request."
hr_request_details,creative_job_title_fr,varchar(160),YES,,,,,,160.0,,,"The creative_job_title_fr column in the hr_request_details table stores the French version of creative or custom job titles associated with HR requests, with a maximum length of 160 characters. This optional field (as indicated by being nullable) is typically used in bilingual HR environments where French job title translations are needed, and can be referenced when querying for French-specific job title information or generating bilingual HR documentation."
hr_request_details,creative_job_title_en,varchar(160),YES,,,,,,160.0,,,"The creative_job_title_en column in the hr_request_details table stores the English version of creative or custom job titles associated with HR requests, allowing for up to 160 characters. This optional field (as indicated by being nullable) can be used in queries to search, filter, or display customized job titles that may differ from standard organizational titles, particularly useful when dealing with job-related HR requests or position modifications."
hr_request_details,short_description_fr,text,YES,,,,,,65535.0,,,"The `short_description_fr` column in the `hr_request_details` table stores the French-language version of brief descriptions for HR requests and inquiries. This text field can be used when querying for French-language summaries of HR cases, and since it's nullable, some requests may not have a French description available."
hr_request_details,short_description_en,text,YES,,,,,,65535.0,,,"The short_description_en column in the hr_request_details table contains a text-based summary or brief description of HR requests in English language. This column can be used to search or filter HR requests based on their content, and since it's nullable, some requests might not have a description provided."
hr_request_details,salary_type,tinyint(1),NO,,,,,,,3.0,0.0,"The `salary_type` column in the hr_request_details table is a required binary field (tinyint(1)) that likely indicates whether the HR request is related to hourly (0) or salaried (1) employee compensation. When querying this column, you can use it to filter or group HR requests based on the employee's salary classification type."
hr_request_details,display_compensation,tinyint(1),NO,,,,,,,3.0,0.0,"The display_compensation column is a boolean flag (tinyint(1)) in the hr_request_details table that indicates whether compensation information should be shown or hidden for a particular HR request. This required field (non-nullable) is typically used to control visibility of sensitive salary or compensation-related details, where 1 indicates the compensation should be displayed and 0 indicates it should be hidden."
hr_request_details,pay_from,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The `pay_from` column in the `hr_request_details` table represents the starting or minimum salary amount associated with an HR request, stored as a decimal number with up to 10 digits total and 2 decimal places. This non-nullable field is commonly used in queries related to compensation changes, job postings, or salary range inquiries, and can be used for filtering or analyzing salary-related HR requests."
hr_request_details,pay_to,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The `pay_to` column in the `hr_request_details` table stores monetary amounts (with up to 2 decimal places) associated with HR requests, likely representing reimbursements, compensation adjustments, or other payment-related values. Since this field is nullable, not all HR requests may involve a payment amount, making it suitable for queries where you need to analyze or filter financial aspects of HR requests."
hr_request_details,job_description_content_en,mediumtext,YES,,,,,,16777215.0,,,"The job_description_content_en column stores the English-language version of job descriptions associated with HR requests, containing detailed text about role requirements, responsibilities, and qualifications. When querying this column, use text-based operations (like LIKE, CONTAINS, or full-text search if enabled) to search through job description content, and be aware that the column can contain NULL values for requests that don't involve job descriptions."
hr_request_details,job_description_content_fr,mediumtext,YES,,,,,,16777215.0,,,"The job_description_content_fr column stores the French version of job descriptions associated with HR requests, using mediumtext to accommodate lengthy content. This column can be used when querying for French-language job descriptions or when implementing multilingual functionality, and since it's nullable, some requests may not have French content available."
hr_request_details,content_html,text,YES,,,,,,65535.0,,,"The content_html column in the hr_request_details table stores the full HTML-formatted content of HR requests, which may include formatted text, lists, tables, or other HTML elements describing the details of the inquiry or request. When querying this column, be aware that it contains HTML markup and may require HTML parsing or stripping if plain text is needed, and since it's nullable, always handle potential NULL values appropriately in your queries."
hr_request_details,content_html_fr,text,YES,,,,,,65535.0,,,"The content_html_fr column in the hr_request_details table stores the French-language HTML content of HR requests, containing formatted text and markup for displaying request details in French. When querying this column, you should expect HTML-formatted text content, and it may be NULL since it's an optional field, likely used in conjunction with other language versions of the same content."
hr_request_details,tag_en,text,YES,,,,,,65535.0,,,"The ""tag_en"" column in the hr_request_details table stores English-language tags or labels that help categorize and organize HR requests. These tags can be used to filter, group, or search for specific types of HR requests, making it easier to analyze and manage HR inquiries based on their characteristics or themes."
hr_request_details,tag_fr,text,YES,,,,,,65535.0,,,"The 'tag_fr' column in the hr_request_details table stores French language tags or labels associated with HR requests, providing a way to categorize or mark requests in French for multilingual support. This text field is optional (nullable) and can be used in queries to filter or group HR requests based on their French language classifications."
hr_request_details,url_slug_en,varchar(255),YES,,,,,,255.0,,,"The url_slug_en column in the hr_request_details table stores URL-friendly, English-language identifiers for HR requests, typically containing lowercase letters, numbers, and hyphens (e.g., ""vacation-request-2023"", ""benefits-inquiry-smith""). This column can be used for generating SEO-friendly URLs or creating unique, readable identifiers for HR requests in web applications, and being nullable means not all HR requests are required to have a URL slug."
hr_request_details,url_slug_fr,varchar(255),YES,,,,,,255.0,,,"The `url_slug_fr` column in the `hr_request_details` table stores the French-language URL-friendly version of the HR request title or identifier, formatted as a string up to 255 characters long. This column is used for generating localized French URLs or permalinks for HR requests, making them easily accessible and shareable within French-language interfaces of the HR system."
hr_request_details,on_probation,tinyint(1),NO,,,0,,,,3.0,0.0,"The `on_probation` column in the hr_request_details table is a boolean flag (stored as tinyint(1)) that indicates whether the employee associated with the HR request is currently on a probationary period (1) or not (0). This mandatory field (NOT NULL) is useful for filtering and analyzing HR requests specifically related to employees in their probationary period, which may require different handling or processing rules."
hr_request_reject_reasons,hr_request_reject_reasons_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_request_reject_reasons_id column serves as the primary key identifier for each unique rejection reason in the HR request rejection tracking system. When writing queries, use this column to join with other tables that reference specific rejection reasons or to uniquely identify individual rejection reason records."
hr_request_reject_reasons,hr_hiring_request_id,int,NO,,,,,,,10.0,0.0,"The hr_hiring_request_id column in the hr_request_reject_reasons table is a required integer field that links to the specific HR hiring request that was rejected. When writing SQL queries, use this column to join with related HR request tables or to filter/group rejection reasons for specific hiring requests."
hr_request_reject_reasons,reject_reasons,text,YES,,,,,,65535.0,,,"The reject_reasons column in the hr_request_reject_reasons table stores text descriptions of standardized reasons for denying HR-related requests or applications. When writing SQL queries, this column can be used to filter, group, or analyze rejection patterns, and since it's nullable, queries should handle potential NULL values appropriately when referencing this field."
hr_request_reject_reasons,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the hr_request_reject_reasons table is a required integer field that stores the employee ID or user ID of the person who created the rejection reason record. When writing queries, this column can be used to join with user/employee tables to track who added specific rejection reasons to the system, and it's commonly used in WHERE clauses to filter rejection reasons by their creator."
hr_request_reject_reasons,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_request_reject_reasons table records the exact date and time when each rejection reason was added to the system, automatically populated with the current timestamp upon insertion. When querying this column, it's useful for auditing purposes and filtering rejection reasons by their creation date, commonly used in WHERE clauses or for temporal analysis (e.g., ""SELECT * FROM hr_request_reject_reasons WHERE created_at >= '2023-01-01'"")."
hr_series_attachments,hr_series_attachment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_series_attachment_id column serves as the primary key in the hr_series_attachments table, uniquely identifying each HR-related attachment or document record. When writing SQL queries, use this column for precise record selection, joining with related tables, or tracking specific HR attachments through their unique identifier."
hr_series_attachments,hr_event_series_id,int,NO,,,,,,,10.0,0.0,"The hr_event_series_id column in the hr_series_attachments table is a required integer field that links attachments to their corresponding HR event series or sequence. When writing queries, use this column to join with the parent HR event series table or to filter attachments belonging to a specific HR event sequence."
hr_series_attachments,file_name,varchar(255),NO,,,,,,255.0,,,"The file_name column in hr_series_attachments stores the original name of uploaded HR-related documents or attachments, with a maximum length of 255 characters. This required field (non-nullable) should be referenced when querying for specific HR documents by their file names, such as ""employee_contract.pdf"" or ""performance_review_2023.docx""."
hr_series_attachments,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the hr_series_attachments table automatically tracks when an HR document or attachment was last modified, using a datetime format and defaulting to the current timestamp. This column is useful for filtering or sorting attachments by their modification date, and can be particularly helpful when tracking document version history or auditing changes to HR files."
hr_series_organisers,hr_series_organiser_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_series_organiser_id column serves as the primary key in the hr_series_organisers table, uniquely identifying each HR series organizer with a non-nullable integer value. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific organizer records (e.g., WHERE hr_series_organiser_id = X)."
hr_series_organisers,hr_event_series_id,int,NO,,,,,,,10.0,0.0,"The hr_event_series_id column in the hr_series_organisers table serves as a reference to identify which HR event series an organizer is associated with. This integer field is required (non-nullable) and helps establish the relationship between organizers and their respective event series, enabling queries to find all organizers for a specific series or determine which series an organizer manages."
hr_series_organisers,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the hr_series_organisers table is a required integer field that identifies the specific user who is responsible for organizing HR events or programs. This column likely serves as a reference to a user table, allowing the system to link organizer records with detailed user information, though it's not explicitly marked as a foreign key in the provided schema."
hr_series_organisers,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `hr_series_organisers` table automatically tracks the most recent timestamp when an organizer's record was modified, using the CURRENT_TIMESTAMP value. When writing SQL queries, this column can be useful for filtering records based on modification dates or tracking changes over time, such as finding recently updated organizer records or identifying when specific changes were made to organizer information."
hr_setting_archive_options,hr_setting_archive_option_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_setting_archive_option_id is the primary key column in the hr_setting_archive_options table, uniquely identifying each archival configuration setting record. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference specific HR archival configuration entries (e.g., WHERE hr_setting_archive_option_id = 123)."
hr_setting_archive_options,seq_id,tinyint,NO,,,,,,,3.0,0.0,"The seq_id column in hr_setting_archive_options is a required small integer field that serves as a sequence identifier for archival configuration rules. This column helps maintain the order of archive settings and retention policies, ensuring they are processed in the correct sequence when the system performs HR data archival operations."
hr_setting_archive_options,option_value,varchar(255),NO,,,,,,255.0,,,"The option_value column in hr_setting_archive_options stores the actual configuration values for various HR archival settings as text strings (up to 255 characters). This required field contains specific parameters or rule definitions that determine how HR records should be archived or maintained, such as retention periods, archival paths, or data purge criteria."
hr_setting_archive_options,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the hr_setting_archive_options table is a required integer field that identifies the HR system user associated with specific archival configuration settings. This column helps track which users have defined or modified particular archival rules and retention policies, enabling accountability and audit tracking for archive setting changes."
hr_setting_archive_options,is_archive,tinyint(1),NO,,DEFAULT_GENERATED,0,,,,3.0,0.0,The `is_archive` column in the hr_setting_archive_options table is a boolean flag (stored as tinyint(1)) that indicates whether a particular HR record configuration should be archived (1) or not (0). This required field helps control the archival behavior for different types of HR records and is commonly used in WHERE clauses to filter archive-related settings.
hr_setting_archive_options,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_setting_archive_options table records the exact date and time when each HR archival configuration setting was initially created in the system. This non-nullable datetime field is essential for auditing and tracking when specific archival rules were established, and can be used in SQL queries to filter or sort configuration entries based on their creation timestamp."
hr_setting_archive_options,updated_at,datetime,NO,,,,,,,,,The updated_at column in hr_setting_archive_options is a mandatory datetime field that tracks when archive configuration settings were last modified. This timestamp is essential for auditing changes to HR archival policies and can be used in SQL queries to filter or sort records based on when specific retention rules were updated.
hr_status_change_requirement_settings,hr_status_change_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_status_change_id column serves as the primary key identifier for each unique HR status change requirement configuration in the hr_status_change_requirement_settings table. When writing SQL queries, use this column to uniquely identify specific status change requirements or to create joins with related tables that reference HR status changes."
hr_status_change_requirement_settings,status_action,varchar(255),NO,,,,,,255.0,,,"The status_action column in hr_status_change_requirement_settings stores the specific type of HR status change action (such as ""promotion,"" ""termination,"" or ""department transfer"") that triggers certain requirements or validations. When writing SQL queries, this required varchar field can be used to filter or group status change requirements by their associated action type, helping to identify what documentation or conditions apply to different kinds of employee status changes."
hr_status_change_requirement_settings,required_document,text,NO,,,,,,65535.0,,,"The required_document column in hr_status_change_requirement_settings specifies the mandatory documentation that must be submitted when processing an employee's status change. When writing SQL queries, this text field can be used to filter or retrieve specific document requirements for different types of HR status changes, and since it's non-nullable, you can expect a value to always be present."
hr_status_change_requirement_settings,required_document_id,int,YES,,,,,,,10.0,0.0,"The required_document_id column in hr_status_change_requirement_settings references specific documents that must be submitted or processed during an employee status change. When querying this column, you can join it with a related documents table to retrieve details about required paperwork, or filter status change requirements based on specific document requirements, with NULL values indicating cases where no documentation is required."
hr_status_change_requirement_settings,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_status_change_requirement_settings table records the exact date and time when each HR status change requirement configuration was initially created in the system. This non-nullable datetime field is commonly used in WHERE clauses for auditing purposes or when filtering configuration records by their creation date, and can be helpful in JOIN operations when tracking historical changes to HR status requirements."
hr_status_change_requirement_settings,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the hr_status_change_requirement_settings table stores the user ID (as an integer) of the person who created each HR status change requirement record. This optional field can be used in SQL queries to track or filter configuration settings based on their creator, and is commonly joined with a users or employees table to get the creator's full details."
hr_tags,hr_tag_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_tag_id column serves as the primary key in the hr_tags table, uniquely identifying each HR-related tag or label in the system. When writing SQL queries, use this column for joining to other tables that reference HR tags, or when you need to look up specific tags by their ID."
hr_tags,name,varchar(45),NO,,,,,,45.0,,,"The 'name' column in the hr_tags table stores the actual text label or tag name (limited to 45 characters) used for HR categorization purposes, such as ""Senior Level,"" ""Remote Work,"" or ""Benefits Eligible."" This required field (non-nullable) serves as the primary identifier for the tag and is used when applying tags to various HR entities like employees or job postings."
hr_tags,is_default,tinyint(1),NO,,DEFAULT_GENERATED,1,,,,3.0,0.0,"The `is_default` column in the `hr_tags` table is a boolean flag (stored as tinyint(1)) that indicates whether a particular HR tag is considered a default or standard tag in the system. When writing queries, use this column with values 1 (true) or 0 (false) to filter for default tags, which can be useful when implementing default tag-based filtering or when distinguishing between system-defined and custom HR tags."
hr_tags,is_deleted,tinyint(1),NO,,DEFAULT_GENERATED,0,,,,3.0,0.0,"The `is_deleted` column in the `hr_tags` table is a boolean flag (stored as tinyint) that indicates whether a particular HR tag has been marked for deletion, where 0 represents active tags and 1 represents deleted tags. When querying for active HR tags, include the condition `WHERE is_deleted = 0` to exclude soft-deleted records from the results."
hr_tags,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_tags table records the exact date and time when each HR tag was initially created in the system. This non-nullable datetime field is useful for tracking tag creation history and can be used in SQL queries for filtering tags by creation date, analyzing tag usage patterns over time, or sorting tags chronologically."
hr_tags,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_tags table records the timestamp of when a tag was last modified, automatically tracking changes to HR tag records. This datetime field is mandatory (non-nullable) and helps maintain an audit trail of tag updates, which is useful for filtering tags by their modification date or monitoring recent changes to HR categorization data."
hr_tasks,hr_task_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_task_id column serves as the primary key identifier for each unique HR task record in the hr_tasks table, using auto-incrementing integers. When writing SQL queries, use this column to uniquely identify specific HR tasks, join with related tables, or filter task-specific records (e.g., WHERE hr_task_id = 123)."
hr_tasks,user_type_id,int,NO,,,,,,,10.0,0.0,"The user_type_id column in the hr_tasks table is a required integer field that identifies the category or role of the user associated with each HR task (e.g., HR manager, recruiter, benefits administrator). When querying hr_tasks, this column can be used to filter or group tasks by user role types, helping to analyze task distribution across different HR personnel categories."
hr_tasks,hr_hiring_request_id,int,YES,,,,,,,10.0,0.0,"The hr_hiring_request_id column in the hr_tasks table is an optional foreign key reference that links HR tasks to specific hiring requests. This column can be used to filter or join tasks related to particular hiring processes, making it useful for queries that need to track or analyze tasks associated with recruitment activities."
hr_tasks,task_title,varchar(255),NO,,,,,,255.0,,,"The task_title column in the hr_tasks table stores the descriptive name or heading of each HR-related task or activity, with a maximum length of 255 characters. This required field (non-nullable) should be used in queries when searching for or referencing specific HR tasks by their titles, making it useful for filtering, sorting, or displaying task information in HR workflow management scenarios."
hr_tasks,assigned_hr_user,int,YES,,,,,,,10.0,0.0,"The assigned_hr_user column in the hr_tasks table stores the unique identifier (ID) of the HR team member assigned to handle a specific HR task or activity. When querying this column, you can join it with a users or employees table to get detailed information about the assigned HR personnel, and since it's nullable, tasks may exist without an assigned user."
hr_tasks,is_completed,tinyint,YES,,,0,,,,3.0,0.0,"The `is_completed` column in the `hr_tasks` table is a boolean flag (stored as tinyint) that indicates whether an HR task has been completed (1) or is still pending (0). This column can be used in WHERE clauses to filter tasks by completion status, making it useful for queries that need to track outstanding tasks or generate completion reports."
hr_tasks,completed_date,datetime,YES,,,,,,,,,"The completed_date column in the hr_tasks table stores the timestamp when an HR task was finished or marked as complete. This datetime field can be used to filter, sort, or analyze task completion patterns, and since it's nullable, tasks that are still in progress or not yet completed will have NULL values in this column."
hr_tasks,category_id,tinyint,YES,,,,,,,3.0,0.0,"The category_id column in the hr_tasks table is used to classify and group different types of HR tasks into distinct categories (such as recruitment, training, benefits administration, etc.) using small integer values. This optional field (as indicated by being nullable) helps in organizing and filtering HR tasks by their functional area, making it easier to analyze and manage related activities together."
hr_tasks,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the hr_tasks table stores the timestamp when an HR task or activity was initially created in the system, automatically populated with the current date and time using CURRENT_TIMESTAMP. When querying HR tasks, this column can be used to filter or sort tasks by their creation date, making it useful for analyzing task creation patterns or finding recently created HR activities."
hr_tasks,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the hr_tasks table stores the timestamp of when an HR task was last modified, using a datetime format. This column helps track the history of changes to HR tasks and can be useful for auditing purposes or filtering tasks based on their last update time, making it particularly valuable in queries that need to identify recently modified HR activities or analyze task modification patterns."
hr_tasks,due_date,date,YES,,,,,,,,,"The due_date column in the hr_tasks table stores the deadline or target completion date for HR-related tasks and assignments in a standard date format (YYYY-MM-DD). This column can be used in SQL queries to filter tasks by their deadlines, track overdue items (where due_date < CURRENT_DATE), or sort tasks chronologically, with NULL values indicating tasks that don't have a specific deadline."
hr_tasks,user_type,tinyint,YES,,,,,,,3.0,0.0,"The user_type column in the hr_tasks table is a tinyint field that categorizes the type of user associated with HR tasks, likely using small numeric values to represent different user roles or classifications (e.g., 1 for employees, 2 for managers, 3 for HR staff). When querying this column, you can use numeric comparisons to filter tasks by user type, and since it's nullable, remember to handle NULL values appropriately in your WHERE clauses."
hr_tasks,hr_employee_document_id,int,YES,,,,,,,10.0,0.0,"The hr_employee_document_id column in the hr_tasks table is an optional integer field that links HR tasks to specific employee documents or records. This column can be used in SQL queries to filter or join tasks based on their associated employee documentation, making it useful for tracking document-related HR activities like performance reviews, certifications, or compliance paperwork."
hr_tasks,employee_id,int,YES,,,,,,,10.0,0.0,"The employee_id column in the hr_tasks table represents the unique identifier of the employee who is either assigned to or associated with a specific HR task. This optional field (as it's nullable) can be used to filter or join HR tasks with employee data, making it useful for queries that need to analyze task assignments or workload distribution among employees."
hr_temp_form_settings,hr_temp_form_setting_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_temp_form_setting_id column serves as the primary key identifier for each unique configuration setting in the hr_temp_form_settings table. When writing SQL queries, use this column to uniquely identify or join specific form settings records, such as ""SELECT * FROM hr_temp_form_settings WHERE hr_temp_form_setting_id = 123"" for retrieving a specific configuration."
hr_temp_form_settings,hr_form_id,int,NO,,,,,,,10.0,0.0,"The hr_form_id column in the hr_temp_form_settings table serves as an identifier for specific HR temporary forms and templates. When writing SQL queries, use this column to filter, join, or reference individual form configurations, such as in WHERE clauses (e.g., WHERE hr_form_id = 123) or JOIN conditions to related HR form tables."
hr_temp_form_settings,is_time_limit_allowed,tinyint,YES,,,,,,,3.0,0.0,"The is_time_limit_allowed column is a boolean flag (stored as tinyint) that indicates whether time limits can be applied to HR temporary forms. When querying this column, use values 1 (true) or 0 (false) to filter forms based on whether they support time restrictions, with NULL values potentially indicating an unspecified time limit setting."
hr_temp_form_settings,time_limit,float,YES,,,,,,,12.0,,"The time_limit column in hr_temp_form_settings stores the duration (in hours) for which a temporary HR form remains valid or accessible. When writing queries, this floating-point value can be used to filter or identify forms based on their time restrictions, such as finding forms that are about to expire or calculating remaining valid time periods."
hr_temp_form_settings,random_order_multiple_options,tinyint,YES,,,,,,,3.0,0.0,"The random_order_multiple_options column is a boolean flag (stored as tinyint) that determines whether multiple-choice options in HR temporary forms should be displayed in random order. When querying this column, use 1 to indicate randomized option ordering and 0 for maintaining the default sequence of options in forms."
hr_temp_form_settings,random_order_section_question,tinyint,YES,,,,,,,3.0,0.0,"The random_order_section_question column is a boolean flag (stored as tinyint) that determines whether questions within form sections should be displayed in random order. This setting helps HR administrators configure whether form questions should appear in a fixed sequence or be randomized when presented to users, which can be useful for assessment or evaluation forms."
hr_temp_form_settings,total_points_display,tinyint,YES,,,,,,,3.0,0.0,"The total_points_display column in hr_temp_form_settings is a boolean-like flag (stored as a tinyint) that determines whether total points should be shown on HR temporary forms and templates. When querying this column, use it to filter or control the visibility of point totals in form displays, where a non-null value typically indicates the user's preference for showing (1) or hiding (0) point totals."
hr_temp_form_settings,display_question_points,tinyint,YES,,,,,,,3.0,0.0,"The display_question_points column in hr_temp_form_settings is a boolean-like flag (stored as tinyint) that determines whether point values should be shown on HR form questions or assessments. When querying this column, use it to filter or control the visibility of point values in HR temporary forms, where 1 typically indicates points should be displayed and 0 indicates they should be hidden."
hr_temp_form_settings,grade_auto,tinyint,YES,,,,,,,3.0,0.0,"The grade_auto column in hr_temp_form_settings is a boolean-like flag (stored as tinyint) that indicates whether grade calculations should be performed automatically for HR temporary forms. When querying this column, use it to filter or check forms based on their automatic grading status, where typical values are 1 for enabled automatic grading and 0 for manual grading requirements."
hr_temp_form_settings,grade_auto_section_complete,tinyint,YES,,,,,,,3.0,0.0,The grade_auto_section_complete column is a boolean flag (stored as tinyint) that determines whether the grading section of HR temporary forms should be automatically marked as complete. This setting helps control the workflow automation of HR forms by indicating if the system should automatically finalize grade-related sections without manual intervention.
hr_temp_form_settings,grade_auto_pass_percentage,int,YES,,,,,,,10.0,0.0,"The grade_auto_pass_percentage column in hr_temp_form_settings specifies the minimum percentage score required for automatic approval or passing of HR temporary forms. When writing queries, this integer value can be used to filter or evaluate form submissions against passing thresholds, such as ""WHERE submission_score >= grade_auto_pass_percentage"" to identify automatically approved forms."
hr_temp_form_settings,grade_auto_pass_point,int,YES,,,,,,,10.0,0.0,"The grade_auto_pass_point column in hr_temp_form_settings specifies the minimum score threshold (as an integer) at which a form or assessment is automatically considered passing in HR temporary documentation processes. When writing queries, this column can be used to filter or evaluate form submissions against the passing criteria, with NULL values potentially indicating that no automatic pass threshold has been set for that particular form configuration."
hr_temp_form_settings,allow_retake,tinyint,YES,,,,,,,3.0,0.0,"The allow_retake column in hr_temp_form_settings is a boolean flag (stored as tinyint) that determines whether users can resubmit or retake an HR temporary form. When querying this column, use 1 to filter for forms that allow retakes and 0 for forms that don't allow retakes, for example: SELECT * FROM hr_temp_form_settings WHERE allow_retake = 1."
hr_temp_form_settings,retake_count,int,YES,,,,,,,10.0,0.0,"The retake_count column in hr_temp_form_settings represents the number of times a temporary HR form can be resubmitted or filled out again. When querying this column, you can use it to track or limit form resubmissions, with NULL values potentially indicating unlimited retakes or cases where retake limits aren't applicable."
hr_temp_form_settings,display_grade,tinyint,YES,,,,,,,3.0,0.0,"The display_grade column in hr_temp_form_settings is a tinyint flag that determines whether to show or hide grade-related information on HR temporary forms and templates. When querying this column, use it to filter or control the visibility of grade details in form configurations, where a non-null value typically indicates specific grade display preferences."
hr_temp_form_settings,display_answer,tinyint,YES,,,,,,,3.0,0.0,"The display_answer column in hr_temp_form_settings is a boolean-like flag (stored as a tinyint) that determines whether answers or responses should be visible on HR temporary forms. When querying this column, use it to filter or control the visibility of form answers, where a typical value of 1 indicates answers should be displayed and 0 indicates they should be hidden."
hr_temp_form_settings,move_step_auto,tinyint,YES,,,,,,,3.0,0.0,"The move_step_auto column in hr_temp_form_settings is a boolean-like flag (stored as tinyint) that determines whether HR forms should automatically progress to the next step in their workflow. When querying this column, use it to filter or control the automatic progression behavior of temporary HR forms, where a typical value of 1 indicates automatic movement is enabled and 0 indicates manual progression is required."
hr_temp_form_settings,manual_notify_assignee,tinyint,YES,,,,,,,3.0,0.0,"The manual_notify_assignee column is a boolean flag (stored as tinyint) that determines whether manual notifications should be sent to form assignees in the HR temporary documentation process. This optional setting can be used in SQL queries to filter or identify forms where manual assignee notifications are enabled or disabled, typically using values 1 (enabled) or 0 (disabled)."
hr_user_tags,hr_user_tag_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_user_tag_id column serves as the primary key in the hr_user_tags table, uniquely identifying each tag association between users and their labels in the HR system. When writing SQL queries, use this column for joining with related tables, filtering specific tag records, or ensuring unique identification of tag entries."
hr_user_tags,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the hr_user_tags table serves as a reference to identify which specific HR system user a tag is assigned to. When writing queries, this column should be used to join with the main users table or to filter/group tag assignments for particular users, and since it's non-nullable, every tag record must be associated with a valid user."
hr_user_tags,hr_tag_id,int,NO,,,,,,,10.0,0.0,"The hr_tag_id column in the hr_user_tags table serves as an identifier for individual tags assigned to HR system users. When writing SQL queries, use this column to join with other tables or filter users based on specific tag assignments, such as finding all users with a particular skill tag or department classification."
hr_user_tags,user_type,int,NO,,,,,,,10.0,0.0,"The user_type column in the hr_user_tags table is a required integer field that specifies the category or classification of the user being tagged (e.g., 1 for employee, 2 for contractor, 3 for manager). When writing SQL queries, this column can be used to filter or group users based on their fundamental role or classification within the HR system."
hr_user_tags,created_at,datetime,NO,,,,,,,,,"The created_at column in the hr_user_tags table stores the timestamp when a tag was first assigned to a user, using a datetime format. This column is commonly used in queries to track when user classifications were established or to filter tags based on their creation date, making it useful for auditing tag assignment history and analyzing user categorization patterns over time."
hr_user_tags,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_user_tags table stores the timestamp of when a user's tag association was last modified, using a datetime format. This non-nullable field is essential for tracking the recency of tag assignments and can be useful in queries that need to filter or sort tag relationships based on when they were last updated."
hr_visibilities,hr_visibility_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The hr_visibility_id column serves as the primary key in the hr_visibilities table, uniquely identifying each visibility rule or access control setting for HR-related content. When writing SQL queries, use this column for joining to related tables or when you need to reference specific visibility rules, ensuring it's always included in the WHERE clause when filtering for particular access control settings."
hr_visibilities,info,varchar(50),NO,,,,,,50.0,,,"The ""info"" column in the hr_visibilities table stores descriptive text (up to 50 characters) that identifies specific HR information or resource types that are subject to visibility rules. This required field (non-nullable) likely contains values such as ""salary_data"", ""employee_records"", or ""performance_reviews"" to specify which HR elements the visibility settings apply to."
hr_visibilities,description,text,NO,,,,,,65535.0,,,"The 'description' column in the hr_visibilities table stores required text explanations of visibility rules or access control settings for HR resources. This column should be included in SELECT queries when you need to retrieve human-readable explanations of why or how certain HR data access permissions are configured, and it must always be provided when inserting new visibility rules since it's marked as non-nullable."
hr_visibilities,visibility,varchar(50),NO,,,,,,50.0,,,"The 'visibility' column in the hr_visibilities table stores predefined access level or visibility settings as text strings (up to 50 characters) and cannot be null. When writing queries, this column can be used to filter or group HR resources based on their visibility status, with expected values likely including terms like 'public', 'private', 'department-only', or similar access control designations."
hr_visibilities,is_visible,tinyint(1),NO,,,1,,,,3.0,0.0,"The `is_visible` column in the `hr_visibilities` table is a boolean flag (stored as tinyint(1)) that determines whether a specific HR resource or data element is currently visible or accessible. When querying, use this column with values 1 (visible/enabled) or 0 (hidden/disabled) to filter HR resources based on their visibility status, such as `WHERE is_visible = 1` to retrieve only visible items."
hr_visibilities,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the hr_visibilities table records the timestamp of when a visibility rule or access control setting was last modified, storing this information as a datetime value that cannot be null. This column is essential for auditing changes to HR data access permissions and can be used in SQL queries to filter or sort visibility rules based on when they were last updated."
hr_visibilities,updated_by,int,NO,,,,,,,10.0,0.0,The `updated_by` column in the hr_visibilities table stores the user ID (as an integer) of the person who last modified the visibility settings or access control rules. This mandatory field (non-nullable) helps maintain an audit trail of changes to HR data access permissions and is commonly used in WHERE clauses or JOINs with user tables to track who made specific visibility rule modifications.
identification_verification,identification_verification_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The identification_verification_id is the primary key column that uniquely identifies each verification record in the identification_verification table. This auto-incrementing integer serves as the main identifier for referencing specific verification attempts and is commonly used in JOIN operations when relating verification records to other tables in the system.
identification_verification,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the identification_verification table is a required foreign key that references the users table, representing the individual whose identity is being verified. This column is frequently used in JOIN operations to connect verification records with user details, and can be used in WHERE clauses to filter verification records for specific users."
identification_verification,staff_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The staff_id column in the identification_verification table is a required foreign key that references the ID of the staff member who performed the verification check. When writing queries, this column can be joined with the users table to retrieve information about the staff member who conducted the verification, making it useful for audit trails and accountability tracking."
identification_verification,verified,tinyint,NO,,,0,,,,3.0,0.0,"The 'verified' column in the identification_verification table is a required boolean flag (stored as tinyint) that indicates whether a user's identity verification attempt was successful (1) or unsuccessful (0). This column is essential for filtering and reporting on verification outcomes, and can be used in WHERE clauses to specifically query successful or failed verification attempts."
identification_verification,date,date,NO,,,,,,,,,"The 'date' column in the identification_verification table stores the specific calendar date when a user's identity verification attempt was processed. This required (non-nullable) field is essential for maintaining a chronological record of verification activities and can be used for filtering, sorting, or analyzing verification patterns over time."
institution_event_requests,institution_event_request_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The institution_event_request_id is the primary key column that uniquely identifies each event request made by institutions in the system. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific event requests (e.g., WHERE institution_event_request_id = X)."
institution_event_requests,community_institution_id,int,YES,MUL,,,community_institutions,community_institution_id,,10.0,0.0,"The community_institution_id column in the institution_event_requests table serves as a foreign key that references the institution making the event request within the community platform. This column helps establish relationships between event requests and their corresponding institutions, allowing queries to filter or join event requests based on specific institutions and track which institutions are requesting various events."
institution_event_requests,scheduled_events_id,int,YES,MUL,,,scheduled_events,scheduled_events_id,,10.0,0.0,"The scheduled_events_id column in the institution_event_requests table serves as a foreign key that links to a specific scheduled event record. This column allows you to track which scheduled event an institution has requested to participate in, and since it's nullable, institutions can submit requests before a specific event is scheduled."
institution_event_requests,community_events_id,int,NO,MUL,,,community_events,community_events_id,,10.0,0.0,"The community_events_id column in the institution_event_requests table is a required foreign key that references a specific community event associated with an institution's request. This column enables queries to link institution requests with their corresponding community events, making it useful for filtering, joining, or analyzing the relationship between institutions and community events."
institution_event_requests,user_id_sent_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id_sent_by column in the institution_event_requests table stores the unique identifier of the user who submitted the event request on behalf of their institution. This mandatory integer field (non-nullable) is indexed (MUL) to optimize queries that filter or join based on the requesting user, and it likely references a user ID from a related users table."
institution_event_requests,prefered_date,date,NO,,,,,,,,,"The prefered_date column in the institution_event_requests table stores the desired date when an institution would like their requested event to take place. This mandatory date field is essential for scheduling purposes and can be used in SQL queries to filter, sort, or analyze event requests based on temporal preferences (e.g., SELECT * FROM institution_event_requests WHERE prefered_date >= '2024-01-01')."
institution_event_requests,prefered_time,timestamp,NO,,,,,,,,,The `prefered_time` column in the `institution_event_requests` table stores the timestamp indicating when an institution would prefer their requested event to take place. This non-nullable field is essential for scheduling purposes and should be included in queries when filtering or organizing event requests based on temporal preferences.
institution_event_requests,flexible_date,tinyint,YES,,,0,,,,3.0,0.0,"The `flexible_date` column in the `institution_event_requests` table is a boolean flag (stored as tinyint) indicating whether the institution's event request has flexible timing. When querying, use this column to identify requests where institutions are open to alternative dates (1) versus those that require specific dates (0), which can be helpful for event scheduling and coordination purposes."
institution_event_requests,flexible_time,tinyint,YES,,,0,,,,3.0,0.0,"The `flexible_time` column in the `institution_event_requests` table is a boolean flag (stored as tinyint) indicating whether the institution has flexibility in their event timing preferences. When querying this column, use 1 to find requests where institutions are flexible with their event scheduling and 0 for those with strict timing requirements."
institution_event_requests,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the institution_event_requests table automatically records the timestamp when an event request is first submitted by an institution. This non-nullable timestamp field, which defaults to CURRENT_TIMESTAMP, is useful for tracking request chronology and can be used in SQL queries for filtering requests by date/time or analyzing request patterns over time."
institution_event_requests,topics_covered_in_class,text,YES,,,,,,65535.0,,,"The `topics_covered_in_class` column in the `institution_event_requests` table stores a text description of the educational topics or subject matter that will be covered during the requested event. When writing SQL queries, this column can be used to search for or filter event requests based on specific educational content, though be mindful that it accepts NULL values and may require NULL handling in your queries."
institution_event_requests,special_learning_needs,text,YES,,,,,,65535.0,,,The `special_learning_needs` column in the institution_event_requests table stores text descriptions of any specific learning accommodations or requirements that need to be considered for the event request. This optional field allows institutions to specify any special educational needs or accessibility requirements that should be taken into account when planning or executing the community event.
institution_event_requests,comments,text,YES,,,,,,65535.0,,,"The `comments` column in the institution_event_requests table stores optional text notes or remarks associated with event requests made by institutions. This free-form text field can be used to capture additional context, special requirements, or explanatory information provided by the requesting institution or user when making an event-related request."
institution_event_requests,numb_students,int,NO,,,,,,,10.0,0.0,"The `numb_students` column in the institution_event_requests table stores the number of students that an institution plans to bring to an event, represented as a non-null integer value. This mandatory field helps track attendance expectations and capacity planning for community and scheduled events."
institution_event_requests,level,varchar(255),NO,,,,,,255.0,,,"The 'level' column in the institution_event_requests table is a required text field that specifies the classification or tier of the event request made by an institution. This column helps categorize and organize event requests based on their importance, complexity, or scope, enabling efficient filtering and prioritization of institutional event requests within the community platform."
institution_event_requests,status,"enum('requested','refused','accepted','')",NO,,,,,,9.0,,,"The 'status' column in the institution_event_requests table is an enumerated field that tracks the current state of an event request, with possible values being 'requested', 'refused', 'accepted', or an empty string. When writing SQL queries, this column can be used to filter or group event requests based on their approval status, making it particularly useful for monitoring request outcomes or generating status-based reports (e.g., SELECT * FROM institution_event_requests WHERE status = 'accepted')."
institution_event_requests,language,varchar(50),YES,,,,,,50.0,,,"The 'language' column in the institution_event_requests table stores the preferred language for the event request, using a varchar format that can hold up to 50 characters. This optional field helps track language preferences for event communications and materials, enabling proper localization of event-related content for the requesting institution."
institution_event_requests,internal_notes,text,YES,,,,,,65535.0,,,"The `internal_notes` column in the institution_event_requests table stores optional text-based comments or annotations that are used internally to track additional information about event requests from institutions. This free-form text field can be used to store administrative notes, processing details, or any relevant internal communication about the event request, and since it's nullable, it doesn't require a value for every request record."
institution_event_requests,archive,tinyint,YES,,,0,,,,3.0,0.0,"The `archive` column in the institution_event_requests table is a boolean flag (stored as tinyint) that indicates whether an event request has been archived (1) or is active (0). This column can be used in WHERE clauses to filter between current and archived event requests, helping to manage the visibility and organization of institution-related event requests within the community platform."
interactive_questions_answers,interactive_question_answer_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The interactive_question_answer_id column serves as the primary key for the interactive_questions_answers table, uniquely identifying each question-answer pair in the system. When writing SQL queries, use this column for precise record selection, joining with related tables (if needed), or when you need to reference specific Q&A entries (e.g., WHERE interactive_question_answer_id = X)."
interactive_questions_answers,parent_id,int,YES,,,,,,,10.0,0.0,"The parent_id column in the interactive_questions_answers table is used to create hierarchical relationships between questions, allowing for nested or follow-up questions where one question can be a sub-question of another. When querying, you can use this column to either find all child questions of a specific parent question (WHERE parent_id = X) or to find top-level questions (WHERE parent_id IS NULL)."
interactive_questions_answers,type,int,YES,,,,,,,10.0,0.0,"The 'type' column in the interactive_questions_answers table is an integer field that likely categorizes the type or format of the question (e.g., 1 for multiple choice, 2 for true/false, 3 for open-ended). When querying this column, you can use it to filter or group questions by their type, making it useful for retrieving specific categories of questions or analyzing question distribution across different formats."
interactive_questions_answers,value,text,NO,,,,,,65535.0,,,"The 'value' column in the interactive_questions_answers table stores the actual text content of either a question or its corresponding answer, and it cannot be null. When querying this column, you can use text-based operations (like LIKE, ILIKE, or string functions) to search or filter through question and answer content."
interactive_questions_answers,root,int,YES,,,,,,,10.0,0.0,"The ""root"" column in the interactive_questions_answers table is an optional integer field that likely indicates whether a question is a parent/root question or links to one, helping establish hierarchical relationships between questions. When writing queries, this column can be used to group related questions together or filter for top-level questions (where root is null or has a specific value)."
interactive_questions_answers,lft,int unsigned,NO,,,0,,,,10.0,0.0,"The 'lft' column in the interactive_questions_answers table is an unsigned integer that appears to be part of a nested set model implementation, commonly used to store hierarchical data structures in relational databases. When writing SQL queries, this column can be used to efficiently retrieve and organize questions and answers in a tree-like structure, where the 'lft' value helps determine the left boundary of each node in the hierarchy."
interactive_questions_answers,rgt,int unsigned,NO,,,0,,,,10.0,0.0,"The 'rgt' column in the interactive_questions_answers table appears to be part of a nested set model implementation, which is commonly used to store hierarchical data structures. When writing SQL queries, this column should be used in conjunction with a corresponding 'lft' (left) column to efficiently retrieve and manage tree-structured question-answer relationships, where higher 'rgt' values indicate nodes that are further to the right in the tree structure."
interactive_questions_answers,level,smallint unsigned,NO,,,0,,,,5.0,0.0,"The 'level' column in the interactive_questions_answers table is a required, non-negative small integer field that indicates the difficulty or complexity level of a question-answer pair. When querying this table, you can use this column to filter or sort questions based on their difficulty level (e.g., SELECT * FROM interactive_questions_answers WHERE level = 2 for intermediate questions)."
interactive_questions_answersLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the interactive_questions_answersLang table, uniquely identifying each language-specific answer record. When writing SQL queries, use this column for precise record identification, joining with related tables, or when you need to reference specific language variants of answers."
interactive_questions_answersLang,interactive_question_answer_id,int,NO,,,,,,,10.0,0.0,"The interactive_question_answer_id column serves as a reference identifier linking language-specific answers to their base answer records in the interactive questions system. When writing SQL queries, use this column to join with related tables or filter specific answer translations, noting that it cannot contain NULL values."
interactive_questions_answersLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the interactive_questions_answersLang table stores language identifiers (such as ""en"", ""es"", ""fr"") as text strings up to 10 characters long, and is required (non-nullable). This column should be used when filtering or grouping answers by language, making it essential for queries that need to retrieve language-specific content or manage multilingual answer sets."
interactive_questions_answersLang,l_value,text,NO,,,,,,65535.0,,,"The ""l_value"" column in the interactive_questions_answersLang table stores the actual text content of answers in different languages for interactive questions. When writing SQL queries, this column should be used to retrieve or filter the language-specific answer text, and since it's non-nullable, you can rely on it always containing a value."
interactive_questions_answers_params,interactive_questions_answers_params_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The interactive_questions_answers_params_id is the primary key column that uniquely identifies each configuration parameter record in the interactive_questions_answers_params table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific parameter settings (e.g., WHERE interactive_questions_answers_params_id = X)."
interactive_questions_answers_params,interactive_question_answer_id,int,NO,,,,,,,10.0,0.0,"The interactive_question_answer_id column serves as a reference to link configuration parameters with specific question-answer pairs in an interactive system. When writing SQL queries, use this column to join or filter configuration settings associated with particular question-answer combinations, ensuring you're accessing the correct parameters for each interactive element."
interactive_questions_answers_params,type,varchar(50),NO,,,,,,50.0,,,"The 'type' column in the interactive_questions_answers_params table is a required varchar field that categorizes or classifies different types of configuration parameters for interactive Q&A functionality. When querying this column, you can use it to filter or group configuration settings based on their parameter type, helping to organize and retrieve specific sets of Q&A configuration rules or settings."
interactive_questions_answers_params,value,varchar(250),NO,,,,,,250.0,,,"The 'value' column in the interactive_questions_answers_params table stores the actual parameter values or settings as text strings (up to 250 characters) for various question and answer configurations. When querying this column, you can use string comparison operations to filter or match specific parameter values, and since it's non-nullable, you can expect every row to contain a value."
inventory,lot_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The lot_id column is the primary key in the inventory table, serving as a unique identifier for each inventory lot in the system. This non-nullable integer field is essential for joining with related tables and should be referenced when tracking inventory movements, quality checks, or accessing lot-specific information throughout the database."
inventory,supplier_forecast_orders_id,int,NO,MUL,,,,,,10.0,0.0,"The supplier_forecast_orders_id column in the inventory table is a required integer field that links inventory lots to their corresponding supplier forecast orders, establishing a connection between actual inventory and predicted supply needs. This column, marked with a multi-column index (MUL), enables efficient querying of inventory items based on their associated supplier forecasts and can be used in JOIN operations with related supplier forecast tables."
inventory,warehouse_id,int,NO,,,,,,,10.0,0.0,The warehouse_id column in the inventory table is a required integer field that identifies which warehouse location is associated with each inventory lot. This column is essential for tracking the physical storage location of inventory items and is commonly used in JOIN operations with warehouse-related tables or when filtering inventory records by specific warehouse locations.
inventory,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the inventory table is a required integer field that serves as a foreign key to link inventory lots with their corresponding product definitions. This column is frequently used in JOIN operations to retrieve product details and specifications, and should be included in queries when filtering or grouping inventory data by specific products."
inventory,number_of_units_available,int,NO,MUL,,0,,,,10.0,0.0,"The number_of_units_available column in the inventory table represents the current quantity of items available in a specific inventory lot, stored as a non-negative integer that cannot be null. This column is indexed (MUL) to optimize queries that filter or sort by available units, making it efficient for inventory availability checks and stock level monitoring."
inventory,number_of_units_reserved,int,NO,,,0,,,,10.0,0.0,"The number_of_units_reserved column in the inventory table tracks the quantity of units that are currently reserved or allocated but not yet fulfilled from a specific inventory lot. This non-nullable integer field helps maintain accurate available inventory counts by keeping track of units that are committed to pending orders or reservations, with a default value of 0 when no units are reserved."
inventory,created,datetime,YES,,,,,,,,,"The 'created' column in the inventory table stores the timestamp indicating when each inventory lot record was initially created in the system. This datetime field can be used for temporal analysis, tracking inventory age, and filtering lots based on their creation dates, making it valuable for inventory aging reports and historical tracking of lot entries."
inventory,updated,datetime,NO,,,,,,,,,"The 'updated' column in the inventory table stores the timestamp of the most recent modification made to any lot record, automatically tracking when inventory data was last changed. This non-nullable datetime field is essential for audit trails and can be used to query recently modified inventory lots or track the chronological history of inventory changes."
inventory,status,int,NO,,,0,,,,10.0,0.0,"The 'status' column in the inventory table is a required integer field that represents the current state or condition of an inventory lot. When writing SQL queries, this column can be used to filter or group inventory lots based on their operational status (e.g., SELECT * FROM inventory WHERE status = 1), with 0 being a likely default or initial status value."
inventory,reception_inspector,int,NO,,,0,,,,10.0,0.0,"The reception_inspector column in the inventory table stores the employee ID (as an integer) of the inspector who performed the initial quality check when the inventory lot was received. This mandatory field (non-nullable) is essential for tracking accountability and maintaining quality control records for each inventory lot, enabling queries to identify who verified incoming inventory items."
inventory,reception_quality,int,NO,,,0,,,,10.0,0.0,"The reception_quality column in the inventory table is a required integer field that indicates the quality rating assigned to an inventory lot when it was first received into the system. This field is essential for quality control processes and can be used in SQL queries to filter or analyze inventory items based on their initial quality assessment, with higher values typically representing better quality ratings."
inventory,Expiry_date,date,YES,MUL,,,,,,,,"The Expiry_date column in the inventory table stores the date when a specific inventory lot is set to expire, helping track product freshness and shelf life. This date field can be used in SQL queries to identify soon-to-expire inventory, filter out expired lots, or prioritize inventory movement based on expiration dates (e.g., SELECT * FROM inventory WHERE Expiry_date < CURRENT_DATE() for finding expired items)."
inventory,required_storage_temperature,float,NO,,,0,,,,12.0,,The required_storage_temperature column in the inventory table stores the mandatory temperature (in a floating-point format) at which each inventory lot must be stored to maintain its quality and safety. This non-nullable field is essential for temperature-sensitive inventory management and can be used in queries to ensure proper storage conditions or to identify lots that need specific temperature-controlled environments.
inventory,storage_units_id,int,NO,,,0,,,,10.0,0.0,The storage_units_id column in the inventory table is a required integer field that identifies the specific storage unit where an inventory lot is located. This column helps track the physical location of inventory items and is essential for warehouse management and inventory tracking operations.
inventory,pallet_id,varchar(10),YES,,,,,,10.0,,,"The pallet_id column in the inventory table stores the unique identifier for pallets that contain inventory lots, using a variable-length string format up to 10 characters. This optional field (as indicated by being nullable) helps track and organize inventory items at the pallet level, enabling queries to group or filter inventory lots based on their physical storage units."
inventory,sales_order_id,varchar(30),YES,,,,,,30.0,,,"The sales_order_id column in the inventory table stores the reference identifier for associated sales orders, linking inventory lots to their corresponding sales transactions. This optional field (being nullable) allows tracking which inventory lots are allocated or reserved for specific sales orders, enabling the system to monitor inventory commitments and order fulfillment status."
inventory,box_type,int,YES,,,,,,,10.0,0.0,"The box_type column in the inventory table is an integer field that categorizes the type or style of container used for storing inventory lots. When writing SQL queries, this column can be used to filter or group inventory items based on their container specifications, helping to organize and track items based on their physical storage characteristics."
inventory,location_header_id,int,YES,MUL,,,,,,10.0,0.0,"The location_header_id column in the inventory table is a foreign key that references the primary location or storage area where an inventory lot is currently stored. This column enables queries to join with a location header table to retrieve detailed information about where inventory items are physically located, making it useful for warehouse management and inventory tracking operations."
inventory,validated_at,datetime,YES,,,,,,,,,"The validated_at column in the inventory table stores the timestamp when a specific inventory lot was validated or verified within the system. This datetime field can be used in SQL queries to filter or analyze inventory lots based on their validation timing, such as finding recently validated lots or identifying lots that haven't been validated yet (NULL values)."
inventory,validated_by,int,YES,,,,,,,10.0,0.0,"The validated_by column in the inventory table stores the user ID (as an integer) of the person who validated or verified the inventory lot, though this field can be null if validation hasn't occurred yet. This column is commonly used in queries to track validation status and accountability, and can be joined with a users or employees table to get the validator's details."
inventory,should_be_checked_if_empty,tinyint,NO,,,0,,,,3.0,0.0,"The `should_be_checked_if_empty` column is a boolean flag (stored as tinyint) that indicates whether an inventory lot requires verification when it appears to be empty. When writing queries, use this column to filter lots that need inspection upon depletion (value = 1) versus those that can be automatically marked as empty without verification (value = 0)."
inventory,initial_quantity,float,YES,,,0,,,,12.0,,"The initial_quantity column in the inventory table stores the original quantity of items in a lot when it was first created or received into the system, represented as a floating-point number. This value serves as a baseline reference point for tracking quantity changes over time and can be used in SQL queries to calculate inventory movements, variances, or to compare against current quantities for audit purposes."
inventory,provenance,text,YES,,,,,,65535.0,,,"The 'provenance' column in the inventory table stores textual information about the origin, history, and chain of custody for inventory lots. This column can be used in SQL queries to track or filter inventory items based on their source information or historical movement, making it valuable for quality control and compliance reporting where the origin of items needs to be verified."
inventory,isPortioned,tinyint,YES,,,1,,,,3.0,0.0,"The `isPortioned` column in the inventory table is a boolean flag (stored as tinyint) that indicates whether a lot has been divided or split into smaller portions. When querying inventory lots, use this column to filter or identify lots that have undergone portioning (value = 1) versus those that remain as original, undivided lots (value = 0)."
inventory,low_quantity_checked,datetime,YES,,,,,,,,,"The low_quantity_checked column stores the timestamp when an inventory lot was last evaluated for low quantity status, helping track when stock levels were last monitored. This datetime field can be used in SQL queries to identify lots that need quantity checks or to analyze the frequency of low quantity monitoring, with NULL values indicating lots that have never been checked for low quantity status."
inventory,emptied_on,datetime,YES,,,,,,,,,"The `emptied_on` datetime column in the inventory table records when a specific lot was completely depleted or used up in the system. This timestamp can be used to track inventory lifecycle completion and helps distinguish between active and exhausted lots, making it particularly useful in queries that need to analyze inventory turnover or filter for active/inactive lots."
inventory,storage_format_in_wh,"enum('Any','Pallet','Standard Totes')",YES,,,Any,,,14.0,,,"The storage_format_in_wh column specifies how inventory items are physically stored in the warehouse, with three possible values: 'Any', 'Pallet', or 'Standard Totes'. When querying this column, use it to filter or group inventory lots based on their storage format, which can be helpful for warehouse organization and logistics planning (e.g., SELECT * FROM inventory WHERE storage_format_in_wh = 'Pallet')."
inventory,tower_confirmed_at,datetime,YES,,,,,,,,,"The `tower_confirmed_at` column in the inventory table stores the timestamp when a lot's inventory was confirmed by tower personnel, representing a key quality control checkpoint in the inventory tracking process. When writing queries, this datetime field can be used to filter or analyze lots based on their tower confirmation status (NULL values indicate unconfirmed lots) or to track confirmation timing patterns."
inventory,tower_confirmed_by,int,YES,MUL,,,users,user_id,,10.0,0.0,"The tower_confirmed_by column in the inventory table stores the user ID of the person who performed the tower confirmation for an inventory lot, serving as a foreign key reference to a user table. This field is used to track accountability and verification of inventory lots, allowing queries to identify who validated specific lots and when combined with other columns, can help establish an audit trail for tower confirmation processes."
inventory,initial_gross_weight,"double(16,4)",YES,,,,,,,16.0,4.0,"The initial_gross_weight column stores the original weight measurement of an inventory lot using a double-precision decimal format with up to 16 total digits and 4 decimal places. This column is used to track the starting weight of inventory items before any processing or modifications, making it useful for inventory reconciliation and tracking weight changes throughout the lot's lifecycle."
inventory,origin_lot_id,int,YES,MUL,,,inventory,lot_id,,10.0,0.0,"The origin_lot_id column in the inventory table is a foreign key that references the parent or source lot from which the current inventory lot was derived, enabling tracking of inventory lineage and relationships. This column is particularly useful in queries that need to trace the history or origin of inventory lots, such as when analyzing lot splits, transfers, or transformations, and can be NULL if the lot is an original entry with no parent lot."
inventory_activity,inventory_activity_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_activity_id is the primary key column that uniquely identifies each inventory-related activity or operation in the inventory_activity table. When writing SQL queries, use this column to join with related tables or to filter specific inventory activities, and since it's non-nullable, you can rely on it always having a valid integer value."
inventory_activity,lot_id,int,YES,MUL,,,,,,10.0,0.0,"The lot_id column in the inventory_activity table is a foreign key that references specific lot numbers or batches of inventory items being tracked or modified. This column enables queries to filter or join inventory activities based on specific lots, making it useful for tracking lot-specific operations, analyzing inventory movements by lot, or generating lot-based reports."
inventory_activity,inventory_activity_type_id,int,NO,MUL,,,,,,10.0,0.0,"The inventory_activity_type_id column is a required foreign key that specifies the type of inventory activity being recorded (such as count, adjustment, or verification) by referencing an inventory activity type lookup table. When writing SQL queries, this column can be used to filter or group inventory activities by their type, and it's commonly used in JOIN operations to retrieve detailed information about the specific kind of inventory activity being performed."
inventory_activity,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the inventory_activity table is a required integer field that identifies which user performed or initiated the inventory-related action, serving as a foreign key reference to a user table. This column is indexed (MUL) to optimize queries that filter or join based on user information, making it efficient to track and analyze inventory activities by specific users."
inventory_activity,timestamp,datetime,NO,MUL,,,,,,,,"The `timestamp` column in the `inventory_activity` table records the exact date and time when each inventory-related activity occurred, making it essential for chronological tracking and auditing of inventory operations. As a non-nullable datetime field with a multi-column index (MUL), this column is commonly used in queries for filtering activities within specific time periods or ordering results chronologically, and it's crucial for generating time-based inventory reports and analyzing operational patterns."
inventory_activity,quantity,int,NO,,,0,,,,10.0,0.0,"The 'quantity' column in the inventory_activity table is a required integer field that records the numerical amount involved in each inventory operation or adjustment. This column is essential for tracking the magnitude of inventory changes, whether it's counting stock, making adjustments, or verifying lot quantities, and should always contain a non-null value representing the number of units involved in the activity."
inventory_activity,net_weight,float,YES,,,,,,,12.0,,"The net_weight column in the inventory_activity table stores the calculated or measured weight (as a floating-point number) of inventory items involved in a specific activity, excluding any packaging or container weight. This column is optional (nullable) and can be used in queries to analyze weight-based inventory movements, calculate total weight changes over time, or verify weight-related inventory adjustments."
inventory_activity,invoice_number,int,YES,,,,,,,10.0,0.0,"The invoice_number column in the inventory_activity table stores the reference number of invoices associated with inventory transactions, allowing for tracking and linking inventory activities to specific billing documents. This optional integer field can be used in SQL queries to filter or join inventory activities with their corresponding invoice records, making it useful for financial reconciliation and audit purposes."
inventory_activity,Comment,varchar(255),YES,,,,,,255.0,,,"The Comment column in the inventory_activity table stores optional text descriptions or notes (up to 255 characters) that provide additional context about specific inventory activities or operations. This free-text field can be used in SQL queries to search for or filter inventory activities based on specific notes or explanations, making it valuable for detailed auditing and investigation of inventory events."
inventory_activity,note,text,YES,,,,,,65535.0,,,"The 'note' column in the inventory_activity table stores optional text descriptions or comments related to specific inventory operations or adjustments. This free-form text field can be used in SQL queries to search for or filter inventory activities based on specific comments or annotations, making it valuable for detailed auditing and investigation of inventory events."
inventory_activity,waste,tinyint,NO,,,0,,,,3.0,0.0,"The 'waste' column in the inventory_activity table is a required boolean flag (tinyint) that indicates whether an inventory activity resulted in waste or product loss. When querying this column, use 0 to filter for normal inventory activities and 1 to identify activities that involved waste, making it useful for waste tracking and inventory loss analysis."
inventory_activity,reason,int,YES,,,,,,,10.0,0.0,"The 'reason' column in the inventory_activity table stores integer codes that indicate why a particular inventory activity was performed, such as regular stock count, damage assessment, or discrepancy resolution. When querying inventory activities, this column can be used to filter or group records based on specific activity reasons, helping to analyze patterns or generate reports focused on particular types of inventory operations."
inventory_activity,acknowledged_by,int,YES,,,,,,,10.0,0.0,"The acknowledged_by column in the inventory_activity table stores the user ID of the person who acknowledged or verified the inventory activity, linking to a user reference table. This optional field (nullable) helps track who reviewed or approved specific inventory operations, making it useful in queries that need to filter or join based on activity acknowledgment status or for generating accountability reports."
inventory_activity,acknowledged_at,datetime,YES,,,,,,,,,"The acknowledged_at column in the inventory_activity table stores the timestamp when an inventory-related activity was officially acknowledged or confirmed in the system. This datetime field can be used in SQL queries to filter or analyze when specific inventory activities were verified, with NULL values indicating activities that haven't been acknowledged yet."
inventory_activity,acknowledge_comment,text,YES,,,,,,65535.0,,,"The acknowledge_comment column in the inventory_activity table stores optional text feedback or notes provided when acknowledging or reviewing inventory-related tasks. This free-form text field can be used in SQL queries to search for specific comments or feedback related to inventory activities, and since it's nullable, queries should handle potential NULL values when filtering or displaying this field."
inventory_activity,monitoring_comment,text,YES,,,,,,65535.0,,,"The monitoring_comment column in the inventory_activity table stores free-form text observations, notes, or explanations related to specific inventory activities or checks. This optional field can be used in SQL queries to search for or analyze specific types of inventory monitoring feedback, and is particularly useful when filtering activities based on documented observations or when generating detailed activity reports."
inventory_activity,monitoring_comment_by,int,YES,,,,,,,10.0,0.0,"The monitoring_comment_by column in the inventory_activity table stores the user ID of the person who provided monitoring comments or observations during an inventory-related task. This optional field (as indicated by being nullable) helps track who made specific monitoring notes or comments during inventory checks, adjustments, or verifications, enabling accountability and audit trail maintenance."
inventory_activity,to_be_credited_by_supplier,tinyint,YES,,,,,,,3.0,0.0,"The to_be_credited_by_supplier column is a boolean flag (stored as tinyint) that indicates whether an inventory activity requires a credit from a supplier. This column is particularly useful when filtering inventory activities that are pending supplier credits, such as for damaged goods or incorrect shipments, and can be used in WHERE clauses to identify transactions requiring supplier follow-up (e.g., WHERE to_be_credited_by_supplier = 1)."
inventory_activity,to_be_credited_by_supplier_approved,tinyint,YES,,,,,,,3.0,0.0,"The to_be_credited_by_supplier_approved column is a boolean flag (stored as tinyint) that indicates whether a supplier credit has been approved for an inventory activity. When writing queries, use this column to filter or identify inventory activities where supplier credit approval status is relevant, typically using values 1 (approved) or 0 (not approved), with NULL potentially indicating pending or not applicable cases."
inventory_activity,merchandisers_dashboard_visibility,tinyint,NO,,,1,,,,3.0,0.0,"The merchandisers_dashboard_visibility column is a required boolean flag (stored as tinyint) that determines whether an inventory activity should be displayed on merchandisers' dashboards. When writing queries, use this column with values 1 (visible) or 0 (hidden) to filter inventory activities based on their visibility status to merchandising staff."
inventory_activity,task_type_inventorycheck_id,int,YES,MUL,,,task_type_inventorycheck,task_type_inventorycheck_id,,10.0,0.0,"The task_type_inventorycheck_id column in the inventory_activity table serves as a foreign key that links to specific inventory check tasks. When writing queries involving inventory checks, use this column to join with the corresponding inventory check task type table to access detailed information about the check operation, noting that the column can be null as not all inventory activities are necessarily check operations."
inventory_activity_images,inventory_activity_image_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_activity_image_id column serves as the primary key for the inventory_activity_images table, uniquely identifying each image record associated with inventory activities. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific inventory images, as it provides a reliable, non-null integer reference for each image entry."
inventory_activity_images,inventory_activity_id,int,YES,,,,,,,10.0,0.0,"The inventory_activity_id column in the inventory_activity_images table serves as a reference to link images with specific inventory activities or transactions. This optional (nullable) integer field can be used in JOIN operations to connect images with their corresponding inventory events, making it useful for queries that need to retrieve images associated with particular inventory activities."
inventory_activity_images,image_url,varchar(500),NO,,,,,,500.0,,,"The image_url column in the inventory_activity_images table stores the complete URL or file path (up to 500 characters) where each inventory-related image is located, and this field is required for every record. When querying this column, you can use string operations to filter or analyze image locations, and it's commonly used in JOIN operations to link images with their corresponding inventory activities or transactions."
inventory_activity_images,folder,varchar(100),YES,,,,,,100.0,,,"The 'folder' column in the inventory_activity_images table stores the directory path or folder location where inventory-related images are stored, with a maximum length of 100 characters. This optional (nullable) field helps organize and locate image files within the system's storage structure, making it useful in queries that need to find or group images by their storage location."
inventory_activity_images,common,tinyint,YES,,,0,,,,3.0,0.0,"The 'common' column in the inventory_activity_images table is a boolean-like flag (stored as a tinyint) that likely indicates whether an image is commonly used or represents a standard/default image for inventory activities. When querying, you can filter using this column (e.g., WHERE common = 1) to find frequently used or standard inventory images versus specialized or one-off images."
inventory_activity_types,inventory_activity_type_id,int,NO,PRI,,,,,,10.0,0.0,"The inventory_activity_type_id column serves as the primary key in the inventory_activity_types table, uniquely identifying each type of inventory transaction (like receiving, shipping, or transfers). This non-nullable integer column is essential for creating relationships with other tables and should be referenced when querying specific inventory activity types or joining with the inventory_activity_typesLang table for multilingual descriptions."
inventory_activity_types,name,varchar(100),NO,,,,,,100.0,,,"The 'name' column in the inventory_activity_types table stores the primary identifier or label for different types of inventory transactions (like ""Receiving"" or ""Shipping"") as a text string up to 100 characters. This required field serves as a base reference name for the activity type, while its translations in different languages are stored in a separate table (inventory_activity_typesLang)."
inventory_activity_types,type,tinyint,NO,,,,,,,3.0,0.0,"The 'type' column in the inventory_activity_types table is a required tinyint field that serves as a numeric identifier for different categories of inventory transactions (such as receiving, shipping, adjustments, or transfers). When writing SQL queries, this column can be used to filter or group inventory activities by their fundamental type, and it links to corresponding multilingual descriptions in the inventory_activity_typesLang table."
inventory_activity_types,inventory_adjustment_type,"enum('in','out','reception_out','reception_in')",NO,,,in,,,13.0,,,"The inventory_adjustment_type column is an enumerated field that categorizes the direction or nature of inventory movements using four possible values: 'in', 'out', 'reception_in', or 'reception_out'. When writing SQL queries, this column can be used to filter or group inventory activities based on whether they increase ('in', 'reception_in') or decrease ('out', 'reception_out') inventory levels."
inventory_activity_types,comment_required,tinyint,YES,,,0,,,,3.0,0.0,"The comment_required column is a boolean flag (stored as tinyint) that indicates whether a user must provide a comment when creating an inventory activity of this type. When writing queries, use this column to enforce business rules around comment requirements, where 1 typically means a comment is mandatory and 0 means it's optional."
inventory_activity_types,visible,tinyint,YES,,,1,,,,3.0,0.0,"The 'visible' column in the inventory_activity_types table is a boolean flag (stored as tinyint) that determines whether an inventory activity type should be displayed in user interfaces and available for selection. When querying for available inventory activity types, you should typically include ""WHERE visible = 1"" to retrieve only the active, visible transaction types."
inventory_activity_types,image_required,tinyint(1),YES,,,0,,,,3.0,0.0,"The image_required column is a boolean flag (stored as tinyint(1)) that indicates whether photographic evidence must be captured when performing this type of inventory activity. When writing queries, use this column to filter or check which inventory activities require image documentation (1 for required, 0 for not required), which can be helpful for enforcing business rules or generating compliance reports."
inventory_activity_typesLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The l_id column serves as the primary key in the inventory_activity_typesLang table, uniquely identifying each language-specific translation record for inventory activity types. When writing SQL queries, use this column for precise record identification, joining with other tables, or when you need to ensure unique selection of language-specific inventory activity content."
inventory_activity_typesLang,inventory_activity_type_id,int,NO,MUL,,,inventory_activity_types,inventory_activity_type_id,,10.0,0.0,"The inventory_activity_type_id column serves as a foreign key in the inventory_activity_typesLang table, linking to the primary key in the inventory_activity_types table. This integer column is required (non-nullable) and is used to associate language-specific translations with their corresponding base inventory activity type, enabling queries to retrieve localized content for different inventory activities."
inventory_activity_typesLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the inventory_activity_typesLang table stores language identifiers (such as 'en', 'es', 'fr') as character strings up to 10 characters long, and is required (non-nullable). This column is used to specify which language each translation record corresponds to, enabling queries to filter and retrieve inventory activity type descriptions in specific languages."
inventory_activity_typesLang,l_name,varchar(255),NO,,,,,,255.0,,,"The l_name column in the inventory_activity_typesLang table stores the localized (translated) names of inventory activity types in different languages, with a maximum length of 255 characters. This required field (non-nullable) is essential for displaying inventory activity type names in the appropriate language based on user preferences or system settings."
inventory_association,inventory_association_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_association_id column serves as the primary key for the inventory_association table, uniquely identifying each association or mapping between inventory items or categories. This non-nullable integer column should be referenced when joining with related tables or when specifically querying individual association records."
inventory_association,from_lot_id,int,NO,MUL,,,,,,10.0,0.0,"The `from_lot_id` column in the `inventory_association` table is a required integer field that serves as a foreign key reference to identify the source lot in an inventory relationship mapping. This column is indexed (as indicated by the MUL key type) to optimize queries that filter or join based on the source lot, and its non-nullable nature ensures that every association record must have a valid source lot specified."
inventory_association,to_lot_id,int,NO,MUL,,,,,,10.0,0.0,"The `to_lot_id` column in the `inventory_association` table is a required integer field that serves as a foreign key reference to identify the target or destination lot in an inventory relationship. This column is indexed (as indicated by the MUL key type) to optimize queries that filter or join based on the destination lot, and its non-nullable nature ensures that every association record must specify a valid target lot."
inventory_association,out_inventory_activity_id,int,NO,MUL,,,,,,10.0,0.0,"The out_inventory_activity_id column in the inventory_association table is a required integer field that serves as a foreign key reference to track outbound inventory activities or transactions. When writing SQL queries, this column can be used to join with related inventory activity tables to analyze or retrieve information about outbound inventory movements or associations."
inventory_association,in_inventory_activity_id,int,NO,MUL,,,,,,10.0,0.0,"The `in_inventory_activity_id` column in the `inventory_association` table is a required integer field that serves as a foreign key reference to track inventory activities or transactions. This column helps establish relationships between inventory activities and other entities, enabling queries to trace and analyze inventory-related operations or movements."
inventory_association,associated_timestamp,datetime,YES,,,,,,,,,The associated_timestamp column in the inventory_association table records the date and time when an association or mapping between inventory items was created or last modified. This datetime field can be useful for tracking the chronological history of inventory relationships and can be used in SQL queries for filtering associations by time periods or ordering results based on when associations were established.
inventory_check_action_clean,inventory_check_action_clean_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_check_action_clean_id column serves as the primary key for the inventory_check_action_clean table, uniquely identifying each inventory check action record. This integer field is non-nullable and should be referenced when joining with related tables or filtering specific inventory check actions."
inventory_check_action_clean,task_type_inventorycheck_id,int,NO,MUL,,,task_type_inventorycheck,task_type_inventorycheck_id,,10.0,0.0,"The task_type_inventorycheck_id column serves as a foreign key that links each inventory check action to its corresponding task type in the task_type_inventorycheck table. When writing SQL queries, use this column to join with task_type_inventorycheck table to access task type details or to filter/group inventory check actions by their associated task types."
inventory_check_action_clean,task_type_inventorycheck_id,int,NO,MUL,,,task_type_inventorycheck,task_type_inventorycheck_id,,10.0,0.0,"The task_type_inventorycheck_id column serves as a foreign key that links each inventory check action to its corresponding task type in the task_type_inventorycheck table. When writing SQL queries, use this column to join with task_type_inventorycheck table to access task type details or to filter/group inventory check actions by their associated task types."
inventory_check_action_clean,old_count,int,NO,,,,,,,10.0,0.0,"The `old_count` column in the inventory_check_action_clean table stores the previous quantity count of items before an inventory check was performed, represented as a non-nullable integer value. This column is essential for tracking quantity changes and discrepancies during inventory verification processes, allowing for comparison with new counts to identify inventory adjustments or discrepancies."
inventory_check_action_clean,new_count,int,NO,,,,,,,10.0,0.0,"The new_count column stores the updated inventory quantity that was recorded during an inventory check action, represented as a non-null integer value. This column is essential for tracking the actual count of items found during inventory verification processes and can be used in SQL queries to compare against expected quantities or analyze inventory discrepancies."
inventory_check_action_clean,created_at,datetime,NO,,,,,,,,,"The created_at column in the inventory_check_action_clean table stores the exact date and time when an inventory check action was recorded in the system, using a datetime format. This non-nullable field is essential for temporal tracking and analysis of inventory verification activities, allowing queries to filter, sort, or group inventory check actions by their creation timestamp."
inventory_check_action_clean,comment,text,YES,,,,,,65535.0,,,"The 'comment' column in the inventory_check_action_clean table stores optional text notes and observations related to specific inventory check actions. This free-form text field allows users to document additional details, explanations, or remarks about the inventory verification process, providing context that might be valuable for future reference or audit purposes."
inventory_check_action_discount,inventory_check_action_discount_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_check_action_discount_id is the primary key column that uniquely identifies each discount rule record in the inventory_check_action_discount table. This integer column should be used in JOIN operations when linking discount rules to specific inventory check tasks, and it's commonly referenced in WHERE clauses when querying for specific discount settings."
inventory_check_action_discount,task_type_inventorycheck_id,int,NO,MUL,,,task_type_inventorycheck,task_type_inventorycheck_id,,10.0,0.0,"The task_type_inventorycheck_id column serves as a foreign key that links each discount rule to its corresponding inventory check task type in the task_type_inventorycheck table. When writing SQL queries, use this column to join inventory_check_action_discount with task_type_inventorycheck to retrieve or filter discount settings based on specific inventory check task types."
inventory_check_action_discount,discount_percent,int,NO,,,,,,,10.0,0.0,"The discount_percent column stores the percentage value of the discount to be applied during inventory check actions, represented as a whole number (integer). This required field is used to calculate discounted values during inventory checks, where a value of 10 would represent a 10% discount."
inventory_check_action_discount,old_count,int,YES,,,,,,,10.0,0.0,"The `old_count` column in the `inventory_check_action_discount` table stores the previous quantity count of items before applying a discount rule during inventory checks. This integer field can be used in SQL queries to compare against new counts or calculate the difference in inventory levels, helping track quantity changes that triggered discount actions."
inventory_check_action_discount,new_count,int,YES,,,,,,,10.0,0.0,"The 'new_count' column in the inventory_check_action_discount table stores the updated quantity count after applying a discount rule during an inventory check action. This optional integer field helps track quantity adjustments made during inventory checks, allowing systems to compare the original and new quantities after discount applications."
inventory_check_action_discount,comment,text,YES,,,,,,65535.0,,,"The 'comment' column in the inventory_check_action_discount table stores optional text notes or explanations about specific discount rules applied during inventory checks. This free-form text field can be used to document the reasoning behind discount parameters, special conditions, or any relevant information that helps explain why or how a particular discount rule is implemented."
inventory_check_action_discount,created_at,datetime,NO,,,,,,,,,"The created_at column in the inventory_check_action_discount table records the exact date and time when a discount rule for inventory checking was initially created, stored as a non-nullable datetime value. This timestamp can be used in SQL queries to filter, sort, or analyze discount rules based on their creation time, helping track when specific inventory check discount configurations were established."
inventory_check_action_expiration,inventory_check_action_expiration_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_check_action_expiration_id is the primary key column that uniquely identifies each expiration rule record in the inventory_check_action_expiration table. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference specific expiration rules for inventory check actions."
inventory_check_action_expiration,task_type_inventorycheck_id,int,NO,MUL,,,task_type_inventorycheck,task_type_inventorycheck_id,,10.0,0.0,"The task_type_inventorycheck_id column serves as a foreign key that links to the task_type_inventorycheck table, identifying which inventory check task type the expiration settings apply to. When writing queries, use this column to join with the task_type_inventorycheck table or to filter expiration rules for specific inventory check task types."
inventory_check_action_expiration,old_expiry_date,date,NO,,,,,,,,,The old_expiry_date column stores the previous expiration date for inventory check actions before any modifications or updates were made. This required (non-nullable) date field is essential for maintaining an audit trail of expiration date changes and can be used in SQL queries to compare historical expiration settings against current ones.
inventory_check_action_expiration,new_expiry_date,date,NO,,,,,,,,,"The new_expiry_date column stores the date when an inventory check action will expire or become invalid, requiring a new check to be performed. This mandatory date field is essential for enforcing inventory check schedules and maintaining up-to-date inventory verification records."
inventory_check_action_expiration,created_at,datetime,NO,,,,,,,,,"The created_at column in the inventory_check_action_expiration table stores the timestamp when an inventory check expiration rule was initially created, using the datetime format. This non-nullable field is commonly used in SQL queries for auditing purposes or to track the chronological order of expiration rule creation, and can be useful in filtering or sorting expiration rules based on when they were established."
inventory_check_action_lotportioned,inventory_check_action_lotportioned_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_check_action_lotportioned_id is the primary key column that uniquely identifies each inventory check action record for portioned lot items. When writing SQL queries, use this column for joining with related tables or filtering specific inventory check actions, particularly when you need to track or reference individual portioned lot inventory verification events."
inventory_check_action_lotportioned,task_type_inventorycheck_id,int,NO,MUL,,,task_type_inventorycheck,task_type_inventorycheck_id,,10.0,0.0,"This column serves as a foreign key that links to the task_type_inventorycheck table, specifying which type of inventory check is being performed on portioned lot items. When writing SQL queries, use this column to join with task_type_inventorycheck table to access details about the inventory check type, or to filter/group inventory check actions by their specific type."
inventory_check_action_lotportioned,lot_portioned,tinyint(1),YES,,,0,,,,3.0,0.0,"The `lot_portioned` column in the `inventory_check_action_lotportioned` table is a boolean flag (using tinyint(1)) that indicates whether a lot item has been portioned or divided into smaller units during the inventory check process. When writing queries, you can use this column to filter or identify inventory checks where lot portioning has occurred (value = 1) or has not occurred (value = 0), with NULL values indicating that the portioning status is unknown or not applicable."
inventory_check_action_lotportioned,estimated_left_to_portion,int,YES,,,0,,,,10.0,0.0,"The `estimated_left_to_portion` column stores an integer value representing the estimated quantity of items that still need to be portioned from a lot. This column can be used in SQL queries to track and analyze remaining portioning requirements, helping to plan inventory management tasks and monitor portioning progress (NULL values indicate that the estimate is not available or not applicable)."
inventory_check_action_lotportioned,created_at,datetime,NO,,,,,,,,,"The created_at column in the inventory_check_action_lotportioned table stores the exact date and time when an inventory check action for portioned lot items was recorded, using a datetime format. This non-nullable field is essential for temporal tracking and can be used in SQL queries to filter, sort, or analyze inventory check actions by their creation timestamp, such as finding recent checks or analyzing check patterns over time."
inventory_check_action_recount,inventory_check_action_recount_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_check_action_recount_id is the primary key column that uniquely identifies each recount action performed during inventory checks. This integer column should be used in JOIN operations when linking recount actions to related inventory check tasks, and it's commonly referenced in WHERE clauses when querying specific recount records."
inventory_check_action_recount,task_type_inventorycheck_id,int,NO,MUL,,,task_type_inventorycheck,task_type_inventorycheck_id,,10.0,0.0,"The task_type_inventorycheck_id column serves as a foreign key that links each recount action to its corresponding inventory check type in the task_type_inventorycheck table. This mandatory integer field helps categorize and organize recount actions based on the specific type of inventory check being performed, enabling efficient filtering and grouping of recount records by their check type."
inventory_check_action_recount,old_count,int,NO,,,,,,,10.0,0.0,"The `old_count` column in the `inventory_check_action_recount` table stores the original quantity counted before a recount was initiated during an inventory check. This required integer value serves as a baseline for comparison with new counts, helping track discrepancies and verify inventory accuracy."
inventory_check_action_recount,new_count,int,NO,,,,,,,10.0,0.0,The `new_count` column in the `inventory_check_action_recount` table stores the updated quantity value obtained after performing a recount of inventory items. This required integer field represents the final count determined during the recount action and should be used when comparing against original inventory counts or updating inventory records.
inventory_check_action_recount,uncountable,tinyint(1),NO,,,,,,,3.0,0.0,"The 'uncountable' column is a boolean flag (stored as tinyint(1)) that indicates whether an item could not be counted during the inventory recount process. When writing SQL queries, use this column with values 1 (true) or 0 (false) to filter or identify inventory items that were impossible or impractical to count during the recount action."
inventory_check_action_recount,created_at,datetime,NO,,,,,,,,,"The created_at column in the inventory_check_action_recount table records the exact date and time when a recount action was initiated during an inventory check. This non-nullable datetime field is essential for maintaining an audit trail of when inventory recounts occur and can be used for filtering, sorting, or analyzing the timing of recount activities."
inventory_check_action_relocate,inventory_check_action_relocate_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_check_action_relocate_id is the primary key column that uniquely identifies each inventory relocation action record in the inventory_check_action_relocate table. This integer column should be used in JOIN operations when connecting relocation records to related tables, and it's commonly referenced when tracking specific inventory movement events or filtering relocation actions."
inventory_check_action_relocate,task_type_inventorycheck_id,int,NO,MUL,,,task_type_inventorycheck,task_type_inventorycheck_id,,10.0,0.0,"The task_type_inventorycheck_id column is a required foreign key that links each inventory relocation action to its corresponding inventory check type in the task_type_inventorycheck table. When writing queries, this column can be used to filter or join with task_type_inventorycheck to understand what kind of inventory check prompted the relocation action."
inventory_check_action_relocate,old_loc,int,NO,MUL,,,location_header,location_header_id,,10.0,0.0,"The `old_loc` column in the inventory_check_action_relocate table stores the numeric identifier (foreign key) of the original location from which an item was moved during an inventory check. When writing queries, this column can be joined with the location_header table to retrieve details about the source location of the inventory movement."
inventory_check_action_relocate,new_loc,int,NO,MUL,,,location_header,location_header_id,,10.0,0.0,"The 'new_loc' column in the inventory_check_action_relocate table is a required foreign key (indicated by MUL key type) that references the location_header table, representing the destination location where an item is being moved to during an inventory check. When writing queries, this column can be joined with the location_header table to get detailed information about the destination location of the inventory relocation action."
inventory_check_action_relocate,created_at,datetime,NO,,,,,,,,,"The created_at column in the inventory_check_action_relocate table stores the exact date and time when an inventory relocation action was recorded in the system. This non-nullable datetime field is useful for temporal analysis of inventory movements and can be used in SQL queries to filter or sort relocation records by their creation timestamp, such as finding all relocations within a specific time period or analyzing relocation patterns over time."
inventory_check_comments,inv_check_comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inv_check_comment_id column serves as the primary key for the inventory_check_comments table, uniquely identifying each comment or feedback entry related to inventory check tasks. When writing SQL queries, use this column for precise record selection, joining with related tables, or tracking specific comments, for example: ""SELECT * FROM inventory_check_comments WHERE inv_check_comment_id = [value]""."
inventory_check_comments,task_type_inventorycheck_id,int,NO,MUL,,,task_type_inventorycheck,task_type_inventorycheck_id,,10.0,0.0,"The task_type_inventorycheck_id column is a required foreign key that links each comment to its corresponding inventory check task in the task_type_inventorycheck table. When writing queries, use this column to join inventory_check_comments with task_type_inventorycheck to retrieve all comments associated with a specific inventory check, or to filter comments based on their related inventory check tasks."
inventory_check_comments,created_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The created_by column in the inventory_check_comments table is a required integer field that stores the user ID of the person who created the comment, linking to the users table through a foreign key relationship. This column is commonly used in JOIN operations with the users table to retrieve author information for comments, and it's frequently referenced in WHERE clauses when filtering comments by their creator."
inventory_check_comments,created_date,datetime,NO,,,,,,,,,"The created_date column in the inventory_check_comments table records the exact date and time when each inventory check comment was created, stored as a datetime value. This non-nullable field is essential for tracking the chronological order of comments and can be used in SQL queries for filtering comments by date ranges or sorting them chronologically (e.g., ORDER BY created_date DESC to show most recent comments first)."
inventory_check_comments,comment,text,NO,,,,,,65535.0,,,The 'comment' column in the inventory_check_comments table stores the actual text content of comments and feedback provided during inventory check tasks. This required (non-nullable) text field should be included in INSERT statements when creating new comment records and can be queried to analyze feedback patterns or retrieve specific comments related to inventory checks.
inventory_discount,inventory_discount_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_discount_id is the primary key column that uniquely identifies each discount record in the inventory_discount table. When writing SQL queries, use this column for precise record selection, joining with other tables, or tracking specific discount entries, particularly when you need to reference a single, specific discount record (e.g., WHERE inventory_discount_id = X)."
inventory_discount,lot_id,int,NO,MUL,,,inventory,lot_id,,10.0,0.0,"The lot_id column in the inventory_discount table serves as a foreign key that links each discount record to a specific inventory lot, enabling tracking of which discounts are applied to which inventory items. This integer column is required (non-nullable) and indexed (MUL) to optimize queries joining inventory_discount with the inventory table, making it essential for filtering and analyzing discount applications across inventory lots."
inventory_discount,discount_percent,int,NO,,,,,,,10.0,0.0,"The discount_percent column in the inventory_discount table stores the percentage value of a discount applied to a specific inventory lot, represented as a whole number (e.g., 15 for a 15% discount). This required field is essential for calculating reduced prices and should be used in SQL queries when determining the final discounted price of inventory items or analyzing discount patterns across different lots."
inventory_discount,created_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `created_by` column in the `inventory_discount` table is a required integer field that stores the user ID of the person who created the discount record, linking to the users table through a foreign key relationship. This column is indexed (MUL) to optimize queries that filter or join based on the creating user, and its non-nullable nature ensures accountability by requiring every discount record to have an associated creator."
inventory_discount,created_date,date,NO,,,,,,,,,"The created_date column in the inventory_discount table records the calendar date when a discount record was initially created, making it essential for tracking the chronological history of price reductions. This mandatory (non-nullable) date field is commonly used in SQL queries for filtering discount records by time periods or analyzing discount patterns over specific date ranges."
inventory_discount,created_time,time,NO,,,,,,,,,"The created_time column in the inventory_discount table stores the specific time of day when a discount record was created, using the time data type (HH:MM:SS format). This non-nullable field is essential for tracking the precise timing of discount entries and can be useful in queries that need to analyze discount creation patterns throughout the day or filter discount records based on specific time ranges."
inventory_snapshots,lot_id,int,NO,PRI,,0,,,,10.0,0.0,"The lot_id column serves as the primary key in the inventory_snapshots table, uniquely identifying each inventory snapshot record with a non-nullable integer value. When querying inventory snapshots, this column can be used to join with other tables or filter specific inventory records, making it essential for tracking individual stock measurements over time."
inventory_snapshots,product_id,int,YES,,,,,,,10.0,0.0,"The product_id column in the inventory_snapshots table serves as a reference to identify specific products for which inventory levels are being tracked. When writing queries, this column can be used to filter or join with other product-related tables to analyze inventory patterns for particular items, and since it's nullable, be sure to handle potential NULL values appropriately in your query logic."
inventory_snapshots,created,date,NO,PRI,,0000-00-00,,,,,,"The 'created' column in the inventory_snapshots table stores the date when each inventory snapshot was taken, serving as part of the primary key to uniquely identify each historical record. When querying inventory trends or stock levels, this date column is essential for filtering specific time periods or ordering results chronologically, and it must always contain a valid date value as null values are not allowed."
inventory_snapshots,quantity,int,YES,,,,,,,10.0,0.0,"The 'quantity' column in the inventory_snapshots table stores the numerical count of items available in stock at the time each snapshot was taken, represented as an integer value. This column is commonly used in SQL queries to analyze stock levels, track inventory changes over time, and can be NULL if the quantity was not recorded for a particular snapshot."
inventory_status,inventory_status_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_status_id is the primary key column of the inventory_status table, serving as a unique identifier for each inventory record. This non-nullable integer column is essential for referencing specific inventory entries and establishing relationships with other tables in the system."
inventory_status,date,date,NO,,,,,,,,,The 'date' column in the inventory_status table records the specific date when inventory levels were recorded or updated for each product. This non-nullable date field is essential for tracking historical inventory changes and can be used in SQL queries to analyze stock levels over time or filter inventory records for specific dates.
inventory_status,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the inventory_status table serves as a foreign key that links each inventory record to its corresponding product in the products table. This integer column is required (non-nullable) and indexed (MUL) to optimize queries that join inventory data with product information, making it essential for tracking stock levels and inventory status for specific products."
inventory_status,qty_on_hand,int,NO,,,,,,,10.0,0.0,"The qty_on_hand column in the inventory_status table represents the current physical quantity of a product available in stock, stored as a non-negative integer value. This column is essential for inventory management queries, such as checking stock availability, identifying low-stock items, or calculating total inventory value, and should be included in queries where current product quantities need to be evaluated."
inventory_status,purchasing_price,float,NO,,,,,,,12.0,,"The purchasing_price column in the inventory_status table stores the cost at which each product was acquired by the business, represented as a floating-point number. This non-nullable field is essential for calculating profit margins and tracking inventory value, and should be used in SQL queries when analyzing cost-based metrics or performing financial calculations related to inventory."
inventory_uptodate_flags,inventory_uptodate_flags_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_uptodate_flags_id column serves as the primary key for the inventory_uptodate_flags table, uniquely identifying each set of boolean flags that track inventory synchronization status. When writing SQL queries, use this column for joining to related tables or when you need to reference specific inventory flag records, as it provides a guaranteed unique identifier for each row in the table."
inventory_uptodate_flags,date,datetime,NO,UNI,,,,,,,,"The 'date' column in the inventory_uptodate_flags table stores the specific timestamp when inventory synchronization status was recorded, serving as a unique temporal identifier for each status entry. This datetime field is mandatory (non-nullable) and maintains uniqueness (UNI key), making it ideal for tracking when inventory validation checks occurred and ensuring no duplicate timestamps exist in the synchronization history."
inventory_uptodate_flags,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the inventory_uptodate_flags table is a required integer field that identifies which user's inventory flags are being tracked. This column can be used to join with user-related tables and filter inventory synchronization status by specific users, making it essential for queries that need to check inventory validation states for particular users."
issuegp,oid,int,NO,MUL,,,,,,10.0,0.0,"The 'oid' column in the issuegp table serves as a non-unique indexed integer field (indicated by MUL key type) that cannot contain NULL values. This column likely represents an object identifier or organizational ID that helps categorize or link GP-related issues, and its indexed nature suggests it's frequently used in JOIN operations or WHERE clause filtering."
links,link_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The link_id column serves as the primary key in the links table, uniquely identifying each URL entry in the system. When writing SQL queries, use this column for precise record selection (e.g., WHERE link_id = X) or when joining with any related tables that reference specific links."
links,email_schedule_id,int,YES,MUL,,,,,,10.0,0.0,"The email_schedule_id column in the links table is an integer field that likely references a schedule or timing configuration for email-related link operations. As indicated by the MUL (multiple) key type and nullable property, this column can be used to filter or join link records based on their associated email scheduling information, though it's not required for all link entries."
links,url_template,varchar(255),YES,,,,,,255.0,,,"The url_template column in the links table stores template patterns or URL formats that can be used to generate or match specific web links, with a maximum length of 255 characters. This optional field (nullable) can be useful when querying for URLs that follow specific patterns or when generating dynamic URLs based on a template structure."
links,lang,tinyint(1),YES,,,,,,,3.0,0.0,"The 'lang' column in the links table is a single-digit integer field (tinyint) that likely represents a language identifier or code for the associated URL. When writing queries, this nullable column can be used to filter or group links by their language designation, though you should consult application documentation for specific language code mappings (e.g., 1 might represent English, 2 for Spanish, etc.)."
links,static_link,tinyint(1),YES,,,,,,,3.0,0.0,"The `static_link` column in the `links` table is a boolean flag (tinyint(1)) that indicates whether a URL represents a static link (1) or a dynamic link (0). This field can be used in SQL queries to filter or group links based on their static/dynamic nature, which is useful when you need to distinguish between unchanging URLs and those that may vary over time."
links,created_on,timestamp,NO,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The created_on column in the links table stores the timestamp indicating when each URL/link record was initially created in the system, automatically populated with the current date and time using CURRENT_TIMESTAMP. This non-nullable timestamp field is useful for filtering, sorting, and analyzing links by their creation date, making it valuable for queries that need to track when links were added or find links created within specific time periods."
links,amount_sent,int,YES,,,0,,,,10.0,0.0,"The `amount_sent` column in the `links` table is an optional integer field that tracks a quantity or count associated with a web link, likely representing the number of times something was transmitted or processed. When writing queries, this column can be used for numerical calculations or filtering, and since it's nullable, you should handle NULL values appropriately using COALESCE or IS NULL/IS NOT NULL conditions."
load_basket_route_info,route_info_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The route_info_id column serves as the primary key in the load_basket_route_info table, uniquely identifying each routing record for load baskets. When writing SQL queries, use this column for joining with related tables or filtering specific routing records, as it provides the fundamental identifier for tracking load basket routing workflows and their associated warehouse route connections."
load_basket_route_info,departure_time,time,NO,MUL,,,,,,,,"The departure_time column in load_basket_route_info stores the scheduled time (without date) when a load basket is expected to depart from its current location, using the TIME data type format (HH:MM:SS). This non-nullable column is indexed (MUL) to optimize queries filtering or joining on departure times, and it's commonly used to coordinate basket routing schedules and timing-based workflow operations."
load_basket_route_info,date,date,NO,,,,,,,,,"The 'date' column in the load_basket_route_info table represents the specific calendar date associated with a load basket's routing schedule or task assignment. When writing SQL queries, this non-nullable date field can be used for filtering routing information by specific dates or date ranges, and is commonly used in JOIN operations with other time-based operational tables to analyze routing patterns and workload distribution."
load_basket_route_info,wave,int,YES,,,,,,,10.0,0.0,"The ""wave"" column in the load_basket_route_info table is an optional integer field that identifies the wave number associated with a load basket's routing sequence. When writing SQL queries, this column can be used to group or filter load basket routes by their assigned wave numbers, helping to analyze or manage routing workflows in chronological or sequential batches."
load_basket_route_info,refund_status,"enum('unsynced','synced','to_be_synced')",NO,,,unsynced,,,12.0,,,"The refund_status column in load_basket_route_info is an enumerated field that tracks the synchronization state of refund-related data for load baskets, with possible values of 'unsynced', 'synced', or 'to_be_synced'. When querying this column, use it to filter or group load basket records based on their refund synchronization status, with 'unsynced' being the default state for new records."
load_basket_route_info,ww_route_id,int,YES,MUL,,,ww_routes,route_id,,10.0,0.0,"The ww_route_id column in the load_basket_route_info table is a foreign key that references warehouse routes, serving as a link between load basket operations and their associated route information. When writing queries, this column can be used to join with the ww_routes table to access route-specific details or to filter load basket records by specific route assignments."
load_basket_route_info,ready_to_load,time,YES,,,,,,,,,"The ready_to_load column in load_basket_route_info stores the time when a load basket is prepared and available for loading operations. This time value can be used in SQL queries to filter or sort load baskets based on their readiness status, helping to coordinate warehouse logistics and loading schedules."
location_header,location_header_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The location_header_id column serves as the primary key identifier for each unique warehouse or storage location in the location_header table. When writing SQL queries, use this column to join with other tables that reference specific locations, such as inventory movement or condensing task tables, where it may appear as a foreign key for either source or destination locations."
location_header,warehouse_id,int,NO,,,,,,,10.0,0.0,"The warehouse_id column in the location_header table is a required integer field that identifies the specific warehouse or storage facility where a location exists. This column is essential for filtering and joining queries when tracking inventory across multiple warehouses, and since it's non-nullable, every location record must be associated with a valid warehouse identifier."
location_header,location_type_id,int,NO,,,,,,,10.0,0.0,"The location_type_id column in the location_header table is a required integer field that categorizes the type of storage or warehouse location (e.g., picking area, bulk storage, staging area). When writing queries, this column can be used to filter or group locations by their functional type, making it useful for analyzing inventory movements or generating reports specific to certain location types."
location_header,location_barcode,varchar(12),YES,,,,,,12.0,,,"The location_barcode column in the location_header table stores a unique barcode identifier (up to 12 characters) that can be used to physically identify and track warehouse or storage locations. When writing SQL queries, this column is particularly useful for matching scanned barcode inputs against storage locations or for retrieving location details based on their physical barcode identifiers, though the field can be null in cases where a barcode hasn't been assigned."
location_header,area,varchar(4),YES,,,,,,4.0,,,"The 'area' column in the location_header table is a 4-character varchar field that identifies the specific zone or section within a warehouse or storage facility. When writing SQL queries, this column can be used to filter or group locations by their designated areas, making it useful for analyzing inventory distribution or planning storage optimization across different warehouse sections."
location_header,zone,varchar(4),YES,,,,,,4.0,,,The 'zone' column in the location_header table is a 4-character string field that identifies the specific zone or area within a warehouse where items are stored. This optional field helps organize and segment warehouse spaces for more efficient inventory management and can be used in queries to filter or group locations by their designated zones.
location_header,aisle,varchar(4),YES,,,,,,4.0,,,"The 'aisle' column in the location_header table stores a 4-character string identifier representing the aisle designation within a warehouse or storage facility. When writing queries, this column can be used to filter or group inventory locations by aisle, making it useful for analyzing storage patterns or planning warehouse operations, though its nullable property means some location records might not have an aisle designation."
location_header,bay,varchar(4),YES,,,,,,4.0,,,"The 'bay' column in the location_header table stores a 4-character string identifier representing a specific bay section within a warehouse or storage facility. When writing SQL queries, this column can be used to filter or group inventory locations by their bay designation, though it's optional (nullable) and should be handled accordingly in queries where bay-level precision is needed."
location_header,level,varchar(4),YES,,,,,,4.0,,,"The 'level' column in the location_header table stores a text identifier (up to 4 characters) representing the vertical position or tier of a storage location within a warehouse. When writing queries, this column can be used to filter or group warehouse locations by their vertical positioning, which is particularly useful for optimizing storage assignments and analyzing space utilization across different levels of the warehouse structure."
location_header,position,varchar(4),YES,,,,,,4.0,,,"The 'position' column in the location_header table stores a 4-character string identifier representing a specific position or slot within a warehouse or storage location. This column can be used in SQL queries to filter or join on specific storage positions, though it's optional (nullable) which means some location records might not have a defined position value."
location_header,display_location,varchar(12),YES,,,,,,12.0,,,"The display_location column in the location_header table stores a human-readable identifier or label (up to 12 characters) that represents a warehouse or storage location. This optional field can be used in SQL queries to filter, group, or display location information in a user-friendly format, making it particularly useful for reporting and user interface purposes when working with inventory movements and storage operations."
location_header,sku_dedctn_type_id,int,NO,,,,,,,10.0,0.0,"The sku_dedctn_type_id column in the location_header table is a required integer field that specifies the SKU deduction type associated with each warehouse location. When writing SQL queries, this column can be used to filter or group locations based on their SKU deduction methodology, which likely influences how inventory is managed and tracked at each location."
location_header,slot_type_id,int,NO,,,,,,,10.0,0.0,The slot_type_id column in the location_header table is a required integer field that identifies the type or category of storage slot for each warehouse location. This classification helps determine what kind of inventory items can be stored in the location and is essential for proper inventory placement and movement operations within the warehouse management system.
location_header,putaway_zone_id,int,NO,,,,,,,10.0,0.0,"The putaway_zone_id column in the location_header table is a required integer field that identifies the putaway zone associated with each warehouse location. This column helps organize and group storage locations into logical zones for efficient inventory placement and management, enabling systematic putaway strategies and optimized warehouse operations."
location_header,length,double,YES,,,0,,,,22.0,,"The 'length' column in the location_header table stores the physical length measurement (as a decimal number) of a warehouse or storage location. This dimension value can be used in spatial calculations and capacity planning, helping to determine if items can fit in specific storage locations or to optimize space utilization in warehouse operations."
location_header,width,double,YES,,,0,,,,22.0,,"The 'width' column in the location_header table stores the physical width measurement (as a decimal number) of a warehouse or storage location. This measurement can be used in queries to determine space availability, calculate storage capacity, or filter locations based on size requirements for inventory placement and condensing operations."
location_header,height,double,YES,,,0,,,,22.0,,"The 'height' column in the location_header table stores the vertical measurement (in standard units) of a warehouse or storage location as a decimal number. This measurement is optional (nullable) and can be used in queries to filter or analyze storage spaces based on their vertical dimensions, which is particularly useful for optimizing storage capacity and planning inventory placement."
location_header,x_coord,double,YES,,,0,,,,22.0,,"The x_coord column in the location_header table stores the horizontal coordinate position of a warehouse or storage location using a double-precision floating-point number. This coordinate value can be used in spatial queries to determine relative positions of storage locations or calculate distances between locations, which is particularly useful for optimizing inventory movements and condensing operations."
location_header,y_coord,double,YES,,,0,,,,22.0,,"The y_coord column in the location_header table stores the Y-axis coordinate value (as a decimal number) for warehouse or storage locations, helping to define their precise vertical positioning within the facility. This coordinate value is optional (nullable) and works in conjunction with other spatial coordinates to uniquely identify the physical position of storage locations, which is essential for inventory movement and condensing operations."
location_header,z_coord,double,YES,,,0,,,,22.0,,"The z_coord column in the location_header table stores the vertical height or elevation coordinate of a warehouse storage location as a decimal number (double precision). This coordinate value helps specify the three-dimensional position of storage locations within the warehouse space, particularly useful for operations involving vertical storage systems like high-bay racks or multi-level storage areas."
location_header,last_cnt_date,datetime,NO,,,,,,,,,The last_cnt_date column in the location_header table records the most recent date and time when a physical count or inventory audit was performed at this warehouse/storage location. This non-nullable datetime field is essential for tracking inventory verification history and can be used in queries to identify locations that may need counting based on elapsed time since their last count.
location_header,cycle_cnt_pending,tinyint,YES,,,0,,,,3.0,0.0,"The cycle_cnt_pending column in the location_header table is a boolean flag (stored as tinyint) that indicates whether a location is scheduled for or awaiting a cycle count inventory verification process. When writing queries, this column can be used to filter locations that need cycle counting (value = 1) or to exclude locations with pending cycle counts from other operations (value = 0), making it useful for inventory management and audit-related queries."
location_header,storage_uom,varchar(1),YES,,,,,,1.0,,,"The storage_uom column in the location_header table is a single-character code that indicates the unit of measure used for storage at a particular warehouse or storage location. When writing SQL queries, this column can be used to filter or group locations based on their storage measurement standards, helping to ensure compatibility in inventory movements and storage planning."
location_header,pick_uom,varchar(1),YES,,,,,,1.0,,,"The pick_uom column in the location_header table is a single-character code that indicates the unit of measure used for picking operations at this warehouse location. When writing queries involving picking operations or inventory movements, this column can be used to filter or group locations based on their designated picking unit of measure, helping ensure proper unit compatibility in warehouse operations."
location_header,created,datetime,NO,,,,,,,,,"The 'created' column in the location_header table is a mandatory datetime field that records when each warehouse or storage location record was initially created in the system. When writing SQL queries, this column can be used to filter or sort location records by their creation date/time, which is particularly useful for auditing location setup history or analyzing location growth patterns over time."
location_header,modified,datetime,NO,,,,,,,,,The 'modified' column in the location_header table is a mandatory datetime field that records when a warehouse location record was last updated. This timestamp helps track the history of changes to location information and can be useful for auditing purposes or filtering locations based on when they were modified.
location_header,staff_id,int,NO,,,,,,,10.0,0.0,"The staff_id column in the location_header table is a required integer field that identifies the staff member associated with the warehouse or storage location, likely indicating who is responsible for or assigned to manage that location. This column can be used in JOIN operations to connect with staff-related tables or in WHERE clauses to filter locations by their assigned staff members."
location_header,slot_unusable,tinyint,YES,,,0,,,,3.0,0.0,"The slot_unusable column in the location_header table is a boolean flag (stored as tinyint) that indicates whether a warehouse location is currently available for use, where 0 typically means usable and 1 means unusable. When writing queries involving warehouse locations, this column can be used to filter out or identify locations that are not available for inventory storage or movement operations."
location_header,check_digit,varchar(5),YES,,,,,,5.0,,,"The check_digit column in the location_header table stores a verification character or sequence (up to 5 characters) that helps validate the accuracy of location identifiers in warehouse operations. This optional field can be used in WHERE clauses or JOIN conditions when verifying location data integrity, particularly when matching source and destination locations during inventory movements or condensing tasks."
location_header,actual_inventory_qty,int,YES,,,0,,,,10.0,0.0,"The actual_inventory_qty column in the location_header table represents the current total quantity of inventory items physically present at a specific warehouse or storage location. This nullable integer field is used to track real-time inventory levels at each location, enabling accurate inventory management and helping to inform decisions about storage optimization and condensing operations."
location_header,max_inventory_qty,int,YES,,,0,,,,10.0,0.0,The max_inventory_qty column in the location_header table represents the maximum quantity of inventory items that can be stored in a specific warehouse or storage location. This optional integer field helps enforce capacity limits and can be used in queries to identify locations that have available storage space or to prevent over-allocation during inventory movements and condensing operations.
location_header,min_inventory_qty,int,YES,,,0,,,,10.0,0.0,The min_inventory_qty column in the location_header table represents the minimum quantity of inventory that should be maintained at a specific warehouse or storage location. This optional integer field helps establish inventory thresholds for location management and can be used in queries to identify locations that are below their minimum required inventory levels.
location_header,conservation_mode_in_warehouse,int,NO,,,0,,,,10.0,0.0,"The conservation_mode_in_warehouse column is a required integer field in the location_header table that indicates the conservation mode setting for a specific warehouse or storage location. When writing SQL queries, this column can be used to filter or group locations based on their conservation mode settings, with 0 appearing to be a default value, making it useful for identifying locations with specific environmental or storage conditions."
location_header,near_drain,tinyint,NO,,,0,,,,3.0,0.0,"The near_drain column in the location_header table is a boolean flag (stored as tinyint) that indicates whether a warehouse location is positioned near a drainage system. When writing SQL queries, use this column with binary conditions (0 or 1) to filter or identify storage locations based on their proximity to drains, which can be important for safety regulations or specific storage requirements."
location_header,portioningOnly,tinyint,YES,,,0,,,,3.0,0.0,"The `portioningOnly` column in the location_header table is a boolean flag (stored as tinyint) that indicates whether a warehouse location is restricted to only portioning activities. When writing queries, use this column to filter locations based on their portioning status, where 0 typically indicates regular locations that can be used for multiple purposes, and 1 indicates locations dedicated exclusively to portioning operations."
location_header,biso_location,int,YES,,,0,,,,10.0,0.0,"The `biso_location` column in the `location_header` table is an optional integer field that identifies specific warehouse or storage locations. This column can be used in SQL queries to filter or join with other tables when tracking inventory movements or analyzing storage locations, particularly when you need to reference a specific location's numerical identifier."
location_header,storage_format_in_wh,"enum('Any','Pallet','Standard Totes')",YES,,,Any,,,14.0,,,"The storage_format_in_wh column specifies the physical storage format used at a particular warehouse location, with possible values being 'Any', 'Pallet', or 'Standard Totes'. When writing SQL queries, this column can be used to filter or group locations based on their storage format requirements, which is particularly useful when matching inventory items with compatible storage locations or analyzing storage capacity by format type."
location_header,group_id,int,YES,,,,,,,10.0,0.0,"The group_id column in the location_header table is an optional integer field that allows warehouses to be organized into logical groupings or zones. When writing queries, this column can be used to filter or aggregate warehouse locations that belong to the same operational group, making it useful for analyzing inventory movements or condensing tasks within specific warehouse sections."
location_header,direction,varchar(64),YES,,,,,,64.0,,,"The 'direction' column in the location_header table stores the directional orientation or positioning information for warehouse locations as a variable-length string up to 64 characters. This optional field helps specify the spatial orientation or directional attributes of storage locations, which can be useful for optimizing warehouse navigation and inventory placement strategies."
location_header,unit_facing,varchar(64),YES,,,,,,64.0,,,"The unit_facing column in the location_header table stores a text description (up to 64 characters) indicating the directional orientation or facing direction of a storage location within a warehouse. This optional field helps describe how units or products are positioned or accessed at a particular storage location, which can be valuable for optimizing picking routes and storage configurations."
location_header,offsite_inventory,tinyint,YES,,,0,,,,3.0,0.0,"The offsite_inventory column in the location_header table is a boolean flag (stored as tinyint) that indicates whether a warehouse/storage location is considered an offsite storage facility. When writing queries, use this column to filter or identify locations that are managed outside of the main warehouse premises (1 for offsite locations, 0 for onsite locations)."
location_header,is_rack,tinyint,NO,,,0,,,,3.0,0.0,"The `is_rack` column in the location_header table is a boolean flag (stored as tinyint) that indicates whether a location is classified as a rack storage position (1) or not (0). This mandatory field helps distinguish between rack-based storage locations and other types of storage areas within the warehouse, which is essential for inventory management and location-specific operations."
location_header,floor,varchar(10),NO,,,,,,10.0,,,"The 'floor' column in the location_header table is a required text field (maximum 10 characters) that specifies the floor level or designation within a warehouse or storage facility. When writing SQL queries, this column can be used to filter or group inventory locations by floor designation, making it useful for operations that need to analyze or manage inventory across different vertical levels of a facility."
location_type,location_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The location_type_id column serves as the primary key in the location_type table, uniquely identifying each standardized location category or classification. When writing SQL queries, use this column to join with other tables that reference location types or to filter specific location categories, ensuring data integrity through its non-nullable integer values."
location_type,location_type_name,varchar(255),NO,,,,,,255.0,,,"The location_type_name column in the location_type table stores the descriptive name of each location classification (such as ""residential,"" ""commercial,"" or ""industrial"") as a text string up to 255 characters. This required field serves as the primary identifier for different types of locations and should be referenced when querying or categorizing locations throughout the system."
location_type,location_type_desc,text,YES,,,,,,65535.0,,,"The location_type_desc column in the location_type table contains text descriptions that provide detailed explanations of different location categories (such as ""Single-family residential"" or ""Light industrial zone""). This optional (nullable) text field helps users understand the specific characteristics and intended use of each location type, making it useful in SELECT queries where detailed location type information needs to be displayed or filtered."
location_type,created,datetime,NO,,,,,,,,,"The 'created' column in the location_type table is a mandatory datetime field that records when each location type classification was first added to the system. When writing SQL queries, this column can be used to track the chronological evolution of location type definitions or filter location types based on when they were established in the system."
location_type,modified,datetime,NO,,,,,,,,,"The 'modified' column in the location_type table records the timestamp of when a location type record was last updated, storing this information as a datetime value that cannot be null. This column is useful for tracking the history of changes to location type classifications and can be used in SQL queries to filter or sort records based on when they were last modified."
location_type,staff_id,int,NO,,,,,,,10.0,0.0,"The staff_id column in the location_type table is a required integer field that identifies the staff member responsible for managing or maintaining location type classifications. When writing queries involving location types, this column can be used to join with staff-related tables to track ownership or accountability of location category management."
lock_comments,lock_comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The lock_comment_id column serves as the primary key for the lock_comments table, uniquely identifying each comment record associated with a user lock event. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific lock comment entry."
lock_comments,given_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `given_by` column in the lock_comments table stores the user ID of the person who initiated or applied the lock, using a foreign key relationship to the users table. This column is required (non-nullable) and indexed for efficient joins, making it essential for tracking lock accountability and filtering lock comments by the user who created them."
lock_comments,given_to,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `given_to` column in the lock_comments table stores the user ID of the person who received or was subjected to the lock, using a foreign key relationship to the users table. This column is mandatory (non-nullable) and indexed (MUL) to optimize queries that need to find all lock comments associated with a specific locked user."
lock_comments,comment,varchar(255),NO,,,,,,255.0,,,"The 'comment' column in the lock_comments table stores mandatory text explanations (up to 255 characters) that provide context or justification for why a user lock was applied or removed. When writing SQL queries, this column should always be included in INSERT statements since it's non-nullable, and it can be useful in WHERE clauses or JOIN conditions when searching for specific lock events based on their documented reasons."
lock_comments,created_at,datetime,NO,,,,,,,,,"The created_at column in the lock_comments table stores the exact timestamp when a lock comment was recorded in the system, using a datetime format that captures both the date and time of the entry. This non-nullable field is essential for maintaining a chronological audit trail of lock-related comments and can be used in SQL queries to filter or sort comments by their creation time, such as finding comments within a specific date range or ordering comments from newest to oldest."
lock_comments,reason,int,YES,MUL,,2,lock_reasons,lock_type_id,,10.0,0.0,"The 'reason' column in the lock_comments table is a foreign key (indexed by MUL) that references the lock_reasons table, indicating why a user lock was applied in the system. When writing queries, this column can be joined with the lock_reasons table to retrieve the specific reason description for the lock event, and being nullable means some lock comments might not have an associated reason specified."
lock_comments,unlocked_by,int,YES,MUL,,,users,user_id,,10.0,0.0,"The `unlocked_by` column in the lock_comments table stores the user ID of the person who removed a lock from another user's account, referencing the users table as a foreign key. This column can be NULL if the lock is still active or if the lock was automatically removed by the system rather than a specific user, making it useful for queries that need to track who manually removed user locks or filter for active/inactive locks."
lock_comments,unlock_time,datetime,YES,,,,,,,,,"The unlock_time column in the lock_comments table stores the date and time when a user lock was removed from the system. When querying this column, you can use it to filter or analyze when locks were released, and since it's nullable, a NULL value indicates that the lock is still active or hasn't been removed yet."
lock_comments,added_time,int,YES,,,,,,,10.0,0.0,"The added_time column in the lock_comments table stores the Unix timestamp indicating when a comment was added to a user lock event. This column can be used in SQL queries to filter or sort lock comments by their creation time, and since it's nullable, some comments may not have a recorded timestamp."
lock_reasons,lock_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The lock_type_id column serves as the primary key in the lock_reasons table, uniquely identifying each predefined lock reason type. When writing SQL queries, this column can be used to join with other tables that reference lock reasons, and since it's non-nullable, you can rely on it always having a valid integer value."
lock_reasons,fr_value,varchar(255),NO,,,,,,255.0,,,"The fr_value column in the lock_reasons table stores the French translation or description of a lock reason, ensuring multi-language support for the system's lock reason types. When writing SQL queries that need to display lock reasons in French, you should reference this column, particularly in scenarios where the application needs to present lock reason information to French-speaking users."
lock_reasons,en_value,varchar(255),NO,,,,,,255.0,,,"The en_value column in the lock_reasons table stores the English language description or explanation of a lock reason, with a maximum length of 255 characters and cannot be null. When writing SQL queries, this column can be used to retrieve or filter by human-readable lock reason descriptions, making it particularly useful for displaying lock reasons to users or generating reports that require English language explanations of why items are locked."
lufa_event,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column in the lufa_event table serves as the primary key, uniquely identifying each event record with a non-nullable integer value. This column should be used when joining to related tables or when specifically querying for individual events by their unique identifier."
lufa_event,date,date,NO,,,,,,,,,"The 'date' column in the lufa_event table is a mandatory field that stores the calendar date when an event occurred in the LUFA system. This non-nullable date field can be used in SQL queries for filtering events by specific dates, grouping events by date periods, or sorting events chronologically."
lufa_event,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the lufa_event table is a required integer field that categorizes different kinds of events or activities within the LUFA system. When writing SQL queries, use this column to filter or group events by their type, for example: ""SELECT * FROM lufa_event WHERE type = 1"" to retrieve all events of a specific category."
lufa_event,name,varchar(70),NO,,,,,,70.0,,,"The 'name' column in the lufa_event table is a required (non-nullable) text field with a maximum length of 70 characters that stores the descriptive name or title of each event. When querying this column, you can use string operations and pattern matching (e.g., LIKE, =) to search or filter events by their names, and since it's non-nullable, you can rely on every event having a name value."
lufa_event,description,text,YES,,,,,,65535.0,,,"The 'description' column in the lufa_event table stores detailed text descriptions of events or activities within the LUFA system. This optional (nullable) text field can be used in SQL queries to search for or filter events based on their descriptive content, making it useful for queries that need to find events matching specific textual descriptions or keywords."
manual_hours,manual_hour_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The manual_hour_id column serves as the primary key for the manual_hours table, uniquely identifying each record of manually entered work hours or adjustments. This auto-incrementing integer field is required (non-nullable) and should be referenced when joining to related tables or filtering specific manual hour entries."
manual_hours,employee_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The employee_id column in the manual_hours table is a required foreign key that references the users table, identifying which employee the work hours or adjustments belong to. When writing queries, this column is commonly used to join with the users table to retrieve employee details or to filter/group manual hour entries by specific employees."
manual_hours,manager_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The manager_id column in the manual_hours table stores the unique identifier of the supervisor who approved or reviewed the manual time entry, linking to the users table through a foreign key relationship. This column is required (non-nullable) and indexed for efficient lookups, making it useful in JOIN operations with the users table when querying for manager details or filtering time entries by specific supervisors."
manual_hours,minutes,int,NO,,,,,,,10.0,0.0,"The 'minutes' column in the manual_hours table stores the duration of work time or adjustments in minutes as a non-null integer value. When writing queries, this column can be used to calculate total work hours (by dividing by 60) or to aggregate time entries for reporting purposes, and since it's non-nullable, you should always expect a valid numeric value."
manual_hours,created_at,datetime,NO,,,,,,,,,"The created_at column in the manual_hours table stores the timestamp when each work hour or adjustment record was initially created in the system. This datetime field is mandatory (non-nullable) and can be used for auditing purposes or to track when manual time entries were submitted, making it useful for filtering records by creation date or analyzing submission patterns over time."
manual_hours,date,date,NO,MUL,,,,,,,,"The 'date' column in the manual_hours table stores the specific calendar date for which an employee's work hours or adjustments are being recorded. As a non-nullable field with a multiple-key index (MUL), this column is commonly used in WHERE clauses and JOIN conditions, particularly when querying work hours for specific time periods or when correlating entries with statutory holidays."
manual_hours,comment,varchar(255),YES,,,,,,255.0,,,"The 'comment' column in the manual_hours table stores optional explanatory text (up to 255 characters) that provides context or justification for manually entered work hours or adjustments. This free-text field is commonly used to document reasons for overtime, schedule changes, or holiday-related modifications, helping maintain transparency in time tracking records."
manual_hours,stat_holiday_id,int,YES,MUL,,,stat_holiday,stat_holiday_id,,10.0,0.0,"The stat_holiday_id column in the manual_hours table is a foreign key that references the stat_holiday table, indicating when an employee's work hours entry is associated with a statutory holiday. When querying for holiday-related work entries, join the manual_hours table with the stat_holiday table using this column, noting that the nullable property allows for regular non-holiday work entries to have NULL values in this field."
marketing_campaign_referrals,marketing_campaign_referral_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The marketing_campaign_referral_id is the primary key identifier for each unique referral record in the marketing_campaign_referrals table. This integer column serves as a crucial linking field to connect referral data with specific campaign URLs in the marketing_custom_urls table, making it essential for tracking and analyzing marketing campaign performance through JOIN operations."
marketing_campaign_referrals,name,varchar(250),NO,UNI,,,,,250.0,,,"The 'name' column in the marketing_campaign_referrals table stores unique, human-readable identifiers for different referral sources or campaigns, with a maximum length of 250 characters. As a required field with a unique constraint (UNI), each referral name must be distinct, making it reliable for identifying specific referral sources in JOIN operations or WHERE clauses when analyzing marketing campaign performance."
marketing_custom_urls,marketing_custom_url_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The marketing_custom_url_id column serves as the primary key identifier for each unique custom URL entry in the marketing_custom_urls table. This auto-incrementing integer column is commonly used in JOIN operations to link custom URLs with their associated marketing campaign referrals, and should be referenced when querying specific custom URL records."
marketing_custom_urls,marketing_campaign_referral_id,int,NO,MUL,,,marketing_campaign_referrals,marketing_campaign_referral_id,,10.0,0.0,"The marketing_campaign_referral_id column is a required foreign key that links each custom URL to its associated marketing campaign referral record. When writing queries, use this column to join the marketing_custom_urls table with the marketing campaign referrals table to analyze or retrieve data about specific campaign tracking links."
marketing_custom_urls,url,varchar(500),NO,UNI,,,,,500.0,,,"The 'url' column in the marketing_custom_urls table stores unique tracking URLs (up to 500 characters) used for marketing campaign referral tracking, and each URL must be unique due to the UNI key constraint. This required field (non-nullable) should be referenced when querying for specific campaign tracking links or when analyzing the performance of different marketing referral URLs."
marketing_custom_urls,target_url,varchar(500),NO,,,,,,500.0,,,"The target_url column stores the destination URL where users will be redirected when clicking on a marketing tracking link, with a maximum length of 500 characters. This required field represents the final landing page URL for the marketing campaign, making it essential for tracking the complete user journey from click to destination."
marketing_user_notes,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the marketing_user_notes table automatically records the timestamp when a marketing team member creates a note about a customer. When writing SQL queries, this column can be used to filter or sort notes by their creation date/time, making it useful for analyzing note creation patterns or finding recent customer interactions (e.g., WHERE created_at > '2023-01-01' or ORDER BY created_at DESC)."
marketing_user_notes,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the marketing_user_notes table identifies which marketing team member created the note, storing their unique identifier as a non-nullable integer with a foreign key relationship to the users table. When querying, this column can be used to filter notes by specific team members or join with the users table to get information about the note creators."
marketing_user_notes,customer_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The customer_id column in the marketing_user_notes table is a required foreign key that references the customer being discussed in each marketing note. When writing queries, this column can be used to join with the users table to access customer details or to filter/group marketing notes by specific customers, making it essential for tracking and analyzing customer-specific marketing communications."
marketing_user_notes,note,text,NO,,,,,,65535.0,,,"The 'note' column in the marketing_user_notes table stores the actual text content of observations, comments, or annotations made by marketing team members about customers. This required (non-nullable) text field can contain detailed, variable-length content and should be referenced when querying for specific customer-related notes or analyzing communication patterns between marketing team members and customers."
marketing_user_notes,visible,tinyint,NO,,,,,,,3.0,0.0,"The 'visible' column in the marketing_user_notes table is a boolean flag (stored as tinyint) that determines whether a marketing note is currently active and viewable in the system. When querying customer notes, you should typically include ""WHERE visible = 1"" to retrieve only currently visible notes, unless specifically needing to access hidden or archived notes."
marketing_user_notes,user_note_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The user_note_id column serves as the primary key for the marketing_user_notes table, uniquely identifying each note or annotation made by marketing team members about customers. This non-nullable integer field is essential for referencing specific notes in queries and joins, particularly when tracking the relationship between marketing team members' observations and customer records."
marketplace_closed_dates,date,date,NO,PRI,,,,,,,,"The 'date' column in the marketplace_closed_dates table is a primary key that stores specific calendar dates when marketplaces are not operating. This column should be used in WHERE clauses to check if a particular date is a non-operating day, or in JOIN operations to exclude closed dates from operational queries."
marketplace_families,marketplace_family_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The marketplace_family_id column serves as the primary key identifier for each unique product family or collection in the marketplace_families table. When writing SQL queries, use this column to join with related tables (particularly family_featured_texts) and to uniquely identify or filter specific product family records."
marketplace_families,title,varchar(255),NO,,,,,,255.0,,,"The 'title' column in the marketplace_families table stores the primary display name or heading for a product family/collection (limited to 255 characters) and is required for every record. When writing SQL queries, this column is commonly used for searching, filtering, or displaying the human-readable name of product groupings, such as ""Summer Collection"" or ""Outdoor Furniture Series""."
marketplace_families,description,text,YES,,,,,,65535.0,,,"The `description` column in the marketplace_families table stores a detailed text description of a product family or collection, providing context about what makes this grouping unique or noteworthy. When querying, this column can be used to search for product families based on their descriptive content or to display comprehensive information about a product family to users."
marketplace_families,image_url,varchar(255),NO,,,,,,255.0,,,"The image_url column in the marketplace_families table stores the URL path (as a string up to 255 characters) to the primary image representing a product family or collection. This required field (non-nullable) provides the visual representation used when displaying the product family across the marketplace system, and should be referenced when needing to display family-level imagery in queries or reports."
marketplace_families,weight,int,NO,,,0,,,,10.0,0.0,"The 'weight' column in the marketplace_families table is a required integer field that determines the sorting or display priority of product families within the marketplace system. This numeric value can be used in ORDER BY clauses to control the sequence in which product families appear, where higher weight values typically indicate higher priority or prominence in the display order."
marketplace_families,status,tinyint,NO,MUL,,1,,,,3.0,0.0,"The `status` column in the marketplace_families table is a required tinyint field that indicates the current state or visibility of a product family within the marketplace system. When writing queries, this column can be used to filter active or inactive product families, with common values likely representing states like active (1) or inactive (0), and its MUL key type suggests it's frequently used in WHERE clauses or joins."
marketplace_families,is_new,tinyint,YES,,,1,,,,3.0,0.0,"The `is_new` column in the marketplace_families table is a boolean flag (stored as a tinyint) that indicates whether a product family is newly added to the marketplace system. When writing queries, use this column with values 1 (true) or 0 (false) to filter or identify recently introduced product families, which can be useful for highlighting new collections or implementing ""New Arrival"" features."
marketplace_families,slug,varchar(255),YES,,,,,,255.0,,,"The `slug` column in the marketplace_families table stores URL-friendly versions of family/collection names, using lowercase letters, numbers, and hyphens (e.g., ""summer-collection-2023""). This column can be used to create clean, SEO-friendly URLs for product family pages and to uniquely identify product families in web routes, though it's not enforced as a unique identifier since it's nullable."
marketplace_families,nosub,tinyint(1),YES,,,0,,,,3.0,0.0,"The `nosub` column in the marketplace_families table is a boolean flag (using tinyint(1)) that likely indicates whether a product family allows sub-categories or nested items. When writing queries, use this column to filter product families based on their hierarchical structure capabilities, where 0 typically means sub-categories are allowed and 1 means they are not."
marketplace_families,nosub_title,varchar(255),YES,,,,,,255.0,,,"The nosub_title column in marketplace_families stores an alternative or simplified version of a product family's title without any subtitles or additional descriptive text. This field can be used when a cleaner, more concise version of the family name is needed, such as in navigation menus or abbreviated displays, and being nullable means not all product families require this alternate title format."
marketplace_families,special_feature_text,text,YES,,,,,,65535.0,,,"The special_feature_text column in marketplace_families stores optional descriptive text highlighting unique or notable features of a product family or collection. This text field can be used in SQL queries to filter or display special characteristics of product groupings, and since it's nullable, queries should handle potential NULL values when referencing this column."
marketplace_families,special_feature_title,varchar(255),YES,,,,,,255.0,,,"The special_feature_title column in marketplace_families stores a descriptive title or heading (up to 255 characters) that highlights a unique or notable feature of a product family grouping. This optional field can be used in SQL queries to filter or display product families with specific promotional or distinguishing characteristics, making it useful for marketing-focused queries or when highlighting special collections within the marketplace."
marketplace_families,special,int,YES,,,0,,,,10.0,0.0,"The 'special' column in the marketplace_families table is an integer flag field that likely indicates whether a product family has special status or designation within the marketplace system. When writing queries, this column can be used to filter or identify product families with special handling requirements, where 0 typically represents standard families and other values may indicate different special statuses."
marketplace_families,featured_card_title,varchar(255),YES,,,,,,255.0,,,"The featured_card_title column in marketplace_families stores the display title used when featuring a product family in promotional or highlight sections of the marketplace interface. This optional text field (maximum 255 characters) allows for a more marketing-friendly or attention-grabbing title compared to the standard family name, making it useful in SQL queries where you need to retrieve display text for featured product family cards or promotional materials."
marketplace_families_lang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the marketplace_families_lang table, uniquely identifying each language-specific translation record for marketplace family categories. When writing SQL queries, use this column for precise record identification and for joining with related tables that reference marketplace family translations."
marketplace_families_lang,marketplace_family_id,int,NO,MUL,,,,,,10.0,0.0,"The marketplace_family_id column is a required integer field that serves as a foreign key in the marketplace_families_lang table, linking each translation record to its corresponding marketplace family category. This column should be used in JOIN operations to connect with the primary marketplace families table, and can be referenced in WHERE clauses when filtering for specific family categories across different language versions."
marketplace_families_lang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in marketplace_families_lang stores language identifiers (like 'en', 'es', 'fr') as character strings up to 10 characters long and is required (non-nullable). This column should be used in WHERE clauses or JOINs when filtering or retrieving language-specific content for marketplace family categories, typically paired with other identifying columns to get the correct translation for a specific language."
marketplace_families_lang,l_title,varchar(255),NO,,,,,,255.0,,,"The l_title column in marketplace_families_lang stores the localized title or name of a marketplace family category in a specific language, with a maximum length of 255 characters. This required field (non-nullable) is essential for displaying family category names in the appropriate language throughout the marketplace interface."
marketplace_families_lang,l_description,text,YES,,,,,,65535.0,,,"The `l_description` column in the marketplace_families_lang table stores localized descriptive text for marketplace family categories in different languages. This text column can contain detailed explanations or descriptions of family groupings, and since it's nullable, some family categories may not have descriptions in certain languages."
marketplace_families_lang,l_slug,varchar(255),YES,,,,,,255.0,,,"The `l_slug` column in the marketplace_families_lang table stores URL-friendly versions of localized family category names, using a varchar format up to 255 characters. This column is used to create readable, language-specific URLs and identifiers for family categories in the marketplace, making it useful for routing and SEO purposes in different language versions of the marketplace interface."
marketplace_families_lang,l_nosub_title,varchar(255),YES,,,,,,255.0,,,"The l_nosub_title column in marketplace_families_lang stores localized titles or names for marketplace family categories when there are no subcategories present, with a maximum length of 255 characters. This column can be used in SQL queries to retrieve or filter language-specific family category titles, particularly when working with top-level or standalone categories that don't have subcategories beneath them."
marketplace_families_lang,l_special_feature_text,text,YES,,,,,,65535.0,,,"The l_special_feature_text column in marketplace_families_lang stores localized descriptions of special features or characteristics associated with marketplace family categories in different languages. This text field can be used to query or display language-specific special feature information, and since it's nullable, some family categories may not have special feature text defined for certain languages."
marketplace_families_lang,l_special_feature_title,varchar(255),YES,,,,,,255.0,,,"The l_special_feature_title column in marketplace_families_lang stores localized titles for special features associated with marketplace family categories, with a maximum length of 255 characters. This column can be used in SQL queries to retrieve or filter language-specific special feature titles, and since it's nullable, some family categories may not have special feature titles defined for certain languages."
marketplace_families_lang,l_featured_card_title,varchar(255),YES,,,,,,255.0,,,"The l_featured_card_title column in marketplace_families_lang stores localized titles (up to 255 characters) that appear on featured cards for marketplace family categories. When writing queries, this column can be used to retrieve or filter language-specific featured card headings, and its nullable property means it's optional and can contain NULL values when a featured title isn't needed for a particular language variant."
marketplace_family_category,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ""id"" column serves as the primary key in the marketplace_family_category table, uniquely identifying each category family relationship in the marketplace's hierarchical categorization system. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific category family entries."
marketplace_family_category,marketplace_family_id,int,NO,MUL,,,,,,10.0,0.0,"The marketplace_family_id column serves as a foreign key in the marketplace_family_category table, linking category entries to their respective family groupings. This integer field is required (non-nullable) and is used to establish the hierarchical relationship between product categories and their parent families, enabling efficient querying of related categories within the same family group."
marketplace_family_category,category_id,int,NO,,,,,,,10.0,0.0,"The category_id column in the marketplace_family_category table serves as a reference to identify specific product categories within the marketplace's hierarchical classification system. This integer field is required (non-nullable) and helps establish relationships between categories and their respective family groupings, enabling efficient product organization and navigation."
marketplace_family_product,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the marketplace_family_product table, uniquely identifying each family-oriented product or service entry. When writing SQL queries, use this column for precise record selection, joining with related tables, or ensuring unique identification of family products (e.g., WHERE id = X or JOIN ... ON marketplace_family_product.id = other_table.product_id)."
marketplace_family_product,marketplace_family_id,int,NO,MUL,,,,,,10.0,0.0,"The marketplace_family_id column serves as a foreign key identifier in the marketplace_family_product table, linking family-oriented products to their respective marketplace family categories or groupings. This non-nullable integer field is indexed (MUL) to optimize queries that filter or join based on marketplace family relationships, making it efficient to retrieve all products belonging to a specific family category."
marketplace_family_product,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the marketplace_family_product table serves as a unique identifier for each family-oriented product or service listing. When writing SQL queries, use this integer column to uniquely reference specific family products, either in WHERE clauses for filtering or in JOIN operations if connecting to related tables."
marketplace_family_sorted_products,marketplace_family_sorted_products_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The marketplace_family_sorted_products_id column serves as the primary key identifier for each unique product listing entry within the marketplace_family_sorted_products table. When writing SQL queries, use this column for precise record identification, joining to related tables, or filtering specific product entries within the family/category organization system."
marketplace_family_sorted_products,marketplace_family_id,int,NO,,,,,,,10.0,0.0,"The marketplace_family_id column is a required integer field that identifies which product family/category grouping a product listing belongs to within the marketplace hierarchy. This column should be used in JOIN operations to connect with related marketplace family tables, or in WHERE clauses to filter product listings by their family grouping."
marketplace_family_sorted_products,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column serves as a unique identifier for each product entry within the marketplace_family_sorted_products table, storing integer values that reference specific products. This non-nullable column is essential for joining with other product-related tables and should be used in WHERE clauses or JOINs when querying for specific product information within category groupings."
marketplace_family_sorted_products,sort_order,int,NO,,,9999,,,,10.0,0.0,"The sort_order column is a required integer field that determines the display sequence of products within their respective family/category groupings in the marketplace. When writing queries, use this column to order results in ascending order (ORDER BY sort_order) to retrieve products in their intended display sequence, with lower numbers appearing first and the apparent maximum value of 9999 likely representing items that should appear last."
marketplace_family_subcategory,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the marketplace_family_subcategory table, uniquely identifying each subcategory-to-family category relationship with a non-nullable integer value. When writing SQL queries, this column can be used for joining with related tables or filtering specific category relationships, and its auto-incrementing nature ensures each record has a unique identifier."
marketplace_family_subcategory,marketplace_family_id,int,NO,MUL,,,,,,10.0,0.0,"The marketplace_family_id column serves as a foreign key that links each subcategory to its parent family category in the marketplace hierarchy. This integer field is required (non-nullable) and is indexed (MUL) to optimize queries that filter or join based on family categories, making it essential for retrieving all subcategories belonging to a specific marketplace family."
marketplace_family_subcategory,subcategory_id,int,NO,,,,,,,10.0,0.0,"The subcategory_id column in the marketplace_family_subcategory table serves as an identifier for specific subcategories within the marketplace's hierarchical classification system. When writing SQL queries, use this column to join with other tables containing subcategory-level data or to filter/group marketplace items by their detailed subcategory classification."
marketplace_family_supplier,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the marketplace_family_supplier table, uniquely identifying each marketplace family-supplier relationship with an integer value. This non-nullable identifier should be used when joining to related tables or when specifically referencing individual marketplace family-supplier associations."
marketplace_family_supplier,marketplace_family_id,int,NO,MUL,,,,,,10.0,0.0,"The marketplace_family_id column in the marketplace_family_supplier table is a required integer field that serves as a foreign key reference to identify specific marketplace families. When writing SQL queries, use this column to join with the parent marketplace families table or to filter/group supplier relationships by their associated marketplace family."
marketplace_family_supplier,supplier_id,int,NO,,,,,,,10.0,0.0,The supplier_id column in the marketplace_family_supplier table is a required integer field that identifies specific suppliers who are authorized to operate within marketplace families. This column likely references a supplier's unique identifier from a related suppliers table and is used to establish valid supplier-to-marketplace-family relationships.
marketplace_feedback,marketplace_feedback_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The marketplace_feedback_id column serves as the primary key for the marketplace_feedback table, uniquely identifying each piece of feedback or review submitted by users. This auto-incrementing integer field is essential for joining feedback data with other related tables and should be referenced when querying specific feedback records."
marketplace_feedback,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in the marketplace_feedback table is a required integer field that identifies which user submitted the feedback or rating. This column can be used to join with other tables containing user information and is essential for analyzing feedback patterns by user or aggregating user-specific rating histories.
marketplace_feedback,created_at,datetime,YES,,,,,,,,,"The created_at column in the marketplace_feedback table records the timestamp when each feedback entry was submitted by a user. This datetime field is useful for analyzing feedback trends over time and can be used in SQL queries to filter or sort feedback entries by date, such as finding recent reviews or calculating feedback statistics for specific time periods."
marketplace_feedback,feedback,text,YES,,,,,,65535.0,,,"The ""feedback"" column in the marketplace_feedback table stores the actual text content of user reviews and comments about marketplace transactions or listings. This free-form text field allows users to provide detailed written feedback about their experience, which can be queried to analyze customer satisfaction, identify common issues, or extract sentiment from user responses."
marketplace_filter_log,marketplace_filter_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The marketplace_filter_log_id is the primary key column that uniquely identifies each filter operation record in the marketplace_filter_log table. When writing SQL queries, use this column for precise record identification, joining with related tables, or when you need to track specific filtering events in the marketplace system."
marketplace_filter_log,order_id,int,NO,MUL,,,,,,10.0,0.0,"The order_id column in the marketplace_filter_log table is a non-nullable integer field that references the specific order associated with a filter operation. When writing SQL queries, this column can be used to join with order-related tables or to analyze filtering patterns in relation to specific orders, and since it's indexed (MUL), it's optimized for such operations."
marketplace_filter_log,log_type,tinyint,YES,MUL,,,,,,3.0,0.0,"The `log_type` column in the marketplace_filter_log table is a tinyint field that categorizes different types of filtering or search operations performed by users in the marketplace system. When querying this table, you can use this column to segment and analyze different filtering behaviors (e.g., SELECT * FROM marketplace_filter_log WHERE log_type = specific_type), with the MUL key type indicating it's part of a multi-column index for optimized filtering queries."
marketplace_filter_log,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the marketplace_filter_log table records the exact timestamp when a filter operation was performed in the marketplace system. This non-nullable datetime field automatically captures the current timestamp when a record is inserted, making it useful for temporal analysis of user filtering behavior and for ordering filter events chronologically in queries."
marketplace_gifts_settings,delivery_date,date,NO,PRI,,,,,,,,"The delivery_date column in the marketplace_gifts_settings table serves as the primary key and stores the date for which specific gift-related configurations are applicable. This date field is required (non-nullable) and can be used to look up or join gift settings for specific delivery dates, making it useful for queries that need to retrieve or validate gift configurations for particular dates in the marketplace platform."
marketplace_gifts_settings,gift_preferences_id,int,NO,PRI,,,,,,10.0,0.0,"The gift_preferences_id column serves as the primary key in the marketplace_gifts_settings table, uniquely identifying each set of gift-related configuration settings. When writing SQL queries, use this column for joining to related tables or when specifically querying for individual gift preference configurations, ensuring that each record can be distinctly referenced."
marketplace_gifts_settings,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the marketplace_gifts_settings table is a required integer field that identifies specific products for which gift-related settings are configured. When writing queries, use this column to join with other product-related tables or to filter gift settings for particular items in the marketplace."
marketplace_message,marketplace_message_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The marketplace_message_id column serves as the primary key for the marketplace_message table, uniquely identifying each message or communication exchanged within the marketplace platform. When writing SQL queries, use this column for precise message lookups, joining with related tables, or filtering specific message records, as it's a non-nullable integer that guarantees unique identification of each message entry."
marketplace_message,image,varchar(100),YES,,,,,,100.0,,,"The 'image' column in the marketplace_message table stores file paths or URLs (up to 100 characters) that reference images attached to marketplace messages. When querying this column, you can use it to retrieve or filter messages that have attached images, though the column being nullable means messages may not always include an image attachment."
marketplace_message,alt,varchar(255),YES,,,,,,255.0,,,"The 'alt' column in the marketplace_message table stores alternative text descriptions (up to 255 characters) that may be associated with message content, likely for accessibility purposes or message previews. When writing queries, this optional field can be used to search for or filter messages based on their alternative descriptions, though be aware that the field may contain NULL values since it's nullable."
marketplace_message,link,varchar(100),YES,,,,,,100.0,,,"The 'link' column in the marketplace_message table stores optional URL references (up to 100 characters) that may be included within marketplace communications. This column can be used to filter or retrieve messages containing specific URLs, or to analyze message content that includes external links, though its nullable property indicates that not all messages will contain links."
marketplace_message,message,text,YES,,,,,,65535.0,,,"The 'message' column in the marketplace_message table stores the actual text content of communications exchanged between users on the marketplace platform. When writing SQL queries, this text field can be searched using string operations (like LIKE, ILIKE, or full-text search) to find specific message content, and since it's nullable, queries should account for potential NULL values when filtering or displaying messages."
marketplace_message,start_date,date,NO,,,,,,,,,The start_date column in the marketplace_message table represents the date when a message or communication thread was initiated. This non-nullable date field is essential for tracking message chronology and can be used in SQL queries for filtering messages by date ranges or sorting communications by their initiation date.
marketplace_message,end_date,date,NO,,,,,,,,,"The end_date column in the marketplace_message table represents the expiration or completion date of a message or communication thread. This non-nullable date field can be used to filter active versus expired messages, track message validity periods, or analyze message lifecycles within the marketplace platform."
marketplace_message,view,varchar(100),NO,,,,,,100.0,,,"The 'view' column in the marketplace_message table is a required varchar field that likely stores information about the message's visibility or display status within the marketplace platform. When writing SQL queries, this column can be used to filter or group messages based on their view status (e.g., 'read', 'unread', 'archived') with a maximum length of 100 characters."
marketplace_message,query,text,YES,,,,,,65535.0,,,"The 'query' column in the marketplace_message table stores the actual text content or body of messages exchanged between users on the marketplace platform. When writing SQL queries, this column can be used to search for specific message content or analyze communication patterns, though its nullable property means some message records might not contain text content."
marketplace_message,marketplace_message_type,int,NO,,,,,,,10.0,0.0,"The marketplace_message_type column is a required integer field that categorizes different types of messages exchanged within the marketplace platform. This column can be used in WHERE clauses to filter messages by their type (e.g., private messages, system notifications, or offer communications) or in GROUP BY statements to analyze message patterns by type."
marketplace_messageLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the marketplace_messageLang table, uniquely identifying each language-specific message entry. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific message translations (e.g., `WHERE l_id = 123`)."
marketplace_messageLang,marketplace_message_id,int,YES,,,,,,,10.0,0.0,"This column serves as a foreign key reference to link language-specific message content with its base message record in the marketplace system. When writing queries, use marketplace_message_id to join with the parent message table or to filter/group message translations for a specific base message."
marketplace_messageLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in marketplace_messageLang stores language identifiers (like 'en', 'es', 'fr') as text strings up to 10 characters long and is required (non-nullable). When writing SQL queries, use this column to filter or join language-specific message content, typically by matching it with standard language codes or user language preferences."
marketplace_messageLang,l_image,varchar(100),YES,,,,,,100.0,,,"The `l_image` column in the marketplace_messageLang table stores file paths or URLs (up to 100 characters) that reference images associated with multilingual messages or content. This optional field (nullable) can be used to enhance messages with visual elements specific to different language versions, such as localized graphics or language-specific promotional images."
marketplace_messageLang,l_alt,varchar(255),YES,,,,,,255.0,,,"The `l_alt` column in the marketplace_messageLang table stores alternative text or secondary message content in different languages, with a maximum length of 255 characters. This column can be used when querying for fallback or alternative message variations in specific languages, and since it's nullable, some messages may not have alternative text defined."
marketplace_messageLang,l_link,varchar(100),YES,,,,,,100.0,,,"The l_link column in marketplace_messageLang stores URL or reference links (up to 100 characters) associated with multilingual messages or notifications in the marketplace system. This column can be used to include clickable links within message content or to reference related resources, and being nullable means not all messages require an associated link."
marketplace_messageLang,l_message,text,YES,,,,,,65535.0,,,"The l_message column in marketplace_messageLang stores the actual translated message content or text in different languages for the marketplace system. This text column can contain various types of content like notification messages, UI labels, or system communications, and since it's nullable, some language versions of a message may not have translations yet."
marketplace_product_tag,marketplace_product_tag_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The marketplace_product_tag_id column serves as the primary key for the marketplace_product_tag table, uniquely identifying each product-tag association with a non-nullable integer value. This column is commonly used in JOIN operations or WHERE clauses when you need to reference specific tag assignments or link tag data with other related tables in the marketplace system."
marketplace_product_tag,marketplace_product_tag_start_date,date,YES,,,,,,,,,"The marketplace_product_tag_start_date column records the date when a specific tag was first applied to a marketplace product. When writing queries, this date field can be used to track tag history or filter products based on when they received certain tags, and since it's nullable, queries should handle potential NULL values appropriately."
marketplace_product_tag,marketplace_product_tag_end_date,date,YES,,,,,,,,,"The marketplace_product_tag_end_date column stores the date when a tag's association with a product is set to expire or become inactive in the marketplace system. When querying for active product tags, you should check if this field is either NULL (indicating no expiration) or has a date greater than the current date using conditions like ""WHERE marketplace_product_tag_end_date IS NULL OR marketplace_product_tag_end_date > CURRENT_DATE""."
marketplace_product_tag,marketplace_product_tag_product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The marketplace_product_tag_product_id column serves as a foreign key in the marketplace_product_tag table, linking each tag entry to its corresponding product in the products table. This integer column is required (non-nullable) and is designed for efficient lookups through an index (MUL), making it ideal for JOIN operations and filtering products based on their associated tags."
marketplace_product_tag,marketplace_product_tag_card_label_fr,varchar(25),NO,,,,,,25.0,,,"The marketplace_product_tag_card_label_fr column stores the French language version of product tag labels, limited to 25 characters, and is used for displaying tag information on product cards in French-language interfaces. This required (non-nullable) field should be included in queries when you need to retrieve or filter product tags specifically for French-language display purposes, particularly in user interface elements that show product categorization."
marketplace_product_tag,marketplace_product_tag_card_label_en,varchar(25),NO,,,,,,25.0,,,"The marketplace_product_tag_card_label_en column stores the English-language display label (limited to 25 characters) for product tags in the marketplace system. This required field is used to show user-friendly tag names when displaying product categorizations in the interface, and can be used in SQL queries for filtering or grouping products by their tag labels."
marketplace_promotion,marketplace_promotion_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The marketplace_promotion_id is the primary key identifier for each unique promotional campaign in the marketplace_promotion table. This non-nullable integer column should be used in WHERE clauses and JOIN conditions when you need to reference specific promotions or link promotional data with related tables.
marketplace_promotion,type,int,YES,,,,,,,10.0,0.0,"The 'type' column in the marketplace_promotion table is an integer field that categorizes different kinds of promotional campaigns (such as percentage discounts, fixed amount discounts, buy-one-get-one offers, etc.). When querying promotions, this column can be used to filter or group promotional campaigns by their type, allowing for analysis or selection of specific promotion categories."
marketplace_promotion,delivery_day_start,date,YES,,,,,,,,,"The delivery_day_start column in the marketplace_promotion table specifies the first date when a promotional offer becomes available for delivery to customers. This optional date field helps define the temporal boundaries of promotional campaigns, allowing businesses to schedule promotions with specific delivery windows that may differ from the general promotion period."
marketplace_promotion,delivery_day_end,date,YES,,,,,,,,,"The delivery_day_end column in the marketplace_promotion table specifies the last date when a promotional offer can be delivered or fulfilled. This optional date field helps define the delivery window for promotional items or services, and can be used in SQL queries to filter or validate promotions based on their delivery availability (e.g., WHERE delivery_day_end >= CURRENT_DATE to find active promotions with remaining delivery periods)."
marketplace_promotion_content,marketplace_promotion_content_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The marketplace_promotion_content_id is the primary key identifier for each unique promotional content entry in the marketplace_promotion_content table. This integer column serves as the main reference point when joining with other tables or filtering specific promotional materials, and its non-nullable property ensures that every promotional content record has a unique identifier."
marketplace_promotion_content,marketplace_promotion_id,int,YES,,,,,,,10.0,0.0,The marketplace_promotion_id column in the marketplace_promotion_content table serves as a reference identifier for specific promotional campaigns or marketing initiatives in the marketplace. This optional integer field can be used to join with other promotion-related tables or to filter and group promotional content based on specific campaign IDs.
marketplace_promotion_content,type,text,YES,,,,,,65535.0,,,"The 'type' column in the marketplace_promotion_content table categorizes the different formats or styles of promotional content used in marketplace campaigns, such as 'banner', 'popup', or 'sidebar'. When querying this column, you can use it to filter or group promotional materials by their presentation format, helping to analyze or manage specific types of marketing content across the platform."
marketplace_promotion_content,value,text,YES,,,,,,65535.0,,,"The 'value' column in the marketplace_promotion_content table stores the actual promotional content or message text used in marketplace marketing campaigns. This text field can contain various forms of promotional copy such as banner text, special offer descriptions, or marketing messages, and can be null when content hasn't been defined yet."
marketplace_without_second_harvest,delivery_date,date,YES,UNI,,,,,,,,"The delivery_date column in the marketplace_without_second_harvest table stores the date when marketplace items are scheduled for delivery, using a standard date format. As a unique key (UNI), each delivery date can only appear once in this table, suggesting it's used to track distinct delivery days for non-Second Harvest marketplace transactions."
marketplace_without_second_harvest,gift_also,tinyint(1),YES,MUL,,0,,,,3.0,0.0,"The `gift_also` column in the marketplace_without_second_harvest table is a boolean flag (tinyint(1)) indicating whether an item is also marked as a gift. Since it's indexed (MUL) but nullable, queries filtering or joining on this column should handle NULL values appropriately, and the index can be leveraged for efficient filtering using conditions like `WHERE gift_also = 1` or `WHERE gift_also IS NULL`."
marketplaces_capacity,marketplaces_capacity_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The marketplaces_capacity_id column serves as the primary key identifier for each unique capacity record in the marketplaces_capacity table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific marketplace capacity entries using WHERE clauses (e.g., WHERE marketplaces_capacity_id = 123)."
marketplaces_capacity,limit,int,YES,,,,,,,10.0,0.0,"The ""limit"" column in the marketplaces_capacity table stores integer values representing the maximum capacity or threshold for a specific marketplace or sales channel. This column can be used in SQL queries to compare against current utilization levels or to set capacity boundaries, and since it's nullable, some marketplace entries may not have defined limits."
marketplaces_capacity,type,"enum('HD','PUP','TRIAL')",NO,,,,,,5.0,,,"The 'type' column in the marketplaces_capacity table is a required (non-nullable) enumerated field that categorizes marketplace capacity entries into three distinct types: 'HD', 'PUP', or 'TRIAL'. When querying this column, you should use exact string matches with one of these three enum values, such as ""WHERE type = 'HD'"" or ""WHERE type IN ('HD', 'PUP')""."
marketplaces_capacity,delivery_date,date,NO,MUL,,,,,,,,"The delivery_date column in the marketplaces_capacity table represents the specific date for which capacity and availability metrics are being tracked. As a non-nullable date field with a multi-column index (MUL), it's commonly used in WHERE clauses to filter capacity data for specific dates or date ranges, and it can be joined with other tables to analyze marketplace performance for particular delivery timeframes."
memcached,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the memcached table, uniquely identifying each Memcached-related locking record. When writing SQL queries, this column can be used for precise record selection and joins with other tables, particularly when tracking specific locking states or cache entries."
memcached,basket_designer_locked,tinyint(1),NO,,,,,,,3.0,0.0,"The basket_designer_locked column is a boolean flag (stored as tinyint(1)) that indicates whether a basket designer is currently in a locked state. This column works in conjunction with basket_designer_locked_by to implement a locking mechanism, where a value of 1 indicates the basket designer is locked and 0 indicates it's available for use."
memcached,basket_designer_locked_by,int,YES,MUL,,,users,user_id,,10.0,0.0,"The basket_designer_locked_by column in the memcached table stores the user_id of the person who currently has a lock on the basket designer functionality, with NULL indicating no active lock. This column serves as a foreign key reference to the users table and is commonly used in WHERE clauses to check lock status or JOIN operations to get information about which user holds the current lock."
menu,menu_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The menu_id column serves as the primary key in the menu table, uniquely identifying each menu item in the restaurant's system. When writing SQL queries, this column can be used to join with the menuLang table for accessing multilingual descriptions, and it should be referenced when you need to uniquely identify or filter specific menu items."
menu,machine_name,varchar(50),NO,,,,,,50.0,,,"The machine_name column in the menu table stores a system-friendly, URL-safe identifier for each menu item, using a maximum of 50 characters. This required field typically contains lowercase, hyphenated versions of menu item names (e.g., ""spicy-chicken-sandwich"") and serves as a consistent reference point for internal system operations and URL routing, regardless of the display name or language being used."
menu,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the menu table stores the default or primary name of menu items using up to 255 characters, and it cannot be null. While this column stores the base name, it works in conjunction with the menuLang table for multilingual translations, making it important to consider both tables when querying for complete menu item information across different languages."
menu,description,text,YES,,,,,,65535.0,,,"The `description` column in the `menu` table stores the default or base description of menu items in text format, allowing for detailed explanations of dishes, ingredients, or preparation methods. Since this column is nullable and exists in the core menu table, it likely serves as a fallback or internal reference description, while customer-facing multilingual descriptions are stored in the related menuLang table."
menu,created,datetime,NO,,,,,,,,,"The 'created' column in the menu table is a mandatory datetime field that records when each menu item was initially added to the system. When writing SQL queries, this column can be used for temporal analysis, auditing, or filtering menu items based on when they were created, and since it's non-nullable, you can rely on it always having a valid datetime value."
menu,updated,datetime,NO,,,,,,,,,"The 'updated' column in the menu table stores the timestamp of when a menu item was last modified, using the datetime format to capture both the date and time of the change. This non-nullable field is essential for tracking menu item version history and can be useful in SQL queries for filtering recently changed items or synchronizing menu data with other systems."
menu,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the menu table is a required integer field that identifies which user created or owns each menu item in the restaurant system. When writing queries, this column can be used to filter menu items by their creator/owner or to join with user-related tables to access additional information about who manages specific menu entries."
menuLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the menuLang table, uniquely identifying each menu item translation record. This integer column is required (non-nullable) and should be referenced when joining with other tables or filtering specific menu language entries."
menuLang,menu_id,int,NO,MUL,,,menu,menu_id,,10.0,0.0,"The menu_id column in the menuLang table serves as a foreign key that links each translation record to its corresponding menu item in the main menu table. When writing SQL queries, use this column to join the menuLang table with the menu table to retrieve multilingual menu content, or to filter translations for specific menu items."
menuLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the menuLang table stores language identifiers (such as 'en', 'es', 'fr') as varchar strings up to 10 characters long, representing the language of each menu item translation. This required field is essential for filtering and grouping menu translations by language, making it a key component in queries that need to retrieve menu content in specific languages."
menuLang,l_name,varchar(255),YES,,,,,,255.0,,,"The `l_name` column in the `menuLang` table stores the translated name of menu items in different languages, with a maximum length of 255 characters. This column is optional (nullable) and should be used in queries when you need to retrieve or filter menu item names in specific languages, typically in conjunction with a language identifier column to distinguish between different translations."
menu_items,menu_item_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The menu_item_id column serves as the primary key in the menu_items table, uniquely identifying each menu item record with a non-nullable integer value. This column is essential for joining with the menu_itemsLang table to retrieve language-specific content for menu items, and it should be referenced when querying for specific menu item details or establishing relationships with other tables."
menu_items,menu_id,int,NO,,,,,,,10.0,0.0,The menu_id column in the menu_items table is a required integer field that links menu items to their parent menu. This column is essential for organizing menu items into specific menus and should be included when querying menu item details or filtering items by their associated menu.
menu_items,parent_id,int,YES,,,,,,,10.0,0.0,"The parent_id column in the menu_items table is used to create hierarchical relationships between menu items, allowing items to be organized into parent-child structures (for example, a main dish category containing multiple specific dishes). When querying, you can join the menu_items table to itself using parent_id to retrieve parent items or to build complete hierarchical menu structures, with NULL values indicating top-level items that don't have a parent."
menu_items,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the menu_items table stores the default or primary name of menu items as a text string (up to 255 characters) and cannot be null. While this column stores the base name, note that localized versions of the item names are stored in the related menu_itemsLang table, making this column typically used for internal reference or fallback display purposes."
menu_items,link,varchar(255),NO,,,,,,255.0,,,"The 'link' column in the menu_items table stores a URL-friendly string (maximum 255 characters) that represents the unique web address path for each menu item, making it useful for SEO-friendly URLs and direct item access. When writing SQL queries, this required (non-nullable) field can be used to filter or identify specific menu items based on their URL path, such as ""SELECT * FROM menu_items WHERE link = 'spicy-chicken-sandwich'""."
menu_items,weight,int,NO,,,0,,,,10.0,0.0,"The 'weight' column in the menu_items table is a required integer field that determines the display order or priority of menu items. This sorting weight helps control how items are positioned when displayed in menus or lists, where higher weight values typically indicate items that should appear later in the sequence."
menu_items,status,tinyint,NO,,,1,,,,3.0,0.0,"The 'status' column in the menu_items table is a required (non-nullable) tinyint field that indicates whether a menu item is active or inactive in the system. When writing SQL queries, use this column to filter menu items based on their availability status, where 1 typically represents active/available items and 0 represents inactive/unavailable items."
menu_items,created,datetime,NO,,,,,,,,,"The 'created' column in the menu_items table stores the timestamp indicating when each menu item record was initially added to the system, using a datetime format. This non-nullable field is useful for tracking the chronological history of menu additions and can be used in SQL queries for auditing purposes or filtering items based on when they were created."
menu_items,updated,datetime,NO,,,,,,,,,"The 'updated' column in the menu_items table is a mandatory datetime field that tracks when each menu item record was last modified. This timestamp is automatically maintained and can be used to identify recent changes to menu items, filter for recently updated items, or sort menu items based on their modification date."
menu_items,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the menu_items table is a required integer field that identifies which user created or owns the menu item record. When writing queries, this column can be used to filter menu items by their associated user, making it useful for retrieving user-specific menu item collections or implementing ownership-based access control."
menu_itemsLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The l_id column serves as the primary key in the menu_itemsLang table, uniquely identifying each language-specific translation record for menu items. When writing SQL queries, use this column for precise record selection, joining with other tables, or ensuring data integrity, but note that it's primarily an internal identifier and not typically used for business logic queries."
menu_itemsLang,menu_item_id,int,NO,MUL,,,menu_items,menu_item_id,,10.0,0.0,"The menu_item_id column in the menu_itemsLang table serves as a foreign key that links to the primary menu_items table, establishing a relationship between menu items and their translations. When writing SQL queries, use this column to join with the menu_items table or to filter translations for specific menu items, as it's a required field (non-nullable) that ensures each translation is properly associated with its parent menu item."
menu_itemsLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the menu_itemsLang table stores language codes (e.g., 'en', 'es', 'fr') to identify the specific language of each menu item translation. When writing SQL queries, use this column to filter or group menu item translations by language, typically in WHERE clauses (e.g., WHERE lang_id = 'en') or JOIN conditions to retrieve content in specific languages."
menu_itemsLang,l_name,varchar(255),YES,,,,,,255.0,,,"The l_name column in the menu_itemsLang table stores the translated or localized name of a menu item in different languages, with a maximum length of 255 characters. When writing SQL queries, this column should be used to retrieve or filter menu item names in specific languages, typically in conjunction with a language identifier column and joined with the main menu_items table for complete multilingual menu item information."
message_bar,message_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The message_id column serves as the primary key in the message_bar table, uniquely identifying each message bar notification or announcement. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific message bar entry (e.g., WHERE message_id = X)."
message_bar,name,varchar(50),NO,,,,,,50.0,,,"The 'name' column in the message_bar table stores a short, descriptive identifier (up to 50 characters) for each notification or announcement. This required field helps administrators and systems identify and reference specific message bar entries, making it useful for filtering or retrieving particular announcements in SQL queries."
message_bar,content,varchar(70),NO,,,,,,70.0,,,"The 'content' column in the message_bar table stores the actual text message (limited to 70 characters) that should be displayed in the notification bar at the top of the website or application. When writing queries, this required field should be used to set or retrieve the specific announcement text that users will see, and it must always contain a value since it's marked as non-nullable."
message_bar,status,int,NO,,,0,,,,10.0,0.0,"The 'status' column in the message_bar table is an integer field that indicates the current state or visibility condition of a notification message (likely using values like 0/1 or predefined status codes). This required field (non-nullable) helps control whether messages are active, archived, or in other specific states, making it essential for filtering and managing which notifications should be displayed on the website or application interface."
message_bar,period_start,timestamp,NO,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The period_start column in the message_bar table records the timestamp when a notification or announcement should begin displaying to users, using the system's current timestamp as the default value. When writing queries, this column can be used to filter active messages or schedule future announcements by comparing it against the current time (e.g., WHERE period_start <= CURRENT_TIMESTAMP for active messages)."
message_bar,period_end,timestamp,NO,,,0000-00-00 00:00:00,,,,,,"The period_end column in the message_bar table stores the timestamp indicating when a message bar notification should stop being displayed, using a standard timestamp format. This non-nullable field is essential for controlling the expiration of announcements, and can be used in WHERE clauses to filter for currently active messages (e.g., WHERE period_end > CURRENT_TIMESTAMP)."
message_bar,content_align,int,NO,,,1,,,,10.0,0.0,"The content_align column in the message_bar table is a required integer field that specifies the horizontal alignment of the notification message text (likely using values like 1 for left, 2 for center, 3 for right). When writing SQL queries, this column can be used to filter or sort messages based on their text alignment preferences, and since it's non-nullable, you should always include a valid alignment value when inserting new message bar records."
message_bar,bar_location,tinyint(1),NO,,,0,,,,3.0,0.0,"The `bar_location` column in the `message_bar` table is a required tinyint(1) field that specifies where the message bar should be positioned on the interface, likely using a numeric code (e.g., 0 for top, 1 for bottom). When writing queries, this column can be used to filter or group messages based on their intended display location, and its non-nullable nature means you should always include a valid location value when inserting new message bar records."
message_bar,close_button,tinyint(1),NO,,,1,,,,3.0,0.0,"The `close_button` column in the `message_bar` table is a boolean flag (stored as tinyint(1)) that determines whether a message notification can be manually dismissed by users. When querying this column, use 1 to find messages with a close button enabled and 0 for messages that cannot be dismissed, making it useful for filtering messages based on their dismissibility status."
message_bar,close_button_align,tinyint(1),NO,,,1,,,,3.0,0.0,"The close_button_align column in the message_bar table is a required boolean field (tinyint(1)) that determines the alignment position of the close button for notification messages. This column likely uses 1 to indicate right alignment and 0 for left alignment of the close button, helping control the visual presentation of the dismiss functionality in the message bar interface."
message_bar,cookie_state,int,NO,,,60,,,,10.0,0.0,"The cookie_state column in the message_bar table is a required integer field that likely controls how the message bar interacts with browser cookies, possibly determining whether a user can dismiss or remember the notification. This column could store values that represent different cookie-related states (e.g., 0 for no cookie set, 1 for cookie set, 2 for cookie expired) and should be included in queries when managing user-specific message bar display preferences."
message_bar,default_state,int,NO,,,1,,,,10.0,0.0,"The `default_state` column in the `message_bar` table is a required integer field that controls the initial visibility or display state of a message bar notification. This column likely uses predefined integer values (such as 0 for hidden, 1 for visible) to determine whether a message bar should be shown or hidden by default when first displayed to users."
message_bar,target_device,int,NO,,,0,,,,10.0,0.0,"The target_device column in the message_bar table is a required integer field that specifies which device types should display the message bar notification (e.g., 0 for all devices, 1 for desktop, 2 for mobile, etc.). When writing SQL queries, use this column to filter or segment message bar notifications based on device-specific targeting requirements."
message_bar,auth_filter,int,NO,,,0,,,,10.0,0.0,"The `auth_filter` column in the `message_bar` table is an integer flag that controls which user authentication states can see a particular message bar notification (e.g., 0 for all users, 1 for authenticated users only, 2 for unauthenticated users only). When writing SQL queries, this column can be used to filter message bar notifications based on a user's authentication status, typically by using equality comparisons (WHERE auth_filter = desired_value)."
message_bar,action_button_label,varchar(15),YES,,,,,,15.0,,,"The action_button_label column in the message_bar table stores the text label (up to 15 characters) that appears on any clickable button associated with a notification message. This optional field allows administrators to define custom call-to-action text for buttons that might accompany the notification, such as ""Learn More,"" ""Dismiss,"" or ""Get Started."""
message_bar,url_slug,varchar(255),YES,,,,,,255.0,,,"The `url_slug` column in the `message_bar` table stores an optional URL-friendly string that can be used to create unique, readable links or identifiers for specific message bar notifications. This column can be used in WHERE clauses to filter or retrieve specific announcements by their URL-friendly identifier, making it useful for routing or linking directly to particular messages in the system."
message_bar,background_color,varchar(255),NO,,,,,,255.0,,,"The background_color column in the message_bar table stores the CSS color value (in hex code, RGB, or color name format) used for the visual background of notification messages displayed on the website. This required field helps maintain consistent styling and visual hierarchy of system announcements, allowing for different background colors to indicate various message types or importance levels."
message_bar,text_color,varchar(255),NO,,,,,,255.0,,,"The text_color column in the message_bar table specifies the color of the text used in notification messages, typically stored as a valid CSS color value (e.g., hex codes like '#000000' or color names like 'white'). When writing SQL queries, this required field can be used to filter or update the visual styling of message bar notifications, ensuring proper contrast and readability of the displayed announcements."
message_bar,action_button_background_color,varchar(255),NO,,,,,,255.0,,,"The action_button_background_color column stores the CSS color value (in hex code, RGB, or color name format) for the background of action buttons displayed within message bar notifications. When writing SQL queries, this required field should be referenced when you need to customize or filter message bars based on their button styling, typically using exact string matching or pattern matching operations."
message_bar,action_button_label_color,varchar(255),NO,,,,,,255.0,,,"The action_button_label_color column stores the text color value (in a format like hex code, RGB, or color name) for labels on action buttons within message bar notifications. When writing SQL queries, this required field should be referenced when you need to customize or filter message bars based on their button label color styling, such as ""SELECT * FROM message_bar WHERE action_button_label_color = '#FFFFFF'"" for finding messages with white button text."
message_bar,new_tab,int,NO,,,1,,,,10.0,0.0,"The `new_tab` column in the `message_bar` table is a binary/boolean flag (stored as an integer) that determines whether the message bar's linked content should open in a new browser tab when clicked. When writing queries, use 1 to indicate the link should open in a new tab and 0 for opening in the same tab, making it useful for controlling the link behavior of announcement messages."
message_bar,message_link,int,NO,,,0,,,,10.0,0.0,"The message_link column in the message_bar table is a required integer field that likely stores a reference or identifier linking the message bar notification to related content or actions. This column can be used in JOIN operations or WHERE clauses to connect message bar announcements with their associated destination pages, resources, or additional information."
message_bar,event,varchar(255),YES,,,,,,255.0,,,"The 'event' column in the message_bar table stores the name or identifier of the specific event or occasion that triggered the message bar notification, with a maximum length of 255 characters. This optional field can be used to filter or group related notifications by their associated events, making it useful in queries where you need to find all messages related to a particular event like ""system maintenance,"" ""holiday announcement,"" or ""special promotion."""
message_barLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ""l_id"" column serves as the primary key in the message_barLang table, using integer values to uniquely identify each language-specific message or translation entry. When writing SQL queries, use this column for joining with related tables or when you need to reference specific translation records, such as ""SELECT * FROM message_barLang WHERE l_id = 1""."
message_barLang,message_id,int,NO,,,,,,,10.0,0.0,"The message_id column in the message_barLang table serves as a numeric identifier for each language-specific message or translation entry. When writing SQL queries, use this column to uniquely reference specific messages or join with other tables that need to link to these translations."
message_barLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the message_barLang table stores language identifiers as text strings (up to 10 characters) and is required for every record. This column is likely used to specify which language each message or translation corresponds to (e.g., 'en' for English, 'es' for Spanish), making it essential for filtering and retrieving language-specific content in SQL queries."
message_barLang,l_content,varchar(70),NO,,,,,,70.0,,,"The l_content column in message_barLang stores the actual translated text content (up to 70 characters) for various bar-related interface elements, such as menu items, labels, or messages. When writing SQL queries, this column should be used to retrieve or filter the specific language-appropriate text content that needs to be displayed in the application's interface."
message_barLang,l_url_slug,varchar(255),YES,,,,,,255.0,,,"The l_url_slug column in message_barLang stores URL-friendly versions of text content, likely used for generating clean, SEO-friendly URLs or unique identifiers for language-specific bar-related content. When writing queries, this column can be used to match or filter content based on URL-safe strings, and its nullable nature means you should handle NULL values appropriately in your conditions."
message_barLang,l_action_button_label,varchar(15),YES,,,,,,15.0,,,"The l_action_button_label column stores language-specific text labels (up to 15 characters) that appear on action buttons within a bar interface. When writing queries, this column can be used to retrieve or filter button label translations for different languages, making it useful for implementing multilingual button text in the application's user interface."
message_bar_roles,message_bar_role_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The message_bar_role_id column serves as the primary key in the message_bar_roles table, uniquely identifying each role assignment for the message bar feature. When writing SQL queries, use this column for joining to related tables or filtering specific message bar role records, as it provides a reliable, non-null integer reference for each role entry."
message_bar_roles,message_bar_id,int,NO,,,,,,,10.0,0.0,"The message_bar_id column in the message_bar_roles table serves as a reference to identify specific message bar instances that roles are being assigned to. When writing SQL queries, use this non-nullable integer column to join with related message bar tables or to filter role assignments for particular message bars."
message_bar_roles,role_name,varchar(255),NO,,,,,,255.0,,,"The role_name column in the message_bar_roles table stores text-based role identifiers (up to 255 characters) that define different permission levels or access rights for the message bar feature. When writing SQL queries, this required field can be used to filter or group users based on their assigned message bar roles, such as in WHERE clauses (e.g., WHERE role_name = 'admin') or JOIN operations to connect with user permission data."
message_bar_urls,message_bar_url_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The message_bar_url_id column serves as the primary key for the message_bar_urls table, uniquely identifying each URL entry associated with message bar notifications. When writing SQL queries, use this column for joining with related tables, filtering specific message bar URLs, or ensuring unique identification of URL records within the message bar system."
message_bar_urls,message_bar_id,int,NO,,,,,,,10.0,0.0,"The message_bar_id column serves as a reference to connect URLs with their corresponding message bar notifications. When writing SQL queries, use this non-nullable integer column to join with related message bar tables or to filter specific message bar URL records."
message_bar_urls,url_slug,varchar(255),NO,,,,,,255.0,,,"The url_slug column in the message_bar_urls table stores unique URL-friendly text identifiers (slugs) used to create clean, readable URLs for message bar links. When writing SQL queries, this required varchar field can be used to look up specific message bar URLs or join with related tables, and it should be referenced when you need to work with the human-readable portion of message bar notification links."
migrations,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the migrations table, uniquely identifying each database migration record with an integer value. This column is non-nullable and should be referenced when tracking specific migration entries or joining with related tables that need to reference individual migration records."
migrations,timestamp,bigint,NO,,,,,,,19.0,0.0,"The `timestamp` column in the `migrations` table stores the Unix timestamp (in milliseconds or seconds) when each database migration was executed, serving as a chronological marker for schema changes. This non-nullable bigint field is essential for tracking the order and timing of migrations, helping to maintain a reliable history of database schema evolution."
migrations,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the migrations table stores the unique identifier or descriptive name of each database migration script, typically following a naming pattern like ""YYYYMMDDHHMMSS_description.sql"" or similar format. This required (non-nullable) varchar field is essential for tracking which migrations have been executed and maintaining the correct order of schema changes."
mkt_content,mkt_content_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The mkt_content_id column serves as the primary key in the mkt_content table, uniquely identifying each marketing content asset in the system. This non-nullable integer field is essential for joining with the mkt_contentLang table to access language-specific versions of content, making it a crucial field for queries involving content localization or when retrieving specific marketing assets."
mkt_content,context,varchar(64),YES,,,,,,64.0,,,"The 'context' column in the mkt_content table stores a descriptive string (up to 64 characters) that indicates the intended usage context or purpose of a marketing content asset, such as ""email_campaign,"" ""social_media,"" or ""website_banner."" This optional field helps categorize and filter content assets based on their intended distribution channels or marketing contexts, making it useful in queries that need to retrieve content for specific marketing purposes."
mkt_content,action,varchar(64),YES,,,,,,64.0,,,"The 'action' column in the mkt_content table stores the intended call-to-action or desired user response associated with a marketing content asset, using a text field limited to 64 characters. When writing queries, this column can be used to filter or group marketing content based on their intended user actions (e.g., ""download,"" ""register,"" ""learn more""), though it may contain NULL values since it's optional."
mkt_content,type,text,YES,,,,,,65535.0,,,"The 'type' column in the mkt_content table categorizes marketing content assets by their format or classification (e.g., blog, whitepaper, video, infographic). When querying this column, it can be used to filter or group marketing content by their specific types, helping to organize and retrieve content assets based on their format classification."
mkt_content,text,text,YES,,,,,,65535.0,,,"The 'text' column in the mkt_content table stores the main textual content or body of marketing assets in their default language version. When writing queries, this column can be used to search or filter marketing content based on specific text patterns or keywords, though for language-specific content variations, you should join with the mkt_contentLang table instead."
mkt_contentLang,mkt_contentLang_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The mkt_contentLang_id column serves as the primary key in the mkt_contentLang table, uniquely identifying each language-specific version of marketing content. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific language variations of marketing content."
mkt_contentLang,mkt_content_id,int,NO,MUL,,,mkt_content,mkt_content_id,,10.0,0.0,"The mkt_content_id column in the mkt_contentLang table serves as a foreign key that links to the primary content record in the mkt_content table. When writing SQL queries, use this column to join with the main content table or to filter specific content variations, as it represents the base content item for which language variations are stored."
mkt_contentLang,text,text,YES,,,,,,65535.0,,,"The 'text' column in the mkt_contentLang table stores the actual translated content or text of marketing materials in different languages. When writing SQL queries, this column should be used to retrieve or update the language-specific versions of marketing content, and since it's nullable, queries should handle potential NULL values appropriately."
mkt_contentLang,lang,varchar(64),YES,,,,,,64.0,,,"The 'lang' column in the mkt_contentLang table stores language identifiers (up to 64 characters) that specify which language version a particular marketing content piece is in. When writing SQL queries, this column can be used to filter or group marketing content by language, making it essential for retrieving language-specific versions of content or analyzing content distribution across different languages."
model_classes,class_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The class_id column serves as the primary key in the model_classes table, uniquely identifying each model classification or category. When writing SQL queries, use this column to join with other tables that reference model classifications or to filter specific model classes, ensuring that you're working with non-null integer values."
model_classes,class_name,varchar(255),YES,,,,,,255.0,,,"The class_name column in the model_classes table stores descriptive names or labels for different model classifications, accepting text values up to 255 characters in length. This column can be used in SQL queries to filter, group, or join with other tables based on model categories, and since it's nullable, some model classes may not have a specified name."
model_fields,variable_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The variable_id column serves as the primary key in the model_fields table, uniquely identifying each field or attribute that belongs to a data model. When writing SQL queries, use this column to join with related tables or to specifically target individual model fields, ensuring each field can be distinctly referenced and managed within the system."
model_fields,variable_name,varchar(255),YES,,,,,,255.0,,,"The variable_name column in the model_fields table stores the programmatic identifier or reference name used for each field within a data model. This column helps developers and systems reference specific fields in code or queries, acting as a machine-friendly identifier that maps to the actual field attribute, and its VARCHAR(255) type allows for flexible naming conventions while being nullable for cases where a variable name might not be immediately assigned."
model_fields,class_id,int,NO,MUL,,,,,,10.0,0.0,"The class_id column in the model_fields table is a required integer field that serves as a foreign key to link each model field to its corresponding class or data model definition. This column is indexed (MUL) to optimize queries that filter or join based on class associations, making it efficient to retrieve all fields belonging to a specific data model class."
model_fields,department_id,int,NO,MUL,,,,,,10.0,0.0,"The department_id column in the model_fields table is a required integer field that establishes a relationship with departments, indicating which department owns or manages specific data model fields. This column is indexed (MUL) to optimize queries that filter or join based on department ownership, and its non-nullable nature ensures that every field must be associated with a department."
model_fields,requestable,tinyint(1),NO,,,,,,,3.0,0.0,"The `requestable` column in the `model_fields` table is a boolean flag (stored as tinyint(1)) that indicates whether a particular model field can be requested or accessed by users or external systems. When writing SQL queries, use this column with values 1 (true) or 0 (false) to filter fields based on their requestability status, such as `WHERE requestable = 1` to find only fields that are available for requests."
model_fields,view_type,int,NO,,,,,,,10.0,0.0,"The view_type column in the model_fields table is a required integer field that specifies how a particular model field should be displayed or rendered in the user interface. When writing queries, this column can be used to filter or group fields based on their display characteristics, helping to control how data is presented to users."
model_fields,relation_path,varchar(255),YES,,,,,,255.0,,,"The relation_path column in the model_fields table stores the path or reference that defines how this field relates to or can be accessed from other models in the system, using a string format up to 255 characters. This optional field helps establish relationships between different data models and enables proper field traversal when querying across related models, making it particularly useful in complex data model hierarchies or nested field structures."
model_fields,weight,int,NO,,,,,,,10.0,0.0,"The 'weight' column in the model_fields table is a required integer value that determines the display or processing order of fields within their respective data models. This ordering mechanism helps control how fields are presented or handled in the system, with higher weight values typically indicating higher priority or later positioning in sequences."
model_fields,bizrule,varchar(255),YES,,,,,,255.0,,,The 'bizrule' column in the model_fields table stores business rules or validation logic (up to 255 characters) that should be applied to individual data model fields. This optional column helps enforce data quality and business constraints by specifying rules that should be checked when data is entered or modified for a particular field.
model_fields,mf_subcategory_id,int,YES,MUL,,,model_fields_subcategories,mf_subcategory_id,,10.0,0.0,"The mf_subcategory_id column in the model_fields table is a foreign key that references the model_fields_subcategories table, establishing a relationship between individual fields and their subcategories. This column helps organize and classify fields into logical groups, and since it's nullable, a field can optionally exist without being assigned to a specific subcategory."
model_fields_subcategories,mf_subcategory_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The mf_subcategory_id column serves as the primary key in the model_fields_subcategories table, uniquely identifying each subcategory of model fields. When writing SQL queries, this column can be used to join with the model_fields table to access detailed subcategory information or to filter and group model fields by their subcategory classification."
model_fields_subcategories,category_name,varchar(255),YES,,,,,,255.0,,,"The category_name column in the model_fields_subcategories table stores descriptive names for subcategories of model fields as variable-length strings up to 255 characters. This column helps in organizing and labeling different types of model fields into more specific groupings, and since it's nullable, some subcategories may not have a specified name."
model_fields_subcategories,weight,int,NO,,,,,,,10.0,0.0,"The 'weight' column in the model_fields_subcategories table is a required integer field that determines the sorting or priority order of subcategories within the model fields classification system. When writing SQL queries, this column can be used in ORDER BY clauses to retrieve subcategories in their intended sequence, or in WHERE clauses to filter subcategories based on their relative importance."
mp_in_meal_members,mp_meal_member_id,int unsigned,NO,PRI,auto_increment,,,,,10.0,0.0,"The mp_meal_member_id column serves as the primary key in the mp_in_meal_members junction table, uniquely identifying each meal-member relationship with an unsigned integer. When writing SQL queries, this column can be used to join with other tables or filter specific meal-member associations, though you'll typically rely more on the actual meal and member IDs for practical queries."
mp_in_meal_members,mp_member_id,int unsigned,NO,MUL,,,mp_in_members,mp_member_id,,10.0,0.0,"The mp_member_id column in mp_in_meal_members is a required foreign key that references a member's unique identifier from the mp_in_members table. This column is used to establish which members are associated with specific meals, making it essential for queries that need to find meals for a particular member or determine who is participating in a given meal."
mp_in_meals,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in mp_in_meals is a required foreign key that references the users table, identifying which user created each meal record. This column is frequently used in JOIN operations with the users table and in WHERE clauses to filter meals by their creator, making it essential for queries that need to track meal ownership or aggregate meal data by user."
mp_in_meals,meal_type,"enum('breakfast','lunch','dinner','custom')",NO,,,,,,9.0,,,"The meal_type column in mp_in_meals is a required field that categorizes each meal record into one of four fixed categories: breakfast, lunch, dinner, or custom. When querying meals, you can use this column to filter or group meals by their type, for example: SELECT * FROM mp_in_meals WHERE meal_type = 'breakfast' or GROUP BY meal_type."
mp_in_meals,meal_name,varchar(255),YES,,,,,,255.0,,,"The meal_name column in mp_in_meals stores the user-defined name or title of each meal record, allowing for text entries up to 255 characters in length. Since this field is nullable, queries should handle potential NULL values when filtering or displaying meal names, and it's commonly used in SELECT statements for displaying meal information or in WHERE clauses for searching specific meals."
mp_in_meals,day_of_week,"enum('Sun','Mon','Tue','Wed','Thu','Fri','Sat')",NO,,,,,,3.0,,,"The day_of_week column in mp_in_meals is a required field that stores the specific day of the week when a meal is planned, using a three-letter abbreviation format ('Sun' through 'Sat'). When querying meals by day, you can use this column directly in WHERE clauses or GROUP BY statements to filter or organize meals by their scheduled weekday, such as ""WHERE day_of_week = 'Mon'"" for finding Monday meals."
mp_in_meals,time_of_day,time,NO,,,,,,,,,"The time_of_day column in mp_in_meals stores the scheduled time for each meal record in the meal planning system using a standard time format (HH:MM:SS). When querying meals, you can use this required field to filter or sort meals by their planned time, such as finding all meals scheduled for breakfast hours or organizing meals chronologically throughout the day."
mp_in_meals,member_list,json,YES,,,,,,,,,"The 'member_list' column in mp_in_meals stores JSON-formatted data representing the participants or members associated with each meal record. This optional column can be queried using JSON operators and functions to extract or filter member information, making it useful for analyzing meal participation patterns or retrieving specific member details within the meal planning system."
mp_in_meals,cusinine_prefereces,json,YES,,,,,,,,,"The cusinine_prefereces column (stored as JSON) in mp_in_meals contains dietary and cuisine preferences associated with each meal record. This column can be queried using JSON operators to filter or extract specific cuisine preferences, helping to match meals with user preferences or dietary requirements."
mp_in_meals,budget_per_serving,float,NO,,,10,,,,12.0,,"The budget_per_serving column in mp_in_meals stores the allocated cost per individual serving of a meal as a floating-point number, and it cannot contain NULL values. When writing queries, this column can be used to calculate total meal costs, filter meals by budget constraints, or perform price-based analysis, with values typically represented in the system's default currency units."
mp_in_meals,max_cooking_time,time,NO,,,20:00:00,,,,,,"The max_cooking_time column in mp_in_meals stores the maximum time required to prepare and cook a meal, represented in HH:MM:SS format with a default value of 20:00:00. When writing SQL queries, this time field can be used to filter or sort meals based on cooking duration requirements, such as finding meals that can be prepared within a specific time limit."
mp_in_meals,notes_for_ai,text,YES,,,,,,65535.0,,,"The notes_for_ai column in mp_in_meals stores free-form text input where users can provide additional instructions or context about their meal for AI processing. This optional text field can be used to filter or analyze meals based on specific AI-related requirements or preferences, and it's commonly accessed when generating AI-assisted meal recommendations or processing meal-related requests."
mp_in_meals,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in mp_in_meals stores the timestamp when each meal record was initially created, automatically populated with the current time using CURRENT_TIMESTAMP. This non-nullable timestamp field is useful for tracking meal creation history and can be used in SQL queries for filtering meals by date/time or analyzing meal creation patterns over time."
mp_in_meals,updated_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The updated_at column in mp_in_meals automatically tracks the last modification timestamp of each meal record, using CURRENT_TIMESTAMP as its default value. When querying meal records based on their modification time, this column can be used for filtering recent changes or sorting meals chronologically, making it particularly useful for synchronization and audit purposes."
mp_in_members,mp_member_id,int unsigned,NO,PRI,auto_increment,,,,,10.0,0.0,"The mp_member_id column serves as the primary key in the mp_in_members table, uniquely identifying each membership record in the meal planning system. This integer column is used to establish relationships between users and their meal planning memberships, and it's commonly referenced in JOIN operations with the mp_in_meal_members table to connect users to specific meal groups."
mp_in_members,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in mp_in_members is a required integer field that serves as a foreign key to identify individual users within the meal planning system. This column is frequently used in JOIN operations to connect user data with their corresponding meal planning memberships, and since it's indexed (MUL), it's optimized for efficient querying when filtering or joining based on user identification."
mp_in_members,name,varchar(250),NO,,,,,,250.0,,,"The 'name' column in the mp_in_members table stores the full name of users who are members of meal planning groups, with a maximum length of 250 characters. This required field (non-nullable) is commonly used in queries for displaying member names in user interfaces or when searching for specific members within the meal planning system."
mp_in_members,date_of_birth,date,NO,,,,,,,,,"The date_of_birth column in mp_in_members stores the birth date of each user who participates in meal planning groups, using a standard date format (YYYY-MM-DD). This required field (non-nullable) can be used in queries to calculate member ages, filter members by age groups, or determine age-appropriate meal planning recommendations."
mp_in_members,preferred_caloric_intake,int,YES,,,,,,,10.0,0.0,"The preferred_caloric_intake column in mp_in_members stores each user's desired daily calorie target as an integer value, which can be NULL if not specified. This column can be used in queries to filter or group meal planning members based on their caloric preferences, and is particularly useful when creating personalized meal plans or analyzing dietary requirements across different membership groups."
mp_in_members,dietary_restrictions,text,YES,,,,,,65535.0,,,"The dietary_restrictions column in mp_in_members stores text-based information about any dietary limitations, preferences, or restrictions for each meal planning group member. This optional field (nullable) can be used to filter or customize meal plans according to members' dietary needs, and it's commonly referenced when querying for meal compatibility or generating personalized meal suggestions."
mp_logs,mp_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The mp_log_id column serves as the primary key in the mp_logs table, uniquely identifying each logging event or record in the marketplace platform. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific log entries, but avoid using it for business logic as it's primarily for internal record management."
mp_logs,order_id,int,NO,MUL,,,,,,10.0,0.0,"The order_id column in the mp_logs table is a required integer field that references specific marketplace orders associated with logged events or activities. This column is indexed (MUL) to optimize queries that filter or join based on order IDs, making it efficient to retrieve all log entries related to a particular order for monitoring or troubleshooting purposes."
mp_logs,message,longtext,NO,,,,,,4294967295.0,,,"The 'message' column in the mp_logs table stores detailed text descriptions of system events, errors, and activities that occur within the marketplace platform. This required (non-nullable) longtext field can be queried to search for specific error messages, debug information, or to analyze patterns in system behavior, making it particularly useful in WHERE clauses with LIKE operators or full-text searches."
mp_logs,prompt,longtext,YES,,,,,,4294967295.0,,,"The ""prompt"" column in the mp_logs table stores the full text of prompts or input messages that triggered specific system events or actions in the marketplace platform. This longtext field can be used to search for specific user inputs or system prompts when investigating issues, and being nullable means not all log entries will necessarily contain prompt data."
mp_logs,result,longtext,YES,,,,,,4294967295.0,,,"The 'result' column in the mp_logs table stores detailed output or response data from marketplace system events in a longtext format, which can include error messages, success responses, or other event-specific information. This column is nullable and can be used in SQL queries to analyze operation outcomes or troubleshoot issues by searching for specific result patterns or error messages."
mp_logs,created_at,datetime,NO,,,,,,,,,"The created_at column in the mp_logs table is a mandatory datetime field that records the exact timestamp when each log entry or event was created in the marketplace platform. This column is essential for temporal analysis and debugging, allowing queries to filter, sort, and analyze logging data based on when specific events occurred."
mp_logs,duration_in_seconds,int,YES,,,0,,,,10.0,0.0,"The duration_in_seconds column in the mp_logs table represents the time span (in seconds) of a logged event or operation in the marketplace platform. This integer field can be used to analyze performance metrics, identify long-running operations, or calculate average processing times, and since it's nullable, some events may not have an associated duration value."
mp_logs,cost_ai_prompt,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The `cost_ai_prompt` column in the `mp_logs` table stores the monetary cost (with 2 decimal places) associated with AI prompt processing for each logged event. This decimal field can be used in SQL queries to track, sum, or analyze AI-related costs across the marketplace platform, with NULL values indicating events where no AI prompt cost was incurred."
mp_logs,cost_ai_completion,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The cost_ai_completion column in the mp_logs table stores the monetary cost (with 2 decimal places) associated with AI completion operations in the marketplace platform. This column can be used in SQL queries to track, sum, or analyze AI-related expenses, and since it's nullable, some log entries may not have associated AI completion costs."
mp_meal_plans,mp_meal_plans_id,int unsigned,NO,PRI,auto_increment,,,,,10.0,0.0,"The mp_meal_plans_id column serves as the primary key for the mp_meal_plans table, uniquely identifying each meal plan record with a positive integer value. When writing SQL queries, use this column to join with related tables or to specifically identify individual meal plan records, ensuring that each value is unique and non-null across all records in the table."
mp_meal_plans,order_id,int,NO,MUL,,,orders,order_id,,10.0,0.0,"The order_id column in the mp_meal_plans table serves as a foreign key that links each meal plan to its corresponding customer order in the orders table. This integer field is required (non-nullable) and indexed (MUL) to optimize query performance when joining with the orders table, making it essential for retrieving order-specific meal plan details."
mp_meal_plans,meal_date,date,NO,,,,,,,,,"The meal_date column in the mp_meal_plans table represents the specific date when a meal plan is scheduled to be prepared or delivered. This required date field is essential for temporal queries and can be used to filter, sort, or group meal plans by their scheduled dates, making it valuable for operations like finding meal plans for specific dates or date ranges."
mp_meal_plans,time_of_day,time,YES,,,,,,,,,"The time_of_day column in mp_meal_plans stores the scheduled time when a meal plan is intended to be prepared or consumed, using a standard time format (HH:MM:SS). When querying this column, you can use time comparison operators to filter meal plans by specific times of day, such as finding all meal plans scheduled for morning hours or within specific time ranges."
mp_meal_plans,recipe_name,text,YES,,,,,,65535.0,,,"The recipe_name column in the mp_meal_plans table stores the text name or title of individual recipes included in customer meal plans. When querying, this column can be used to search for specific recipes within meal plans or to group and analyze meal plans based on their included recipes, though be aware that NULL values are possible since the field is nullable."
mp_meal_plans,recipe_instructions,text,YES,,,,,,65535.0,,,"The recipe_instructions column in the mp_meal_plans table stores detailed preparation and cooking instructions for each meal plan's recipes in text format. This column can be queried to retrieve cooking steps and preparation guidelines, and since it's nullable, some meal plans may not have specific instructions stored."
mp_meal_plans,servings,int,YES,,,0,,,,10.0,0.0,"The ""servings"" column in the mp_meal_plans table represents the number of portions or servings included in a specific meal plan order. This integer field can be used to filter or aggregate meal plans based on serving size requirements, and its nullable property allows for cases where serving information might not be specified."
mp_meal_plans,calories_per_serving,int,YES,,,0,,,,10.0,0.0,"The calories_per_serving column in the mp_meal_plans table stores the caloric content per individual serving for each meal plan, represented as a whole number. This optional field can be used in queries to filter or analyze meal plans based on their caloric content, making it useful for nutritional analysis or when customers need to find meals within specific calorie ranges."
mp_meal_plans,total_price,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_price column in the mp_meal_plans table stores the complete cost of a meal plan as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). When querying this column, you can use it for price-based calculations or filtering, and since it's nullable, remember to handle NULL values appropriately in your calculations or use COALESCE when you need a default value."
mp_meal_plans,members_list,json,YES,,,,,,,,,"The members_list column in mp_meal_plans stores JSON-formatted data containing information about the household members included in each meal plan. When querying this column, use JSON functions (like JSON_EXTRACT or ->) to access specific member details, and remember that the field can be NULL if member information hasn't been specified for a particular meal plan."
mp_meal_plans,nutrients_list,json,YES,,,,,,,,,"The nutrients_list column in mp_meal_plans stores nutritional information for each meal plan in JSON format, allowing for flexible storage of various nutrient details like proteins, carbohydrates, fats, vitamins, etc. When querying this column, use JSON operators and functions to extract or filter specific nutrient values, and since it's nullable, always consider handling NULL values appropriately in your queries."
mp_meal_plans,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the mp_meal_plans table records the exact timestamp when each meal plan record was initially created, automatically populated with the current system time upon insertion. This non-nullable timestamp field is useful for tracking the chronological order of meal plan creation and can be used in SQL queries for temporal analysis, filtering records by creation date, or auditing purposes."
mp_meal_plans,email_sent_status,"enum('Pending','Sent')",NO,,,Pending,,,7.0,,,"The email_sent_status column in the mp_meal_plans table is a required field that tracks whether a meal plan's notification email has been sent to the customer, using an enumerated value of either 'Pending' or 'Sent'. When querying this column, you can use it to filter or group meal plans based on their email notification status, such as finding all meal plans where notifications are still pending (WHERE email_sent_status = 'Pending')."
mp_meal_plans,meal_type,"enum('breakfast','lunch','dinner','custom')",YES,,,,,,9.0,,,"The meal_type column in mp_meal_plans specifies the category of meal being planned, accepting one of four possible values: breakfast, lunch, dinner, or custom. When querying this column, you can filter or group meal plans by their designated meal time, and since it's nullable, be sure to handle NULL values appropriately in your WHERE clauses or aggregations."
mp_meal_plans,cooking_time,time,YES,,,,,,,,,"The cooking_time column in the mp_meal_plans table stores the estimated time required to prepare and cook each meal plan, represented in a time format (HH:MM:SS). This optional field helps customers understand the time commitment needed for meal preparation and can be used in queries to filter or sort meal plans based on cooking duration requirements."
mp_meal_plans,recipe_name_fr,varchar(255),YES,,,,,,255.0,,,
mp_meal_plans,recipe_instructions_fr,longtext,YES,,,,,,4294967295.0,,,
mp_meal_plans_details,mp_meal_plans_details_id,int unsigned,NO,PRI,auto_increment,,,,,10.0,0.0,"The mp_meal_plans_details_id column serves as the primary key for the mp_meal_plans_details table, uniquely identifying each individual meal plan detail record. This auto-incrementing integer column should be referenced when joining with related tables or when needing to identify specific meal plan detail entries within the meal planning system."
mp_meal_plans_details,mp_meal_plans_id,int unsigned,NO,,,,,,,10.0,0.0,"The mp_meal_plans_id column serves as a reference to link meal plan details with their parent meal plan records, functioning as a foreign key that connects to the main meal plans table. This integer column is required (non-nullable) and only accepts positive numbers (unsigned), making it essential for maintaining data integrity in meal plan relationships."
mp_meal_plans_details,item_name,varchar(60),NO,,,,,,60.0,,,"The item_name column in mp_meal_plans_details stores the descriptive name of individual meal components or food items within a meal plan, with a maximum length of 60 characters. This required field (non-nullable) is commonly used in SELECT statements to display readable meal item names and can be used in WHERE clauses to filter or search for specific meal components."
mp_meal_plans_details,quantity,float,YES,,,0,,,,12.0,,"The 'quantity' column in mp_meal_plans_details represents the amount or portion size of a meal component, stored as a decimal number (float). This column can be used in calculations involving serving sizes or nutritional totals, and since it's nullable, some meal components may not have a specified quantity."
mp_meal_plans_details,unit,varchar(20),NO,,,,,,20.0,,,"The 'unit' column in mp_meal_plans_details specifies the measurement unit (such as grams, cups, ounces, etc.) for meal ingredients or portions within a meal plan. When writing SQL queries, this required (non-nullable) varchar field should be used to properly quantify ingredients and ensure accurate portion measurements in meal planning calculations."
mp_meal_plans_details,product_id,int,YES,,,0,,,,10.0,0.0,"The product_id column in mp_meal_plans_details is an integer field that references specific food products or ingredients used within a meal plan. This column can be used to join with a products table to retrieve detailed information about each food item, and since it's nullable, meal plan entries may exist without an associated product."
mp_meal_plans_details,retail_unit_quantity,float,YES,,,0,,,,12.0,,"The retail_unit_quantity column in mp_meal_plans_details stores the quantity of ingredients or meal components measured in retail units (such as packages, containers, or standard retail measurements) as a decimal number. This column can be used in SQL queries to calculate ingredient amounts, costs, or to track retail packaging requirements for meal plans, and can contain NULL values when the retail unit quantity is not applicable or unknown."
multiplier_comments,multiplier_comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The multiplier_comment_id column serves as the primary key for the multiplier_comments table, uniquely identifying each comment or note record. When writing SQL queries, use this column for precise record selection, joining with other tables, or maintaining referential integrity, but note that since it's an auto-incrementing identifier, you typically won't need to specify it when inserting new comments."
multiplier_comments,bonus_multiplier_id,int,NO,MUL,,,bonus_multipliers,bonus_multiplier_id,,10.0,0.0,"The bonus_multiplier_id column in the multiplier_comments table serves as a foreign key that links each comment to its corresponding record in the bonus_multipliers table. This required integer field enables queries to join comment data with bonus multiplier information, making it essential for retrieving the full context of multiplier-related notes and documentation."
multiplier_comments,comment,text,YES,,,,,,65535.0,,,"The 'comment' column in the multiplier_comments table stores free-form text notes and explanations about specific bonus multipliers. When writing SQL queries, this column can be used to search for or retrieve detailed commentary about multipliers, and since it's nullable, queries should account for possible NULL values when filtering or displaying comment data."
multiplier_comments,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the multiplier_comments table is a required integer field that stores the user ID of the person who created the comment or note. This column helps track authorship and accountability for each multiplier comment entry, and can be used to join with a users table to get additional information about who wrote specific comments."
multiplier_comments,created_at,datetime,NO,,,,,,,,,"The created_at column in the multiplier_comments table records the exact date and time when each comment or note about a bonus multiplier was initially created. This non-nullable datetime field is useful for tracking the chronological history of comments and can be used in SQL queries for filtering, sorting, or analyzing when feedback about multipliers was added to the system."
multiplier_reasons,multiplier_reason_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The multiplier_reason_id column serves as the primary key in the multiplier_reasons table, uniquely identifying each predefined reason for applying bonus multipliers. This integer field is non-nullable and is commonly used in JOIN operations with the bonus_multipliers table to establish the relationship between multipliers and their corresponding justifications."
multiplier_reasons,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the multiplier_reasons table stores descriptive text labels (up to 255 characters) that explain why a particular bonus multiplier is applied, such as ""Holiday Pay"" or ""Performance Incentive."" When writing queries, this column is useful for human-readable filtering or reporting of bonus multiplier reasons, and since it's nullable, some multiplier reasons may not have a name assigned."
multiplier_reasons,name_en,varchar(255),YES,,,,,,255.0,,,"The name_en column in the multiplier_reasons table stores the English-language description or name of a bonus multiplier reason, with a maximum length of 255 characters. This column helps provide human-readable explanations for why specific bonus multipliers are applied, making it useful in SELECT queries where you need to display or filter by the English description of multiplier reasons."
newsletter_confirmation_link,newsletter_confirmation_link_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The newsletter_confirmation_link_id is the primary key column that uniquely identifies each confirmation link record in the newsletter_confirmation_link table. When writing SQL queries, use this column for joining with related tables or when you need to look up specific confirmation link records, such as ""WHERE newsletter_confirmation_link_id = [value]""."
newsletter_confirmation_link,email,varchar(255),YES,,,,,,255.0,,,"The 'email' column in the newsletter_confirmation_link table stores the email address of users who have requested to subscribe to newsletters, accepting addresses up to 255 characters in length. Since this column is nullable, it can accommodate scenarios where an email address might not be immediately available or recorded, though typically it would contain the destination email address where the confirmation link was sent."
newsletter_confirmation_link,link,varchar(255),YES,MUL,,,,,255.0,,,"The 'link' column in the newsletter_confirmation_link table stores the unique verification URLs sent to users for confirming their newsletter subscriptions, with a maximum length of 255 characters. This column is indexed (MUL) to optimize queries that search for specific confirmation links, and it can be NULL if a link hasn't been generated yet or has been invalidated."
newsletter_confirmation_link,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the newsletter_confirmation_link table records the timestamp when each confirmation link was initially generated, automatically set to the current time when a new record is created. This datetime field is useful for tracking when verification links were sent and can be used in queries to identify stale or expired confirmation links, making it valuable for maintenance tasks and analytics about the newsletter signup process."
newslettercorpo,id,int unsigned,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the newslettercorpo table, using an unsigned integer to uniquely identify each corporate newsletter subscription record. When writing SQL queries, this column can be used for precise record selection, joining with related tables (if needed in the future), and ensuring data integrity through its non-nullable constraint."
newslettercorpo,mail,varchar(100),NO,UNI,,,,,100.0,,,"The 'mail' column in the newslettercorpo table stores unique email addresses (up to 100 characters) for corporate newsletter subscribers, serving as a unique identifier for each subscription. Since it's marked as non-nullable and has a unique constraint (UNI), each email address must be provided and cannot be duplicated across records, making it ideal for WHERE clauses and JOIN conditions when querying subscriber information."
newslettercorpo,city,varchar(100),NO,,,,,,100.0,,,"The 'city' column in the newslettercorpo table stores the city name (up to 100 characters) where each corporate newsletter subscriber is located, and it is a required field (NOT NULL). When querying this column, you can use it to filter or group corporate subscribers by their geographical location, such as ""SELECT * FROM newslettercorpo WHERE city = 'New York'"" or ""GROUP BY city"" for location-based analysis."
newslettercorpo,vocation,varchar(100),NO,,,,,,100.0,,,"The ""vocation"" column in the newslettercorpo table stores the professional role or job title of corporate newsletter subscribers as a text string up to 100 characters long. This required field (non-nullable) can be used in SQL queries to filter or group newsletter subscribers by their professional positions, making it useful for targeting content or analyzing subscriber demographics by job role."
newslettercorpo,language,varchar(5),NO,,,,,,5.0,,,"The 'language' column in the newslettercorpo table stores the preferred language code for corporate newsletter recipients using a 5-character varchar format (e.g., 'en-US', 'fr-FR', 'de-DE'). This required field should be included in queries when filtering newsletter recipients by language preference or when ensuring proper language localization for newsletter distribution."
notification_messages,notification_messages_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The notification_messages_id column serves as the primary key identifier for each unique notification message template in the notification_messages table. This integer field is non-nullable and is commonly used in JOIN operations with related tables like email_recipients, notification_messages_lang, and user_notification_message_queue to establish relationships between message templates and their associated delivery and translation data."
notification_messages,start_date,datetime,YES,MUL,,,,,,,,"The start_date column in the notification_messages table indicates when a notification message template becomes active or valid for use in system communications. This datetime field helps control the scheduling and timing of notifications, allowing the system to determine which message templates are currently applicable based on their activation date, and can be used in queries to filter or select messages that should be active at a specific point in time."
notification_messages,end_date,datetime,YES,MUL,,,,,,,,"The end_date column in the notification_messages table specifies when a notification message template becomes inactive or expires in the system. This datetime field can be used to filter active message templates by checking if end_date is NULL (for never-expiring messages) or greater than the current date, making it useful in queries that need to retrieve only currently valid notification templates."
notification_messages,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in the notification_messages table is a required tinyint field that indicates the current state of a notification message template (e.g., active, inactive, draft). When writing SQL queries, this column can be used to filter message templates based on their operational status, ensuring only appropriate templates are selected for message generation and delivery."
notification_messages,unique_clicks,int,NO,,,0,,,,10.0,0.0,The unique_clicks column in the notification_messages table tracks the number of distinct users who have clicked on links within a notification message. This non-nullable integer field starts at 0 and can be used to measure engagement rates or analyze the effectiveness of different message templates in driving user interactions.
notification_messages,total_clicks,int,NO,,,0,,,,10.0,0.0,"The total_clicks column in the notification_messages table tracks the number of times recipients have clicked on links or interactions within a notification message. This non-nullable integer field starts at 0 and serves as a metric for measuring engagement with notification content, which can be useful for analyzing the effectiveness of different message templates and communication strategies."
notification_messages,desktop_collapsed_message,varchar(125),YES,,,,,,125.0,,,"The desktop_collapsed_message column stores a condensed version of notification messages (up to 125 characters) that appears in collapsed or minimized desktop notification views. This optional field allows for a shorter, more concise preview of the full notification content, making it ideal for desktop notifications, toast messages, or other space-constrained UI elements."
notification_messages,mobile_collapsed_message,varchar(30),YES,,,,,,30.0,,,"The mobile_collapsed_message column stores a shortened version (maximum 30 characters) of notification messages specifically formatted for mobile device displays or push notifications. This optional field allows for a more concise presentation of the message when full content isn't suitable for mobile viewing, such as in notification centers or preview screens."
notification_messages,content,text,YES,,,,,,65535.0,,,"The 'content' column in the notification_messages table stores the main body text of notification message templates, which can include placeholders for dynamic content and formatting. This text field allows for storing lengthy message content and can be NULL when the actual content is managed through language-specific entries in the notification_messages_lang table."
notification_messages,title,varchar(35),YES,,,,,,35.0,,,"The 'title' column in the notification_messages table stores a brief, descriptive heading or subject line for each notification message template, limited to 35 characters. This optional field helps identify and categorize different notification templates, making it useful in SELECT queries when you need to find or filter specific types of notification messages."
notification_messages,name,varchar(35),NO,,,,,,35.0,,,"The 'name' column in the notification_messages table stores a unique identifier or label (up to 35 characters) for each notification message template. This required field helps in referencing and organizing different types of system notifications, making it easier to locate and manage specific message templates within the system's communication framework."
notification_messages,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the notification_messages table records the timestamp when each notification message template was initially created in the system, automatically populated with CURRENT_TIMESTAMP. This timestamp field is mandatory (non-nullable) and can be useful for auditing, filtering, or sorting notification templates by their creation date."
notification_messages,icon,varchar(50),YES,,,,,,50.0,,,The 'icon' column in the notification_messages table stores the identifier or name of an icon (up to 50 characters) that can be displayed alongside the notification message in the user interface. This optional field (nullable) can be used to enhance the visual presentation of notifications by specifying icons that represent the message type or urgency level.
notification_messages,category,int,NO,,,,,,,10.0,0.0,"The 'category' column in the notification_messages table is a required integer field that classifies the type or purpose of notification message templates (e.g., 1 for system alerts, 2 for user notifications, etc.). This categorization helps in organizing and filtering different types of notification templates when querying or managing system communications."
notification_messages,email_recipients_id,int,NO,MUL,,,email_recipients,email_recipients_id,,10.0,0.0,"The email_recipients_id column in the notification_messages table is a required foreign key that links each notification message template to its corresponding recipient information in the email_recipients table. This column is used to establish the relationship between message templates and their intended recipients, making it essential for JOIN operations when querying recipient details or tracking message delivery status."
notification_messages_lang,notification_messages_lang_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The notification_messages_lang_id is the primary key column that uniquely identifies each translated notification message record in the notification_messages_lang table. When writing SQL queries, use this column for precise record selection, joining with related tables, or ensuring unique identification of language-specific notification message entries."
notification_messages_lang,notification_messages_id,int,NO,MUL,,,notification_messages,notification_messages_id,,10.0,0.0,The notification_messages_id column serves as a foreign key that links translated message entries to their corresponding base notification template in the notification_messages table. This integer column is required (non-nullable) and is indexed (MUL) to optimize join operations when retrieving language-specific versions of notification messages.
notification_messages_lang,l_desktop_collapsed_message,varchar(125),YES,,,,,,125.0,,,"The l_desktop_collapsed_message column stores the condensed version of notification messages specifically formatted for desktop display when in a collapsed state, with a maximum length of 125 characters. This column allows for language-specific variations of the shortened notification text, supporting scenarios where notifications need to be displayed in a space-efficient manner while maintaining proper localization for different languages."
notification_messages_lang,l_mobile_collapsed_message,varchar(30),YES,,,,,,30.0,,,"The l_mobile_collapsed_message column stores a shortened version of notification messages specifically formatted for mobile device displays, limited to 30 characters. This column is optional (nullable) and is typically used when the full notification message needs to be condensed for mobile notifications, making it useful in queries where you need to retrieve mobile-friendly versions of notification content in different languages."
notification_messages_lang,content,text,YES,,,,,,65535.0,,,"The 'content' column in the notification_messages_lang table stores the actual translated text of notification messages in different languages. When writing SQL queries, this column should be used to retrieve or update the language-specific message content, and since it's nullable, queries should handle potential NULL values appropriately when working with message translations."
notification_messages_lang,l_title,varchar(35),YES,,,,,,35.0,,,"The `l_title` column in the notification_messages_lang table stores the translated titles of notification messages, with a maximum length of 35 characters. This column can be used to retrieve or filter language-specific notification titles, and since it's nullable, some notification translations might not have a title specified."
notification_messages_lang,l_name,varchar(35),NO,,,,,,35.0,,,"The `l_name` column in the notification_messages_lang table stores the language name or code (up to 35 characters) for each translated notification message, and it's a required field that cannot be null. This column helps identify which language version a particular translation represents, making it essential for filtering and retrieving language-specific notification content in multi-language queries."
notification_messages_lang,lang_id,varchar(2),NO,,,en,,,2.0,,,"The `lang_id` column in the notification_messages_lang table stores two-character language codes (e.g., 'en' for English) that identify the language of each translated notification message. This required field is essential for filtering and retrieving language-specific notification content, and should be used in WHERE clauses when querying for messages in a particular language."
notification_settings,notification_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The notification_id column serves as the primary key in the notification_settings table, uniquely identifying each notification preference record. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to update or delete specific notification settings (e.g., WHERE notification_id = X)."
notification_settings,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the notification_settings table serves as a foreign key that links each notification preference record to a specific user in the system. This column is indexed (MUL) for efficient lookups and is required (non-nullable), ensuring that every notification setting must be associated with a valid user."
notification_settings,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the notification_settings table is a required integer field that specifies the category or kind of notification preference being stored (e.g., 1 for email notifications, 2 for push notifications, etc.). When querying this column, you can use it to filter or group notification preferences by their type, making it useful for retrieving specific categories of notification settings for users."
oncall_calendar,pk,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'pk' column serves as the primary key identifier for each unique on-call schedule entry in the oncall_calendar table, using an integer data type. This non-nullable field is essential for uniquely identifying and referencing specific on-call assignments when writing queries that join with other tables or filter on-call schedule records."
oncall_calendar,on_call_user,int,NO,MUL,,,users,user_id,,10.0,0.0,"The on_call_user column in the oncall_calendar table is a required integer field that serves as a foreign key reference to the user_id in the users table, identifying which user is assigned to a specific on-call shift. When writing queries, this column can be used to join with the users table to retrieve details about the assigned on-call person or to filter/group on-call schedules by specific users."
oncall_calendar,date,date,NO,,,,,,,,,"The 'date' column in the oncall_calendar table represents the specific calendar date for an on-call assignment, stored in a standard date format (YYYY-MM-DD). This column is required (non-nullable) and is essential for querying and filtering on-call schedules by specific dates or date ranges, making it useful in queries like ""SELECT * FROM oncall_calendar WHERE date BETWEEN '2023-01-01' AND '2023-01-31'""."
op_records,ACCOUNT,varchar(15),NO,,,,,,15.0,,,"The ACCOUNT column in the op_records table is a required (non-nullable) varchar field that stores user account identifiers with a maximum length of 15 characters. When querying operational records, this column can be used to filter or group activities by specific user accounts, making it essential for user-specific auditing and activity tracking."
op_records,ACCOUNT_NAME,varchar(30),NO,,,,,,30.0,,,"The ACCOUNT_NAME column in the op_records table stores the username or account identifier (up to 30 characters) associated with each operational record or transaction. This required field (non-nullable) is essential for tracking which user or account was responsible for each system activity, making it a crucial component for audit trails and accountability tracking."
op_records,AMOUNT,float,NO,,,,,,,12.0,,"The AMOUNT column in the op_records table stores numerical values with decimal precision, representing the monetary value or quantity associated with each operational record or transaction. As a non-nullable float field, it must always contain a value, making it essential for tracking the magnitude of each operation or transaction in the system."
op_records,AUTH_CODE,varchar(10),NO,,,,,,10.0,,,"The AUTH_CODE column in the op_records table stores a 10-character authorization code that is required for each system operation or transaction. This mandatory field (non-nullable) likely serves as a validation or authentication reference, helping to verify the legitimacy of each recorded operation and enabling audit trail tracking."
op_records,AVS,varchar(2),NO,,,,,,2.0,,,"The AVS column in the op_records table is a required 2-character varchar field that likely stores Address Verification System (AVS) response codes for transaction processing. When querying this column, you should expect standardized 2-character codes that indicate the result of address verification checks, which are commonly used in payment processing and fraud prevention systems."
op_records,BRAND,varchar(5),NO,,,,,,5.0,,,"The BRAND column in the op_records table is a required 5-character varchar field that identifies the brand associated with each operational record or transaction. When querying this column, you should use string comparisons and be aware that it's a non-nullable field, meaning every record must have a brand value assigned."
op_records,CARD_ENDING,varchar(6),NO,,,,,,6.0,,,"The CARD_ENDING column in the op_records table stores the last few digits (up to 6 characters) of a payment card number, commonly used for card identification while maintaining security by not storing the full number. When querying transaction logs, this column can be used to filter or identify operations related to specific cards, typically using exact matches (e.g., WHERE CARD_ENDING = '1234')."
op_records,CVD,varchar(5),NO,,,,,,5.0,,,"The CVD column in the op_records table is a required 5-character varchar field that likely stores a standardized code or identifier related to operational activities or transactions. When querying this column, use exact string matching (no wildcards needed unless specifically searching for partial matches) and ensure values are properly formatted as text strings, for example: WHERE CVD = 'A1234'."
op_records,FIRST_NAME,varchar(200),NO,,,,,,200.0,,,"The FIRST_NAME column in the op_records table stores the first name of the individual associated with each operational record or transaction, with a maximum length of 200 characters. This required field (non-nullable) can be used in SQL queries to filter, group, or identify operations by the first name of the person who performed or was affected by the action."
op_records,LAST_NAME,varchar(200),NO,,,,,,200.0,,,"The LAST_NAME column in the op_records table stores the surname or family name of individuals associated with system operations, with a maximum length of 200 characters. This required field (non-nullable) can be used in SQL queries to filter, group, or join operation records based on the last name of the person who performed or was involved in the operation."
op_records,MERCHANT_TRANS_ID,varchar(100),NO,,,,,,100.0,,,"The MERCHANT_TRANS_ID column in the op_records table stores unique transaction identifiers assigned by merchants, with a maximum length of 100 characters. This required field (non-nullable) can be used to track and query specific transactions or operations by their merchant-assigned reference numbers, making it useful for matching transactions with merchant systems or investigating specific merchant-related operations."
op_records,OPTION_CODE,varchar(10),NO,,,,,,10.0,,,"The OPTION_CODE column in the op_records table is a required varchar(10) field that stores standardized codes representing specific types of operations or actions performed in the system. When querying this column, you can use it to filter or group operational records by their action type, making it useful for analyzing patterns in system activities or generating reports about specific operation types."
op_records,DATE,datetime,NO,,,,,,,,,"The DATE column in the op_records table stores the timestamp when each operation or system activity occurred, using a datetime format that captures both the date and time of the event. This non-nullable field is essential for temporal tracking and auditing purposes, allowing queries to filter, sort, or analyze system activities based on when they happened."
op_records,TXN_ID,varchar(255),NO,,,,,,255.0,,,"The TXN_ID column in the op_records table stores unique transaction identifiers as text strings (up to 255 characters) and is required for every record. This column can be used to track and reference specific transactions or operations within the system, making it useful for filtering, joining, or retrieving specific operational records based on their transaction identifiers."
op_records,CONF_NO,int,NO,,,,,,,10.0,0.0,"The CONF_NO column in the op_records table is a required integer field that likely stores a confirmation or reference number for each operational record or transaction. This column can be used to uniquely identify or track specific operations, and since it's non-nullable, every record must have a confirmation number assigned."
op_records,ERROR_CODE,varchar(10),NO,,,,,,10.0,,,"The ERROR_CODE column in the op_records table is a required (non-nullable) field that stores standardized error codes as text strings up to 10 characters in length. This column is typically used to record any error conditions or status codes that occurred during system operations, making it useful for filtering and analyzing system issues in audit queries."
op_records,DUMMY,varchar(1),NO,,,,,,1.0,,,"The DUMMY column in the op_records table is a required single-character varchar field that likely serves as a placeholder or flag column. When writing SQL queries, this column can be safely ignored for most analytical purposes as it's typically used for technical implementation details rather than storing meaningful business data."
options,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column in the options table serves as the primary key, uniquely identifying each survey question option or choice. This integer field is essential for creating relationships with other tables like options_lang and response_options, and should be referenced when joining tables or filtering specific options."
options,question_id,int,NO,MUL,,,questions,id,,10.0,0.0,"The question_id column in the options table is a required foreign key that links each option/choice to its corresponding question in the questions table. This column is essential for querying and filtering options based on specific survey questions, and it's commonly used in JOIN operations to retrieve all available choices for a particular question."
options,option_text,text,NO,,,,,,65535.0,,,"The option_text column in the options table stores the default or base text content for each survey question choice or option. This required text field serves as the primary display text for an option before any language-specific translations (stored in options_lang) are applied, making it essential for queries that need to retrieve or filter the fundamental option content in surveys."
options,reason_id,int,YES,MUL,,,cancelation_reasons,id,,10.0,0.0,"The reason_id column in the options table is a foreign key that links to the cancelation_reasons table, identifying specific cancellation reasons associated with survey options. This column should be used in JOIN operations when you need to connect survey options with their corresponding cancellation reason details, and since it's nullable, some options may not have an associated cancellation reason."
options_lang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The l_id column serves as the primary key in the options_lang table, uniquely identifying each language-specific translation record. When writing SQL queries, use this column for precise record selection or when joining with other tables that reference specific translations, but note that for most content retrieval queries, you'll likely want to join with the option_id and language code rather than using l_id directly."
options_lang,option_id,int,YES,MUL,,,options,id,,10.0,0.0,"The option_id column in the options_lang table serves as a foreign key that links to the primary options table, establishing a relationship between base options and their translations. This column should be used in JOIN operations when combining option details with their language-specific translations, and can be referenced in WHERE clauses to filter for specific option translations."
options_lang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the options_lang table stores language identifiers (such as 'en', 'es', 'fr') as 10-character strings to specify which language each translation represents. This required field is essential for filtering and retrieving language-specific content, and it's commonly used in WHERE clauses when querying for translations in a specific language."
options_lang,l_text,varchar(500),NO,,,,,,500.0,,,"The l_text column in the options_lang table stores the translated text content (up to 500 characters) for system options and settings in different languages. This required field contains the actual localized text that will be displayed to users based on their language preference, making it a crucial component for implementing multilingual functionality in the system."
order_details,order_details_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The order_details_id column serves as the primary key for the order_details table, uniquely identifying each individual line item within an order. This non-nullable integer field is essential for referencing specific order items in queries and joins, particularly when tracking individual product purchases within a larger order transaction."
order_details,order_id,int,NO,MUL,,,,,,10.0,0.0,"The order_id column in the order_details table is a non-nullable integer field that serves as a foreign key, linking each line item to its parent order. This column is essential for grouping multiple items that belong to the same order and is commonly used in JOIN operations with the orders table to retrieve complete order information."
order_details,status,tinyint,YES,,,0,,,,3.0,0.0,"The 'status' column in the order_details table is a tinyint field that tracks the current state of individual order items using numerical codes (e.g., 0 might represent 'pending', 1 for 'shipped', etc.). When writing SQL queries, this column can be used to filter or group order items based on their processing status, and since it's nullable, you should consider handling NULL values appropriately in your conditions."
order_details,product_id,int,YES,MUL,,,,,,10.0,0.0,"The product_id column in the order_details table is an integer field that serves as a foreign key reference to identify which specific product was purchased in each order line item. This column can be used to join with a products table to retrieve detailed product information, and since it's nullable, it allows for scenarios where a product reference might not be available or applicable."
order_details,qa_qty,int,YES,,,0,,,,10.0,0.0,"The qa_qty column in the order_details table represents the quantity of items that have passed quality assurance checks for a specific order line item. This optional integer field can be used to track and compare the number of items that met quality standards against the total ordered quantity, making it useful in queries analyzing quality control metrics or calculating acceptance rates."
order_details,refunded_qty,float,YES,,,0,,,,12.0,,"The `refunded_qty` column in the order_details table tracks the quantity of items that have been refunded from an order, stored as a floating-point number to accommodate partial refunds. This column can be used in SQL queries to calculate net sales quantities (by subtracting refunded_qty from original quantities) or to analyze refund patterns, and since it's nullable, a NULL value typically indicates no refunds have been processed for that order item."
order_details,refunded_reason,int,YES,,,0,,,,10.0,0.0,"The refunded_reason column in the order_details table is an optional integer field that stores standardized codes indicating why an item was refunded, if applicable. When writing queries, this column can be used to filter or analyze refunded items, where NULL values indicate no refund has occurred, and specific integer values correspond to different refund justifications (e.g., damaged product, wrong size, etc.)."
order_details,substituted_product_id,int,YES,,,,,,,10.0,0.0,"The substituted_product_id column in the order_details table represents the identifier of a replacement product that was used when the originally ordered item was unavailable. When writing queries, this column can be null (indicating no substitution was made) or contain an integer value referencing an alternative product that was actually delivered, making it useful for tracking order fulfillment modifications and product substitutions."
order_details,product_details,text,YES,,,,,,65535.0,,,"The `product_details` column in the `order_details` table stores text-based information about specific product characteristics and specifications for each ordered item. This column can be used to query or filter orders based on product-specific attributes, and since it's nullable, some records may not contain product details."
order_details,default_retail_price_per_unit,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The default_retail_price_per_unit column in the order_details table stores the standard retail price per unit of an ordered item, formatted as a decimal number with up to 5 total digits and 2 decimal places (e.g., 999.99). This non-nullable field represents the base price before any discounts or modifications and can be used in calculations to determine total order values or to compare against actual selling prices."
order_details,default_weight_per_unit,int,NO,,,0,,,,10.0,0.0,"The default_weight_per_unit column in the order_details table represents the standard weight of a single unit of the ordered item, stored as an integer value (likely in a standard weight unit like grams). This non-nullable field is essential for shipping calculations and inventory management, and can be used in queries to calculate total order weights or for weight-based pricing calculations."
order_details,defined_retail_price_per_unit_for_default_weight,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The defined_retail_price_per_unit_for_default_weight column in the order_details table stores the standard retail price per unit for items with a default weight, represented as a decimal number with up to 5 total digits and 2 decimal places (e.g., 999.99). This non-nullable field is essential for price calculations and analysis in order line items, and can be used in SQL queries for price comparisons, revenue calculations, or filtering orders based on unit pricing."
order_details,paid_price_per_unit_for_default_weight,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The paid_price_per_unit_for_default_weight column in the order_details table stores the actual price paid per unit based on a standard weight measurement, represented as a decimal number with up to 5 total digits and 2 decimal places (e.g., 999.99). This non-nullable field is essential for calculating the total cost of items in an order and can be used in SQL queries for price-based calculations, comparisons, or reporting, with a default value of 0.00 if not explicitly specified."
order_details,national_tax_amount_per_unit_for_default_weight,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The national_tax_amount_per_unit_for_default_weight column in the order_details table stores the standard tax amount applied per unit of a product at its default weight, represented as a decimal number with up to 5 total digits and 2 decimal places. This non-nullable field is essential for tax calculations on order items and defaults to 0.00 if no specific tax amount is applicable."
order_details,provincial_tax_amount_per_unit_for_default_weight,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"This column stores the per-unit provincial tax amount that applies to each order item, calculated based on a default weight measurement, with values stored as decimal numbers up to 5 digits total and 2 decimal places (e.g., 123.45). When querying this field, you can use it to calculate total provincial tax amounts by multiplying it with the quantity ordered, or to compare tax rates across different order items, noting that it never contains NULL values and defaults to 0.00."
order_details,purchase_price_per_unit,"decimal(10,6)",NO,,,0.000000,,,,10.0,6.0,"The purchase_price_per_unit column in the order_details table stores the exact price paid per individual unit of a product at the time of purchase, with precision up to 6 decimal places. This non-nullable decimal field is essential for accurate price calculations and historical price tracking, and can be used in SQL queries to calculate total order values or analyze pricing patterns over time."
order_details,real_weight,int,NO,,,0,,,,10.0,0.0,"The real_weight column in the order_details table stores the actual measured weight of an ordered item as a non-null integer value. This column is essential for tracking the precise weight of products in orders, which can be used for shipping calculations, inventory management, or verifying that the delivered product matches the expected specifications."
order_details,refund_comment,varchar(500),YES,,,,,,500.0,,,"The refund_comment column in the order_details table stores optional text explanations (up to 500 characters) related to refunds or return requests for specific order items. This free-text field can be used in SQL queries to search for or analyze refund reasons, though it may contain NULL values when no refund has been requested or when no comment was provided."
order_details,paid_price_for_real_weight,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The `paid_price_for_real_weight` column in the `order_details` table stores the actual price paid for items that are sold by weight, with values stored as decimal numbers supporting up to 5 total digits and 2 decimal places (e.g., 999.99). This column is required (non-nullable) with a default value of 0.00, and should be used in SQL queries when calculating the final cost of weight-based items or analyzing pricing for products sold by weight."
order_details,national_tax_amount_for_real_weight,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The national_tax_amount_for_real_weight column in the order_details table stores the calculated national tax amount based on the actual weight of the ordered item, represented as a decimal number with up to 5 total digits and 2 decimal places (e.g., 999.99). This non-nullable field is essential for tax calculations and reporting purposes, with a default value of 0.00 if no specific tax amount is applicable."
order_details,provincial_tax_amount_for_real_weight,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The provincial_tax_amount_for_real_weight column in the order_details table stores the calculated provincial tax amount based on the actual weight of the ordered item, represented as a decimal number with up to 5 total digits and 2 decimal places. This non-nullable field defaults to 0.00 and can be used in SQL queries for tax calculations, reporting, or when analyzing tax implications of weight-based products in orders."
order_details,picked_from_lot_id,int,NO,MUL,,0,,,,10.0,0.0,"The picked_from_lot_id column in the order_details table is a required integer field that references the specific inventory lot from which a product was picked to fulfill an order. This column is indexed (MUL) to optimize queries that need to track or analyze which inventory lots were used for order fulfillment, making it efficient to join with related inventory lot tables or filter orders based on lot information."
order_details,recipe_id,int unsigned,YES,,,,,,,10.0,0.0,"The recipe_id column in the order_details table is an optional reference to a specific recipe associated with an ordered item, stored as a positive integer. This column helps track which recipe was used or requested for particular order items, enabling the system to link ordered items with their corresponding recipe specifications and preparation instructions."
order_details,consigne_amount,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The consigne_amount column in the order_details table represents the deposit or returnable container fee associated with each ordered item, stored as a decimal number with two decimal places. This value is required (non-nullable) and defaults to 0.00, making it useful for tracking refundable amounts in queries where deposit-based items need to be monitored or calculated."
order_details,temp_bundle_id,int,YES,,,,,,,10.0,0.0,"The temp_bundle_id column in the order_details table is an optional integer field that likely identifies temporary groupings or bundles of items within an order. When writing queries, this column can be used to group related items together or filter for specific bundle configurations, though its nullable nature suggests not all order items are necessarily part of a bundle."
order_details,refund_attachment,varchar(255),YES,,,,,,255.0,,,"The refund_attachment column in the order_details table stores file paths or URLs (as text up to 255 characters) that link to supporting documentation for refund requests associated with specific order items. This optional field (nullable) can be used to track and reference digital attachments such as photos, receipts, or other evidence submitted during refund processes, making it useful in queries that need to audit or process refund-related documentation."
order_details_prepopulated,order_details_prepopulated_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The order_details_prepopulated_id column serves as the primary key for the order_details_prepopulated table, uniquely identifying each pre-filled order detail record. When writing SQL queries, use this column for precise record selection or joins, though note that this table is designed for standalone use rather than active relationships with other tables."
order_details_prepopulated,order_details_prepopulated_order_details_id,int,NO,MUL,,,,,,10.0,0.0,"This column serves as a non-unique indexed identifier (MUL) for pre-populated order details records, storing integer values that cannot be null. When querying the order_details_prepopulated table, use this column to filter, join, or group order details records, keeping in mind that multiple rows may share the same value due to its non-unique nature."
order_details_prepopulated,order_details_prepopulated_order_id,int,NO,MUL,,,,,,10.0,0.0,"The order_details_prepopulated_order_id column is a non-nullable integer field that serves as a secondary index (MUL) in the order_details_prepopulated table, used to identify and reference specific pre-filled orders. When querying this table, you can use this column to filter, join, or group pre-populated order details, though it's important to note that while indexed, it's not a primary key and may contain duplicate values."
order_details_prepopulated,order_details_prepopulated_product_id,int,NO,MUL,,,,,,10.0,0.0,"The order_details_prepopulated_product_id column is a required integer field that serves as a reference to product identifiers within pre-filled order details. When writing queries, this column can be used to filter or join pre-populated order details based on specific product IDs, though it's important to note that while it's indexed (MUL), it's designed for demonstration purposes and may not have active foreign key relationships."
order_details_prepopulated,order_details_prepopulated_defined_price_per_unit,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The order_details_prepopulated_defined_price_per_unit column stores the pre-defined unit price for items in test or template orders, with values stored as decimal numbers allowing up to 5 total digits and 2 decimal places (e.g., 999.99). When querying this column, you can rely on it always having a value (non-nullable) with a default of 0.00, making it suitable for price calculations and comparisons in test scenarios."
order_details_prepopulated,order_details_prepopulated_from_algo,tinyint,NO,,,0,,,,3.0,0.0,"This boolean-like column (tinyint) indicates whether the order details record was automatically generated by an algorithm (1) or manually entered (0), and cannot be null. When querying this table, you can use this column to filter or segment order details based on their creation method, for example: ""WHERE order_details_prepopulated_from_algo = 1"" to find algorithmically generated records."
order_details_prepopulated,order_details_prepopulated_created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The order_details_prepopulated_created_at column is a non-nullable datetime field that automatically records when each record was created in the order_details_prepopulated table, using the current timestamp as the default value. When querying this column, it can be used for temporal filtering or sorting of pre-filled order details, such as finding records created within specific date ranges or ordering results chronologically."
order_details_prod_rec,order_details_id,int,NO,PRI,,0,,,,10.0,0.0,"The order_details_id column serves as the primary key in the order_details_prod_rec table, uniquely identifying each order detail and product recommendation record. This non-nullable integer field is essential for joining with other tables and should be referenced when querying specific order details or their associated recommendations."
order_details_prod_rec,from_algo,tinyint,NO,,,0,,,,3.0,0.0,"The `from_algo` column in the `order_details_prod_rec` table is a required boolean-like field (tinyint) that indicates whether a product recommendation was generated by an algorithm (1) or came from another source (0). When querying this table, you can use this column to filter or segment recommendations based on their algorithmic origin, making it useful for analyzing the effectiveness of automated recommendation systems versus other recommendation methods."
order_gift_receivers,gift_receiver_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The gift_receiver_id column serves as the primary key in the order_gift_receivers table, uniquely identifying each gift recipient record. This non-nullable integer field is essential for joining with other tables and tracking distinct gift recipients across the system."
order_gift_receivers,user_id,int,YES,,,,,,,10.0,0.0,"The user_id column in the order_gift_receivers table represents the customer ID of the person who will receive the gift order, though it can be null if the recipient isn't a registered user of the system. When querying gift order data, this column can be joined with the users table to retrieve additional information about registered gift recipients, but queries should handle null values appropriately since not all gift recipients are registered users."
order_gift_receivers,lang,varchar(10),YES,,,,,,10.0,,,"The 'lang' column in the order_gift_receivers table stores the preferred language code (up to 10 characters) for communicating with the gift recipient, which can be useful for generating localized gift messages or delivery notifications. This column is optional (nullable) and typically contains standard language codes like 'en', 'es', or 'fr' to indicate the recipient's language preference."
order_gift_receivers,first_name,varchar(255),YES,,,,,,255.0,,,"The first_name column in the order_gift_receivers table stores the given name of people who are designated to receive gifts from orders. When writing queries involving gift recipients, you can use this column to filter or display the recipient's first name, keeping in mind that it can be null in cases where the gift recipient's first name wasn't provided."
order_gift_receivers,last_name,varchar(255),YES,,,,,,255.0,,,"The last_name column in the order_gift_receivers table stores the surname of people who are designated to receive gifts from orders. When writing queries involving gift recipients, you can use this column to filter or sort by recipient last names, keeping in mind that the field may be null in cases where the last name wasn't provided."
order_gift_receivers,email,varchar(255),YES,,,,,,255.0,,,"The 'email' column in the order_gift_receivers table stores the email address of people who are designated to receive gifts from orders, with a maximum length of 255 characters. This optional field (as indicated by being nullable) can be used to send gift notifications or delivery updates to gift recipients, and should be queried using standard string comparison operators when filtering or joining email-related data."
order_gift_receivers,phone,varchar(255),YES,,,,,,255.0,,,"The 'phone' column in the order_gift_receivers table stores the contact phone number of gift recipients in text format (up to 255 characters) and can be left empty if not provided. When writing queries involving gift recipient contact information, this column can be used to filter or retrieve phone numbers of people who are designated to receive gifts from orders."
order_gift_receivers,comment,text,YES,,,,,,65535.0,,,"The 'comment' column in the order_gift_receivers table stores optional gift message text that customers can include with their gift orders to recipients. This free-form text field allows senders to write personal notes or gift messages that will be delivered along with the gift, and can be NULL if no message is provided."
order_gift_receivers,surprise,"enum('Yes','No')",YES,,,,,,3.0,,,The 'surprise' column in the order_gift_receivers table indicates whether the gift recipient should be notified about the order ('No') or if it should be kept as a surprise ('Yes'). This enum field helps control communication with gift recipients and can be used in queries to filter or segment orders based on whether they're meant to be surprise gifts.
order_prod_rec,order_id,int,NO,PRI,,0,,,,10.0,0.0,"The order_id column in the order_prod_rec table is a primary key integer field that uniquely identifies each order for which product recommendations were made. When writing SQL queries, this column can be used to join with other order-related tables and filter or group product recommendations by specific orders, making it essential for tracking and analyzing recommendation patterns per order."
order_prod_rec,from_algo,tinyint,NO,,,0,,,,3.0,0.0,"The `from_algo` column in the `order_prod_rec` table is a required boolean-like field (tinyint) that indicates whether a product recommendation was generated by an algorithm (1) or through other means (0). When querying this table, you can use this column to filter or segment recommendations based on their source, such as `WHERE from_algo = 1` to analyze only algorithm-generated recommendations."
order_prod_rec,product_id,int,NO,PRI,,0,,,,10.0,0.0,"The product_id column in the order_prod_rec table is a required integer field that serves as part of the primary key, uniquely identifying each recommended product. When querying this table, product_id can be used to join with other product-related tables or to filter specific product recommendations, making it essential for tracking which products were recommended in relation to customer orders."
orders,order_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The order_id column is the primary key in the orders table, serving as a unique identifier for each order record in the system. This non-nullable integer field is essential for joining with related tables and should be referenced when querying order-specific information or establishing relationships with connected entities like meal plans, companies, and delivery instances."
orders,subscription_id,int,NO,MUL,,,,,,10.0,0.0,"The subscription_id column in the orders table is a required integer field that links each order to its associated subscription plan, serving as a foreign key (indicated by the MUL key type). When querying orders data, this column can be used to join with a subscriptions table to access subscription-specific details or to filter/group orders based on their subscription relationships."
orders,status,tinyint,YES,MUL,,0,,,,3.0,0.0,"The `status` column in the orders table is a tinyint field that represents the current state of an order using numerical codes (e.g., 0 might represent 'pending', 1 for 'confirmed', etc.). As a multiple-index column (MUL), it's optimized for queries that filter or group orders by their status, making it efficient to retrieve orders in specific states or analyze order progression through the system."
orders,basket_design_id,int,NO,,,,,,,10.0,0.0,"The basket_design_id column in the orders table is a required integer field that specifies which basket design template was used for this order. When querying orders, this field can be used to analyze or filter orders based on their basket configuration, and since it's non-nullable, every order record will have an associated basket design."
orders,droppoint_id,int,NO,MUL,,,,,,10.0,0.0,"The droppoint_id column in the orders table is a required integer field that references the specific location where an order should be delivered. As a foreign key (indicated by MUL key type), it links each order to a designated delivery point, enabling queries to join with related location data and supporting delivery routing and logistics operations."
orders,drop_instance_id,int,YES,MUL,,,drop_instance,drop_instance_id,,10.0,0.0,"The drop_instance_id column in the orders table is a foreign key that links to a specific delivery or drop-off instance associated with an order. This nullable integer field helps track the delivery status and logistics of each order, allowing queries to connect order information with specific delivery events or routes."
orders,delivery_date,date,NO,MUL,,,,,,,,"The delivery_date column in the orders table stores the scheduled date when an order is to be delivered to the customer, stored in a standard date format (YYYY-MM-DD). This column is frequently used for filtering and grouping orders by delivery timeframes, and its indexed nature (MUL) makes it efficient for querying delivery schedules and analyzing order distribution across dates."
orders,number_box_needed,int,NO,,,,,,,10.0,0.0,"The number_box_needed column in the orders table is a required integer field that specifies the quantity of boxes required to fulfill an order. This column is essential for inventory management and delivery planning, helping determine the packaging requirements for each order in the system."
orders,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the orders table is a required integer field that serves as a foreign key to identify which user placed each order. This column is indexed (MUL) to optimize queries joining orders with user information, and its non-nullable nature ensures that every order must be associated with a valid user."
orders,discount,float,NO,,,,,,,12.0,,"The discount column in the orders table stores the percentage or decimal value representing any price reduction applied to an order, with a float data type allowing for precise decimal values. This non-nullable field is essential for calculating final order prices and can be used in SQL queries for financial reporting, discount analysis, or when computing the actual amount charged to customers (by multiplying the original price by (1 - discount))."
orders,default_basket_price,float,NO,,,0,,,,12.0,,"The default_basket_price column in the orders table stores the base price of an order's contents as a floating-point number, and cannot contain null values. This column is essential for price-related calculations and reporting, representing the initial cost of the order before any modifications, discounts, or additional charges are applied."
orders,previous_amount_due,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The previous_amount_due column in the orders table stores the outstanding balance from prior orders as a decimal number with up to 5 total digits and 2 decimal places, defaulting to 0.00 if no previous balance exists. This non-nullable field is essential for tracking customer payment history and can be used in SQL queries to calculate total amounts due, filter orders with outstanding balances, or analyze payment patterns over time."
orders,total_order_amount,float,NO,,,0,,,,12.0,,"The total_order_amount column in the orders table stores the final monetary value of each order as a floating-point number and cannot contain null values. This column is essential for financial calculations and reporting, representing the complete cost of an order including all items, fees, and adjustments."
orders,total_national_tax,float,YES,,,0,,,,12.0,,"The total_national_tax column in the orders table stores the calculated national tax amount for each order as a floating-point number, which can be null if no tax applies. When writing queries, this column can be used to analyze tax collections, calculate tax-inclusive totals, or filter orders based on tax thresholds, keeping in mind that null values should be handled appropriately in aggregations and comparisons."
orders,total_provincial_tax,float,YES,,,0,,,,12.0,,"The total_provincial_tax column in the orders table stores the provincial tax amount applied to each order as a floating-point number, which can be null if no provincial tax is applicable. When writing SQL queries, this column can be used to calculate tax-related metrics or filter orders based on tax amounts, and its nullable nature should be considered by using appropriate NULL handling functions (like COALESCE or IFNULL) when performing calculations."
orders,total_extracted_from_credits,float,NO,,,0,,,,12.0,,"The total_extracted_from_credits column in the orders table stores the monetary amount that was deducted from a customer's credit balance to pay for the order, represented as a floating-point number. This non-nullable field is essential for financial tracking and reconciliation, and should be included in queries when analyzing payment methods or calculating credit usage across orders."
orders,total_extracted_from_free_credits,float,NO,,,0,,,,12.0,,"The total_extracted_from_free_credits column in the orders table stores the monetary amount that was deducted from a customer's available free credits to pay for the order, represented as a floating-point number. When querying this column, you can use it to calculate how much of an order was paid using free credits versus other payment methods, and it must always contain a value (even if it's 0) since it's marked as non-nullable."
orders,total_extracted_from_direct_payment,float,NO,,,0,,,,12.0,,"The total_extracted_from_direct_payment column in the orders table stores the actual monetary amount that was successfully processed through direct payment methods for each order, represented as a floating-point number. This non-nullable field is essential for financial tracking and reconciliation purposes, and can be used in SQL queries to calculate revenue metrics or analyze payment processing outcomes."
orders,total_contribution_amount,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The total_contribution_amount column in the orders table stores the monetary contribution value for each order as a decimal number with up to 5 total digits and 2 decimal places (e.g., 999.99). This required field, which defaults to 0.00, represents the contribution portion of the order total and should be included in financial calculations and reporting queries where contribution analysis is needed."
orders,contributor_name,varchar(30),NO,,,,,,30.0,,,"The contributor_name column in the orders table stores the name of the individual (up to 30 characters) who is responsible for or associated with placing the order, and this field is required for every order record. When querying orders, you can use this column to filter or group orders by contributor, or join with other tables where contributor identification is needed, though note that since it's a varchar field, exact string matching should be used in comparisons."
orders,number_of_customization,int,NO,,,0,,,,10.0,0.0,"The number_of_customization column in the orders table is a required integer field that tracks how many modifications or special requests were made to an order. This column helps quantify order complexity and can be used in queries to analyze customization patterns or filter orders based on their modification count, with a default value of 0 indicating no customizations were made."
orders,coupon_id,int,YES,,,,,,,10.0,0.0,"The coupon_id column in the orders table is an optional integer field that references promotional discounts or coupons applied to an order. When writing queries, this column can be used to analyze discount usage patterns or filter orders with applied coupons (where coupon_id IS NOT NULL) versus full-price orders (where coupon_id IS NULL)."
orders,donated,tinyint,YES,,,0,,,,3.0,0.0,"The 'donated' column in the orders table is a boolean flag (stored as tinyint) that indicates whether an order was marked as a donation. When querying this column, use 1 to filter for donated orders and 0 for non-donated orders, with NULL values potentially representing orders where donation status hasn't been determined."
orders,qa_status,int,YES,,,0,,,,10.0,0.0,"The qa_status column in the orders table is an integer field that indicates the quality assurance status of an order, likely using different numeric values to represent various QA states (such as pending review, passed, or failed). When writing SQL queries, this column can be used to filter or group orders based on their quality assurance status, making it particularly useful for quality control reporting and monitoring order verification processes."
orders,qa_staff_id,int,YES,,,0,,,,10.0,0.0,"The qa_staff_id column in the orders table is an optional integer field that identifies which quality assurance staff member reviewed or processed the order. When writing queries involving QA-related analysis or filtering orders by QA staff assignments, you can reference this column, keeping in mind that NULL values are possible since not all orders may have undergone QA review."
orders,qa_timestamp,datetime,YES,,,,,,,,,"The qa_timestamp column in the orders table records the date and time when a quality assurance check was performed on an order, stored as a datetime value. This column can be used in SQL queries to filter, sort, or analyze orders based on their QA inspection timing, though it may contain NULL values if an order hasn't undergone QA review yet."
orders,created,datetime,YES,,,,,,,,,"The 'created' column in the orders table stores the timestamp indicating when each order was initially created in the system, using a datetime format. This column is commonly used in SQL queries for tracking order chronology, analyzing order patterns over time, and can be particularly useful in WHERE clauses for filtering orders within specific date ranges or JOIN operations when temporal data correlation is needed."
orders,notify_order_created_status,int,YES,,,0,,,,10.0,0.0,"The notify_order_created_status column in the orders table is an integer flag that indicates whether notifications have been sent to relevant parties when an order is created. This optional field (nullable) likely uses different integer values to represent various notification states (e.g., 0 for not notified, 1 for notification sent, etc.), helping track the communication workflow for new orders in the system."
orders,notify_order_finalized_status,int,YES,,,0,,,,10.0,0.0,"The notify_order_finalized_status column in the orders table is an integer flag that indicates whether notifications have been sent regarding the finalization of an order. When writing queries, this column can be used to filter or check which orders have completed their notification process (typically non-null or non-zero values) versus those that still need notification processing (null or 0 values)."
orders,total_extracted_from_deposit,float,YES,,,0,,,,12.0,,"The total_extracted_from_deposit column in the orders table stores the floating-point value representing the amount deducted from a customer's deposit for a given order. This column is useful when writing queries that need to analyze deposit deductions, calculate refunds, or track financial transactions related to order deposits, and can be null when no deposit amount has been extracted."
orders,cancelation_reason_type,int,YES,,,,,,,10.0,0.0,"The cancelation_reason_type column in the orders table stores an integer value that categorizes the reason why an order was canceled, if applicable. This optional field (as indicated by being nullable) helps track and analyze order cancellation patterns, where different integer values likely correspond to specific predefined cancellation reasons (such as customer request, system error, or delivery issues)."
orders,type,int,NO,,,0,,,,10.0,0.0,"The 'type' column in the orders table is a required integer field that categorizes different types of orders in the system. When writing SQL queries, this column can be used to filter or group orders based on their classification, where different integer values represent distinct order types (though specific type mappings should be verified in the application documentation)."
orders,qa_reason,int,NO,,,0,,,,10.0,0.0,"The qa_reason column in the orders table is a required integer field that stores standardized codes representing quality assurance reasons or outcomes associated with an order. This field helps track and categorize quality control decisions or issues, with 0 appearing to be a default or baseline value, making it useful for filtering and analyzing orders based on their QA status."
orders,previous_droppoint_id,int,YES,,,,,,,10.0,0.0,"The previous_droppoint_id column in the orders table is an optional integer field that references the location where an order was last delivered or attempted to be delivered before its current status. This column is particularly useful when tracking multi-stop deliveries or analyzing delivery route history, allowing queries to trace the sequential path of an order through different delivery points."
orders,marketplace_preview_only,tinyint,NO,,,0,,,,3.0,0.0,"The marketplace_preview_only column in the orders table is a boolean flag (stored as a tinyint) that indicates whether an order is only for preview purposes in the marketplace interface. When writing queries, use this column with values 0 (false) or 1 (true) to filter between actual customer orders and preview/demonstration orders, which is particularly useful when generating business reports or processing real transactions."
orders,delivery_service_amount,float,YES,,,0,,,,12.0,,"The delivery_service_amount column in the orders table stores the floating-point value representing the delivery service fee charged for an order, with null values permitted when no delivery fee applies. This column can be used in SQL queries to calculate delivery-related costs, analyze service fees across different orders, or aggregate total delivery charges for reporting purposes."
orders,picked_up_at,datetime,YES,,,,,,,,,"The picked_up_at column in the orders table records the exact date and time when an order was picked up for delivery, serving as a crucial timestamp for tracking order fulfillment progress. When writing SQL queries, this nullable datetime field can be used to analyze pickup timing patterns, calculate delivery durations, or filter orders based on their pickup status (where NULL values indicate orders that haven't been picked up yet)."
orders,correct_stickers,int,YES,,,,,,,10.0,0.0,"The correct_stickers column in the orders table is an integer field that tracks the number of accurate or properly applied stickers on an order's packaging. This optional field (as indicated by being nullable) likely serves quality control purposes, allowing the system to monitor packaging accuracy and compliance with labeling requirements."
orders,basket_cleanliness,int,YES,,,,,,,10.0,0.0,"The basket_cleanliness column in the orders table is an optional integer field that likely represents a cleanliness rating or score for the basket/container used in the order. When writing queries, this column can be used to filter or analyze order quality metrics, but since it's nullable, always consider handling NULL values appropriately using COALESCE or IS NULL/IS NOT NULL conditions."
orders,customer_notified,tinyint,NO,,,0,,,,3.0,0.0,"The customer_notified column in the orders table is a binary flag (tinyint) that indicates whether a customer has been notified about their order status, where 0 typically represents no notification sent and 1 represents notification sent. This required field (non-nullable) can be used in SQL queries to filter or track orders based on their notification status, making it particularly useful for monitoring customer communication workflows and ensuring proper order status updates are communicated to customers."
orders,scheduled_delivery_time,timestamp,NO,,,0000-00-00 00:00:00,,,,,,"The scheduled_delivery_time column in the orders table stores the exact date and time when an order is scheduled to be delivered, using a timestamp format. This non-nullable field is essential for delivery scheduling and routing operations, and should be included in queries when analyzing delivery timing, scheduling patterns, or coordinating logistics."
orders,revised_delivery_time,timestamp,NO,,,0000-00-00 00:00:00,,,,,,"The revised_delivery_time column in the orders table stores the most up-to-date timestamp for when an order is scheduled to be delivered, which may differ from the original delivery time due to various operational adjustments. When querying this non-nullable timestamp field, you can use it for filtering orders by adjusted delivery windows or analyzing delivery schedule changes, with the default value being '0000-00-00 00:00:00' if no revision has been made."
orders,real_delivery_time,timestamp,NO,,,0000-00-00 00:00:00,,,,,,"The real_delivery_time column in the orders table records the actual timestamp when an order was delivered to its destination, stored with precision down to the second. This non-nullable timestamp field is essential for tracking delivery performance and completion times, with a default format of 'YYYY-MM-DD HH:MM:SS', and can be used in queries to analyze delivery timing, calculate delivery delays, or measure service level agreements."
orders,late_delivery_notification,int,YES,,,0,,,,10.0,0.0,"The late_delivery_notification column in the orders table is an integer flag that indicates whether a notification has been sent regarding a delayed delivery (typically 1 for sent, 0 for not sent). This column helps track communication status for delayed orders and can be used in queries to identify orders where late delivery notifications have been triggered or need to be sent."
orders,youarenext_delivery_notification,tinyint,NO,,,0,,,,3.0,0.0,"The youarenext_delivery_notification column is a binary flag (tinyint) in the orders table that indicates whether a ""you're next"" delivery notification has been sent to the customer. This required field (non-nullable) uses 0 to indicate no notification has been sent and 1 to indicate the notification has been sent, making it useful for filtering orders based on notification status or tracking delivery communication workflows."
orders,gift_receiver_id,int,YES,,,,,,,10.0,0.0,"The gift_receiver_id column in the orders table identifies the user who is the intended recipient when an order is purchased as a gift, storing their unique identifier as an integer value. When the order is not a gift purchase, this field remains NULL, making it an optional field that helps distinguish between regular orders and gift orders in the system."
orders,subscription_type,tinyint(1),YES,,,0,,,,3.0,0.0,"The subscription_type column in the orders table is a binary flag (tinyint(1)) that indicates whether an order is part of a subscription service or a one-time purchase. When writing queries, you can filter or group orders based on this column using values 0 (non-subscription) and 1 (subscription), and since it's nullable, you should handle NULL values appropriately when this information is not specified."
orders,charity_received,"decimal(10,2)",NO,MUL,,0.00,,,,10.0,2.0,"The charity_received column in the orders table tracks the monetary amount (in decimal format with 2 decimal places) that was allocated to charity from each order, defaulting to 0.00 if no charitable contribution was made. This indexed column is required (non-nullable) and can be useful in SQL queries for calculating total charitable contributions over time or filtering orders based on their charitable impact."
orders,donation_amount,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The donation_amount column in the orders table stores the optional monetary contribution associated with an order, represented as a decimal number with up to 10 digits total and 2 decimal places (e.g., 100.50). When querying this column, keep in mind that it can contain NULL values and typically defaults to 0.00, making it important to handle both cases appropriately in aggregations or comparisons."
orders,total_consigne_amount,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The total_consigne_amount column in the orders table stores the deposit amount (in decimal format with 2 decimal places) required for reusable containers or packaging associated with an order. This non-nullable field defaults to 0.00 and represents the total deposit value that customers must pay upfront and can reclaim upon returning the containers, making it essential for tracking deposit-based transactions in the order lifecycle."
orders,contains_alcohol,tinyint,NO,,,0,,,,3.0,0.0,"The contains_alcohol column in the orders table is a binary flag (tinyint) that indicates whether an order includes alcoholic beverages (1) or not (0), and this information cannot be null. This flag is crucial for enforcing age verification requirements and special handling procedures for alcohol-containing orders, making it an important field to include in queries related to delivery requirements and order processing rules."
orders,adult_toc_confirmed,datetime,YES,,,,,,,,,"The adult_toc_confirmed column in the orders table stores the timestamp when an adult confirmed the Terms and Conditions for an order, which is particularly relevant for age-restricted or legally sensitive transactions. This nullable datetime field can be used to verify when consent was obtained and to filter orders based on whether adult confirmation was received, making it useful for compliance reporting and order validation queries."
orders,company_id_associated,int,YES,MUL,,,companies,company_id,,10.0,0.0,"The company_id_associated column in the orders table is a foreign key that links each order to a specific company entity, allowing queries to establish relationships between orders and their associated business partners or corporate clients. This optional (nullable) integer field can be used in JOIN operations to retrieve company-specific information or to filter/group orders by company, making it particularly useful for analyzing order patterns and generating company-specific reports."
orders,checkout_banner_transaction_id,int,YES,,,,,,,10.0,0.0,The checkout_banner_transaction_id column in the orders table stores an integer identifier that links to transactions made through banner-based checkout processes. This optional field (as indicated by being nullable) can be used in SQL queries to track or analyze orders specifically initiated through banner-based promotional or marketing campaigns.
orders,additional_boxes,int,NO,,,0,,,,10.0,0.0,The additional_boxes column in the orders table is a required integer field that tracks the number of extra boxes or containers needed for an order beyond the standard packaging. This field defaults to 0 and helps in inventory management and packaging logistics by indicating when special accommodation is needed for larger or more complex orders.
orders,orders_order_prepopulation_method,"enum('Based on purchase history','Based on basket builder')",NO,MUL,,Based on basket builder,,,25.0,,,"The orders_order_prepopulation_method column in the orders table is an enumerated field that specifies how an order was initially populated, either through historical purchase data or using a basket builder tool. This column helps track the origin of order creation methods and can be used in SQL queries to analyze ordering patterns or filter orders based on their initialization approach, with 'Based on basket builder' being a common value."
orders,skip_reason_id,tinyint,YES,,,,,,,3.0,0.0,"The skip_reason_id column in the orders table is a nullable tinyint field that stores a reference code indicating why an order was skipped or canceled. When writing queries, this column can be used to filter or analyze orders based on their cancellation reasons, with NULL values typically representing orders that weren't skipped or canceled."
orders_auto_canceled_at_midnight,orders_auto_canceled_at_midnight_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The orders_auto_canceled_at_midnight_id is the primary key column that uniquely identifies each automatically canceled order record in the orders_auto_canceled_at_midnight table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific canceled order entries."
orders_auto_canceled_at_midnight,oid,int,YES,MUL,,,,,,10.0,0.0,"The ""oid"" column in the orders_auto_canceled_at_midnight table stores integer order identifiers for orders that were automatically canceled during nightly processing. As indicated by the MUL key type and nullable property, this column is likely a foreign key reference to a main orders table, allowing queries to join and trace back to the original order details."
orders_auto_canceled_at_midnight,ostatus,int,NO,,,,,,,10.0,0.0,"The ""ostatus"" column in the orders_auto_canceled_at_midnight table is a required integer field that represents the status code of the automatically canceled order. When querying this table, use this column to filter or group orders based on their specific cancellation status codes, which likely correspond to different reasons or conditions that triggered the automatic cancellation during the midnight process."
orders_auto_canceled_at_midnight,nb_products,int,NO,,,0,,,,10.0,0.0,"The nb_products column represents the number of products that were included in an automatically canceled order, stored as a non-nullable integer value. This column can be used in SQL queries to analyze the size of canceled orders or to filter/group canceled orders based on their product count, with values starting from 0."
orders_auto_canceled_at_midnight,nb_products_cummulative,int,NO,,,0,,,,10.0,0.0,"The nb_products_cummulative column represents the total number of products associated with an automatically canceled order at the time of cancellation. When querying this column, you can use it to analyze order sizes or aggregate product volumes across canceled orders, with values always being non-negative integers since it's a required field with a default of 0."
orders_cancelation_comments,orders_cancelation_comments_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The orders_cancelation_comments_id is the primary key column that uniquely identifies each cancellation comment record in the orders_cancelation_comments table. When writing SQL queries, use this column for joining with related tables or filtering specific cancellation comments, and note that it cannot contain NULL values."
orders_cancelation_comments,order_id,int,NO,,,,,,,10.0,0.0,"The order_id column in the orders_cancelation_comments table is a required integer field that identifies the specific order for which a cancellation comment was made. This column serves as a reference to connect cancellation feedback with its corresponding order, enabling queries to retrieve or analyze cancellation comments for particular orders."
orders_cancelation_comments,comment,text,NO,,,,,,65535.0,,,"The 'comment' column in the orders_cancelation_comments table stores the actual text feedback or explanation provided when an order is canceled, and it is required (non-nullable) for every cancellation record. When writing SQL queries, this column can be used to search for specific cancellation reasons or analyze common patterns in cancellation feedback using text search functions or LIKE operators."
orders_cancelation_comments,created,datetime,NO,,,,,,,,,"The 'created' column in the orders_cancelation_comments table records the exact date and time when a cancellation comment was submitted, using a datetime format. This non-nullable field is essential for tracking when feedback was provided and analyzing cancellation patterns over time."
orders_ignore_payment,order_id,int,NO,,,0,,,,10.0,0.0,"The order_id column in the orders_ignore_payment table serves as a reference identifier for specific orders that should be excluded from payment processing. When writing SQL queries involving payment calculations or financial operations, you should use this column to filter out these orders, typically by using NOT IN or LEFT JOIN exclusions with the order_id values from this table."
orders_ignore_payment,subscription_id,int,NO,,,,,,,10.0,0.0,"The subscription_id column in the orders_ignore_payment table is a required integer field that identifies the specific subscription associated with an order that should be excluded from payment processing. When writing queries involving payment calculations or processing, you should use this column to join with other subscription-related tables and filter out these excluded orders."
orders_ignore_payment,status,tinyint(1),YES,,,0,,,,3.0,0.0,"The ""status"" column in the orders_ignore_payment table is a boolean-like field (tinyint(1)) that likely indicates whether the payment exclusion is currently active (1) or inactive (0) for a given order. This column can be used in WHERE clauses to filter orders based on their exclusion status, and being nullable means the exclusion state can also be undefined."
orders_ignore_payment,basket_design_id,int,NO,,,,,,,10.0,0.0,"The basket_design_id column in the orders_ignore_payment table is a required integer field that links to the specific basket design associated with an excluded order. This column helps identify which particular basket design configurations should be skipped during payment processing, allowing for precise tracking of which design variations are part of the payment exclusion list."
orders_ignore_payment,droppoint_id,int,NO,,,,,,,10.0,0.0,"The droppoint_id column in the orders_ignore_payment table is a required integer field that identifies the specific delivery or collection location associated with an excluded order. When writing queries involving payment exclusions, this column can be used to filter or join with other tables containing droppoint information to analyze patterns of excluded orders at specific locations."
orders_ignore_payment,delivery_date,date,NO,,,,,,,,,"The delivery_date column in the orders_ignore_payment table stores the date when the order was or will be delivered, and is required for all records (non-nullable). When writing SQL queries involving payment exclusions, you can use this column to filter or analyze orders based on their delivery timeframes, such as finding excluded orders within specific date ranges or grouping payment exceptions by delivery period."
orders_ignore_payment,number_box_needed,int,NO,,,,,,,10.0,0.0,The `number_box_needed` column in the `orders_ignore_payment` table stores an integer value representing the quantity of boxes required for an order that has been marked for payment exclusion. This mandatory field (non-nullable) helps track packaging requirements even for orders that won't be included in payment processing.
orders_ignore_payment,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the orders_ignore_payment table is a required integer field that identifies which user's order should be excluded from payment processing. When writing queries involving payment calculations or processing, you should join with this table using user_id to filter out any orders that should be ignored."
orders_ignore_payment,discount,float,NO,,,,,,,12.0,,"The ""discount"" column in the orders_ignore_payment table stores the discount amount as a floating-point number and requires a value (non-nullable). When writing SQL queries, this column can be used to filter or calculate the discount values for orders that are excluded from payment processing, typically represented as decimal values (e.g., 0.15 for 15% discount)."
orders_ignore_payment,default_basket_price,float,NO,,,0,,,,12.0,,"The `default_basket_price` column stores the original or default price value of orders that are marked for exclusion from payment processing, represented as a floating-point number that cannot be null. When writing queries, this column can be used to reference the baseline price of excluded orders, which might be helpful for auditing or reconciliation purposes, and should be considered in calculations where you need to account for orders that should be ignored in payment processing."
orders_ignore_payment,total_order_amount,float,NO,,,0,,,,12.0,,"The total_order_amount column stores the monetary value of orders that should be excluded from payment processing, represented as a floating-point number that cannot be null. When writing queries, this column can be used to filter or analyze the financial impact of excluded orders, and since it's a required field, you don't need to handle null values in your calculations."
orders_ignore_payment,total_national_tax,float,YES,,,0,,,,12.0,,"The total_national_tax column stores the national tax amount as a floating-point number for orders that should be excluded from payment processing. This column can be used in SQL queries to analyze or filter excluded orders based on their national tax values, and being nullable means some orders might not have a tax amount recorded."
orders_ignore_payment,total_provincial_tax,float,YES,,,0,,,,12.0,,"The total_provincial_tax column stores the provincial tax amount as a floating-point number for orders that are excluded from payment processing. This column can be used in SQL queries to analyze or filter excluded orders based on their provincial tax values, with NULL values being permitted when the tax amount is not applicable or unknown."
orders_ignore_payment,total_extracted_from_credits,float,NO,,,0,,,,12.0,,"The total_extracted_from_credits column stores the monetary amount that was taken from customer credits for an order that should be excluded from payment processing. This non-nullable float column must always have a value, with a default of 0, and represents the portion of the order total that was covered by credit usage rather than direct payment."
orders_ignore_payment,total_extracted_from_free_credits,float,NO,,,0,,,,12.0,,"This column stores the monetary amount that was covered by free credits or promotional balances for orders that are excluded from payment processing. When writing SQL queries involving payment calculations, you can use this column to identify how much of an order's total was paid using free credits rather than actual money."
orders_ignore_payment,total_extracted_from_direct_payment,float,NO,,,0,,,,12.0,,"The `total_extracted_from_direct_payment` column stores the numerical value (as a float) representing the amount that was removed or excluded from direct payment processing for a specific order. When writing SQL queries involving payment calculations, this column should be used to subtract or account for amounts that have been deliberately excluded from payment processing, and since it's non-nullable, you can rely on it always having a value (defaulting to 0 when no amount was extracted)."
orders_ignore_payment,number_of_customization,int,NO,,,0,,,,10.0,0.0,"The number_of_customization column is a required integer field that tracks how many customizations were made to an order that's being excluded from payment processing. This column can be used in SQL queries to filter or analyze orders based on their customization count, with a default value of 0 indicating no customizations were made."
orders_ignore_payment,coupon_id,int,YES,,,,,,,10.0,0.0,"The coupon_id column in the orders_ignore_payment table stores integer references to coupons that were applied to orders that should be excluded from payment processing. When writing queries involving payment calculations or processing, you can join this table using coupon_id to identify and filter out orders that should be ignored, with NULL values indicating orders that were excluded for reasons not related to coupons."
orders_ignore_payment,donated,tinyint,YES,,,0,,,,3.0,0.0,"The ""donated"" column in the orders_ignore_payment table is a boolean flag (stored as a tinyint) indicating whether an order was marked as a donation. When querying this table, you can filter for donated orders using ""donated = 1"" or non-donated orders using ""donated = 0"", with NULL values indicating the donation status is unknown."
orders_ignore_payment,qa_status,int,YES,,,0,,,,10.0,0.0,"The qa_status column in the orders_ignore_payment table is an optional integer field that likely indicates the quality assurance status of excluded orders. When writing queries, this column can be used to filter or segment orders based on their QA verification state, though its nullable nature suggests that not all excluded orders necessarily have a QA status assigned."
orders_ignore_payment,qa_staff_id,int,YES,,,0,,,,10.0,0.0,"The qa_staff_id column in the orders_ignore_payment table stores the identifier of the QA staff member who marked an order for payment exclusion. This optional integer field can be used to track which quality assurance personnel made the decision to exclude specific orders from payment processing, enabling accountability and audit trails in the payment exclusion process."
orders_ignore_payment,qa_timestamp,datetime,YES,,,,,,,,,"The qa_timestamp column in the orders_ignore_payment table records the date and time when a quality assurance review or verification was performed on an excluded order. This datetime field can be used to track when orders were flagged for payment exclusion and to filter or analyze the timing of QA decisions, though it's optional as indicated by its nullable status."
orders_ignore_payment,created,datetime,YES,,,,,,,,,"The 'created' column in the orders_ignore_payment table stores the timestamp indicating when an order was added to the payment exclusion list. When writing SQL queries, this datetime field can be useful for filtering or analyzing when orders were marked for payment exclusion, and since it's nullable, you should handle potential NULL values appropriately."
orders_ignore_payment,notify_order_created_status,int,YES,,,0,,,,10.0,0.0,"The `notify_order_created_status` column in the `orders_ignore_payment` table is an integer flag that likely indicates whether a notification has been sent regarding the order's creation and its exclusion from payment processing. When querying this table, you can use this column to filter or check which orders have (or haven't) had their creation status notifications sent, with 0 appearing to be a default or initial state."
orders_ignore_payment,notify_order_finalized_status,int,YES,,,0,,,,10.0,0.0,"The `notify_order_finalized_status` column in the `orders_ignore_payment` table is an integer flag that likely indicates whether a notification has been sent regarding the order's finalized status. When writing SQL queries, this column can be used to filter or identify orders based on their notification state, with 0 appearing to be a default or initial value."
orders_ignore_payment,total_extracted_from_deposit,float,YES,,,0,,,,12.0,,"The `total_extracted_from_deposit` column stores floating-point values representing monetary amounts that have been deducted or extracted from order deposits. When writing SQL queries involving payment calculations, this column should be used to track or adjust deposit-related financial amounts that have been removed from the original order total."
orders_ignore_payment,cancelation_reason_type,int,YES,,,,,,,10.0,0.0,"The `cancelation_reason_type` column in the `orders_ignore_payment` table stores integer codes that indicate why an order was excluded from payment processing. When querying this table, you can use this column to filter or group orders based on their specific cancellation reasons, helping to analyze patterns in payment exclusions."
orders_ignore_payment,type,int,NO,,,0,,,,10.0,0.0,"The ""type"" column in the orders_ignore_payment table is a required integer field that likely categorizes the reason or classification for why an order should be excluded from payment processing. When writing queries, this column can be used to filter or group orders based on their exclusion type, where different integer values presumably represent distinct reasons for payment exclusion."
orders_prepopulated_logs,orders_prepopulated_logs_order_id,int,NO,PRI,,,,,,10.0,0.0,"The orders_prepopulated_logs_order_id column serves as the primary key in the orders_prepopulated_logs table, uniquely identifying each pre-populated order log entry. When writing SQL queries, use this column to join with other tables or filter specific pre-populated order records, as it provides a reliable identifier for tracking draft order information before final submission."
orders_prepopulated_logs,orders_prepopulated_logs_logic,text,NO,,,,,,65535.0,,,"The orders_prepopulated_logs_logic column stores the detailed business logic or rules that were applied during the pre-population of order data, captured as text. This required field is essential for auditing and debugging purposes, helping track how the system generated or modified draft order information before final submission."
orders_prepopulated_logs,orders_prepopulated_logs_algo,varchar(100),YES,,,,,,100.0,,,"This column 'orders_prepopulated_logs_algo' stores the name or identifier of the algorithm used to pre-populate order data, with values stored as variable-length strings up to 100 characters. When querying this column, it can be used to filter or group pre-populated order logs based on specific algorithms used in the order generation process, helping identify patterns or issues with particular pre-population methods."
orders_prepopulated_product_exception,orders_prepopulated_product_exception_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The orders_prepopulated_product_exception_id is the primary key column that uniquely identifies each exception rule in the orders_prepopulated_product_exception table. When writing SQL queries, use this column for precise record identification, joining to related tables, or filtering specific exception rules (e.g., WHERE orders_prepopulated_product_exception_id = X)."
orders_prepopulated_product_exception,orders_prepopulated_product_exception_user_id,int,YES,MUL,,,,,,10.0,0.0,"This column stores the user ID associated with specific product data exceptions in the order pre-population process, allowing queries to identify which users have special handling requirements. It can be used in JOIN operations (as indicated by the MUL key type) to connect with user-related tables and can be NULL when the exception isn't tied to a specific user."
orders_prepopulated_product_exception,orders_prepopulated_product_exception_product_id,int,YES,,,,,,,10.0,0.0,"This column stores the product ID for items that require special handling or exceptions in the pre-populated order system. When querying, use this column to identify specific products that should bypass or modify the standard order population rules, with NULL values potentially indicating exceptions that apply to all products."
orders_prepopulated_product_exception,orders_prepopulated_product_exception_created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The orders_prepopulated_product_exception_created_at column records the exact timestamp when an exception rule for pre-populated product data was created, automatically populated with the current timestamp. When querying this column, it's useful for auditing when exceptions were added and filtering exceptions based on their creation date, with all records guaranteed to have a timestamp since the column is non-nullable."
orders_prepopulated_product_exception,orders_prepopulated_product_exception_created_by,int,YES,,,,,,,10.0,0.0,"The orders_prepopulated_product_exception_created_by column stores the user ID (as an integer) of the person who created the exception rule in the orders_prepopulated_product_exception table. When querying this column, it can be used to track who established specific exceptions to the standard product population rules, and since it's nullable, some exception records may not have an associated creator ID."
packing_location,warehouse_id,int,NO,,,,,,,10.0,0.0,"The warehouse_id column in the packing_location table is a required integer field that identifies which warehouse or facility a packing location belongs to. This column enables queries to filter or group packing locations by their associated warehouse, making it useful for operations that need to analyze or manage packing activities within specific facilities."
packing_location,spot,varchar(255),NO,PRI,,,,,255.0,,,"The 'spot' column in the packing_location table serves as the primary key and contains unique string identifiers (up to 255 characters) for specific packing locations within a warehouse or facility. When writing SQL queries, use this column to uniquely identify or join to specific packing spots, and note that NULL values are not allowed since it's a required field."
packing_order,warehouse_id,int,NO,PRI,,1,,,,10.0,0.0,"The warehouse_id column in the packing_order table is a required integer field that serves as part of the primary key, identifying which warehouse location is responsible for the packing order. This column is essential for filtering and joining queries related to warehouse-specific packing operations, and its non-nullable nature ensures every packing order is always associated with a specific warehouse."
packing_order,shelf_number,varchar(5),NO,PRI,,00000,,,5.0,,,"The shelf_number column in the packing_order table is a required 5-character string that serves as the primary key, uniquely identifying each packing order's assigned shelf location in the warehouse. When querying this table, you can use shelf_number to join with related tables or filter specific packing orders, and its format appears to be standardized with leading zeros (e.g., ""00123"")."
packing_order,weight,int,NO,PRI,,0,,,,10.0,0.0,"The 'weight' column in the packing_order table is a required integer field that serves as a primary key, representing the weight of the packed items in standard units (likely grams or kilograms). When writing SQL queries, this column can be used for both identifying unique packing orders and filtering or aggregating orders based on their weight values."
packing_stats,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column in the packing_stats table serves as the primary key identifier, uniquely identifying each packing operation record. This non-nullable integer column should be used in JOIN operations when linking to related tables and in WHERE clauses when filtering for specific packing records."
packing_stats,snapshot_time,datetime,YES,,,,,,,,,"The snapshot_time column in the packing_stats table represents the specific date and time when packing statistics were recorded or measured. This datetime field can be used for temporal analysis and filtering of packing metrics, making it useful in queries that need to analyze packing performance over specific time periods or compare metrics across different timestamps."
packing_stats,number_of_packers,int,YES,,,0,,,,10.0,0.0,"The number_of_packers column in the packing_stats table represents the count of workers or staff members involved in packing operations during a given period or shift. This integer field can be used to analyze staffing levels and their correlation with packing efficiency, and since it's nullable, it can accommodate scenarios where packer count data might not be available."
packing_stats,tasks_total,int,YES,,,0,,,,10.0,0.0,"The `tasks_total` column in the `packing_stats` table represents the total number of packing tasks or assignments within a given record. When writing SQL queries, this integer field can be used to analyze workload volumes or calculate completion rates, and since it's nullable, be sure to handle potential NULL values appropriately using COALESCE or IS NULL checks."
packing_stats,tasks_done,int,YES,,,0,,,,10.0,0.0,"The `tasks_done` column in the `packing_stats` table stores the number of packing tasks completed during a given measurement period as an integer value. This column can be used to calculate completion rates, track productivity metrics, or analyze packing performance trends, and it accepts NULL values when the count is not available or not applicable."
packing_stats,puts_total,int,YES,,,0,,,,10.0,0.0,"The ""puts_total"" column in the packing_stats table represents the total number of items or units that have been placed or ""put"" during packing operations. This integer field can be used to analyze packing volume and throughput, making it useful in queries that need to measure or compare packing activity levels across different time periods or operations."
packing_stats,puts_done,int,YES,,,0,,,,10.0,0.0,"The ""puts_done"" column in the packing_stats table represents the number of completed put-away or placement actions during packing operations, stored as an integer value. This metric can be used to measure packing productivity and throughput, and since it's nullable, absence of data should be handled appropriately in queries using COALESCE or IFNULL when performing calculations."
packing_stats,status_new,int,YES,,,0,,,,10.0,0.0,"The `status_new` column in the `packing_stats` table is an integer field that likely represents the current state or status code of a packing operation. When querying this column, you can use it to filter or group packing records based on their status, with the field accepting NULL values when the status is unknown or not applicable."
packing_stats,carts_loaded,int,YES,,,0,,,,10.0,0.0,"The `carts_loaded` column in the `packing_stats` table represents the number of carts that have been filled with packed items during packing operations. This integer field can be used to track packing volume and efficiency, making it useful in queries that analyze workload distribution or calculate throughput metrics in warehouse operations."
packing_stats,packing_progress,int,YES,,,0,,,,10.0,0.0,"The `packing_progress` column in the `packing_stats` table stores integer values representing the completion status or progress of packing operations. This column can be used to filter or analyze the advancement of packing tasks, where higher values likely indicate more completed work, and can be particularly useful in queries that need to track or report on packing efficiency and completion rates."
packing_stats,pap_done_tasks,int,YES,,,0,,,,10.0,0.0,"The `pap_done_tasks` column in the `packing_stats` table stores the number of completed packing tasks, represented as an integer value that can be null. This column can be used to analyze packing completion rates and worker productivity, making it useful in queries that track operational efficiency or compare task completion across different time periods or workers."
packing_stats,status_locked,int,YES,,,0,,,,10.0,0.0,"The `status_locked` column in the packing_stats table is an integer flag (likely 0 or 1) that indicates whether a packing operation's status is locked or frozen from further updates. When querying this column, use it as a boolean condition to filter for locked or unlocked packing records, such as `WHERE status_locked = 1` for locked records or `status_locked = 0` for unlocked ones."
packing_stats,status_wait,int,YES,,,0,,,,10.0,0.0,"The `status_wait` column in the `packing_stats` table is an integer field that likely represents the waiting time or delay duration (in a relevant time unit) during packing operations. When querying this column, it can be used to analyze bottlenecks or efficiency in the packing process, with NULL values indicating either unmeasured wait times or instances where waiting periods were not applicable."
page,page_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The page_id column serves as the primary key identifier for each unique web page or content entry in the page table. When writing SQL queries, use this column to uniquely identify specific pages, join with related tables, or filter page-specific data (e.g., WHERE page_id = 123)."
page,title,varchar(255),NO,,,,,,255.0,,,"The 'title' column in the 'page' table stores the main heading or title text for each web page or content entry, with a maximum length of 255 characters. Since this field is marked as NOT NULL, every page record must have a title value, making it an essential attribute for identifying and displaying page content in queries and user interfaces."
page,slug,varchar(255),NO,,,,,,255.0,,,"The ""slug"" column in the page table stores URL-friendly versions of page titles or identifiers, using lowercase letters, numbers, and hyphens (e.g., ""my-page-title""). This column is required (non-nullable) and is commonly used in WHERE clauses to look up specific pages or in JOIN conditions when connecting page data with related tables."
page,subtitle,varchar(255),NO,,,,,,255.0,,,"The subtitle column in the page table stores a secondary heading or descriptive text (up to 255 characters) that appears below the main title of a web page or content entry. This required field (non-nullable) can be used in SQL queries to filter or display additional context about the page content, such as when you need to search for pages with specific subtitles or display subtitle information alongside other page metadata."
page,body,text,YES,,,,,,65535.0,,,"The ""body"" column in the page table stores the main content or text of a web page as a text field. When writing SQL queries, you can use this column to search through page content, extract specific text passages, or analyze the actual content of web pages stored in the system."
page,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the page table is a required integer field that identifies which user created or owns each web page or content entry. When querying, this column can be used to filter pages by their owner or join with the users table to get information about the page creator."
page,created,datetime,NO,,,,,,,,,"The 'created' column in the page table stores the timestamp indicating when each web page or content entry was initially created in the system. This non-nullable datetime field is essential for tracking content chronology and can be used in SQL queries for filtering pages by creation date, sorting content chronologically, or analyzing content creation patterns over time."
page,updated,datetime,NO,,,,,,,,,"The ""updated"" column in the page table stores the timestamp of when a web page or content entry was last modified, using a datetime format. This non-nullable field is essential for tracking content freshness and can be used in SQL queries to filter or sort pages based on their modification dates, such as finding recently updated content or identifying stale pages that need review."
page,meta_title,varchar(255),YES,,,,,,255.0,,,"The meta_title column in the page table stores the SEO-optimized title tag content for web pages, with a maximum length of 255 characters. This field is optional (nullable) and typically contains the text that appears in browser tabs and search engine results, which may differ from the page's displayed title for SEO purposes."
page,meta_desc,varchar(255),YES,,,,,,255.0,,,"The meta_desc column in the page table stores the meta description of web pages, which is a brief summary (up to 255 characters) that describes the page's content and is commonly used in search engine results. When querying this column, you can use it to search for pages based on their meta descriptions or to retrieve the SEO-friendly summaries of pages, keeping in mind that some pages might not have a meta description (NULL values are allowed)."
page,theme,varchar(50),YES,,,,,,50.0,,,"The 'theme' column in the page table stores the visual or design theme identifier (up to 50 characters) associated with each web page. This optional field can be used to filter or group pages by their visual presentation style, making it useful in queries where you need to find pages using specific themes or analyze theme usage patterns across the site."
page,hero_image,text,YES,,,,,,65535.0,,,"The hero_image column in the page table stores the URL or file path of the main featured image displayed prominently at the top of a web page. When writing queries, this text field can be used to retrieve or update the hero image reference for specific pages, though it can be null if no hero image is specified for a given page."
page,short_description,text,YES,,,,,,65535.0,,,"The short_description column in the page table stores a brief summary or preview text for web pages or content entries. This text field can be used to provide a condensed overview of the page's content without including the full text, making it useful for search results, content previews, or meta descriptions."
page,status,int,YES,,,1,,,,10.0,0.0,"The ""status"" column in the page table is an integer field that likely represents the current state or visibility condition of a web page (e.g., draft, published, archived). When writing queries, this column can be used to filter pages based on their status value, such as `WHERE status = 1` to potentially find published pages."
page,display_banner,int,YES,,,0,,,,10.0,0.0,"The display_banner column in the page table is a binary/boolean flag (stored as an integer) that indicates whether a banner should be shown on a particular web page. When writing queries, you can filter pages based on this flag using conditions like WHERE display_banner = 1 to find pages that should display banners, or WHERE display_banner = 0 for pages without banners."
pageLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the pageLang table, uniquely identifying each language configuration entry through an integer value. This non-nullable identifier is essential for establishing relationships with other tables and should be referenced when joining or filtering language-specific content."
pageLang,page_id,int,YES,,,,,,,10.0,0.0,"The page_id column in the pageLang table serves as a reference to identify specific web pages or content items that have language settings associated with them. This integer field can be used in SQL queries to join with other tables containing page information or to filter language settings for particular pages, making it useful for retrieving language-specific content or managing multilingual page configurations."
pageLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the pageLang table stores language identifier codes (up to 10 characters) that uniquely represent different languages used across web pages or content. This required field typically contains standardized language codes (such as 'en' for English or 'es' for Spanish) and can be used in SQL queries to filter or group content by language, making it essential for language-specific content management and localization features."
pageLang,l_slug,varchar(255),NO,,,,,,255.0,,,"The l_slug column in the pageLang table stores URL-friendly text strings (slugs) that represent language-specific page identifiers or paths. This column is required (non-nullable) and can contain up to 255 characters, making it suitable for storing SEO-friendly URLs or path segments that indicate the language version of a page (e.g., 'en-us', 'fr', 'es-mx')."
pageLang,l_title,varchar(255),NO,,,,,,255.0,,,"The `l_title` column in the `pageLang` table stores the localized title or heading of a web page in a specific language, with a maximum length of 255 characters. This required field (non-nullable) is commonly used in SQL queries when retrieving or filtering page titles in different languages, making it essential for displaying language-specific content to users."
pageLang,l_subtitle,varchar(255),NO,,,,,,255.0,,,"The l_subtitle column in the pageLang table stores subtitle text for web pages in different languages, with a maximum length of 255 characters and cannot be null. This column is typically used when querying or filtering page content to display appropriate language-specific subtitles, and should be included in SELECT statements when retrieving localized page information."
pageLang,l_body,text,YES,,,,,,65535.0,,,"The `l_body` column in the `pageLang` table stores the main content or body text of a web page in a specific language, allowing for multilingual content management. This text field can contain large amounts of localized content and may be NULL if no translated content is available for a particular language version of the page."
pageLang,l_meta_title,varchar(255),YES,,,,,,255.0,,,"The l_meta_title column in the pageLang table stores the language-specific meta title text for web pages, with a maximum length of 255 characters. This column is used to define SEO-friendly page titles in different languages, making it essential for multilingual SEO optimization and should be referenced when querying or setting page metadata for specific language versions."
pageLang,l_meta_desc,varchar(255),YES,,,,,,255.0,,,"The l_meta_desc column in the pageLang table stores meta descriptions for web pages in different languages, with a maximum length of 255 characters. This column is used to store SEO-friendly page descriptions that appear in search engine results, allowing for language-specific meta descriptions that accurately describe the page content to users of different languages."
pageLang,l_short_description,text,YES,,,,,,65535.0,,,"The `l_short_description` column in the `pageLang` table stores brief descriptive text about language-specific content or settings, likely containing localized summaries or short explanations. As a nullable text field, it can store variable-length descriptions or be left empty, making it useful for providing optional language-specific context or brief content descriptions in multilingual web content management."
pallet_assignments,pallet_assignment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The pallet_assignment_id is the primary key column in the pallet_assignments table, uniquely identifying each pallet assignment record with a non-nullable integer value. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific pallet assignments (e.g., WHERE pallet_assignment_id = X)."
pallet_assignments,supplier_pallet_per_delivery_id,int,YES,MUL,,,,,,10.0,0.0,"The supplier_pallet_per_delivery_id column in the pallet_assignments table is an indexed integer field that likely references the unique identifier for a specific pallet within a supplier's delivery batch. This column can be used to track and query pallets based on their supplier delivery grouping, and being nullable suggests that not all pallet assignments may be associated with a supplier delivery."
pallet_assignments,identifier,varchar(10),YES,MUL,,,,,10.0,,,"The 'identifier' column in the pallet_assignments table stores a unique alphanumeric code (up to 10 characters) that helps identify specific pallets within the warehouse system. This column is indexed (MUL) to optimize queries that search or filter by pallet identifiers, and since it's nullable, some pallet assignments may not have an identifier assigned."
pallet_assignments,temp_zone,tinyint,YES,,,,,,,3.0,0.0,"The `temp_zone` column in the `pallet_assignments` table is a small numeric flag (tinyint) that likely indicates whether a pallet is assigned to a temporary storage zone within the warehouse. When querying this column, you can use it to filter or group pallets based on their temporary zone status, where NULL values might indicate pallets not in temporary zones."
pallet_assignments,weight,int,YES,,,,,,,10.0,0.0,"The 'weight' column in the pallet_assignments table stores the weight of each pallet in integer units (likely in pounds or kilograms). This column can be used in SQL queries to filter pallets based on weight restrictions, calculate total weight loads in storage areas, or ensure weight distribution compliance, and since it's nullable, some pallet entries may not have a recorded weight."
pallet_assignments,location_header_id,int,YES,,,,,,,10.0,0.0,"The location_header_id column in the pallet_assignments table is an integer field that likely references a parent or header record in a related locations table, establishing a hierarchical relationship for pallet storage locations. This column can be used to group or filter pallet assignments by their higher-level location designations, and since it's nullable, some pallet assignments may not have an associated location header."
pallet_assignments,processed,tinyint,YES,MUL,,0,,,,3.0,0.0,"The 'processed' column in the pallet_assignments table is a boolean-like flag (stored as a tinyint) that indicates whether a pallet assignment has been completed or processed in the warehouse system. When querying, you can use this column to filter for either processed (1) or unprocessed (0) pallet assignments, making it useful for tracking pending tasks or generating reports on completed assignments."
pallet_assignments,pallet_temp,"float(5,2)",YES,,,,,,,5.0,2.0,"The pallet_temp column in the pallet_assignments table stores the temperature reading of a pallet in decimal format with up to 2 decimal places (e.g., 23.45). This column is particularly useful when querying temperature-sensitive inventory or monitoring storage conditions, and being nullable means temperature readings are not required for all pallet assignments."
pallet_assignments,nb_cases,int,YES,,,,,,,10.0,0.0,"The `nb_cases` column in the `pallet_assignments` table represents the number of cases or units stored on a particular pallet. This optional integer field can be used in SQL queries to track inventory quantities, calculate storage utilization, or filter pallets based on their case count (e.g., `WHERE nb_cases > 10` to find heavily loaded pallets)."
pap_handling_instructions,handling_instruction_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The handling_instruction_id is the primary key in the pap_handling_instructions table, serving as a unique identifier for each set of handling instructions. This integer column is commonly used in JOIN operations to link products with their specific handling requirements, and since it's non-nullable, every handling instruction record must have a unique ID value."
pap_handling_instructions,fr_name,varchar(255),NO,,,,,,255.0,,,"The fr_name column in pap_handling_instructions stores the French language version of handling instruction names or descriptions, ensuring multilingual support for packaging and handling guidelines. When writing SQL queries, this column should be used when French language handling instructions need to be displayed or filtered, and since it's non-nullable, every handling instruction record must have a French name specified."
pap_handling_instructions,en_name,varchar(255),NO,,,,,,255.0,,,"The en_name column in pap_handling_instructions stores the English language name or description of handling instructions for product packaging and warehouse operations. This required (non-nullable) text field, limited to 255 characters, should be referenced when querying for specific handling guidelines by their English names or when displaying instruction names in user interfaces and reports."
pap_handling_instructions,fr_description,varchar(255),NO,,,,,,255.0,,,"The fr_description column in pap_handling_instructions stores the French-language version of handling and packaging instructions, with a maximum length of 255 characters and is required (non-nullable). When writing SQL queries, use this column to retrieve or filter French handling instructions for products, particularly when implementing multilingual functionality or when French-specific handling guidelines need to be displayed or processed."
pap_handling_instructions,en_description,varchar(255),NO,,,,,,255.0,,,"The en_description column in pap_handling_instructions stores the English-language text description of specific handling and packaging instructions, with a maximum length of 255 characters. This required field (non-nullable) contains detailed directives for warehouse staff about how to properly handle, pack, or process specific products, making it a crucial reference point when writing queries related to product handling procedures."
pap_handling_instructions,file_name,varchar(255),NO,,,,,,255.0,,,"The file_name column in pap_handling_instructions stores the name of documents or files that contain detailed handling instructions, with a maximum length of 255 characters. This required field (non-nullable) typically references physical or digital documentation that provides comprehensive guidelines for product handling and packaging procedures."
pap_handling_instructions,category,int,NO,,,,,,,10.0,0.0,"The 'category' column in the pap_handling_instructions table is a required integer field that classifies different types of handling instructions into distinct numerical categories. This categorization helps organize and group similar handling directives (such as fragile handling, temperature requirements, or stacking limitations) for efficient querying and filtering of product handling requirements."
pap_handling_instructions,status,int,YES,,,1,,,,10.0,0.0,"The 'status' column in the pap_handling_instructions table is an integer field that indicates the current state or validity of handling instructions for product packaging and warehouse operations. This column can be used in WHERE clauses to filter for active or inactive handling instructions, helping to ensure that only relevant guidelines are applied during warehouse operations."
pay_periods,pay_period_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The pay_period_id column serves as the primary key in the pay_periods table, uniquely identifying each type of pay period (such as weekly, bi-weekly, or monthly) in the payroll system. This integer column is non-nullable and is commonly used in JOIN operations, particularly when linking to the bonus_multipliers table to determine period-specific bonus calculations."
pay_periods,start_date,date,NO,,,,,,,,,"The start_date column in the pay_periods table represents the beginning date of each payroll period, storing it as a DATE value that cannot be null. This column is essential for determining when each pay period begins and can be used in SQL queries to filter or join payroll-related data based on specific time periods or to calculate pay-period durations."
pay_periods,end_date,date,NO,,,,,,,,,The end_date column in the pay_periods table stores the final date of each payroll period as a date value and cannot be null. This column is essential for determining when each pay period concludes and can be used in date-based queries to filter or group payroll data by specific period endings.
pay_periods,blocked,tinyint(1),NO,,,0,,,,3.0,0.0,"The `blocked` column in the pay_periods table is a boolean flag (stored as tinyint) that indicates whether a particular pay period type is currently active (0) or blocked/disabled (1) in the payroll system. When writing queries, use this column to filter out inactive pay period types, for example: `WHERE blocked = 0` to retrieve only active pay periods."
payment_logging,payment_logging_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The payment_logging_id is the primary key column of the payment_logging table, serving as a unique identifier for each payment event or transaction record. This non-nullable integer column should be used in JOIN operations when linking payment events to other tables, and can be referenced in WHERE clauses when querying specific payment records."
payment_logging,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,The user_id column in the payment_logging table is a required integer field that serves as a foreign key reference to identify which user is associated with each payment event or transaction. This column enables joining with the users table to retrieve additional user information and is indexed (MUL) to optimize query performance when filtering or joining on user_id.
payment_logging,start,datetime,YES,MUL,,,,,,,,"The 'start' column in the payment_logging table records the datetime when a payment event or transaction was initiated, serving as a temporal marker for the beginning of payment processing. This column can be used in SQL queries for filtering payment records by date ranges, analyzing payment patterns over time, or joining with other time-based data, with the MUL key type indicating it's part of a multi-column index for optimized temporal queries."
payment_logging,stop,datetime,YES,MUL,,,,,,,,"The 'stop' column in the payment_logging table stores the datetime when a payment-related event or transaction was completed or terminated. This timestamp can be used to calculate payment processing durations, analyze transaction completion times, or filter for payments that ended within specific time periods, making it valuable for payment lifecycle analysis and reporting."
payment_logging,punch_in_image,varchar(500),YES,,,,,,500.0,,,"The punch_in_image column in the payment_logging table stores URL paths or file references (up to 500 characters) to images associated with payment punch-in events, such as receipts or verification documents. This optional field (nullable) can be used in SQL queries to retrieve or verify visual evidence related to payment transactions, though not all payment records will necessarily have an associated image."
payment_logging,punch_out_image,varchar(500),YES,,,,,,500.0,,,"The punch_out_image column in the payment_logging table stores URL paths or file references (up to 500 characters) to images captured during payment punch-out events, which could include payment confirmation screenshots or visual verification records. This optional field (nullable) can be used in SQL queries to retrieve or verify visual documentation associated with specific payment transactions, though not all payment events will necessarily have an associated image."
payment_logging,has_been_punched_out_automatically,tinyint,NO,,,0,,,,3.0,0.0,"The `has_been_punched_out_automatically` column in the payment_logging table is a boolean flag (stored as tinyint) that indicates whether a payment event was automatically processed by the system (1) or manually handled (0). When writing queries, this column can be used to filter or analyze payment events based on their automation status, helping distinguish between system-automated and manual payment processing activities."
permission_log,permission_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The permission_log_id column serves as the primary key for the permission_log table, uniquely identifying each audit record of permission-related changes in the system. When writing SQL queries, use this column to join with related permission log detail tables or to filter for specific change events, as it provides the foundational reference point for tracking individual permission modifications."
permission_log,staff_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The staff_id column in the permission_log table is a required integer field that references the ID of the staff member who made the permission-related change, serving as a foreign key to the users table. When writing queries, this column can be used to join with the users table to retrieve information about who performed specific permission modifications, or to filter/group permission changes by specific staff members."
permission_log,type,"enum('Changed Employee Role','Changed Permission on Role','Created Department','Updated Department','Created Role','Updated Role')",YES,,,,,,26.0,,,"The 'type' column in the permission_log table is an enumerated field that categorizes the specific kind of permission-related change that occurred, with possible values including role changes, permission modifications, department updates, and role management actions. When writing SQL queries, this column can be used to filter or group permission log entries by the nature of the change, such as `WHERE type = 'Changed Employee Role'` to find all instances where user roles were modified."
permission_log,created_at,datetime,NO,,,,,,,,,"The created_at column in the permission_log table stores the exact timestamp when a permission-related change was recorded in the system. This datetime field is commonly used in WHERE clauses to filter permission changes by date ranges or in ORDER BY clauses to analyze permission modifications chronologically, making it essential for audit trail queries and compliance reporting."
permission_log,message,text,YES,,,,,,65535.0,,,"The 'message' column in the permission_log table stores descriptive text explaining what permission-related changes were made, providing human-readable context for each audit log entry. When querying this column, it's useful for filtering or searching for specific types of permission changes using LIKE or ILIKE operators, though being a nullable text field means you should handle NULL cases appropriately in your queries."
permission_log_departments,permission_log_departments_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The permission_log_departments_id is the primary key column that uniquely identifies each record of department relationship changes in the permission logging system. This integer column serves as the main identifier for tracking modifications to department hierarchies and should be referenced when joining with related tables or filtering specific department change records.
permission_log_departments,permission_log_id,int,NO,MUL,,,permission_log,permission_log_id,,10.0,0.0,"The permission_log_id column serves as a foreign key that links each department relationship change to its corresponding entry in the permission_log table, ensuring proper audit trail tracking. This non-nullable integer field is essential for querying and joining with the permission_log table to retrieve detailed information about who made changes to department relationships and when those changes occurred."
permission_log_departments,department_id,int,NO,MUL,,,temp_departments,department_id,,10.0,0.0,"The department_id column in permission_log_departments serves as a foreign key that references the specific department involved in a permission or hierarchy change event. When writing queries, this column can be used to join with other department-related tables to track changes or analyze department relationship modifications over time."
permission_log_departments,old_parent_department_id,int,YES,MUL,,,temp_departments,department_id,,10.0,0.0,"The old_parent_department_id column stores the previous parent department identifier before a department hierarchy change was made, serving as a reference to track historical parent-child relationships between departments. When querying historical department structures or auditing department hierarchy changes, this column can be joined with the temp_departments table to reconstruct previous organizational structures."
permission_log_departments,new_parent_department_id,int,YES,MUL,,,temp_departments,department_id,,10.0,0.0,"The new_parent_department_id column stores the ID of the department that becomes the new parent department after a hierarchical change is made. This column is particularly useful in SQL queries when tracking department restructuring, allowing you to compare the new parent department against previous relationships or analyze department hierarchy modifications over time."
permission_log_departments,old_name,varchar(255),NO,,,,,,255.0,,,"The `old_name` column in the permission_log_departments table stores the previous name of a department before a change was made, serving as part of the audit trail for department modifications. This non-nullable varchar(255) field should be included in queries when you need to compare or analyze historical department names or track how department names have evolved over time."
permission_log_departments,new_name,varchar(255),NO,,,,,,255.0,,,"The `new_name` column in the permission_log_departments table stores the updated department name after a change has been made, serving as part of the audit trail for department modifications. This required (non-nullable) varchar field with a maximum length of 255 characters should be referenced when you need to query or compare the new department names that resulted from department relationship changes."
permission_log_role_permissions,permission_log_role_permissions_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The permission_log_role_permissions_id is the primary key column that uniquely identifies each record in the permission_log_role_permissions junction table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific permission log entries related to role permission changes."
permission_log_role_permissions,permission_log_id,int,NO,MUL,,,permission_log,permission_log_id,,10.0,0.0,"The permission_log_id column serves as a foreign key in the permission_log_role_permissions table, linking each role permission change record to its corresponding entry in the main permission log table. When writing SQL queries, this column should be used to join with the primary permission log table to retrieve details about the specific permission change event, and since it's non-nullable, every record will have a valid reference to a permission log entry."
permission_log_role_permissions,type,"enum('Add','Remove')",NO,,,,,,6.0,,,"The 'type' column in the permission_log_role_permissions table is an enumerated field that indicates whether a permission was added ('Add') or removed ('Remove') from a role during a permission change event. This non-nullable field is essential for filtering and analyzing the nature of permission changes, allowing queries to distinguish between permission grants and revocations in role modification history."
permission_log_role_permissions,role_id_with_changed_permission,int,NO,MUL,,,roles,role_id,,10.0,0.0,"The role_id_with_changed_permission column stores the unique identifier of a role that had its permissions modified during a permission change event. When writing SQL queries, this column can be used to join with the roles table and filter or group permission log entries by specific roles affected by permission changes."
permission_log_role_permissions,permission_id_changed,int,NO,,,,,,,10.0,0.0,"The permission_id_changed column stores the unique identifier of the specific permission that was modified for a role in a permission change event. This required integer field is essential for tracking which individual permission was affected during role permission modifications, enabling precise auditing of permission changes over time."
permission_log_roles,permission_log_roles_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The permission_log_roles_id is the primary key column that uniquely identifies each role change record in the permission_log_roles table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific role change entries, particularly in scenarios where you need to track or audit specific role hierarchy modifications."
permission_log_roles,permission_log_id,int,NO,MUL,,,permission_log,permission_log_id,,10.0,0.0,"The permission_log_id column serves as a foreign key that links each role modification entry to its corresponding audit record in the permission_log table. This column is essential for tracking the context and metadata (such as timestamp, user, and reason) of role hierarchy changes, and should be included in JOIN operations when querying for detailed audit information about role modifications."
permission_log_roles,role_id_changed,int,NO,MUL,,,roles,role_id,,10.0,0.0,"The role_id_changed column is a required integer field that identifies the specific role that was modified in a permission system change event. This column serves as a foreign key reference to the roles table and is frequently used in JOIN operations to retrieve details about the affected role, making it essential for queries that track role-based permission changes or audit role modification history."
permission_log_roles,old_parent_role_id,int,YES,MUL,,,roles,role_id,,10.0,0.0,"The old_parent_role_id column in the permission_log_roles table stores the previous parent role's identifier before a role hierarchy change was made, referencing the roles table. This column is particularly useful in SQL queries when you need to analyze historical role relationship changes or track how role hierarchies have evolved over time, and can be null when logging new role relationships that didn't have a previous parent."
permission_log_roles,new_parent_role_id,int,YES,MUL,,,roles,role_id,,10.0,0.0,"The new_parent_role_id column in the permission_log_roles table stores the ID of the role that became the new parent role after a hierarchy change was made in the permission system. When writing queries, this column can be joined with the roles table to retrieve details about the new parent role, and it may be null if the logged change involved removing a parent role relationship rather than establishing a new one."
permission_log_roles,old_name,varchar(255),NO,,,,,,255.0,,,"The `old_name` column in the permission_log_roles table stores the previous name of a role before it was modified, serving as a crucial part of the audit trail for role changes. When querying historical role modifications, this column should be used in conjunction with other audit fields to track how role names have evolved over time, and it will always contain a value since it's marked as non-nullable."
permission_log_roles,new_name,varchar(255),NO,,,,,,255.0,,,"The new_name column stores the updated name of a role after a modification has been made within the permission system, ensuring that role name changes are properly tracked and audited. This required varchar(255) field is essential for maintaining a clear historical record of how role names have evolved over time, making it useful in queries that need to analyze or report on role name changes."
permission_log_user_roles,permission_log_user_roles_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The permission_log_user_roles_id is the primary key column that uniquely identifies each role change event in the permission_log_user_roles table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific role change entries, particularly in audit trail and permission history scenarios."
permission_log_user_roles,permission_log_id,int,NO,MUL,,,permission_log,permission_log_id,,10.0,0.0,"The permission_log_id column serves as a foreign key that links each role change record to its corresponding entry in the permission_log table, which contains the audit details of the change. This column is non-nullable and indexed (MUL) to ensure efficient joins and lookups when querying the audit history of role changes."
permission_log_user_roles,employee_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The employee_id column in the permission_log_user_roles table is a required foreign key that references the users table, identifying the specific employee whose role assignment was changed. This column is frequently used in JOIN operations with the users table and is commonly included in WHERE clauses when querying for role changes for specific employees."
permission_log_user_roles,old_role_id,int,YES,MUL,,,roles,role_id,,10.0,0.0,"The old_role_id column in the permission_log_user_roles table stores the identifier of the user's previous role before a change was made, linking to the roles table through a foreign key relationship. This column is nullable since it might be empty for new role assignments where no previous role existed, and it's indexed (MUL) to optimize queries that need to analyze historical role transitions."
permission_log_user_roles,new_role_id,int,YES,MUL,,,roles,role_id,,10.0,0.0,"The new_role_id column in the permission_log_user_roles table stores the identifier of the role that a user was changed to during a role modification event, linking to the roles table. This column is used to track the destination or ""after"" state of role changes, making it essential for queries that need to analyze role transitions or verify the final state of user role modifications."
phone_verification_code,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the phone_verification_code table, uniquely identifying each verification code record with an auto-incrementing integer value. This column should be used when joining with related tables or when specifically tracking individual verification attempts, though typically you'll query this table using the phone number rather than the id."
phone_verification_code,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the phone_verification_code table is a required integer field that identifies which user the verification code belongs to. This column helps link verification codes to specific users in the system, enabling queries to track and manage verification attempts for individual users."
phone_verification_code,code,int,NO,,,0,,,,10.0,0.0,"The 'code' column in the phone_verification_code table stores the numeric verification code that is sent to users' phones for authentication purposes. This non-nullable integer field should be referenced when validating user-submitted verification codes against the stored values, typically as part of a WHERE clause in combination with the phone number and expiration timestamp."
phone_verification_code,phone_number,varchar(24),NO,,,,,,24.0,,,"The phone_number column in the phone_verification_code table stores the recipient's phone number for SMS verification codes, formatted as a string up to 24 characters long. This required field (non-nullable) should be used in WHERE clauses when querying for specific verification codes or checking verification status for a given phone number."
phone_verification_code,send_time,datetime,NO,,,,,,,,,The send_time column in the phone_verification_code table records the exact date and time when a verification code was sent to a user's phone number. This timestamp is essential for tracking when verification codes were issued and can be used in SQL queries to check code validity periods or analyze verification code sending patterns.
photo_reject_messages,photo_reject_messages_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The photo_reject_messages_id column serves as the primary key identifier for each unique rejection message in the photo_reject_messages table. When writing queries, use this column to uniquely reference specific rejection messages or join with other tables that need to associate with particular photo rejection reasons."
photo_reject_messages,step_id,int,NO,,,,,,,10.0,0.0,"The step_id column in the photo_reject_messages table is a required integer field that identifies the specific step or stage in the photo review process where a rejection message applies. This column can be used to sequence or categorize rejection messages based on where in the workflow they occur, making it useful for filtering or joining queries that need to match rejection reasons with specific validation steps."
photo_reject_messages,message,text,NO,,,,,,65535.0,,,"The 'message' column in the photo_reject_messages table stores the actual text content of predefined rejection explanations that are shown to users when their photos are not accepted. When writing queries, this column can be used to retrieve or search through the specific rejection messages, and since it's non-nullable, you can always expect a value to be present."
photo_reject_messages,photo_type,tinyint(1),NO,,,1,,,,3.0,0.0,"The `photo_type` column in the `photo_reject_messages` table is a required tinyint(1) field that likely categorizes the type of photo the rejection message applies to (e.g., 1 for profile photos, 0 for other types). When querying rejection messages, this column can be used to filter for specific photo type-related rejection reasons, helping to ensure users receive relevant feedback for their particular photo submission."
photo_reject_messages,created_at,date,NO,,,,,,,,,The created_at column in the photo_reject_messages table records the date when each rejection message was first added to the system. This non-nullable date field can be used to track when rejection reasons were established and to analyze the historical evolution of photo rejection criteria over time.
pick_activities,pick_activities_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The pick_activities_id column serves as the primary key identifier for each unique picking activity record in the warehouse operations table. This non-nullable integer field should be used when joining to related tables or when specifically identifying individual picking events in SQL queries.
pick_activities,created_at,datetime,NO,MUL,,,,,,,,"The created_at column in the pick_activities table stores the timestamp when each picking activity was initially recorded in the system, using a datetime format. This column is commonly used for filtering and sorting pick activities by date/time, tracking picking patterns over time, and can be joined with other tables using its indexed value (MUL key type) for temporal analysis of warehouse operations."
pick_activities,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the pick_activities table is a required integer field that identifies the warehouse worker or picker who performed the picking activity. This column can be used to join with user/employee tables to get additional picker information, and is commonly used in queries to analyze picking performance by worker or to track individual picker activities."
pick_activities,pick_and_pack_task_summary_id,int,YES,MUL,,,,,,10.0,0.0,"The pick_and_pack_task_summary_id column in the pick_activities table serves as a foreign key that links to a summary record of the overall picking and packing task. When querying, this column can be used to join with a related task summary table to access consolidated information about the picking and packing operation, and since it's nullable, some pick activities may not be associated with a task summary."
pick_activities,lot_id,int,YES,MUL,,,,,,10.0,0.0,"The lot_id column in the pick_activities table is a foreign key that references a specific batch or lot of inventory items being picked. This column helps track which batch of products is being handled during picking operations, enabling traceability and batch-level inventory management in warehouse operations."
pick_activities,quantity,int,NO,,,,,,,10.0,0.0,"The 'quantity' column in the pick_activities table represents the number of units picked during each picking operation in the warehouse. This required integer field is essential for tracking inventory movement and can be used in SQL queries to calculate total picked quantities, analyze picking volumes, or verify pick completion against order requirements."
pick_activities,type,int,YES,MUL,,0,,,,10.0,0.0,"The 'type' column in the pick_activities table is an integer field that categorizes different kinds of picking operations or methods used in the warehouse (e.g., batch picking, zone picking, or wave picking). When querying this table, you can use this column to filter or group picking activities by their operational type, with NULL values being permitted if the picking type is not specified."
pick_activities,synced_with_live_inventory,int,YES,MUL,,0,,,,10.0,0.0,"The `synced_with_live_inventory` column in the pick_activities table is an integer flag (likely 0 or 1) that indicates whether a picking activity has been synchronized with the live inventory system. When querying this column, it can be used to filter or verify which pick activities have been properly reflected in the real-time inventory counts, making it useful for inventory reconciliation and system synchronization status checks."
pick_activities,synced_at,datetime,YES,,,,,,,,,"The `synced_at` column in the `pick_activities` table stores the timestamp when a picking activity record was synchronized with external systems or databases. This datetime field can be useful for tracking data synchronization status and troubleshooting integration issues, and since it's nullable, not all pick activities may have a synchronization timestamp."
pick_activities,picked_difference,int,NO,,,0,,,,10.0,0.0,"The `picked_difference` column in the pick_activities table represents the numerical discrepancy between the expected and actual quantity of items picked during a warehouse picking operation. This integer value helps track picking accuracy and inventory discrepancies, where a value of 0 indicates a perfect pick (expected quantity matches actual), while positive or negative values indicate over-picking or under-picking respectively."
pick_activities,task_type_prepbasket_id,int,YES,MUL,,,,,,10.0,0.0,"The task_type_prepbasket_id column in the pick_activities table is a foreign key that references preparation basket types or configurations used during picking operations. This column helps categorize and organize picking tasks based on different preparation basket setups or methodologies, allowing for analysis and grouping of pick activities by their associated basket configurations."
pick_activities,lot_location_header_id,int,NO,MUL,,0,,,,10.0,0.0,"The lot_location_header_id column in the pick_activities table is a required integer field that references the header record of a storage location where items are picked from. This column is indexed (MUL) to optimize queries joining pick activities with their corresponding storage locations, and its non-nullable nature ensures every pick activity is associated with a valid storage location."
plans,plan_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The plan_id column serves as the primary key in the plans table, uniquely identifying each subscription plan configuration. This non-nullable integer field should be used when joining to other tables that reference specific plans or when filtering/retrieving individual plan details."
plans,type,tinyint,NO,,,0,,,,3.0,0.0,"The ""type"" column in the plans table is a required tinyint field that likely represents a categorical identifier for different subscription plan types (e.g., 0 for free, 1 for basic, 2 for premium). When querying this column, use numeric comparisons or exact matches to filter or group subscription plans by their type classification."
plans,amount,float,YES,,,,,,,12.0,,"The ""amount"" column in the plans table represents the monetary cost or price value for each subscription plan, stored as a floating-point number. This column can be used in SQL queries to filter, sort, or aggregate plan prices, and its nullable property allows for flexible pricing scenarios where some plans might not have a set price (such as free tiers or custom pricing)."
po_account_codes,po_account_code_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_account_code_id column serves as the primary key identifier for each unique purchase order account code record in the po_account_codes table. This non-nullable integer field should be referenced when joining to related tables or when specifically querying for individual account code entries, and it typically auto-increments with each new record."
po_account_codes,name,text,NO,,,,,,65535.0,,,"The 'name' column in the po_account_codes table stores the text description or label of each purchase order account code, and it is required (not nullable). When querying this column, you can use it to search for or filter specific account code names, such as in WHERE clauses or JOIN conditions to find particular accounting categories or expense types."
po_account_codes,code,varchar(255),NO,,,,,,255.0,,,"The 'code' column in the po_account_codes table stores unique accounting code identifiers as text strings (up to 255 characters) that are used to categorize and track purchase orders. This required field (non-nullable) serves as a reference point for financial classification and can be used in SQL queries to filter, group, or join purchase order data based on specific accounting categories."
po_account_codes,status,tinyint(1),NO,,,,,,,3.0,0.0,"The `status` column in the po_account_codes table is a required boolean flag (tinyint(1)) that indicates whether an account code is currently active or inactive. When writing queries, use this column to filter for active account codes (typically status = 1) or inactive ones (typically status = 0), which is particularly useful when you need to retrieve only valid, active account codes for purchase order processing."
po_account_codes,created_at,timestamp,YES,,,,,,,,,"The created_at column in the po_account_codes table records the timestamp when each account code record was initially created in the system. This timestamp field can be used for auditing purposes or to filter/sort account codes by their creation date, making it useful in queries that need to track when accounting codes were added or analyze account code creation patterns over time."
po_account_codes,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the po_account_codes table stores the user ID (as an integer) of the person who created each account code record. This optional field can be used to track who initially set up specific purchase order account codes, making it useful for audit trails and filtering records by creator."
po_approval_routings,po_approval_routing_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The po_approval_routing_id is the primary key identifier for each unique approval routing configuration in the po_approval_routings table. This non-nullable integer column should be used in JOIN operations when linking to related tables and in WHERE clauses when filtering for specific approval routing records.
po_approval_routings,department_id,int,NO,,,0,,,,10.0,0.0,"The department_id column in the po_approval_routings table is a required integer field that identifies which department a particular PO approval routing configuration belongs to. When writing queries, this column can be used to filter or join approval routing rules specific to a department, making it essential for retrieving department-specific approval workflows."
po_approval_routings,order_type,tinyint,YES,,,,,,,3.0,0.0,"The order_type column in po_approval_routings is a tinyint field that categorizes different types of purchase orders to determine their specific approval workflows. When writing queries, you can use this column to filter or group purchase orders by their type (e.g., WHERE order_type = 1 for standard POs, or order_type = 2 for emergency POs), helping to apply the appropriate approval routing rules for each type of purchase order."
po_approval_routings,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the po_approval_routings table stores the descriptive identifier for each approval routing configuration or workflow (e.g., ""Finance Department Approval Flow"" or ""High-Value PO Route""). This required field (non-nullable) can be used in WHERE clauses or JOIN conditions to locate specific approval workflows, and it's commonly referenced when displaying or managing approval routing configurations in the system."
po_approval_routings,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the po_approval_routings table records the timestamp when each approval routing configuration was initially created, automatically populated with CURRENT_TIMESTAMP. This datetime field is useful for auditing purposes and can be used in SQL queries to filter or sort approval routing records by their creation date, such as finding recently added configurations or analyzing routing rule changes over time."
po_approval_routings,created_by,int,NO,,,0,,,,10.0,0.0,"The created_by column in the po_approval_routings table stores the user ID (as an integer) of the person who created the approval routing configuration. This mandatory field (non-nullable) is commonly used in WHERE clauses to filter routing configurations by their creator or in JOIN operations with user tables to get creator details, making it useful for audit trails and tracking who established specific approval workflows."
po_approval_routings,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the po_approval_routings table automatically records the timestamp when a purchase order approval routing configuration is modified, using CURRENT_TIMESTAMP as the default value. This column is useful for tracking the most recent changes to approval workflows and can be used in SQL queries to filter or sort records based on when they were last updated, such as finding recently modified approval routes or auditing configuration changes."
po_approval_routings,updated_by,int,NO,,,0,,,,10.0,0.0,The `updated_by` column in the `po_approval_routings` table stores the user ID (as an integer) of the person who last modified the approval routing configuration. This mandatory field (non-nullable) is commonly used in WHERE clauses to track changes by specific users or in JOIN operations with user tables to get details about who made routing modifications.
po_approval_routings,is_force_reception,tinyint,NO,,,0,,,,3.0,0.0,"The is_force_reception column is a boolean flag (stored as a tinyint) that indicates whether a purchase order must undergo mandatory reception verification before proceeding in the approval workflow. When set to 1, it enforces that items must be physically received and verified before the PO can move forward in the approval process, while 0 allows the approval process to continue without requiring reception verification."
po_audit_logs,po_audit_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_audit_log_id column serves as the primary key in the po_audit_logs table, uniquely identifying each audit record for purchase order activities. This auto-incrementing integer field should be used when joining to related tables or when specifically querying individual audit entries, though it's typically not used as a business-facing identifier."
po_audit_logs,event_id,int,NO,,,,,,,10.0,0.0,"The event_id column in the po_audit_logs table serves as a unique identifier for each individual audit event or change recorded for purchase orders. When writing SQL queries, use this non-nullable integer column to reference specific audit events or join with related tables that track detailed information about particular PO modifications."
po_audit_logs,event_type,varchar(100),NO,,,,,,100.0,,,"The event_type column in po_audit_logs is a required text field that categorizes the type of action or change made to a purchase order, such as 'PO_CREATED', 'PO_MODIFIED', or 'PO_APPROVED'. When querying this column, it's commonly used in WHERE clauses to filter audit records by specific types of activities, and it's essential for understanding what kind of change occurred in each audit log entry."
po_audit_logs,event_item,varchar(150),NO,,,,,,150.0,,,"The event_item column in po_audit_logs stores a descriptive text identifier (up to 150 characters) that specifies which item or element of a purchase order was affected by the audited action. When querying this column, you can use it to filter or group audit records based on specific PO components that were modified, such as ""line_item,"" ""shipping_address,"" or ""payment_terms."""
po_audit_logs,event,varchar(150),NO,,,,,,150.0,,,"The ""event"" column in the po_audit_logs table stores a descriptive text string (up to 150 characters) that indicates what type of action or change occurred on a purchase order, such as ""PO Created,"" ""PO Approved,"" or ""Line Item Modified."" This mandatory field (non-nullable) is essential for filtering and analyzing specific types of purchase order activities in audit queries, and can be used in WHERE clauses or GROUP BY statements to understand patterns of PO-related actions."
po_audit_logs,display_id,varchar(45),YES,,,,,,45.0,,,"The display_id column in po_audit_logs stores a human-readable identifier for each audit log entry, formatted as a string up to 45 characters long. This column can be used to provide a user-friendly reference number when querying or displaying audit trail information, making it easier to track and reference specific changes to purchase orders without relying on internal system IDs."
po_audit_logs,is_item,tinyint,YES,,DEFAULT_GENERATED,0,,,,3.0,0.0,"The `is_item` column in the `po_audit_logs` table is a boolean flag (stored as a tinyint) that indicates whether the audit log entry relates to a line item change within a purchase order (1) or to the purchase order header/metadata itself (0). When querying the audit logs, this column can be used to filter or differentiate between item-level and header-level changes in purchase order data."
po_audit_logs,item_content,varchar(150),YES,,,,,,150.0,,,"The item_content column in po_audit_logs stores a text description (up to 150 characters) of the specific item details or changes that were made during a purchase order audit event. This column can be used in SQL queries to search for or analyze particular types of item-related changes, though it may contain NULL values when the audit event doesn't involve specific item modifications."
po_audit_logs,old_value,text,YES,,,,,,65535.0,,,"The `old_value` column in the `po_audit_logs` table stores the previous value of a field before it was modified in a purchase order, captured as text data. This column is essential for audit trail purposes, allowing you to compare what a field's value was before a change occurred, and can be used in SQL queries to analyze historical changes or track specific modifications to PO data over time."
po_audit_logs,new_value,text,NO,,,,,,65535.0,,,"The 'new_value' column in the po_audit_logs table stores the updated value or state of a purchase order field after a change was made, captured as text data. This column is essential for audit trail purposes as it allows comparison with previous values and helps track exactly what changed during each modification to a purchase order."
po_audit_logs,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the po_audit_logs table is a required integer field that identifies which user performed the audited action on a purchase order. This column is essential for accountability and traceability, allowing queries to track which specific users made changes or performed actions within the purchase order system."
po_audit_logs,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_audit_logs table records the exact date and time when each audit log entry was created, serving as a timestamp for when a purchase order-related action or change occurred. This non-nullable datetime field is essential for chronological tracking and can be used in SQL queries to filter, sort, or analyze PO activities within specific time periods."
po_audit_logs,new_value_fr,text,YES,,,,,,65535.0,,,"The ""new_value_fr"" column in the po_audit_logs table stores the French translation of the new value after a change was made to a purchase order field, supporting multilingual audit tracking. This column can be used in SQL queries to retrieve or compare the French versions of updated values, particularly useful when analyzing changes in French-language contexts or generating localized audit reports."
po_catalog,po_catalog_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_catalog_id column serves as the primary key identifier for each unique product entry in the po_catalog table, using an integer data type that cannot be null. This column should be referenced when joining to related tables or when specifically identifying individual catalog items in queries, such as WHERE clauses or JOIN conditions."
po_catalog,photo,varchar(255),YES,,,,,,255.0,,,"The 'photo' column in the po_catalog table stores file paths or URLs (as text strings up to 255 characters) that reference product images for catalog items. This optional field (nullable) can be used in queries to retrieve or display product imagery, typically by joining with purchase order details or filtering products based on whether they have associated photos."
po_catalog,item_name_en,varchar(255),NO,,,,,,255.0,,,"The item_name_en column in the po_catalog table stores the English-language product names or descriptions, with a maximum length of 255 characters. This required field (non-nullable) should be used when querying or displaying product information in English, making it particularly useful for filtering, sorting, or displaying product listings in English-language interfaces."
po_catalog,item_name_fr,varchar(255),NO,,,,,,255.0,,,"The item_name_fr column in the po_catalog table stores the French language version of product names, with a maximum length of 255 characters. This required field (non-nullable) should be used when displaying or filtering product information in French-language contexts, making it particularly useful for multilingual applications or queries targeting French-speaking users."
po_catalog,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the po_catalog table is a required integer field that identifies which supplier/vendor provides each product in the catalog. When writing queries, this column can be used to filter or group catalog items by supplier, and it likely serves as a foreign key to join with a suppliers table (though this isn't explicitly specified in the constraints)."
po_catalog,sku,varchar(150),NO,,,,,,150.0,,,"The 'sku' column in the po_catalog table stores unique Stock Keeping Unit identifiers for products as character strings up to 150 characters in length. As a required field (non-nullable), this column should always be included when inserting new product records and can be reliably used in WHERE clauses and JOIN conditions to look up specific products in the catalog."
po_catalog,po_catalog_item_type_id,int,YES,,,,,,,10.0,0.0,"The po_catalog_item_type_id column in the po_catalog table is an integer field that categorizes products into different types or classifications within the purchasing system. This column can be used in SQL queries to filter or group products by their type, and since it's nullable, some products may not have a specific type assigned (NULL value)."
po_catalog,comment,text,YES,,,,,,65535.0,,,"The 'comment' column in the po_catalog table stores optional text notes or additional descriptions about catalog products, allowing for detailed remarks or special instructions that don't fit in other structured fields. This free-form text field can be used in SQL queries to search for products with specific annotations or to filter items based on their descriptive notes, though being nullable means some products may not have any comments associated with them."
po_catalog,status,tinyint,YES,,,0,,,,3.0,0.0,"The 'status' column in the po_catalog table is a tinyint field that likely indicates the current state of a product in the catalog (e.g., active, discontinued, out of stock) using numeric codes. When writing queries, this column can be used to filter products based on their availability status, though since it's nullable, queries should handle NULL values appropriately."
po_catalog,price_per_unit,"double(10,2)",YES,,,,,,,10.0,2.0,"The price_per_unit column in the po_catalog table stores the cost per individual unit of a product with precision up to 2 decimal places, allowing for accurate price tracking in purchase orders. This column can be used in SQL queries to calculate total costs, compare product prices, or filter items within specific price ranges, and since it's nullable, some products may not have a price assigned yet."
po_catalog,currency_id,int,YES,,,,,,,10.0,0.0,"The currency_id column in the po_catalog table is an integer field that references the currency used for product pricing in the catalog. This optional field (as indicated by being nullable) helps identify which monetary currency applies to the product's price, enabling proper handling of international pricing and currency conversions when processing purchase orders."
po_catalog,po_catalog_unit_type_id,int,YES,,,,,,,10.0,0.0,"The po_catalog_unit_type_id column in the po_catalog table is an integer field that references the unit of measurement type for each product (e.g., pieces, kilograms, liters). When writing SQL queries, this column can be used to filter or group products by their measurement units, and it's nullable meaning some products may not have a specified unit type."
po_catalog,min_qty_to_order,"float(10,3)",YES,,,,,,,10.0,3.0,"The min_qty_to_order column in the po_catalog table specifies the minimum quantity that must be ordered for a particular product, stored as a decimal number with up to 3 decimal places. When writing SQL queries involving purchase quantities, use this column to validate or filter orders that meet the minimum order threshold, though note that NULL values are permitted which may indicate products without minimum order restrictions."
po_catalog,lead_time,varchar(150),YES,,,,,,150.0,,,"The lead_time column in the po_catalog table stores the estimated time duration (as a text string) needed for a product to be delivered after placing an order. This information helps in procurement planning and can include values like ""2-3 weeks,"" ""30 days,"" or ""immediate,"" making it useful in SQL queries that need to filter or analyze product delivery timeframes."
po_catalog,is_variable_price,tinyint,YES,,,0,,,,3.0,0.0,"The `is_variable_price` column in the po_catalog table is a boolean flag (stored as tinyint) that indicates whether a product has a fixed price or variable pricing. When writing queries, use this column to identify products with flexible pricing (value = 1) versus those with standard fixed prices (value = 0), which can be helpful for filtering or conditional logic in pricing-related operations."
po_catalog,account_code,int,YES,,,,,,,10.0,0.0,"The account_code column in the po_catalog table is an optional integer field that likely represents a financial or accounting classification code associated with each product. This column can be used in SQL queries to filter or group products by their accounting categories, which is useful for financial reporting and budget tracking purposes."
po_catalog,po_tax_id,int,YES,,,,,,,10.0,0.0,"The po_tax_id column in the po_catalog table is an optional integer field that likely references a tax classification or rate applicable to the product. When writing SQL queries, this column can be used to filter or group products by their tax categories, though its nullable nature means you should handle NULL values appropriately in your queries."
po_catalog,created_at,datetime,YES,,,,,,,,,"The created_at column in the po_catalog table records the timestamp when each product catalog entry was initially added to the system. This datetime field can be used in SQL queries to filter or sort products based on when they were created, track new product additions over time, or analyze catalog growth patterns."
po_catalog,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the po_catalog table records the timestamp of when a product catalog entry was last modified, storing this information in a datetime format. This column can be useful for tracking changes to product information over time and can be used in SQL queries to filter or sort products based on when they were last updated, though it's optional as indicated by being nullable."
po_catalog,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the po_catalog table is a required integer field that stores the user ID of the person who created each product catalog entry. When writing queries, this column can be used to track product catalog authorship or to join with a users table to get additional information about who added specific products to the catalog."
po_catalog,updated_by,int,YES,,,,,,,10.0,0.0,"The updated_by column in the po_catalog table stores the user ID (as an integer) of the person who last modified the product catalog entry. This optional field helps track changes made to product information and can be used to join with a users table to get details about who made updates, making it useful for audit trails and change tracking in SQL queries."
po_catalog,amortize,int,YES,,,,,,,10.0,0.0,"The ""amortize"" column in the po_catalog table is an integer field that likely indicates the number of periods or installments over which a product's cost can be spread out for accounting purposes. This column can be used in SQL queries to filter or calculate products based on their amortization schedule, helping to identify items that can be paid for over time versus those requiring immediate full payment."
po_catalog_item_tags,po_catalog_item_tag_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_catalog_item_tag_id column serves as the primary key identifier for each unique tag or label entry in the po_catalog_item_tags table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific tag entries, as it provides a guaranteed unique reference for each tag record in the purchase order catalog system."
po_catalog_item_tags,po_catalog_tag_id,int,NO,,,,,,,10.0,0.0,"The po_catalog_tag_id column serves as a unique identifier for each tag or label in the po_catalog_item_tags table. When writing SQL queries, use this column to join with other tables or to uniquely identify specific tags associated with catalog items in the PO system."
po_catalog_item_tags,po_catalog_id,int,NO,,,,,,,10.0,0.0,"The po_catalog_id column in the po_catalog_item_tags table serves as a reference to identify specific catalog items that are being tagged. When writing SQL queries, use this column to join with the main catalog items table or to filter/group tags associated with particular catalog items, as it represents the mandatory link between tags and their corresponding catalog entries."
po_catalog_item_types,po_catalog_item_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_catalog_item_type_id column serves as the primary key identifier for each unique catalog item type in the po_catalog_item_types table. When writing SQL queries, use this column to join with other tables that reference catalog item types or to filter specific categories of purchase order items, as it provides a reliable and efficient way to identify distinct item classifications in the system."
po_catalog_item_types,name,varchar(150),NO,,,,,,150.0,,,"The 'name' column in the po_catalog_item_types table stores the descriptive labels or names of different catalog item categories (e.g., ""Office Supplies"", ""IT Equipment"", ""Raw Materials"") used to classify purchase order items. When writing SQL queries, this required (non-nullable) varchar field can be used to filter, group, or join with other tables to analyze or organize purchase order items by their categorical type."
po_catalog_tags,po_catalog_tag_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_catalog_tag_id column serves as the primary key identifier for tags in the po_catalog_tags table, using unique integer values to distinctly identify each tag entry. When writing SQL queries, use this column to join with other tables that reference catalog tags or when you need to uniquely identify or filter specific tags in the catalog system."
po_catalog_tags,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the po_catalog_tags table stores the text label or descriptor for each catalog tag, with a maximum length of 255 characters and cannot be null. When writing SQL queries, this column is commonly used in WHERE clauses for filtering catalog items by their tags (e.g., ""SELECT * FROM po_catalog_tags WHERE name = 'Office Supplies'"") or in JOIN operations to connect catalog items with their associated tags."
po_catalog_tags,created_at,datetime,YES,,,,,,,,,"The created_at column in the po_catalog_tags table records the timestamp when each catalog tag was initially created in the system. This datetime field can be used for tracking tag creation history, auditing purposes, or filtering tags by their creation date in SQL queries (e.g., finding recently added tags or analyzing tag creation patterns over time)."
po_catalog_tags,updated_by,int,YES,,,,,,,10.0,0.0,"The updated_by column in the po_catalog_tags table stores the user ID (as an integer) of the person who last modified a catalog tag record. This optional field can be used in SQL queries to track or filter tag modifications by specific users, and it's commonly joined with a users or employees table to get the actual user details of who made the update."
po_catalog_unit_types,po_catalog_unit_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_catalog_unit_type_id column serves as the primary key identifier for each unique unit type in the po_catalog_unit_types table, using auto-incrementing integers. When writing SQL queries, use this column to join with other tables that reference unit types or to uniquely identify specific measurement units in the purchasing system."
po_catalog_unit_types,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the po_catalog_unit_types table stores the text description of measurement units (such as ""pieces"", ""kilograms"", or ""meters"") as a required varchar field with a maximum length of 255 characters. When writing SQL queries, this column can be used to filter, group, or join with other tables that need to reference specific unit types in the purchasing system."
po_catalog_unit_types,created_at,datetime,YES,,,,,,,,,"The created_at column in the po_catalog_unit_types table records the timestamp when each unit type entry was first added to the catalog. This datetime field can be used for auditing purposes or filtering unit types based on when they were created, though its nullable property suggests that some historical records might not have creation timestamps."
po_catalog_unit_types,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `po_catalog_unit_types` table stores the user ID (as an integer) of the person who last modified a unit type record. This optional field helps track changes to unit type definitions and can be used in audit queries to understand who made updates to the unit catalog, making it useful for JOIN operations with user tables and for accountability tracking."
po_countries,country_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The country_id column serves as the primary key in the po_countries table, uniquely identifying each country record with a non-nullable integer value. This column should be used in JOIN operations when linking country information to other tables, and can be referenced in WHERE clauses when filtering for specific country records."
po_countries,country_name,varchar(45),YES,,,,,,45.0,,,"The country_name column in the po_countries table stores the full name of countries as text strings up to 45 characters in length. This column can be used in SQL queries to search for, filter, or display country names, and since it's nullable, some records might not have a country name specified."
po_countries,url_template,varchar(255),YES,,,,,,255.0,,,"The url_template column in the po_countries table stores URL patterns or templates that are likely used to generate country-specific web links or API endpoints. This optional field (being nullable) can be used in SQL queries when you need to construct dynamic URLs for country-specific resources or services, and it's commonly used with string manipulation functions to replace placeholders with actual values."
po_countries,lang_code,varchar(5),YES,,,,,,5.0,,,"The lang_code column in the po_countries table stores the primary or official language code (up to 5 characters) associated with each country, using a standard format like ISO 639-1 or similar language coding systems. This optional field (as indicated by being nullable) can be used in queries to filter or group countries by their primary language, or to support language-specific content and localization features."
po_countries,timezone,varchar(10),YES,,,,,,10.0,,,"The timezone column in the po_countries table stores the primary or standard time zone identifier for each country as a text string up to 10 characters in length. This optional field can be used in queries to filter or group countries by their time zones, or to help determine local times for international shipping and business operations."
po_countries,code,varchar(5),YES,,,,,,5.0,,,"The 'code' column in the po_countries table stores standardized country codes (up to 5 characters in length) used to uniquely identify countries in a compact format, such as 'US' or 'GBR'. When writing SQL queries, this column is particularly useful for joining with other tables that reference countries by their code rather than full name, and it can be null if the country code is not yet assigned or unknown."
po_currencies,po_currency_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_currency_id column serves as the primary key in the po_currencies table, uniquely identifying each currency record used in purchase orders and financial transactions. When writing SQL queries, use this column to join with other tables that reference currencies or to specifically identify a particular currency record, ensuring that it's always provided since null values are not allowed."
po_currencies,currency_code,varchar(20),NO,,,,,,20.0,,,"The currency_code column in the po_currencies table stores standardized currency identifiers (like 'USD', 'EUR', 'GBP') as text strings up to 20 characters long. This required field serves as a reference for identifying specific currencies in purchase orders and financial transactions, and should be used when joining to other tables that need currency information or when filtering transactions by specific currencies."
po_currencies,currency_symbol,varchar(45),YES,,,,,,45.0,,,"The currency_symbol column in the po_currencies table stores the visual symbol or character representation of currencies (e.g., $, â¬, Â¥) used in purchase orders and financial transactions. This optional (nullable) field can contain up to 45 characters and is useful when displaying currency values in user interfaces or reports where a symbolic representation is preferred over currency codes."
po_currencies,is_default,int,YES,,,0,,,,10.0,0.0,"The ""is_default"" column in the po_currencies table is a binary flag (integer) that indicates whether a particular currency record serves as the system's default currency. When writing queries, you can use this column to filter for the default currency (WHERE is_default = 1) or to identify non-default currencies (WHERE is_default = 0), which is particularly useful when handling multi-currency operations."
po_dashboard_link_id,po_dashboard_link_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_dashboard_link_id column serves as the primary key in the po_dashboard_link_id table, storing unique integer identifiers for purchase order dashboard relationships or mappings. When writing SQL queries, use this column for joining to related tables or as a unique identifier when filtering specific dashboard link records, as it cannot contain NULL values and is guaranteed to be unique."
po_dashboard_link_id,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the po_dashboard_link_id table stores descriptive text identifiers (up to 255 characters) that label or identify specific purchase order dashboard links or mappings. Since this field is non-nullable, it must always contain a value when querying or inserting records, making it essential for identifying and referencing specific dashboard elements in SQL operations."
po_dashboard_link_id,link,text,NO,,,,,,65535.0,,,"The ""link"" column in the po_dashboard_link_id table stores text-based identifiers or references that connect different elements within the purchase order dashboard system. Since this column is non-nullable, every record must contain a link value, making it essential for maintaining the relationships between dashboard components."
po_dashboard_link_id,is_active,tinyint,NO,,,1,,,,3.0,0.0,"The `is_active` column in the po_dashboard_link_id table is a required boolean flag (stored as tinyint) that indicates whether a particular dashboard link mapping is currently active or inactive. When writing SQL queries, use this column with values 1 (active) or 0 (inactive) to filter for currently valid/enabled dashboard link records, such as `WHERE is_active = 1`."
po_dashboard_link_id,updated_at,datetime,NO,,,,,,,,,"The `updated_at` column in the po_dashboard_link_id table stores the timestamp of when a dashboard link record was last modified, using a datetime format. This non-nullable field is commonly used in WHERE clauses for filtering records by their last update time or in ORDER BY clauses to sort records chronologically, making it useful for tracking changes and maintaining data audit trails."
po_dashboard_link_id,updated_by,int,NO,,,,,,,10.0,0.0,"The ""updated_by"" column in the po_dashboard_link_id table stores the user ID (as an integer) of the person who last modified the dashboard link record. This mandatory field (non-nullable) is commonly used in WHERE clauses or JOIN conditions to track or filter dashboard link modifications by specific users, and it's typically referenced in audit trails or change history queries."
po_dashboard_link_id,sequence,int,YES,,,,,,,10.0,0.0,"The ""sequence"" column in the po_dashboard_link_id table is an integer field that likely represents the order or position of dashboard elements within a purchase order view. When writing queries, this column can be used to sort or arrange dashboard components in a specific sequence, making it useful for maintaining a consistent display order in the user interface."
po_dashboard_link_users,po_dashboard_link_user_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_dashboard_link_user_id column serves as the primary key in the po_dashboard_link_users table, uniquely identifying each user access record for the purchase order dashboard. When writing SQL queries, use this column for joining with related tables or filtering specific user access records, as it provides the fundamental identifier for each user-dashboard association."
po_dashboard_link_users,user_id,int,NO,,,0,,,,10.0,0.0,"The user_id column in the po_dashboard_link_users table serves as a unique identifier for users who have access to the purchase order dashboard interface. This mandatory integer field (non-nullable) is used to link individual users to their specific dashboard permissions and access levels, making it a crucial field for filtering and joining operations when querying user-specific dashboard settings."
po_dashboard_link_users,po_dashboard_link_id,int,NO,,,0,,,,10.0,0.0,"The po_dashboard_link_id column serves as a numeric identifier in the po_dashboard_link_users table, tracking specific user-dashboard associations for purchase order functionality. When writing SQL queries, use this non-nullable integer column to join with related tables or filter specific dashboard link records, ensuring proper user access management for the PO dashboard interface."
po_dashboard_link_users,seq_id,int,YES,,,0,,,,10.0,0.0,"The `seq_id` column in the `po_dashboard_link_users` table serves as a sequence number to track user access entries in the PO dashboard system. This optional integer field can be used for ordering or reference purposes when querying user access records, though it's not a primary key and can contain null values."
po_dashboard_link_users,status,tinyint,YES,,,0,,,,3.0,0.0,"The 'status' column in the po_dashboard_link_users table is a tinyint field that likely indicates whether a user's access to the PO dashboard is active (1) or inactive (0). When writing SQL queries, this column can be used to filter for active user access records or to update a user's dashboard access status."
po_dashboard_link_users,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the po_dashboard_link_users table records the timestamp when a user's access record for the PO dashboard was initially created, automatically populated with CURRENT_TIMESTAMP. When querying user access history or auditing dashboard permissions, this column can be used to filter or sort records based on when users were first granted access to the PO dashboard."
po_dashboard_links,po_dashboard_link_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_dashboard_link_id column serves as the primary key identifier for each unique dashboard link configuration in the po_dashboard_links table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific dashboard link entries (e.g., WHERE po_dashboard_link_id = X)."
po_dashboard_links,name,varchar(255),NO,,,,,,255.0,,,"The ""name"" column in the po_dashboard_links table stores the display text or label for each dashboard link in the purchase order system interface. This required varchar field (maximum 255 characters) serves as a human-readable identifier for the navigation element, such as ""View Open POs"" or ""Recent Orders Report,"" and should be referenced when you need to query or display the link labels in the dashboard interface."
po_dashboard_links,link,text,NO,,,,,,65535.0,,,"The ""link"" column in the po_dashboard_links table stores the URL or path for navigation elements within the purchase order system's dashboard interface. This required text field contains the actual destination where users will be directed when clicking dashboard elements, and it should be referenced in SQL queries when you need to retrieve or modify the navigation targets for dashboard components."
po_dashboard_links,is_active,tinyint,NO,,,1,,,,3.0,0.0,"The `is_active` column in the po_dashboard_links table is a required boolean flag (stored as tinyint) that indicates whether a dashboard link is currently enabled and visible in the PO system interface. When writing queries, use this column (where 1 = active, 0 = inactive) to filter for only active dashboard links, typically with a condition like `WHERE is_active = 1`."
po_dashboard_links,country,int,NO,,,,,,,10.0,0.0,"The 'country' column in the po_dashboard_links table is a required integer field that specifies which country's version of the dashboard link configuration should be displayed. This column enables region-specific customization of the purchase order dashboard interface, allowing different navigation elements and links to be shown based on the user's country context."
po_dashboard_links,province,int,NO,,,,,,,10.0,0.0,"The 'province' column in the po_dashboard_links table is a required integer field that likely represents a province or regional identifier for location-specific dashboard configurations. This column can be used to filter or segment dashboard links based on geographical regions, enabling region-specific navigation and display settings in the purchase order system interface."
po_dashboard_links,city,int,NO,,,,,,,10.0,0.0,The 'city' column in the po_dashboard_links table stores an integer identifier representing the city associated with specific dashboard link configurations in the purchase order system. This column is required (non-nullable) and likely serves as a filter or grouping mechanism to display relevant PO dashboard links based on the user's city location.
po_dashboard_links,postal_code,varchar(255),NO,,,,,,255.0,,,"The postal_code column in the po_dashboard_links table stores ZIP or postal code values (up to 255 characters) associated with dashboard link configurations, likely used for filtering or organizing purchase order system navigation elements by location. This required field (non-nullable) helps ensure dashboard links can be properly segmented and displayed based on geographical regions or delivery zones."
po_dashboard_links,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the po_dashboard_links table records the timestamp of when each dashboard link configuration was last modified, storing this information as a datetime value. This non-nullable field is essential for tracking the recency of link configurations and can be useful in queries that need to find recently changed dashboard elements or audit configuration history."
po_dashboard_links,type,tinyint,NO,,,1,,,,3.0,0.0,"The ""type"" column in po_dashboard_links is a required tinyint field that categorizes different types of dashboard links or navigation elements in the purchase order system. When writing queries, use this column to filter or group dashboard links by their functional category, where different numeric values (likely 1, 2, 3, etc.) represent distinct types of links or navigation elements."
po_dashboard_links,sequence,int,YES,,,,,,,10.0,0.0,"The ""sequence"" column in the po_dashboard_links table is an integer field that determines the display order of dashboard links in the purchase order system interface. When writing queries, you can use this column to sort links in a specific order (using ORDER BY sequence) or to filter for links that should appear in certain positions within the navigation layout."
po_dashboard_links,updated_by,int,NO,,,,,,,10.0,0.0,The `updated_by` column in the po_dashboard_links table stores the user ID (as an integer) of the person who last modified the dashboard link configuration. This required field helps track changes and maintain accountability for updates to the PO system's navigation elements and link settings.
po_department_employees,po_department_employees_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The po_department_employees_id column serves as the primary key identifier for each unique employee-department assignment record in the po_department_employees table. This integer field is non-nullable and should be used when joining to related tables or when specifically identifying individual employee-department relationships within the PO system.
po_department_employees,department_id,int,NO,,,,,,,10.0,0.0,The department_id column in the po_department_employees table is a required integer field that identifies which department an employee belongs to within the purchase order system. This column is commonly used to join with other tables containing department information and is essential for filtering or grouping employees by their department assignments.
po_department_employees,employee_id,int,NO,,,,,,,10.0,0.0,The employee_id column in the po_department_employees table serves as a unique identifier for each employee within the purchase order system. This integer field is required (non-nullable) and should be referenced when joining with other employee-related tables or filtering specific employee records in the PO system.
po_department_employees,is_department_head,tinyint,NO,,,0,,,,3.0,0.0,"The `is_department_head` column in the `po_department_employees` table is a boolean flag (stored as tinyint) that indicates whether an employee serves as the head of their department, where 0 typically represents 'No' and 1 represents 'Yes'. This non-nullable field can be used in SQL queries to filter or identify department heads, such as when needing to route approvals or generate management reports."
po_department_employees,badges,varchar(50),YES,,,,,,50.0,,,The 'badges' column in the po_department_employees table stores employee badge identifiers or badge-related information as text strings up to 50 characters in length. This optional field (as indicated by being nullable) can be used in SQL queries to filter or group employees based on their security badges or access credentials within the purchase order system.
po_department_employees,created,datetime,NO,,,,,,,,,The 'created' column in the po_department_employees table stores the timestamp when an employee's department assignment record was initially created in the system. This non-nullable datetime field is useful for tracking when employees were first assigned to departments and can be used in SQL queries for auditing purposes or filtering records by their creation date.
po_departments,department_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The department_id column serves as the primary key in the po_departments table, uniquely identifying each department record in the purchase order management system. When writing SQL queries, use this column to join with other tables that reference departments or to filter specific department records, as it's a non-nullable integer that ensures data integrity and consistent department identification."
po_departments,department_name,varchar(255),YES,,,,,,255.0,,,"The department_name column in the po_departments table stores the descriptive names of departments involved in purchase order management, using text strings up to 255 characters in length. Since this field is nullable, queries should handle potential NULL values when filtering or joining on department_name, and it's recommended to use COALESCE or IS NULL/IS NOT NULL operators when working with this column."
po_departments,weight,int,NO,,,,,,,10.0,0.0,"The 'weight' column in the po_departments table is a required integer field that likely represents a priority or sorting value for departments in the purchase order system. This numeric value can be used to order or prioritize departments when displaying them in reports or interfaces, with higher or lower weights indicating relative importance or sequence in business processes."
po_departments,bizrule,varchar(255),YES,,,,,,255.0,,,"The 'bizrule' column in the po_departments table stores business rules or policies (up to 255 characters) that apply to specific departments when processing purchase orders. This optional field (nullable) can be used to filter or validate purchase order operations based on department-specific requirements, making it useful in queries that need to check or enforce departmental business rules."
po_departments,role,varchar(255),YES,,,,,,255.0,,,"The 'role' column in the po_departments table stores text-based descriptions (up to 255 characters) of departmental roles or responsibilities within the purchase order management system. This optional field (nullable) can be used in SQL queries to filter or group departments based on their functional roles, such as ""Purchasing"", ""Approvals"", or ""Finance""."
po_departments,is_active,tinyint(1),NO,,,1,,,,3.0,0.0,"The `is_active` column in the po_departments table is a boolean flag (stored as tinyint(1)) that indicates whether a department is currently active (1) or inactive (0) in the PO management system. This non-nullable field should be used in WHERE clauses when querying for active departments, such as `WHERE is_active = 1`, to ensure only currently operational departments are included in purchase order processing and reporting."
po_document_types,po_document_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_document_type_id column serves as the primary key in the po_document_types table, uniquely identifying each type of purchase order document in the procurement system. This non-nullable integer column should be referenced when joining to other tables that need to specify a purchase order document type, and it's essential for maintaining referential integrity across the procurement database."
po_document_types,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the po_document_types table stores the descriptive text identifier for each purchase order document type (e.g., ""Standard PO"", ""Blanket Order"", ""Emergency Order"") and is required for all records. When writing SQL queries, this column can be used to filter, group, or join with other tables to identify specific types of purchase order documents, and its varchar(255) format allows for detailed, human-readable type descriptions."
po_document_types,display_type,tinyint(1),YES,,,1,,,,3.0,0.0,"The `display_type` column in the `po_document_types` table is a boolean flag (tinyint(1)) that likely controls whether a particular purchase order document type should be displayed in user interfaces or reports. When writing queries, you can use this column to filter active or visible document types, where 1 typically indicates visible/active types and 0 indicates hidden/inactive types."
po_document_types,display_amount,int,YES,,,,,,,10.0,0.0,"The display_amount column in the po_document_types table is an optional integer field that likely controls the presentation order or display priority of different purchase order document types in the user interface. When writing queries, you can use this column to sort or filter purchase order document types based on their intended display sequence, with NULL values indicating no specific display preference."
po_documents,po_document_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_document_id column serves as the primary key identifier for each unique purchase order document record in the po_documents table. When writing SQL queries, use this column for precise record lookups, joining to related tables, or filtering specific purchase order documents, as it guarantees a unique reference to each PO document in the system."
po_documents,document_display_id,varchar(250),YES,,,,,,250.0,,,"The document_display_id column in the po_documents table stores a human-readable identifier or reference number for purchase order documents, with a maximum length of 250 characters. This field can be used to search for or filter purchase orders using their display ID, and since it's nullable, some PO documents may not have a display ID assigned."
po_documents,file_name,varchar(255),NO,,,,,,255.0,,,"The file_name column in the po_documents table stores the name of the purchase order document file, including its extension (e.g., ""PO123_2023.pdf""), with a maximum length of 255 characters. Since this is a required field (not nullable), every purchase order record must have an associated file name, making it useful for queries that need to locate or reference specific PO documents in the system."
po_documents,po_document_type_id,int,YES,,,,,,,10.0,0.0,"The po_document_type_id column in the po_documents table is an integer field that categorizes different types of purchase order documents (e.g., standard POs, blanket orders, or contract POs). When writing queries, this column can be used to filter or group purchase orders by their document type, and it likely serves as a foreign key reference to a document types lookup table, though this relationship isn't explicitly defined in the provided schema."
po_documents,po_supplier_id,int,YES,,,,,,,10.0,0.0,"The po_supplier_id column in the po_documents table is a foreign key reference that links each purchase order to its corresponding supplier or vendor. This nullable integer field helps establish relationships between purchase orders and supplier information, allowing queries to join with a supplier table to retrieve vendor details associated with each PO document."
po_documents,file_date,date,YES,,,,,,,,,"The file_date column in the po_documents table represents the date when a purchase order document was filed or created in the system. When writing SQL queries, you can use this column to filter or sort purchase orders by their filing date, making it useful for date-based reporting and tracking document chronology (e.g., SELECT * FROM po_documents WHERE file_date BETWEEN '2023-01-01' AND '2023-12-31')."
po_documents,entity,int,YES,,,,,,,10.0,0.0,"The ""entity"" column in the po_documents table is an integer field that likely represents an organizational unit, department, or business entity associated with each purchase order document. When writing queries, this column can be used to filter or group purchase orders by their organizational ownership, making it useful for scenarios where you need to analyze or retrieve PO documents for specific business entities."
po_documents,amount,"double(10,2)",YES,,,,,,,10.0,2.0,"The 'amount' column in the po_documents table stores the monetary value of purchase orders with precision up to two decimal places, allowing for values up to 8 digits before the decimal point. When querying this column, you can perform numerical calculations and comparisons to analyze purchase order values, and since it's nullable, remember to handle NULL values appropriately in your calculations or use COALESCE when needed."
po_documents,department_id,int,YES,,,,,,,10.0,0.0,"The department_id column in the po_documents table is an optional integer field that links purchase orders to their respective organizational departments. This column can be used in SQL queries to filter or group purchase orders by department, enabling analysis of procurement activities across different business units."
po_documents,notify_to,int,YES,,,,,,,10.0,0.0,"The ""notify_to"" column in the po_documents table stores a user ID (as an integer) indicating which user should receive notifications about changes or updates to the purchase order document. This optional field (as it's nullable) can be used in queries to join with a users table or to filter purchase orders based on notification recipients, making it useful for implementing notification systems or tracking document communication flows."
po_documents,currency_id,int,YES,,,,,,,10.0,0.0,"The currency_id column in the po_documents table is a foreign key reference that indicates which currency the purchase order amounts are denominated in. When writing queries, this column can be joined with a currency reference table to get currency codes or symbols, and it's important to note that the field can be null, suggesting some PO documents might not have a specified currency."
po_documents,note,text,YES,,,,,,65535.0,,,"The 'note' column in the po_documents table stores optional text comments or annotations related to specific purchase order documents. This free-form text field can be used to capture additional context, special instructions, or important remarks about the PO, and since it's nullable, not every purchase order record requires a note."
po_documents,refrence_type,smallint,YES,,,,,,,5.0,0.0,"The ""refrence_type"" column in the po_documents table is a smallint field that likely categorizes or classifies different types of purchase order references using numeric codes. When querying this column, you can use it to filter or group purchase orders based on their reference classification, though be aware that NULL values are permitted in this field."
po_documents,referring_id,int,YES,,,,,,,10.0,0.0,"The `referring_id` column in the `po_documents` table is an optional integer field that likely references related documents or transactions that led to the creation of this purchase order. When writing queries, this column can be used to trace document relationships or create hierarchical views of connected purchase orders, though its nullable nature means you should handle NULL values appropriately in your conditions."
po_documents,size,"decimal(11,0)",YES,,,,,,,11.0,0.0,"The 'size' column in the po_documents table stores the file size of purchase order documents, represented in bytes as a decimal number with up to 11 digits and no decimal places. This column can be used in queries to filter or analyze document sizes, such as finding large documents that may need archiving or identifying unusually small files that might be incomplete."
po_documents,type,varchar(50),YES,,,,,,50.0,,,"The 'type' column in the po_documents table is a variable-length string field (up to 50 characters) that categorizes the type or classification of purchase order documents. When writing SQL queries, this column can be used to filter or group purchase orders by their document type (e.g., 'standard', 'blanket', 'emergency'), and since it's nullable, queries should account for potential NULL values using appropriate NULL handling functions or conditions."
po_documents,status,tinyint,YES,,,,,,,3.0,0.0,"The 'status' column in the po_documents table uses a tinyint value to represent the current state of a purchase order document in the procurement workflow. When querying this column, you can filter or group purchase orders based on their status values (likely using predefined status codes where each number represents a specific state like draft, pending, approved, or rejected)."
po_documents,created_at,datetime,YES,,,,,,,,,"The created_at column in the po_documents table records the timestamp when each purchase order document was initially created in the system. This datetime field can be used for temporal filtering, sorting purchase orders chronologically, or analyzing PO creation patterns over time, making it particularly useful in queries that need to track document age or creation timing."
po_documents,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the po_documents table stores the user ID (as an integer) of the person who created the purchase order document. This column can be used to join with a users or employees table to retrieve information about the document creator, and since it's nullable, some PO documents might not have a recorded creator."
po_email_flows,po_email_flow_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_email_flow_id column serves as the primary key identifier for each unique email workflow configuration in the po_email_flows table. When writing SQL queries, use this column to uniquely identify or join specific PO email workflow records, such as when linking to related tables or filtering for particular email flow configurations."
po_email_flows,section,varchar(10),YES,,,,,,10.0,,,"The ""section"" column in the po_email_flows table is a varchar field that likely categorizes different segments or stages of the purchase order email workflow, with values limited to 10 characters. This optional field can be used to filter or group email flow configurations by their functional area or purpose within the PO communication process."
po_email_flows,email_type,tinyint,YES,,,,,,,3.0,0.0,"The `email_type` column in the `po_email_flows` table is a tinyint field that likely categorizes different types of purchase order email communications (such as PO creation, approval, rejection, etc.). When querying this table, you can use this column to filter or group email workflows by their specific communication purpose, though note that it accepts NULL values which should be handled appropriately in your queries."
po_email_flows,campaign_id,int,NO,,,,,,,10.0,0.0,"The campaign_id column in the po_email_flows table is a required integer field that identifies the specific email campaign or sequence associated with purchase order communications. This column helps link email workflow configurations to their respective marketing or notification campaigns, enabling proper organization and tracking of different PO-related email sequences."
po_email_flows,email_template_id,int,NO,,,,,,,10.0,0.0,"The email_template_id column in the po_email_flows table is a required integer field that references the specific email template to be used within a purchase order email workflow. This column helps link each email flow configuration to its corresponding template content, enabling the system to know exactly which email format and content should be used when sending automated PO-related communications."
po_email_flows,to_receipient,text,YES,,,,,,65535.0,,,"The `to_receipient` column in the `po_email_flows` table stores the email address(es) of the intended recipient(s) for purchase order related communications, accepting text values that can include individual email addresses or multiple addresses in a supported format. This column being nullable suggests that recipient information might be populated dynamically or pulled from other related tables during the email workflow execution."
po_email_flows,stage,tinyint,YES,,,,,,,3.0,0.0,"The 'stage' column in the po_email_flows table is a tinyint field that indicates the sequential position or phase of an email within a purchase order communication workflow. When querying this column, you can use it to filter or order emails based on their position in the communication sequence, where lower numbers typically represent earlier stages in the PO email flow."
po_email_flows,employee_status,tinyint,YES,,,,,,,3.0,0.0,"The employee_status column in the po_email_flows table is a tinyint field that likely indicates the current employment state or activity status of personnel involved in the PO email workflow. When writing queries, this column can be used to filter or segment email flows based on employee conditions (e.g., active, inactive, on leave), helping to ensure communications are routed appropriately based on staff availability or authorization status."
po_email_flows,applicant_status,tinyint,YES,,,,,,,3.0,0.0,"The `applicant_status` column in the po_email_flows table is a tinyint field that indicates the current status of an applicant within the purchase order email workflow sequence. When writing SQL queries, this column can be used to filter or segment email flows based on different applicant states, likely using small numeric values to represent statuses like pending, approved, or rejected."
po_email_flows,document_status,tinyint,YES,,,,,,,3.0,0.0,"The document_status column in po_email_flows is a tinyint field that indicates the current state or stage of a purchase order document within its email workflow sequence. When writing queries, this column can be used to filter or segment PO communications based on their processing status (e.g., WHERE document_status = 1 for active documents), with NULL values potentially representing documents that haven't yet entered the workflow."
po_email_flows,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_email_flows table records the exact date and time when each email workflow configuration was initially created in the system. This non-nullable datetime field is essential for auditing and tracking when PO email sequences were established, and can be useful in SQL queries for filtering or sorting email workflows by their creation date."
po_email_flows,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the po_email_flows table records the timestamp of when each email workflow configuration was last modified, automatically tracking changes to PO communication sequences. This non-nullable datetime field is essential for auditing changes and ensuring you're working with the most current version of email flow configurations, making it particularly useful in WHERE clauses when filtering for recently modified workflows or joining with other time-sensitive PO data."
po_email_flows,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the po_email_flows table is a required integer field that stores the user ID of the person who created the email workflow configuration. This column is commonly used in WHERE clauses or JOINs with user tables to track ownership and filter email workflows by their creator, and since it's non-nullable, every workflow record must have an associated creator."
po_email_flows,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `po_email_flows` table stores the user ID (as an integer) of the person who last modified the email workflow configuration. This column helps track changes and maintain accountability for updates to PO email sequences, though it can be null if the update tracking is not required for a particular record."
po_exchange_rates,po_exchange_rate_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_exchange_rate_id column serves as the primary key identifier for each unique exchange rate record in the po_exchange_rates table. When writing SQL queries, use this column for joining to related tables or when you need to reference a specific exchange rate record, as it provides a guaranteed unique identifier for each row in the table."
po_exchange_rates,currency_code,varchar(10),NO,,,,,,10.0,,,"The currency_code column in the po_exchange_rates table stores standardized currency identifiers (like 'USD', 'EUR', 'GBP') representing different national currencies used in exchange rate calculations. This required field is essential for identifying which currency pairs are being converted in purchase order transactions and should be referenced when joining with other financial tables or filtering for specific currency exchange rates."
po_exchange_rates,api_type,tinyint,NO,,,1,,,,3.0,0.0,"The api_type column in po_exchange_rates is a required tinyint field that indicates which external currency exchange rate API or source was used to obtain the exchange rate data. This column helps track and differentiate between different exchange rate providers or data sources, which is essential for auditing and validating currency conversion calculations."
po_exchange_rates,exc_rate,"decimal(10,6)",NO,,,0.000000,,,,10.0,6.0,"The exc_rate column in po_exchange_rates stores the actual currency exchange rate value with high precision (6 decimal places), representing how much one currency is worth in terms of another. This non-nullable decimal field is essential for accurate currency conversions in purchase orders and financial calculations, where even small differences in exchange rates can have significant financial implications."
po_exchange_rates,conversion_type,varchar(45),YES,,,,,,45.0,,,"The conversion_type column in po_exchange_rates specifies the method or context used for currency conversion (e.g., 'SPOT', 'DAILY', 'MONTHLY') in purchase order transactions. When writing SQL queries, this column can be used to filter or group exchange rates based on different conversion methodologies, helping to ensure the appropriate rate type is applied for specific financial calculations."
po_exchange_rates,created_at,date,NO,,,,,,,,,"The created_at column in the po_exchange_rates table records the date when each exchange rate record was initially created, serving as a timestamp for historical tracking. This date field is mandatory (non-nullable) and can be used to analyze exchange rate trends over time or filter currency conversion rates for specific dates when processing purchase orders."
po_expense_reason_codes,po_expense_reason_code_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_expense_reason_code_id column serves as the primary key identifier for each unique expense reason code in the po_expense_reason_codes lookup table. When writing SQL queries, use this column to join with other tables that reference expense reasons or to uniquely identify specific expense justification codes."
po_expense_reason_codes,name,text,NO,,,,,,65535.0,,,"The 'name' column in the po_expense_reason_codes table stores the descriptive text label for each purchase order expense reason code, such as ""Office Supplies"" or ""Travel Expenses"". When writing SQL queries, this required (non-nullable) text column can be used to filter, group, or display human-readable expense reasons, making it particularly useful for reporting and analysis of purchase order categorization."
po_expense_reason_codes,code,varchar(255),NO,,,,,,255.0,,,"The 'code' column in the po_expense_reason_codes table stores unique text identifiers (up to 255 characters) that represent specific reasons for purchase order expenses. When writing SQL queries, this column should be used to join with other tables that reference expense reasons or to filter/group expense records by their standardized reason codes, and since it's non-nullable, you can rely on it always having a value."
po_expense_reason_codes,status,tinyint(1),NO,,,,,,,3.0,0.0,"The 'status' column in the po_expense_reason_codes table is a required boolean flag (tinyint(1)) that indicates whether a reason code is currently active or inactive in the system. When writing SQL queries, use this column to filter for active reason codes (status = 1) or inactive ones (status = 0), particularly when displaying valid options for expense categorization."
po_expense_reason_codes,created_at,timestamp,YES,,,,,,,,,"The created_at column in the po_expense_reason_codes table stores the timestamp when each expense reason code record was initially created in the system. This column can be used in SQL queries to filter or sort expense reason codes by their creation date, which is particularly useful for auditing purposes or when analyzing the chronological evolution of expense categorization standards."
po_expense_reason_codes,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the po_expense_reason_codes table stores the user ID (as an integer) of the person who created each expense reason code record. This optional field can be used in SQL queries to track or filter expense codes based on their creator, and is commonly joined with a users or employees table to get the full details of who created each code."
po_invoices,po_invoice_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The po_invoice_id column serves as the primary key identifier for each unique purchase order invoice record in the po_invoices table. This non-nullable integer column should be used in WHERE clauses and JOIN conditions when you need to reference specific invoice records or link invoice data to related tables.
po_invoices,invoice_no,int,NO,,,,,,,10.0,0.0,The invoice_no column in the po_invoices table is a required integer field that stores unique invoice numbers for purchase order invoices. This column can be used to identify specific invoices in queries and is commonly referenced when tracking or looking up individual billing records for vendor purchases.
po_invoices,document_type,int,YES,,,,,,,10.0,0.0,"The document_type column in the po_invoices table is an integer field that likely categorizes different types of purchase order invoice documents (e.g., 1 for standard invoices, 2 for credit memos, 3 for advance payments). When querying this column, you can use it to filter or group invoice records by their document classification, though the field is optional as indicated by its nullable property."
po_invoices,file_date,date,YES,,,,,,,,,"The file_date column in the po_invoices table represents the date when a purchase order invoice was filed or recorded in the system. This optional date field can be useful for filtering and analyzing invoice records by their filing dates, and is commonly used in queries involving date-based reporting or tracking invoice processing timelines."
po_invoices,entity,int,YES,,,,,,,10.0,0.0,"The ""entity"" column in the po_invoices table is an integer field that likely represents an organizational unit, division, or legal entity associated with the purchase order invoice. When writing SQL queries, this column can be used to filter or group invoice records by their organizational entity, helping to analyze purchase order data across different business units or company structures."
po_invoices,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the po_invoices table is a required integer field that identifies which vendor/supplier the purchase order invoice belongs to. This column is commonly used to join with a suppliers table to access vendor details, and it can be used in WHERE clauses to filter invoices for specific suppliers."
po_invoices,department_id,int,NO,,,,,,,10.0,0.0,"The department_id column in the po_invoices table is a required integer field that identifies which department within the organization is responsible for or associated with a particular purchase order invoice. When writing queries, this column can be used to filter or group invoice records by department, and it likely joins to a departments reference table to obtain the department name and other details."
po_invoices,amount,"double(10,2)",YES,,,,,,,10.0,2.0,"The ""amount"" column in the po_invoices table stores the monetary value of each purchase order invoice as a decimal number with up to 10 total digits and 2 decimal places (e.g., 12345678.90). When writing SQL queries, this column can be used for financial calculations and reporting, such as summing total invoice amounts or filtering invoices by value ranges, and since it's nullable, remember to handle potential NULL values appropriately."
po_invoices,currency_id,int,YES,,,,,,,10.0,0.0,"The currency_id column in the po_invoices table is a foreign key reference that specifies which currency the invoice amounts are denominated in (e.g., USD, EUR, GBP). When writing queries involving monetary values from this table, you should join with the related currency reference table to get the actual currency code or symbol, and consider currency conversion requirements if comparing or aggregating amounts across different currencies."
po_invoices,notify_to,int,YES,,,,,,,10.0,0.0,"The `notify_to` column in the `po_invoices` table is an optional integer field that likely stores a reference ID indicating which user or department should be notified about invoice-related updates or actions. When writing queries, this column can be used to filter or join with user/contact tables to determine notification recipients, though its nullable nature means you should handle NULL values appropriately in your conditions."
po_invoices,note,text,YES,,,,,,65535.0,,,"The ""note"" column in the po_invoices table stores optional text comments or additional information related to specific purchase order invoices. This free-form text field can be used to record special instructions, payment terms, delivery notes, or any other relevant details that need to be documented alongside the invoice record."
po_invoices,referring_id,int,YES,,,,,,,10.0,0.0,"The referring_id column in the po_invoices table is an optional integer field that likely references related records or transactions that led to this purchase order invoice. When writing queries, this column can be used to trace the origin of invoices or link them to their source transactions, though its nullable nature means some invoices may not have an associated referring record."
po_invoices,referring_type,int,YES,,,,,,,10.0,0.0,"The referring_type column in the po_invoices table is an optional integer field that likely categorizes the source or type of referral that led to this purchase order invoice. When writing queries, this column can be used to filter or group invoices based on their referral classification, though NULL values should be handled appropriately since the field is nullable."
po_invoices,status,tinyint,YES,,,0,,,,3.0,0.0,"The `status` column in the po_invoices table is a tinyint field that indicates the current state of a purchase order invoice, likely using numeric codes to represent different stages like draft, pending, approved, or paid. When writing queries, this column can be used to filter or group invoices based on their processing status, though you should verify the specific status code meanings used in the system."
po_invoices,created_at,datetime,YES,,,,,,,,,"The created_at column in the po_invoices table records the timestamp when each purchase order invoice record was initially created in the system. This datetime field can be used in SQL queries to filter or sort invoices by their creation date, making it useful for analyzing invoice trends over time or finding records from specific time periods."
po_invoices,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the po_invoices table records the timestamp of when a purchase order invoice record was last modified, storing this information as a datetime value. This column can be useful for tracking changes to invoice records over time and is commonly used in WHERE clauses to filter for recently modified invoices or in ORDER BY clauses to sort invoices by their last update time."
po_invoices,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the po_invoices table is a required integer field that stores the user ID of the person who created the purchase order invoice record. When writing queries, this column can be used to filter or join with user tables to track invoice creation ownership, and since it's non-nullable, you should always include a valid user ID value when inserting new records."
po_item_receivers,po_item_receiver_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_item_receiver_id column serves as the primary key for the po_item_receivers table, uniquely identifying each receipt record of items delivered against purchase orders. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific receipt entries (e.g., WHERE po_item_receiver_id = X)."
po_item_receivers,receiver_id,int,NO,,,,,,,10.0,0.0,The receiver_id column in the po_item_receivers table serves as a unique identifier for each received item record against purchase orders. This non-nullable integer field should be referenced when linking receipt records to other related tables or when querying specific receipt transactions in the system.
po_item_receivers,po_request_item_id,int,NO,,,,,,,10.0,0.0,"The po_request_item_id column in the po_item_receivers table is a required integer field that links each received item to its corresponding purchase order item request. When writing queries, use this column to join with the purchase order items table to access the original order details or to group and analyze receipts by their associated purchase order line items."
po_item_receivers,received_at,datetime,NO,,,,,,,,,"The received_at column in the po_item_receivers table stores the exact date and time when purchased items were physically received at the facility. This mandatory datetime field is essential for tracking the timing of inventory receipts and can be used in SQL queries to filter or analyze delivery patterns, such as finding items received within specific date ranges or calculating delivery lead times."
po_links,po_link_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_link_id column serves as the primary key in the po_links table, uniquely identifying each relationship between a purchase order and its linked document or resource. As a non-nullable integer field, it ensures each link record can be distinctly referenced in queries, making it ideal for JOIN operations or WHERE clauses when tracking specific purchase order relationships."
po_links,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the po_links table stores descriptive text labels (up to 255 characters) that identify or describe the linked resource associated with a purchase order. This required field (non-nullable) likely contains values such as document titles, file names, or meaningful descriptions that help users understand what the link represents or points to."
po_links,link,text,NO,,,,,,65535.0,,,"The 'link' column in the po_links table stores the actual URL, file path, or reference string that connects a purchase order to its related resource. As a required text field (non-nullable), it contains the direct link information needed to access or locate the associated document or external reference for each purchase order relationship."
po_links,is_active,tinyint,NO,,,1,,,,3.0,0.0,"The `is_active` column in the po_links table is a boolean flag (stored as a tinyint) that indicates whether a link between a purchase order and its associated resource is currently valid and usable. When querying the table, you should typically include `WHERE is_active = 1` to retrieve only active links, unless specifically needing to access inactive or historical link records."
po_links,link_type,tinyint,NO,,,1,,,,3.0,0.0,"The `link_type` column in the po_links table is a required (non-nullable) tinyint field that categorizes the type of link or relationship between a purchase order and its associated resource. When writing queries, this column can be used to filter or group different types of purchase order links, where different numeric values (likely 1, 2, 3, etc.) represent distinct categories of relationships or document types."
po_links,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_links table records the exact date and time when a link between a purchase order and its associated resource was established. This non-nullable datetime field is useful for tracking the chronological history of document attachments and can be used in SQL queries for filtering, sorting, or analyzing when purchase order relationships were created."
po_links,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the po_links table records the timestamp of when a purchase order link record was last modified, storing this information as a datetime value that cannot be null. This column is commonly used in WHERE clauses to filter records by their last update time or in ORDER BY clauses to sort records chronologically, making it useful for tracking changes and maintaining data audit trails."
po_links,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the po_links table is a required integer field that stores the user ID of the person who created the link between a purchase order and its associated resource. This column is commonly used in WHERE clauses to filter links by their creator or in JOIN operations with a users table to get creator details, and since it's non-nullable, it ensures accountability for every link creation."
po_links,link_order,int,YES,,,,,,,10.0,0.0,"The link_order column in the po_links table is an optional integer field that likely determines the display or processing sequence of multiple links associated with a single purchase order. When writing queries, this column can be used to sort or prioritize related documents in a specific order, making it useful in ORDER BY clauses or when maintaining a consistent presentation sequence of linked resources."
po_locations,po_location_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_location_id column serves as the primary key in the po_locations table, uniquely identifying each physical location or address record associated with purchase orders. When writing SQL queries, use this column to join with other tables that reference location information, or to filter and retrieve specific location records using WHERE clauses."
po_locations,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the po_locations table stores the descriptive name or identifier for a physical location associated with purchase orders, such as ""Main Warehouse"" or ""Corporate HQ"". This required (non-nullable) text field, with a maximum length of 255 characters, helps identify and reference specific locations when querying address or shipping information related to POs."
po_locations,fr_name,varchar(255),YES,,,,,,255.0,,,"The 'fr_name' column in the po_locations table stores the French language version or translation of location names, allowing for multilingual support in address and location data. This optional (nullable) text field, with a maximum length of 255 characters, can be used in queries when French language location names are needed, particularly for applications serving French-speaking regions or requiring bilingual display of location information."
po_locations,address,text,NO,,,,,,65535.0,,,The 'address' column in the po_locations table stores the complete street address or physical location details as text for each purchase order location. This required field (non-nullable) should be referenced when querying for specific delivery locations or grouping purchase orders by shipping destination.
po_locations,office_no,varchar(100),YES,,,,,,100.0,,,"The `office_no` column in the `po_locations` table stores office or building numbers as text values (up to 100 characters) that help identify specific locations associated with purchase orders. This optional field (nullable) can be used to filter or group purchase orders by their associated office locations, making it useful for queries that need to analyze PO data by physical office spaces or building identifiers."
po_locations,country,int,NO,,,,,,,10.0,0.0,"The 'country' column in the po_locations table stores a numeric identifier (integer) representing the country associated with a purchase order location, and it must always have a value (non-nullable). When writing queries, this column can be used to filter or group purchase order locations by country, likely requiring a join with a reference table to get the actual country names since it stores IDs rather than text values."
po_locations,province,int,NO,,,,,,,10.0,0.0,"The 'province' column in the po_locations table stores a numeric identifier (integer) representing the province or state where a purchase order location is situated. This mandatory field (non-nullable) is used to categorize and group PO locations by their provincial/state jurisdiction, likely referencing a separate lookup table that maps these integer values to actual province names."
po_locations,city,int,NO,,,,,,,10.0,0.0,"The 'city' column in the po_locations table stores a numeric identifier (integer) that likely references a city lookup table, rather than storing the city name directly. Since this column is non-nullable, every purchase order location record must have a valid city ID assigned, ensuring that all locations are properly associated with a specific city."
po_locations,postal_code,varchar(255),NO,,,,,,255.0,,,"The postal_code column in the po_locations table stores the postal or ZIP code component of addresses associated with purchase orders, using a variable-length string format that accommodates different postal code formats from various countries. This required field is essential for accurate shipping and delivery operations, and can be used in SQL queries to filter or group purchase order locations by geographic regions based on postal codes."
po_locations,status,tinyint(1),NO,,DEFAULT_GENERATED,1,,,,3.0,0.0,"The 'status' column in the po_locations table is a required boolean flag (tinyint(1)) that indicates whether a location record is currently active or inactive. This binary status field is commonly used in SQL queries to filter for valid/active location records, typically using conditions like ""WHERE status = 1"" to retrieve only active locations associated with purchase orders."
po_locations,short_name,varchar(255),YES,,,,,,255.0,,,"The `short_name` column in the `po_locations` table stores a brief, human-readable identifier or nickname for a physical location associated with purchase orders, limited to 255 characters. This optional field (as indicated by being nullable) can be useful for quick location references in queries and reports, providing a more concise alternative to full address details."
po_locations,fr_short_name,varchar(255),YES,,,,,,255.0,,,"The fr_short_name column in the po_locations table stores abbreviated or shortened names for locations in French, allowing for localized reference to purchase order addresses. This optional (nullable) text field, with a maximum length of 255 characters, can be useful when querying or displaying location information in French-language contexts or when a shorter French location identifier is needed."
po_locations,location_type,tinyint,YES,,,0,,,,3.0,0.0,"The location_type column in the po_locations table is a tinyint field that categorizes different types of addresses or locations associated with purchase orders, likely using a small numeric code system (e.g., 1 for shipping address, 2 for billing address, etc.). When querying this column, you can use numeric comparisons to filter or group locations based on their type, and since it's nullable, remember to handle NULL values appropriately in your queries."
po_locations,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_locations table records the exact date and time when a location record was first added to the system, stored as a non-nullable datetime value. This timestamp can be useful for tracking when location entries were established, enabling queries to filter or sort location records based on their creation time, and maintaining an audit trail of location data."
po_locations,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the po_locations table is a required integer field that stores the user ID of the person who created the location record. This column can be used in JOIN operations with user/employee tables to track who added specific location entries, and it's commonly used in WHERE clauses to filter locations by their creator."
po_message_mentions,po_message_mention_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_message_mention_id column serves as the primary key identifier for each unique message mention record in the po_message_mentions table, using an integer data type. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific mention entries, as it's guaranteed to be unique and non-null for each row."
po_message_mentions,po_message_id,int,NO,,,,,,,10.0,0.0,"The po_message_id column in the po_message_mentions table serves as a reference to the specific message where a mention or notification occurred. This required integer field links each mention record to its parent message, enabling queries to retrieve all mentions associated with a particular message or to join with the messages table for additional message details."
po_message_mentions,notify_to,int,NO,,,,,,,10.0,0.0,"The `notify_to` column in the po_message_mentions table stores the user ID of the person who is being notified or mentioned in a message, represented as an integer value. This non-nullable field is essential for identifying the recipient of a notification and can be used in SQL queries to filter or join with user tables to find all mentions/notifications directed to specific users."
po_message_mentions,created_at,datetime,NO,,,,,,,,,"The created_at column in po_message_mentions stores the timestamp when a message mention or notification was created, using a datetime format. This non-nullable field is essential for tracking the chronological order of mentions and can be used in SQL queries for filtering mentions by date/time ranges or sorting them chronologically."
po_message_users,po_message_user_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_message_user_id column serves as the primary key in the po_message_users table, uniquely identifying each user-message relationship or preference setting. This non-nullable integer field is essential for joining with other tables and should be referenced when querying specific user-message associations or preferences within the messaging system."
po_message_users,po_message_id,int,NO,,,0,,,,10.0,0.0,"The po_message_id column in the po_message_users table serves as a reference to identify specific messages within the messaging system. This required integer field links user settings and preferences to their corresponding messages, enabling queries to retrieve or update message-specific configurations for individual users."
po_message_users,event_id,int,NO,,,0,,,,10.0,0.0,"The event_id column in the po_message_users table is a required integer field that likely references a specific message event or notification instance in the messaging system. This column helps link users to particular message events, enabling tracking of user-specific interactions or settings for each message event."
po_message_users,event_type,int,NO,,,0,,,,10.0,0.0,"The event_type column in po_message_users is a required integer field that categorizes the type of event or interaction a user has with a message in the messaging system. This column likely uses predefined numeric codes to represent different actions or states (such as message read, deleted, or flagged), helping to track how users interact with their messages."
po_message_users,user_id,int,NO,,,0,,,,10.0,0.0,"The user_id column in the po_message_users table is a required integer field that identifies individual users who are associated with messages in the messaging system. This column serves as a reference to connect specific users with their message settings and preferences, making it essential for filtering and joining operations when querying user-specific message data."
po_message_users,status,tinyint,YES,,,1,,,,3.0,0.0,"The 'status' column in the po_message_users table is a tinyint field that likely represents the current state of a message for a specific user, such as read/unread status or notification preferences. When writing queries, this column can be used to filter or group messages based on their status (e.g., WHERE status = 1 for read messages), making it useful for displaying message states or generating user activity reports."
po_messages,po_message_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_message_id column serves as the primary key in the po_messages table, uniquely identifying each message translation record in the internationalization system. When writing SQL queries, use this column for joining with related tables or when you need to reference specific message translations, ensuring that each message can be distinctly tracked and managed."
po_messages,event_id,int,NO,,,,,,,10.0,0.0,"The event_id column in the po_messages table is a required integer field that likely serves as a reference to specific events or triggers that need internationalized messages. This column can be used to join or filter message translations based on their associated event context, helping to retrieve the appropriate localized text for different system events or notifications."
po_messages,event_type,varchar(20),NO,,,,,,20.0,,,"The event_type column in the po_messages table is a required varchar field that categorizes the type of internationalization event or message context being translated. When querying this table, you can use this column to filter or group messages based on their specific event or context type (e.g., 'error', 'notification', 'validation'), helping to organize and retrieve related translations together."
po_messages,sender_id,int,NO,,,,,,,10.0,0.0,"The sender_id column in the po_messages table is a required integer field that identifies the user or system entity responsible for creating or submitting the translation message. When querying this table, you can use sender_id to filter or join with other tables to track message authorship or group translations by their source."
po_messages,message,mediumtext,NO,,,,,,16777215.0,,,"The 'message' column in the po_messages table stores the actual translated text content for internationalization purposes, using the mediumtext data type to accommodate longer strings up to 16MB in size. This required field (non-nullable) should be referenced when querying for specific translated messages or when comparing message content across different language versions."
po_messages,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_messages table records the timestamp when each message translation entry was initially created in the system. This non-nullable datetime field is useful for tracking the chronological history of translations and can be used in SQL queries to filter or sort messages based on their creation date, such as finding recently added translations or analyzing translation patterns over time."
po_messages,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the po_messages table records the timestamp of when each message translation was last modified, stored as a datetime value. This column is mandatory (non-nullable) and can be used to track changes, filter for recent updates, or sort translations by their modification date in SQL queries."
po_notifications,po_notification_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_notification_id column serves as the primary key for the po_notifications table, uniquely identifying each notification or alert related to purchase orders. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific notification event (e.g., WHERE po_notification_id = X)."
po_notifications,sender_id,int,NO,,,,,,,10.0,0.0,"The sender_id column in the po_notifications table is a required integer field that identifies the user or system entity who generated the purchase order notification. This column is essential for tracking the source of notifications and can be used in JOIN operations with user/sender lookup tables to retrieve sender details, making it useful in queries that need to analyze notification patterns by sender or attribute notifications to specific system actors."
po_notifications,event_id,int,YES,,,,,,,10.0,0.0,"The event_id column in the po_notifications table is an integer field that uniquely identifies specific notification events or alerts related to purchase orders. When querying this table, you can use event_id to filter, join, or group notification records, though since it's nullable, you should handle potential NULL values appropriately in your queries."
po_notifications,event_type,varchar(150),NO,,,,,,150.0,,,"The event_type column in the po_notifications table is a required text field (up to 150 characters) that categorizes the type or nature of the purchase order notification or alert. When querying this column, you can use it to filter or group notifications by specific event categories, such as 'PO_APPROVED', 'DELIVERY_DELAYED', or 'PRICE_CHANGE', helping to analyze or retrieve specific types of purchase order-related communications."
po_notifications,type,tinyint,NO,,,,,,,3.0,0.0,"The 'type' column in the po_notifications table is a required tinyint field that categorizes the different kinds of notifications or alerts related to purchase orders. When querying this table, you can use this column to filter or group notifications by their specific type (likely using predefined numeric codes, where each number represents a distinct notification category like status updates, approvals, or deadline alerts)."
po_notifications,note,text,YES,,,,,,65535.0,,,"The 'note' column in the po_notifications table stores the actual text content or message body of notifications related to purchase orders. This free-form text field can contain detailed information such as status update descriptions, comments from users, or important communications about the PO, and can be NULL when no specific message content is needed."
po_notifications,is_important,tinyint,NO,,,0,,,,3.0,0.0,"The `is_important` column in the po_notifications table is a binary flag (0 or 1) that indicates whether a purchase order notification is marked as high priority or requires special attention. When querying notifications, you can use this column to filter for critical alerts (WHERE is_important = 1) or to prioritize the display order of notifications in result sets."
po_notifications,item_id,int,YES,,,,,,,10.0,0.0,"The item_id column in the po_notifications table is an optional reference to a specific item or product associated with a purchase order notification. When writing queries, you can use this column to join with item-related tables or filter notifications for specific items, though the NULL values indicate that not all notifications are necessarily tied to individual items."
po_notifications,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_notifications table records the exact date and time when each purchase order notification or alert was generated in the system. This non-nullable datetime field is essential for temporal tracking and can be used in SQL queries to filter notifications by date ranges, sort notifications chronologically, or analyze notification patterns over time."
po_notifications,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the po_notifications table records the timestamp when a purchase order notification was last modified, using a datetime format. This non-nullable field is essential for tracking the chronological sequence of notification updates and can be used in SQL queries for filtering recent notifications, sorting by modification time, or analyzing notification history patterns."
po_notifications_documents,po_notifications_document_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_notifications_document_id column serves as the primary key for the po_notifications_documents table, uniquely identifying each document or notification record related to purchase orders. This non-nullable integer field should be used in JOIN operations when linking to related tables and in WHERE clauses when filtering for specific PO documents or notifications."
po_notifications_documents,po_notification_id,int,YES,,,,,,,10.0,0.0,"The po_notification_id column in the po_notifications_documents table serves as a reference to identify specific purchase order notifications. This optional (nullable) integer field can be used to link documents with their corresponding PO notifications, making it useful in JOIN operations or filtering queries when tracking specific notification-related documents."
po_notifications_documents,po_document_id,int,YES,,,,,,,10.0,0.0,"The po_document_id column in the po_notifications_documents table serves as a reference to identify specific documents associated with purchase order notifications. This nullable integer field can be used in SQL queries to filter, join, or group PO-related documents, making it useful for retrieving specific document records or analyzing document patterns within the purchase order notification system."
po_notifications_documents,created_at,datetime,NO,,,,,,,,,The created_at column in the po_notifications_documents table records the exact date and time when a PO-related document or notification was initially created in the system. This non-nullable datetime field is commonly used for tracking document chronology and can be helpful in filtering or sorting PO documents and notifications by their creation timestamp.
po_notifications_users,po_notifications_user_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_notifications_user_id column serves as the primary key in the po_notifications_users table, uniquely identifying each user-notification association record. This non-nullable integer field is essential for joining with other tables and can be used in WHERE clauses or JOINs to filter or retrieve specific notification preferences for users related to purchase orders."
po_notifications_users,po_notification_id,int,YES,,,,,,,10.0,0.0,"The po_notification_id column in the po_notifications_users table serves as a reference to specific purchase order notifications that users are subscribed to receive. This integer field helps establish the relationship between users and their notification preferences, allowing the system to determine which purchase order alerts should be sent to which users."
po_notifications_users,notify_to,int,YES,,,,,,,10.0,0.0,"The `notify_to` column in the `po_notifications_users` table stores the user ID (as an integer) of individuals who should receive purchase order notifications. This column can be used in JOIN operations with user tables to identify notification recipients, and its nullable property allows for flexible notification routing where a specific recipient might not always be required."
po_notifications_users,status,varchar(50),NO,,,,,,50.0,,,"The 'status' column in the po_notifications_users table stores the current state of a user's notification subscription for purchase orders, using a varchar(50) format that cannot be null. This column likely contains predefined status values (such as 'active', 'disabled', or 'pending') to indicate whether and how a user should receive PO notifications, making it useful in WHERE clauses when filtering for users who should receive specific types of purchase order alerts."
po_notifications_users,is_cleared,tinyint,NO,,,0,,,,3.0,0.0,"The `is_cleared` column in the `po_notifications_users` table is a binary flag (tinyint) that indicates whether a user has marked or cleared a specific purchase order notification, where 0 typically represents an uncleared notification and 1 represents a cleared notification. When querying this column, it can be used to filter for active/unread notifications (WHERE is_cleared = 0) or to identify notifications that have already been acknowledged by users (WHERE is_cleared = 1)."
po_notifications_users,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_notifications_users table records the exact date and time when a user's purchase order notification preference was initially established. This non-nullable datetime field is essential for auditing and tracking when notification subscriptions were set up, and can be useful in SQL queries for filtering or sorting notification preferences by their creation date."
po_payment_options,po_payment_option_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_payment_option_id column serves as the primary key identifier for each unique payment option record in the po_payment_options table. When writing SQL queries, use this column to uniquely identify specific payment methods, join with related tables, or filter payment options, as it provides a guaranteed unique reference for each payment configuration in the system."
po_payment_options,name,varchar(100),NO,,,,,,100.0,,,"The ""name"" column in the po_payment_options table stores the descriptive labels or titles of available payment methods (e.g., ""Credit Card"", ""PayPal"", ""Bank Transfer"") as text strings up to 100 characters long. Since this is a required field (not nullable), every payment option must have a name, making it useful for displaying payment choices to users and referencing specific payment methods in queries."
po_payment_options,type,smallint,NO,,,,,,,5.0,0.0,"The ""type"" column in the po_payment_options table is a required smallint field that categorizes different payment methods available for purchase orders. This column likely uses numeric codes to represent distinct payment types (such as credit card, bank transfer, cash, etc.), making it useful for filtering and grouping payment-related queries."
po_payment_options,company_id,smallint,NO,,,,,,,5.0,0.0,"The company_id column in the po_payment_options table is a required smallint field that identifies which company the payment option belongs to, enabling multi-company support within the payment system. This column should be used in WHERE clauses or JOINs when filtering payment options for a specific company, and it's commonly joined with a companies or organization table to link payment methods to their respective business entities."
po_payment_options,card_holder_name,varchar(255),YES,,,,,,255.0,,,"The card_holder_name column in the po_payment_options table stores the name of the credit/debit card holder as it appears on their payment card, with a maximum length of 255 characters. This optional field (as indicated by being nullable) is typically used when filtering or displaying payment method details related to card-based transactions, and can be referenced in queries where you need to match or verify cardholder information."
po_payment_options,card_number,varchar(45),YES,,,,,,45.0,,,"The card_number column in po_payment_options stores masked or encrypted credit/debit card numbers associated with available payment methods, using a varchar(45) format to accommodate various card number lengths and formatting. When querying this column, be aware that it may contain null values for non-card payment methods, and you should handle sensitive card data in accordance with security best practices."
po_payment_options,expiration,varchar(15),YES,,,,,,15.0,,,"The ""expiration"" column in the po_payment_options table stores the expiration date or period for payment methods in a string format up to 15 characters long. This column is typically used to track when payment methods like credit cards or payment agreements expire, and being nullable means not all payment options require an expiration date."
po_payment_options,cvv,varchar(10),YES,,,,,,10.0,,,"The 'cvv' column in the po_payment_options table stores the Card Verification Value format requirements or patterns for different payment methods, using a variable-length string up to 10 characters. This column is nullable since not all payment methods require a CVV, and it's typically used to define or validate the security code requirements for credit card payment options."
po_payment_options,address,text,YES,,,,,,65535.0,,,"The ""address"" column in the po_payment_options table stores the billing or payment address associated with specific payment methods, such as credit card billing addresses or bank addresses. When writing SQL queries, this text field can be used to filter or retrieve payment options based on address information, though its nullable property indicates that not all payment methods may require an address."
po_payment_options,limit_amt,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The limit_amt column in po_payment_options stores the maximum monetary amount allowed for transactions using a specific payment method, represented as a decimal number with 2 decimal places and a default value of 0.00. This non-nullable field is essential for enforcing transaction limits and can be used in SQL queries to filter or validate payment amounts against the allowed maximum threshold for each payment option."
po_payment_options,status,tinyint,NO,,,1,,,,3.0,0.0,"The `status` column in the po_payment_options table is a required (non-nullable) tinyint field that indicates whether a payment method is currently active or inactive in the system. When writing queries, this column can be used to filter for available payment options, where a value of 1 typically represents active/enabled payment methods and 0 represents inactive/disabled ones."
po_payment_options,note,text,YES,,,,,,65535.0,,,"The ""note"" column in the po_payment_options table stores optional text comments or additional information about specific payment methods or options. This free-form text field can be used to document important details, special instructions, or internal remarks about payment configurations, and since it's nullable, it doesn't require a value for every payment option record."
po_payment_options,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_payment_options table records the exact date and time when each payment option record was initially created in the system. When writing SQL queries, this non-nullable datetime field can be used for temporal filtering, auditing, or analyzing when payment methods were added to the system, and should be included automatically during INSERT operations."
po_payment_options,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the po_payment_options table records the timestamp of when a payment option record was last modified, storing this information as a datetime value. This non-nullable field is essential for tracking the history of changes to payment methods and can be useful in queries that need to find recently modified payment options or audit payment configuration changes."
po_payment_options,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the po_payment_options table is a required integer field that stores the user ID of the person who created each payment option record. When writing queries, this column can be used to track ownership of payment option configurations or join with user tables to get additional information about who set up specific payment methods."
po_payment_options,updated_by,int,YES,,,,,,,10.0,0.0,"The updated_by column in the po_payment_options table stores the user ID (as an integer) of the person who last modified the payment option record. This column helps track changes to payment method configurations and can be used in queries to audit who made updates to payment options, though it can be null if the update tracking is not required for a particular record."
po_procurements,po_procurement_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The po_procurement_id column serves as the primary key identifier for each unique procurement or purchase order record in the po_procurements table. This non-nullable integer field is essential for joining with related tables and should be referenced when querying specific purchase order details or establishing relationships with other procurement-related data.
po_procurements,supplier_id,int,YES,,,0,,,,10.0,0.0,"The supplier_id column in the po_procurements table is an integer field that identifies which vendor or supplier is associated with each purchase order. This column can be used to join with a suppliers or vendors table to access detailed supplier information, and since it's nullable, some procurement records may not yet have an assigned supplier."
po_procurements,request_id,int,YES,,,0,,,,10.0,0.0,"The request_id column in the po_procurements table represents the identifier for a specific purchase request that initiated the procurement process. This optional integer field can be used to link procurement records with their original purchase requests, enabling queries to trace the lifecycle of a procurement from initial request to final order."
po_procurements,request_item_id,int,YES,,,0,,,,10.0,0.0,"The request_item_id column in the po_procurements table is an integer field that likely references specific items or materials being requested in a purchase order. This optional field (as indicated by being nullable) can be used to link procurement records with detailed item specifications or to group related purchase requests, making it useful for queries that need to analyze or filter procurement data by specific requested items."
po_procurements,merge_data,json,YES,,,,,,,,,"The `merge_data` column in the `po_procurements` table stores additional procurement details in JSON format, allowing flexible storage of supplementary information that doesn't fit into the standard column structure. This optional field can be queried using JSON operators and functions to extract specific data points, making it useful for storing dynamic or vendor-specific attributes that may vary across different purchase orders."
po_procurements,change_item,json,YES,,,,,,,,,"The `change_item` column in the `po_procurements` table stores JSON-formatted data that likely contains historical changes or modifications made to procurement records. This column can be queried using JSON operators and functions to extract or analyze specific changes in purchase order details, making it useful for tracking the evolution of procurement records over time."
po_procurements,split_data,json,YES,,,,,,,,,"The ""split_data"" column in the po_procurements table stores JSON-formatted data that likely contains structured information about how a purchase order is split or allocated (e.g., across departments, cost centers, or budget codes). When querying this column, use JSON functions or operators specific to your database system to extract or filter specific elements within the JSON structure."
po_procurements,parent_id,int,YES,,,,,,,10.0,0.0,"The parent_id column in the po_procurements table is used to establish hierarchical relationships between procurement records, allowing for the tracking of related or derived purchase orders. This optional (nullable) integer field typically references another procurement record's ID, which can be useful for scenarios like blanket purchase orders, amendments, or when one procurement splits into multiple sub-orders."
po_procurements,add_list,tinyint,YES,,,0,,,,3.0,0.0,"The ""add_list"" column in the po_procurements table is a boolean-like flag (stored as a tinyint) that likely indicates whether a procurement record should be included in a specific list or tracking group. When querying this column, you can filter using values 0 or 1, where 0 typically represents false/not included and 1 represents true/included in the list."
po_procurements,split_status,tinyint(1),NO,,,0,,,,3.0,0.0,"The `split_status` column in the `po_procurements` table is a binary flag (tinyint(1)) that indicates whether a purchase order has been split into multiple parts or remains as a single order. When writing queries, you can use this column to filter or group purchase orders based on their split status, where 0 typically indicates a non-split order and 1 indicates a split order."
po_procurements,created_by,int,YES,,,0,,,,10.0,0.0,"The `created_by` column in the `po_procurements` table stores the user ID (as an integer) of the person who created the purchase order record. This column can be used to join with a users or employees table to retrieve information about who initiated the procurement, and since it's nullable, some historical or imported records might not have an associated creator."
po_procurements,updated_by,int,YES,,,0,,,,10.0,0.0,The `updated_by` column in the `po_procurements` table stores the user ID (as an integer) of the person who last modified the procurement record. This column helps track who made changes to purchase orders and can be used in queries to filter or join with a users table to get information about which staff members are updating procurement records.
po_report_issues,po_report_issue_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_report_issue_id column serves as the primary key identifier for each unique issue or problem recorded in the po_report_issues table. When writing SQL queries, use this column to uniquely identify specific PO report issues, join with related tables, or filter issue records, as it provides a guaranteed unique reference for each entry in the table."
po_report_issues,reported_by,int,NO,,,,,,,10.0,0.0,"The ""reported_by"" column in the po_report_issues table stores the unique identifier (integer) of the user or system that reported the purchase order issue. This required field (non-nullable) helps track who discovered or logged each PO report problem, enabling accountability and follow-up communication regarding the reported issues."
po_report_issues,description,text,NO,,,,,,65535.0,,,"The 'description' column in the po_report_issues table stores detailed text explanations of issues encountered during purchase order report processing. This required (non-nullable) text field should be used to document the specific nature of the problem, error message, or discrepancy found in the PO report, making it useful for filtering and analyzing issues through WHERE clauses or for generating detailed error reports."
po_report_issues,po_request_item_id,int,NO,,,,,,,10.0,0.0,"The po_request_item_id column in the po_report_issues table is a required integer field that links specific issues to individual purchase order request items. This column can be used in JOIN operations to connect with related purchase order item tables, allowing queries to retrieve detailed information about which PO items had processing issues or errors."
po_report_issues,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_report_issues table records the exact date and time when each purchase order issue was initially logged in the system. This non-nullable datetime field is essential for temporal tracking and can be used in SQL queries to filter, sort, or analyze PO issues by their creation timestamp, such as finding recent issues or generating time-based reports."
po_request_approvers,po_request_approver_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_request_approver_id is the primary key column in the po_request_approvers table, uniquely identifying each approval chain configuration record for purchase order requests. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific approver configuration in the purchase order workflow system."
po_request_approvers,approver_id,int,NO,,,,,,,10.0,0.0,"The approver_id column in the po_request_approvers table is a required integer field that uniquely identifies each individual approver in the purchase order approval workflow. When writing SQL queries, this column can be used to join with user or employee tables to retrieve approver details, or to filter and group purchase order requests by specific approvers."
po_request_approvers,po_request_id,int,NO,,,,,,,10.0,0.0,The po_request_id column in the po_request_approvers table serves as a reference to identify specific purchase order requests within the approval workflow system. This required integer field should be used in WHERE clauses or JOIN conditions when you need to link approval chain configurations to their corresponding purchase order requests or when filtering approval records for a particular PO request.
po_request_approvers,is_approved,tinyint,NO,,,0,,,,3.0,0.0,"The `is_approved` column in the `po_request_approvers` table is a required boolean flag (stored as tinyint) that indicates whether an approver has granted their approval for a purchase order request. When writing SQL queries, use this column with values 0 (not approved) or 1 (approved) to filter or check the approval status of purchase order requests in the workflow chain."
po_request_approvers,created_at,datetime,NO,,,,,,,,,The created_at column in the po_request_approvers table records the exact date and time when an approver record was added to the purchase order approval chain configuration. This non-nullable datetime field can be used in SQL queries to track when approval chain configurations were established or to filter/sort approver records based on their creation timestamp.
po_request_item_approvers,po_request_item_approver_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_request_item_approver_id is the primary key column that uniquely identifies each approval assignment record for purchase order request items. When writing SQL queries, use this column for precise record selection, joining with related tables, or tracking specific approval assignments, particularly in WHERE clauses or JOIN conditions (e.g., WHERE po_request_item_approver_id = [value] or JOIN statements)."
po_request_item_approvers,approver_id,int,NO,,,,,,,10.0,0.0,"The approver_id column in the po_request_item_approvers table stores the unique identifier of the user who is responsible for approving a specific purchase order request item. This mandatory integer field (non-nullable) is used to link to the user/approver's record in the related users or approvers table, enabling queries to track who needs to approve each line item in a purchase order request."
po_request_item_approvers,po_request_item_id,int,NO,,,,,,,10.0,0.0,"The po_request_item_id column serves as a reference to specific line items within purchase order requests that require approval. This mandatory integer field links each approval assignment to its corresponding purchase order request item, enabling queries to track and manage approvals at the individual line item level."
po_request_item_approvers,is_approved,tinyint,NO,,,0,,,,3.0,0.0,"The `is_approved` column in the po_request_item_approvers table is a required boolean flag (stored as tinyint) that indicates whether an approver has given their approval for a specific purchase order request item. This column uses 0 to represent pending or rejected approvals and 1 to represent confirmed approvals, making it useful in queries that need to filter or check the approval status of purchase order items."
po_request_item_approvers,req_type,tinyint,NO,,,1,,,,3.0,0.0,"The req_type column in po_request_item_approvers is a required tinyint field that specifies the type or category of approval required for a purchase order request item. When writing SQL queries, this column can be used to filter or group approval assignments based on their request type classification, with different numeric values representing distinct approval requirement categories."
po_request_item_approvers,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_request_item_approvers table records the exact date and time when an approver was assigned to a purchase order request item. This non-nullable datetime field is useful for tracking the chronological sequence of approval assignments and can be used in SQL queries for auditing, filtering assignments by date range, or analyzing approval workflow timelines."
po_request_item_comments,po_request_item_comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_request_item_comment_id is the primary key column that uniquely identifies each comment entry associated with purchase order request items. When writing SQL queries, use this column for precise record selection, joining with related tables, or tracking specific comments, as it serves as the main identifier for each comment record in the po_request_item_comments table."
po_request_item_comments,po_request_item_id,int,NO,,,,,,,10.0,0.0,"The po_request_item_id column serves as a reference to the specific purchase order request item that a comment is associated with. This required integer field enables queries to link comments directly to their corresponding purchase order line items, making it essential for retrieving all comments related to a particular purchase order item."
po_request_item_comments,message,text,NO,,,,,,65535.0,,,"The 'message' column in the po_request_item_comments table stores the actual text content of comments or notes related to purchase order request items, and it cannot be null. When writing SQL queries, this column can be used to search for specific comments, filter based on comment content, or retrieve the full text of communications associated with purchase order items."
po_request_item_comments,commented_by,int,NO,,,,,,,10.0,0.0,"The ""commented_by"" column in the po_request_item_comments table stores the user ID (as an integer) of the person who created the comment on a purchase order request item. This mandatory field (non-nullable) is essential for tracking who made each comment and can be used to join with a users table to retrieve the commenter's details."
po_request_item_comments,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_request_item_comments table records the exact date and time when each comment or note was added to a purchase order request item. This non-nullable datetime field is useful for sorting comments chronologically and tracking the timeline of communications, making it valuable for queries that need to filter or order comments by their creation time (e.g., SELECT * FROM po_request_item_comments WHERE created_at > '2023-01-01' ORDER BY created_at DESC)."
po_request_items,po_request_item_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_request_item_id column serves as the primary key for the po_request_items table, uniquely identifying each individual line item or product within a purchase order request. This integer column should be used in JOIN operations when linking to related tables or in WHERE clauses when filtering for specific line items, and since it's non-nullable, you can rely on it always having a value."
po_request_items,po_item_id,int,NO,,,,,,,10.0,0.0,"The po_item_id column serves as a unique identifier for each individual line item or product within a purchase order request. When writing SQL queries, use this column to specifically reference or join individual items within the po_request_items table, particularly when you need to track or filter specific products within purchase orders."
po_request_items,display_id,int,YES,,,1,,,,10.0,0.0,"The display_id column in po_request_items is an optional integer field that likely represents a user-friendly identifier or display number for each line item within a purchase order request. This column can be used for sorting, filtering, or presenting items in a specific order when displaying purchase order details, though its nullable nature suggests it may not be populated for all records."
po_request_items,po_request_id,int,NO,,,,,,,10.0,0.0,The po_request_id column in the po_request_items table is a required integer field that serves as a foreign key linking each line item to its parent purchase order request. This column is essential for joining po_request_items with the main purchase order table and should be included in queries when you need to retrieve all items belonging to a specific purchase order or when aggregating line item data by purchase order.
po_request_items,approval_status,tinyint,NO,,,0,,,,3.0,0.0,"The approval_status column in po_request_items is a required tinyint field that tracks the approval state of individual line items within a purchase order request, likely using different numeric values to represent states like pending, approved, or rejected. When querying this column, use numeric comparisons (e.g., WHERE approval_status = 0) to filter items based on their approval status, and consider joining with a reference or lookup table if you need to display the status labels rather than numeric codes."
po_request_items,is_active,tinyint,NO,,,1,,,,3.0,0.0,"The `is_active` column in the `po_request_items` table is a boolean flag (stored as tinyint) that indicates whether a purchase order line item is currently active (1) or inactive (0). This column can be used in WHERE clauses to filter out inactive items from queries, ensuring only valid, active purchase order items are included in results."
po_request_items,quantity,"float(10,3)",YES,,,,,,,10.0,3.0,"The `quantity` column in the `po_request_items` table represents the amount or number of units requested for each line item in a purchase order, stored as a decimal number with up to 3 decimal places for precision. This column can be used in SQL queries to calculate total order values (when multiplied by price), analyze order volumes, or filter for items with specific quantity ranges, and its nullable property allows for draft or incomplete line items to be saved without a specified quantity."
po_request_items,comment,text,YES,,,,,,65535.0,,,"The 'comment' column in the po_request_items table stores optional text notes or remarks specific to individual purchase order line items. This free-form text field can be used to capture special instructions, justifications, or additional details about the requested item that aren't covered by other structured fields in the table."
po_request_items,amortize,varchar(100),YES,,,,,,100.0,,,"The 'amortize' column in the po_request_items table stores text-based information (up to 100 characters) about how the cost of a purchase order item should be spread out or allocated over time. This optional field can be used in SQL queries to filter or group purchase order items based on their amortization preferences, helping to track items that need their costs distributed across multiple accounting periods."
po_request_items,data,mediumtext,YES,,,,,,16777215.0,,,"The 'data' column in the po_request_items table stores additional JSON or text-based information about purchase order line items that doesn't fit into standard structured columns. When querying this column, you may need to use JSON functions or text parsing operations depending on the data format, and since it's nullable, always check for NULL values when this field isn't required for a particular line item."
po_request_items,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the po_request_items table is a required integer field that stores the user ID of the person who created the line item entry in the purchase order request. When writing queries, this column can be joined with a users or employees table to retrieve information about who initiated each item request, and it's commonly used in WHERE clauses to filter items by their creator."
po_request_items,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_request_items table records the exact date and time when each purchase order line item was initially created in the system. This non-nullable datetime field is useful for tracking the chronological order of item entries and can be used in SQL queries for filtering items by creation date, generating time-based reports, or analyzing purchase order item trends over time."
po_requests,po_request_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_request_id column serves as the primary key in the po_requests table, uniquely identifying each purchase order request with a non-nullable integer value. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific purchase order requests (e.g., WHERE po_request_id = X)."
po_requests,display_id,int,NO,,,0,,,,10.0,0.0,"The display_id column in the po_requests table is a required integer field that likely serves as a user-friendly identifier for purchase order requests. This column can be used in SQL queries to reference or filter purchase orders using a simplified numbering system, making it easier to communicate about specific POs in reports or user interfaces."
po_requests,company_id,smallint,NO,,,,,,,5.0,0.0,"The company_id column in the po_requests table is a required field (non-nullable) that identifies which company the purchase order request belongs to, using a small integer value. This column is likely used to filter or group purchase order requests by company and may be used to join with a companies or organizations table to retrieve additional company details."
po_requests,department_id,int,YES,,,,,,,10.0,0.0,"The department_id column in the po_requests table is an integer field that identifies which department submitted the purchase order request. This optional field (as it's nullable) can be used to filter or group purchase orders by department, making it useful for queries that need to analyze PO patterns across different organizational units."
po_requests,po_approval_routing_id,int,YES,,,0,,,,10.0,0.0,"The po_approval_routing_id column in the po_requests table is an optional integer field that likely references the routing path or workflow sequence for purchase order approvals. This column can be used to track which approval process or chain of approvers is assigned to each PO request, making it useful in queries that need to analyze or filter purchase orders based on their approval workflows."
po_requests,date_required,datetime,YES,,,,,,,,,"The `date_required` column in the `po_requests` table represents the date and time when the requested items or services are needed by the requester. When writing SQL queries, you can use this datetime field to filter or sort purchase orders based on their required delivery dates, such as finding urgent requests or organizing POs by their timeline requirements."
po_requests,submited_by,int,YES,,,,,,,10.0,0.0,"The ""submited_by"" column in the po_requests table stores the user ID (as an integer) of the person who submitted the purchase order request. This column can be used to join with a users or employees table to get the submitter's details, and since it's nullable, some PO requests might not have a recorded submitter."
po_requests,description,text,YES,,,,,,65535.0,,,"The 'description' column in the po_requests table stores text-based descriptions of purchase order requests, providing additional details about what is being ordered or the purpose of the purchase. Since this field is nullable, it's optional and can be used in SQL queries with IS NULL/IS NOT NULL conditions, or included in WHERE clauses to search for specific keywords within purchase order descriptions."
po_requests,total_cost,"decimal(11,2)",NO,,,0.00,,,,11.0,2.0,"The total_cost column in the po_requests table represents the total monetary value of a purchase order request, stored as a decimal number with up to 11 total digits and 2 decimal places (e.g., 123456789.00). This non-nullable field must always have a value and defaults to 0.00, making it suitable for calculations and financial reporting queries where you need to aggregate or compare purchase order amounts."
po_requests,next_approver_id,int,YES,,,,,,,10.0,0.0,"The next_approver_id column in the po_requests table identifies the employee or user who needs to review and approve the purchase order request next in the approval workflow. This nullable integer field can be used to track the current stage of approval and is likely referenced as a foreign key to link to a user or employee table, making it useful in queries that need to find pending approvals for specific approvers or track the approval chain."
po_requests,status,tinyint,NO,,,0,,,,3.0,0.0,"The 'status' column in the po_requests table is a required (non-nullable) tinyint field that tracks the current state of purchase order requests using numeric codes. When querying this table, you can filter or group purchase orders based on their status values (e.g., WHERE status = 1 for approved requests), though you should refer to the application's documentation for the specific meaning of each status code."
po_requests,request_type,tinyint,NO,,,1,,,,3.0,0.0,"The `request_type` column in the `po_requests` table is a required (non-nullable) tinyint field that categorizes the type of purchase order request. When writing queries, you can use this column to filter or group PO requests by their type, where different numeric values (likely 0, 1, etc.) represent distinct request categories or classifications."
po_requests,request_submitted_date,datetime,YES,,,,,,,,,"The request_submitted_date column in the po_requests table captures the date and time when a purchase order request was initially submitted into the system. This datetime field can be used for filtering PO requests by submission timeframes, tracking request processing times, or analyzing submission patterns, and since it's nullable, some historical records might not have this information recorded."
po_requests,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_requests table records the exact date and time when each purchase order request was initially created in the system. This non-nullable datetime field is useful for tracking when PO requests were submitted and can be used for filtering, sorting, or analyzing purchase order request patterns over time."
po_requests,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the po_requests table records the timestamp of when a purchase order request was last modified, automatically tracking any changes made to the record. This non-nullable datetime field is commonly used in WHERE clauses for filtering records by modification date or in ORDER BY clauses to sort PO requests based on their last update time."
po_requests,created_by,int,NO,,,,,,,10.0,0.0,"The `created_by` column in the `po_requests` table is a required integer field that stores the identifier of the user who created the purchase order request. When writing queries, this column can be used to filter or join with a users table to track who initiated specific PO requests, and it's commonly used in WHERE clauses like `WHERE created_by = [user_id]` or in JOIN operations to get creator details."
po_requests,updated_by,int,YES,,,,,,,10.0,0.0,The `updated_by` column in the `po_requests` table stores the user ID (as an integer) of the person who last modified the purchase order request record. This column can be used to track who made changes to PO requests and is commonly joined with a users or employees table to get the actual name or details of the person who made the update.
po_requests,approval_stage,tinyint,NO,,,0,,,,3.0,0.0,"The approval_stage column in the po_requests table is a required (non-nullable) tinyint field that tracks the current approval level or stage of a purchase order request. When querying this column, you can use numeric comparisons (e.g., WHERE approval_stage = 0 or WHERE approval_stage > 2) to filter PO requests based on their current position in the approval workflow."
po_requests,is_recurring,tinyint,NO,,,0,,,,3.0,0.0,"The `is_recurring` column in the `po_requests` table is a boolean flag (stored as a tinyint) that indicates whether a purchase order is a one-time request (0) or a recurring order (1). This non-nullable field can be used in WHERE clauses to filter or group purchase orders based on their recurring status, making it useful for analyzing patterns in regular versus one-time purchases."
po_requests,recurring_parent_id,int,YES,,,,,,,10.0,0.0,"The recurring_parent_id column in the po_requests table is used to establish relationships between recurring purchase orders by linking a child PO to its original parent PO. When a PO is part of a recurring series, this column stores the ID of the original (parent) PO request, while NULL indicates it's either the parent PO itself or a non-recurring request."
po_rfe_items,po_rfe_item_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_rfe_item_id column serves as the primary key identifier for individual line items within purchase order exception requests, using auto-incrementing integers to ensure each record is uniquely identifiable. This column should be used in JOIN operations when linking to related tables or when specifically querying for individual PO RFE items."
po_rfe_items,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the po_rfe_items table stores the descriptive name or title of each product or line item being requested in a Purchase Order RFE document, with a maximum length of 255 characters. This required field (non-nullable) should be used when you need to identify or search for specific items within purchase order exception requests."
po_rfe_items,display_id,int,YES,,,1,,,,10.0,0.0,"The display_id column in the po_rfe_items table is an optional integer field that likely serves as a display or presentation order number for items within a Purchase Order RFE document. When writing queries, this column can be used to sort or organize line items in a specific sequence for display purposes, though its nullable nature means some records may not have an assigned display order."
po_rfe_items,po_request_id,int,NO,,,,,,,10.0,0.0,The po_request_id column in the po_rfe_items table serves as a reference to identify which Purchase Order Request for Exception (PO RFE) document each line item belongs to. This required integer field is commonly used in JOIN operations to connect line items with their parent PO RFE document and should be included in WHERE clauses when filtering for items associated with specific purchase order requests.
po_rfe_items,approval_status,tinyint,NO,,,0,,,,3.0,0.0,"The approval_status column in the po_rfe_items table is a required (non-nullable) tinyint field that tracks the approval state of individual line items within Purchase Order RFE documents. When querying this column, use numeric values to filter or group items based on their approval status, where different numbers likely represent states such as pending, approved, or rejected."
po_rfe_items,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the po_rfe_items table is a required integer field that identifies the vendor or supplier associated with each purchase order exception request line item. This column can be used to join with a suppliers or vendors table to retrieve additional supplier information, and since it's non-nullable, every PO RFE item must have an assigned supplier."
po_rfe_items,currency_id,int,NO,,,,,,,10.0,0.0,The currency_id column in the po_rfe_items table is a required integer field that specifies the currency type for the monetary values associated with each purchase order exception request item. This column likely references a currency lookup table and is essential for accurate financial calculations and reporting across different currencies in the procurement process.
po_rfe_items,account_code,varchar(255),NO,,,,,,255.0,,,"The account_code column in the po_rfe_items table stores the accounting or budget code associated with each purchase order exception request line item. This required field (non-nullable) helps track and categorize expenses by their appropriate accounting classifications, enabling proper financial allocation and reporting for procurement exceptions."
po_rfe_items,total_cost,"decimal(11,2)",NO,,,0.00,,,,11.0,2.0,"The total_cost column in po_rfe_items represents the total monetary value of a line item in a Purchase Order RFE document, stored as a decimal number with up to 11 total digits and 2 decimal places (e.g., 12345678.90). When querying this non-nullable column, you can rely on it always having a value (defaulting to 0.00 if not specified), making it useful for financial calculations and reporting across purchase order exception requests."
po_rfe_items,comment,text,YES,,,,,,65535.0,,,"The 'comment' column in the po_rfe_items table stores optional text notes or remarks related to specific line items in Purchase Order Request for Exception (RFE) documents. When writing SQL queries, this column can be used to search for or filter items based on their associated comments, though be aware that the field may contain NULL values since it's not required."
po_rfe_items,is_active,tinyint,NO,,,1,,,,3.0,0.0,"The `is_active` column in the po_rfe_items table is a required boolean flag (stored as tinyint) that indicates whether a purchase order request item is currently active or inactive in the system. This column should be used in WHERE clauses when querying for active items (WHERE is_active = 1) or to filter out inactive records, ensuring that only relevant, active purchase order request items are included in query results."
po_rfe_items,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the po_rfe_items table is a required integer field that stores the user ID of the person who created the purchase order request for exception line item. When writing queries, this column can be used to track item creation ownership and is commonly joined with a users or employees table to retrieve the creator's details."
po_rfe_items,updated_by,int,NO,,,,,,,10.0,0.0,The updated_by column in the po_rfe_items table is a required integer field that stores the user ID of the person who last modified the purchase order request for exception line item record. This column is commonly used in WHERE clauses to filter items by their last modifier or in JOIN operations with user/employee tables to retrieve information about who made recent changes to PO RFE items.
po_rfe_items,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_rfe_items table records the exact date and time when each purchase order exception request line item was initially created in the system. This non-nullable datetime field is essential for tracking the chronological order of item entries and can be used in SQL queries for temporal filtering, auditing, or analyzing procurement request patterns over time."
po_rfe_items,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the po_rfe_items table records the timestamp of when each purchase order exception request line item was last modified, storing this information as a datetime value. This non-nullable field is essential for tracking the chronological history of changes to PO exception request items and can be useful in queries that need to filter or sort items based on their last update time."
po_rfo_details,po_rfo_detail_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_rfo_detail_id column serves as the primary key in the po_rfo_details table, uniquely identifying each Purchase Order (PO) or Ready For Order (RFO) record. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific PO/RFO entries, as it's a non-nullable integer that guarantees unique identification."
po_rfo_details,po_request_id,int,YES,,,,,,,10.0,0.0,"The po_request_id column in the po_rfo_details table is an optional integer field that uniquely identifies a purchase order request. When writing SQL queries, this column can be used to filter or join specific purchase order requests, though its nullable nature means you should handle NULL values appropriately in your conditions."
po_rfo_details,payment_due_date,datetime,YES,,,,,,,,,"The payment_due_date column in the po_rfo_details table stores the datetime when a payment is scheduled to be due for a purchase order or RFO. When writing SQL queries, this column can be used for date-based filtering, reporting on upcoming payments, or analyzing payment schedules, and since it's nullable, queries should handle potential NULL values appropriately."
po_rfo_details,payment_term,smallint,YES,,,,,,,5.0,0.0,"The payment_term column in the po_rfo_details table stores the agreed-upon payment duration or terms (as a small integer value) associated with Purchase Orders and Ready For Orders. When writing queries, this optional field can be used to filter or group orders based on their payment terms, though NULL values should be handled appropriately since the column is nullable."
po_rfo_details,receiver_type,tinyint,YES,,,0,,,,3.0,0.0,"The receiver_type column in po_rfo_details is a tinyint field that likely categorizes the type of entity receiving the purchase order or RFO using small numeric values (0-255). When writing queries, this column can be used to filter or group PO/RFO records based on different receiver categories, though its nullable nature means you should handle NULL values appropriately in your conditions."
po_rfo_details,received_by,int,YES,,,,,,,10.0,0.0,"The `received_by` column in the `po_rfo_details` table stores an integer identifier representing the person or entity who received the purchase order or RFO. This optional field (nullable) can be used in SQL queries to filter or group orders based on their receivers, such as `SELECT * FROM po_rfo_details WHERE received_by = 123` to find all orders received by a specific individual."
po_rfo_details,po_location_id,int,YES,,,,,,,10.0,0.0,"The po_location_id column in the po_rfo_details table represents the location identifier associated with a purchase order (PO). This nullable integer field can be used in SQL queries to filter or group purchase orders by their respective locations, making it useful for location-based analysis and reporting of PO data."
po_rfo_details,est_arrival_date,datetime,YES,,,,,,,,,"The est_arrival_date column in the po_rfo_details table stores the expected or estimated date and time when ordered items are anticipated to arrive. When writing SQL queries, this datetime field can be used for filtering, sorting, or analyzing delivery timelines, with NULL values being permissible if the arrival date is not yet determined or applicable."
po_rfo_recurring_dates,po_rfo_recurring_date_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_rfo_recurring_date_id column serves as the primary key identifier for each unique recurring date entry in the po_rfo_recurring_dates table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific recurring PO/RFO date records."
po_rfo_recurring_dates,po_rfo_recurring_id,int,NO,,,,,,,10.0,0.0,"The po_rfo_recurring_id column serves as an identifier for individual recurring purchase order (PO) or ready-for-operations (RFO) events in the po_rfo_recurring_dates table. When writing SQL queries, use this column to uniquely identify or join specific recurring events, such as in WHERE clauses or JOIN conditions."
po_rfo_recurring_dates,next_installment_date,datetime,NO,,,,,,,,,"The next_installment_date column in po_rfo_recurring_dates represents the upcoming scheduled date for either a purchase order or ready-for-operations event. When querying this column, it can be used to find future scheduled events or filter records based on specific time periods, making it particularly useful for scheduling and planning queries."
po_rfo_recurring_dates,created_at,datetime,NO,,,,,,,,,"The created_at column in the po_rfo_recurring_dates table records the exact timestamp when a recurring purchase order or RFO event entry was first created in the system. This non-nullable datetime field is useful for tracking the chronological history of recurring events and can be used in SQL queries for auditing, filtering records by creation date, or analyzing patterns in scheduling setup times."
po_rfo_recurrings,po_rfo_recurring_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_rfo_recurring_id is the primary key column in the po_rfo_recurrings table, uniquely identifying each recurring purchase order or RFO record. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific recurring purchase orders (e.g., WHERE po_rfo_recurring_id = X)."
po_rfo_recurrings,po_request_id,int,NO,,,,,,,10.0,0.0,The po_request_id column in the po_rfo_recurrings table serves as a reference to identify specific purchase order requests within the recurring order system. This non-nullable integer field should be used in WHERE clauses or JOIN conditions when you need to link or filter recurring purchase orders with their corresponding request details.
po_rfo_recurrings,recurring_type,tinyint,NO,,,0,,,,3.0,0.0,"The recurring_type column in po_rfo_recurrings is a required tinyint field that specifies the type or category of the recurring purchase order or RFO. When writing SQL queries, use this column to filter or group recurring orders based on their classification type, where different numeric values (likely 0, 1, 2, etc.) represent distinct recurring order patterns or categories."
po_rfo_recurrings,number_of_installment,int,NO,,,,,,,10.0,0.0,"The number_of_installment column in the po_rfo_recurrings table represents the total number of payment installments or recurring intervals for a purchase order or RFO. This required integer field can be used in SQL queries to filter or analyze purchase orders based on their payment schedule length, such as finding all orders with more than 12 installments or calculating average order values by installment count."
po_rfo_recurrings,installment_completed,smallint,NO,,,0,,,,5.0,0.0,"The `installment_completed` column in the `po_rfo_recurrings` table is a required smallint field that tracks the number of completed installments for a recurring purchase order or RFO. When querying this column, you can use it to monitor progress of recurring orders, such as filtering for orders with specific completion counts or comparing against total expected installments."
po_rfo_recurrings,period,smallint,NO,,,,,,,5.0,0.0,"The 'period' column in the po_rfo_recurrings table is a required smallint field that specifies the frequency interval for recurring purchase orders. When writing queries, this column can be used to filter or group recurring orders based on their periodic scheduling (e.g., every X days/weeks/months), helping to analyze purchase order patterns and scheduling."
po_rfo_recurrings,is_active,tinyint,NO,,,1,,,,3.0,0.0,"The `is_active` column in the po_rfo_recurrings table is a required boolean flag (stored as tinyint) that indicates whether a recurring purchase order is currently active (1) or inactive (0). When querying for current or valid recurring purchase orders, you should typically include ""WHERE is_active = 1"" to filter out inactive or discontinued recurring orders."
po_rfo_recurrings,start_date,datetime,NO,,,,,,,,,"The start_date column in the po_rfo_recurrings table represents the initial date when a recurring purchase order or RFO becomes active or begins its cycle. This required datetime field is essential for filtering and sorting recurring orders by their commencement date, and can be used in queries to determine which orders are currently active or scheduled to start in a specific time period."
po_security_questions,po_security_question_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_security_question_id column serves as the primary key in the po_security_questions table, uniquely identifying each security question record with a non-nullable integer value. When writing SQL queries, use this column for joining with related tables or filtering specific security questions, such as ""WHERE po_security_question_id = [value]"" or ""JOIN"" operations."
po_security_questions,question,text,YES,,,,,,65535.0,,,"The 'question' column in the po_security_questions table stores the actual text of security questions that users can select or provide for account verification purposes. When writing queries, this text column can be used to retrieve, filter, or search for specific security questions, and since it's nullable, be aware that some records might not have a question value."
po_security_questions,answer,text,YES,,,,,,65535.0,,,"The 'answer' column in the po_security_questions table stores the user's responses to security questions, which can be used for account verification and recovery processes. This text field allows for flexible-length responses and can be NULL, making it suitable for storing various types of security answers while accommodating cases where an answer hasn't been provided yet."
po_security_questions,created_at,datetime,YES,,,,,,,,,"The created_at column in the po_security_questions table records the timestamp when each security question and answer pair was initially added to the system. This datetime field can be useful for auditing purposes or tracking when security questions were established, and since it's nullable, some legacy records might not have this information."
po_security_questions,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the po_security_questions table stores the user ID of the person who created or added the security question record, allowing for audit tracking of question creation. This optional integer field can be used in JOIN operations with user tables to retrieve information about who created specific security questions, or in WHERE clauses to filter questions by their creator."
po_security_questions,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the po_security_questions table records the timestamp of when a security question or answer was last modified, using a datetime format. This column can be useful for auditing changes, tracking the recency of security question updates, and can be used in SQL queries to filter or sort security questions based on their modification time."
po_security_questions,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `po_security_questions` table stores the user ID of the person who last modified a security question record. This optional integer field helps track who made changes to security questions, which is useful for audit trails and accountability purposes."
po_security_questions,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the po_security_questions table is a required integer field that identifies which supplier the security question and answer belong to. This column is used to link security questions to specific supplier accounts, enabling proper authentication and account recovery processes for supplier-specific access."
po_supplier_comments,po_supplier_comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_supplier_comment_id column serves as the primary key for the po_supplier_comments table, uniquely identifying each comment or note entry about suppliers in the PO system. When writing SQL queries, use this column for precise record selection, joining with related tables (if relationships are added in the future), or when you need to reference specific supplier comments."
po_supplier_comments,comment,text,YES,,,,,,65535.0,,,"The 'comment' column in the po_supplier_comments table stores free-form text notes and comments about suppliers in the purchase order system. When querying this column, you can use text-based operations (like LIKE, ILIKE, or text search functions) to search through supplier-related comments, and since it's nullable, always consider handling NULL values appropriately in your queries."
po_supplier_comments,created_at,datetime,YES,,,,,,,,,"The created_at column in the po_supplier_comments table records the date and time when each supplier comment or note was initially created in the system. This datetime field can be useful for filtering comments by date ranges, sorting comments chronologically, or analyzing supplier communication patterns over time."
po_supplier_comments,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the `po_supplier_comments` table stores the user ID (as an integer) of the person who created the supplier comment or note. This column can be used to track who authored specific comments and can be joined with a user table (if one exists) to get additional information about the comment creator, though no formal foreign key relationship is currently defined."
po_supplier_comments,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `po_supplier_comments` table tracks the date and time when a supplier comment or note was last modified. This datetime field helps maintain an audit trail of when changes were made to supplier comments, which can be useful for filtering recent updates or tracking the chronological history of supplier interactions."
po_supplier_comments,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `po_supplier_comments` table stores the user ID (as an integer) of the person who last modified the supplier comment record. This optional field helps track who made changes to supplier comments and notes, which is useful for audit trails and accountability in the procurement process."
po_supplier_comments,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the po_supplier_comments table is a required integer field that identifies which supplier a comment or note is associated with. While not explicitly defined as a foreign key, it serves as a logical reference to suppliers and should be used in WHERE clauses or JOIN conditions when querying for comments related to specific suppliers."
po_supplier_contacts,po_supplier_contact_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_supplier_contact_id column serves as the primary key in the po_supplier_contacts table, uniquely identifying each supplier contact record with a non-nullable integer value. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific supplier contact, such as ""WHERE po_supplier_contact_id = 123""."
po_supplier_contacts,name,varchar(45),YES,,,,,,45.0,,,"The 'name' column in the po_supplier_contacts table stores the full name or display name of supplier representatives and contacts, with a maximum length of 45 characters. When writing queries, this column can be used to search for specific contacts or to display contact names in reports, and since it's nullable, be sure to handle potential NULL values appropriately in your queries."
po_supplier_contacts,designation,varchar(100),YES,,,,,,100.0,,,"The ""designation"" column in the po_supplier_contacts table stores the job title or role of supplier representatives (e.g., ""Sales Manager,"" ""Account Executive,"" ""Procurement Specialist""). When writing SQL queries, this column can be used to filter or group supplier contacts by their professional roles, helping to identify appropriate points of contact for specific business functions."
po_supplier_contacts,email,varchar(100),YES,,,,,,100.0,,,"The 'email' column in the po_supplier_contacts table stores email addresses (up to 100 characters) for supplier representatives and key personnel. This column can be used in SQL queries to filter, search, or retrieve contact information for supplier communications, and since it's nullable, some contacts might not have email addresses recorded."
po_supplier_contacts,phone,varchar(45),YES,,,,,,45.0,,,"The 'phone' column in the po_supplier_contacts table stores telephone contact numbers for supplier representatives, accepting up to 45 characters in varying formats. This optional field (nullable: YES) can be used in SQL queries to filter, search, or retrieve supplier contact information based on phone numbers, making it useful for communication-related queries or reports that require supplier phone details."
po_supplier_contacts,created_at,datetime,YES,,,,,,,,,"The created_at column in the po_supplier_contacts table records the date and time when a supplier contact record was initially added to the system. This datetime field can be useful for tracking when relationships with supplier contacts began and for analyzing the history of supplier contact management, making it particularly valuable in queries that need to filter or sort contacts by their creation date."
po_supplier_contacts,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the po_supplier_contacts table records the timestamp of when a supplier contact's information was last modified, using a datetime format. This column can be useful for tracking changes to contact records over time and can be used in SQL queries to filter or sort contacts based on when they were last updated, such as finding recently modified contact records or identifying stale entries that haven't been updated in a while."
po_supplier_contacts,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the `po_supplier_contacts` table is an integer field that stores the user ID of the person who initially created the supplier contact record. This column can be used in JOIN operations with a users or employees table to track who added each supplier contact, and since it's nullable, some historical records might not have this information preserved."
po_supplier_contacts,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `po_supplier_contacts` table stores the user ID (as an integer) of the person who last modified the supplier contact record. This column helps track changes and maintain accountability in the system, and since it's nullable, it may be empty for records that haven't been updated since their initial creation."
po_supplier_contacts,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the po_supplier_contacts table is a required integer field that identifies which supplier a contact person is associated with. This column is commonly used to link contact records with their corresponding supplier company, making it essential for joining with other supplier-related tables and filtering contact information for specific suppliers."
po_supplier_taxes,po_supplier_tax_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_supplier_tax_id column serves as the primary key identifier for each unique tax record in the po_supplier_taxes table, using an integer data type. This column is commonly used in WHERE clauses for precise record selection and in JOIN operations to link tax records with related supplier purchase order data."
po_supplier_taxes,po_tax_id,int,YES,,,,,,,10.0,0.0,"The po_tax_id column in the po_supplier_taxes table serves as an identifier for individual tax entries associated with supplier purchase orders. This column can be used in WHERE clauses or JOIN conditions to filter or link specific tax records, and its nullable property allows for cases where a tax ID might not be assigned yet."
po_supplier_taxes,tax_number,varchar(45),NO,,,,,,45.0,,,"The tax_number column in po_supplier_taxes stores unique tax identification or registration numbers associated with supplier purchase orders, typically in a standardized format up to 45 characters long. This required field (non-nullable) is essential for tax reporting and compliance purposes, and can be used to join or filter tax-related queries when analyzing supplier transactions."
po_supplier_taxes,tax_attachment,text,YES,,,,,,65535.0,,,"The tax_attachment column in po_supplier_taxes stores textual documentation or references related to tax calculations for supplier purchase orders, such as tax certificates, exemption documents, or supporting tax-related files. This optional (nullable) text field can be used in queries when you need to retrieve or verify tax documentation associated with specific supplier transactions."
po_supplier_taxes,created_at,datetime,YES,,,,,,,,,"The created_at column in the po_supplier_taxes table records the date and time when a tax record for a supplier purchase order was initially created in the system. This datetime field can be useful for tracking when tax calculations were performed or when tax records were added, and can be used in SQL queries for filtering, sorting, or analyzing tax records within specific time periods."
po_supplier_taxes,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the po_supplier_taxes table stores the user ID (as an integer) of the person who created the tax record for a supplier purchase order. This optional field can be used in SQL queries to track or filter tax records based on who entered them into the system, making it useful for audit trails and user activity analysis."
po_supplier_taxes,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the po_supplier_taxes table records the timestamp of when a tax record was last modified, storing it as a datetime value. This column is useful for tracking changes to tax-related information over time and can be used in SQL queries to filter or sort records based on when they were last updated, though it can contain NULL values if the last update time wasn't recorded."
po_supplier_taxes,updated_by,int,YES,,,,,,,10.0,0.0,"The updated_by column in the po_supplier_taxes table stores the user ID (as an integer) of the person who last modified the tax record for a supplier purchase order. This optional field helps track who made changes to tax-related information, which is useful for audit trails and accountability in supplier transaction records."
po_supplier_taxes,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the po_supplier_taxes table is a required integer field that identifies the specific supplier associated with each tax record. This column serves as a reference to connect tax calculations with their corresponding suppliers, enabling queries to filter or aggregate tax information by supplier."
po_suppliers,po_supplier_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_supplier_id column serves as the primary key in the po_suppliers table, uniquely identifying each supplier/vendor in the system. When writing SQL queries, use this column to join with other tables that reference suppliers (likely through foreign keys) or to filter/lookup specific supplier records."
po_suppliers,name,varchar(45),NO,,,,,,45.0,,,"The 'name' column in the po_suppliers table stores the company or business name of each supplier/vendor, with a maximum length of 45 characters. Since this field is marked as NOT NULL, a supplier name is required for every record, making it an essential identifier when querying supplier information or joining with related purchase order tables."
po_suppliers,name_fr,varchar(45),NO,,,,,,45.0,,,"The name_fr column in the po_suppliers table stores the French language version of the supplier's company name, limited to 45 characters, and is required (non-nullable). This column should be used when displaying supplier names in French-language interfaces or when generating bilingual reports, and can be paired with queries involving supplier identification or French-specific business operations."
po_suppliers,legal_name,varchar(45),NO,,,,,,45.0,,,"The legal_name column in the po_suppliers table stores the official registered business name of each supplier/vendor, with a maximum length of 45 characters. This required field (non-nullable) should be used when querying for suppliers by their formal company name, rather than any informal or trade names they might use."
po_suppliers,address,varchar(150),YES,,,,,,150.0,,,"The 'address' column in the po_suppliers table stores the physical or mailing address of suppliers/vendors as a text string up to 150 characters long. When writing SQL queries, this column can be used to filter or retrieve supplier location information, though be aware it's nullable and may contain empty values in some records."
po_suppliers,country,int,YES,,,,,,,10.0,0.0,"The 'country' column in the po_suppliers table stores a numeric identifier (integer) representing the country where each supplier is located, likely referencing a separate country lookup table. This column can be used in SQL queries to filter suppliers by location or join with a country reference table to get the actual country names, and since it's nullable, some suppliers may not have a country specified."
po_suppliers,state,int,YES,,,,,,,10.0,0.0,"The 'state' column in the po_suppliers table stores an integer value representing the operational or administrative state of a supplier/vendor. This field can be used in WHERE clauses to filter suppliers based on their current status (e.g., active, inactive, pending), and since it's nullable, some suppliers might not have a defined state value."
po_suppliers,city,int,YES,,,,,,,10.0,0.0,"The 'city' column in the po_suppliers table stores a numeric identifier (ID) that references the city where a supplier is located, likely linking to a separate cities or locations reference table. Since it's nullable, some suppliers may not have an assigned city ID in the system, which should be considered when writing queries that filter or join based on city information."
po_suppliers,postal_code,varchar(15),YES,,,,,,15.0,,,"The postal_code column in the po_suppliers table stores the ZIP or postal code of each supplier's mailing address, using a variable-length string format that accommodates different postal code formats from various countries (up to 15 characters). When querying supplier locations or grouping suppliers by geographic region, this column can be used for filtering or aggregation, though be aware it's nullable and may contain blank values for some suppliers."
po_suppliers,currency_id,int,NO,,,,,,,10.0,0.0,The currency_id column in the po_suppliers table is a required integer field that specifies the default currency used for transactions with each supplier. This column likely references a currency lookup table and helps ensure consistent monetary calculations and reporting when dealing with supplier-related transactions.
po_suppliers,status,tinyint,NO,,,0,,,,3.0,0.0,"The 'status' column in the po_suppliers table is a required (non-nullable) tinyint field that indicates the current state or condition of a supplier in the system. When writing queries, this column can be used to filter suppliers based on their operational status (e.g., active, inactive, pending) where 0 appears to be a default or initial state."
po_suppliers,website,varchar(255),NO,,,,,,255.0,,,"The 'website' column in the po_suppliers table stores the official web address (URL) of each supplier/vendor as a text string up to 255 characters long. Since this field is marked as NOT NULL, every supplier record must include a website, making it a required piece of contact information for all vendors in the system."
po_suppliers,username,varchar(45),YES,,,,,,45.0,,,"The 'username' column in the po_suppliers table stores the login or system identifier (up to 45 characters) used by supplier representatives to access the purchasing system. This optional field can be used in SQL queries to link supplier authentication or track user-specific activities, and it's commonly used in WHERE clauses or JOINs when matching supplier interactions with user accounts."
po_suppliers,password,varchar(45),YES,,,,,,45.0,,,"The 'password' column in the po_suppliers table stores encrypted or hashed authentication credentials (up to 45 characters) for supplier portal access. This column should be handled with appropriate security measures in SQL queries, and direct password comparisons should be avoided in favor of secure authentication methods."
po_suppliers,comment,text,YES,,,,,,65535.0,,,"The 'comment' column in the po_suppliers table stores optional text notes or remarks about suppliers, which can include additional context, special handling instructions, or historical observations about the vendor relationship. When writing SQL queries, this free-form text field can be used for full-text searches or filtering suppliers based on specific notes, though its nullable nature means you should handle NULL values appropriately in your queries."
po_suppliers,payment_term,varchar(255),YES,,,,,,255.0,,,"The payment_term column in the po_suppliers table stores the agreed-upon payment conditions between the organization and each supplier, typically expressed as text descriptions like ""Net 30"" or ""2% 10 Net 30"". When writing SQL queries, this column can be used to filter or group suppliers based on their payment terms, though be aware it's nullable and may contain empty values."
po_suppliers,po_payment_options_id,int,NO,,,,,,,10.0,0.0,"The po_payment_options_id column in the po_suppliers table is a required integer field that references the payment methods or terms accepted by each supplier. When writing queries, use this column to join with a payment options reference table or to filter suppliers based on their accepted payment arrangements."
po_suppliers,is_approved,tinyint,NO,,,0,,,,3.0,0.0,"The `is_approved` column in the po_suppliers table is a required boolean flag (stored as tinyint) that indicates whether a supplier has been approved to do business with the organization. When writing queries, use this column with values 0 (not approved) or 1 (approved) to filter suppliers based on their approval status, such as `WHERE is_approved = 1` to select only approved suppliers."
po_suppliers,save_type,tinyint,NO,,,1,,,,3.0,0.0,"The ""save_type"" column in the po_suppliers table is a required (non-nullable) tinyint field that likely acts as a flag or category indicator for different types of supplier records. When writing SQL queries, this column can be used to filter or group suppliers based on their classification, where the value 1 appears to be a significant state or category in the system."
po_suppliers,created_at,datetime,YES,,,,,,,,,"The created_at column in the po_suppliers table records the timestamp when a supplier record was initially added to the system. This datetime field can be useful for tracking supplier onboarding timelines and analyzing vendor relationship history, and since it's nullable, some legacy supplier records might not have this information."
po_suppliers,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the po_suppliers table stores the user ID (as an integer) of the person who initially created the supplier record in the system. This optional field (nullable) helps track who added each supplier for auditing and accountability purposes, and can be used to join with a users table to get more information about who created the supplier record."
po_suppliers,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the po_suppliers table records the timestamp of when a supplier's information was last modified, storing this as a datetime value. This column is useful for tracking data freshness and can be used in SQL queries to filter or sort suppliers based on when their records were last updated, though it can contain NULL values if the last update time wasn't recorded."
po_suppliers,updated_by,int,YES,,,,,,,10.0,0.0,The updated_by column in the po_suppliers table stores the user ID (as an integer) of the person who last modified the supplier record. This optional field helps track changes made to supplier information and can be used to join with a users table to get details about who made the updates.
po_taxes,po_tax_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The po_tax_id column serves as the primary key in the po_taxes table, uniquely identifying each tax record associated with purchase orders. This non-nullable integer field is essential for joining tax-related information with other tables and should be referenced when querying specific tax entries for purchase orders."
po_taxes,name,varchar(45),NO,,,,,,45.0,,,"The 'name' column in the po_taxes table stores the descriptive label or identifier for different types of taxes applied to purchase orders, with a maximum length of 45 characters. This required field (non-nullable) likely contains values such as ""Sales Tax,"" ""VAT,"" or other tax classification names that help identify the specific type of tax being tracked for each purchase order entry."
po_taxes,tax_per,"float(10,3)",NO,,,5.000,,,,10.0,3.0,"The tax_per column in the po_taxes table stores the tax percentage rate (as a decimal number with up to 3 decimal places) applied to purchase orders, with a default value of 5.000%. When writing SQL queries, this column can be used to calculate tax amounts by multiplying it with the purchase order base amount (e.g., SELECT base_amount * (tax_per/100) as tax_amount)."
po_taxes,created_at,datetime,YES,,,,,,,,,"The created_at column in the po_taxes table records the timestamp when a tax record for a purchase order was initially created in the system. This datetime field can be useful for tracking when tax calculations were performed and for auditing purposes, allowing queries to filter or analyze tax records based on their creation dates."
po_taxes,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the po_taxes table stores the user ID (as an integer) of the person who created the tax record for a purchase order. This optional field can be used to track who entered or calculated the tax information, making it useful for audit trails and accountability queries like ""SELECT * FROM po_taxes WHERE created_by = [user_id]""."
portioning_packaging,portioning_packaging_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The portioning_packaging_id column serves as the primary key identifier for each unique portioning and packaging configuration in the portioning_packaging table. This integer-based identifier is required (non-nullable) and should be referenced when joining with related tables like portioning_packaging_lang or when specifying product packaging configurations.
portioning_packaging,packaging_name,varchar(150),NO,,,,,,150.0,,,"The packaging_name column in the portioning_packaging table stores the standardized identifier or reference name for different packaging configurations, with a maximum length of 150 characters. This required field serves as a base reference for packaging options, which can be linked to localized descriptions in the portioning_packaging_lang table and associated with specific products."
portioning_packaging,packaging_price,float,NO,,,,,,,12.0,,"The packaging_price column in the portioning_packaging table stores the monetary cost associated with a specific packaging or portioning option as a floating-point number. This required field (non-nullable) should be used in SQL queries when calculating or filtering products based on their packaging costs, such as ""SELECT * FROM portioning_packaging WHERE packaging_price < 10.50"" to find packaging options under a certain price point."
portioning_packaging_lang,portioning_packaging_lang_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The portioning_packaging_lang_id is the primary key column that uniquely identifies each language-specific translation record in the portioning_packaging_lang table. When writing SQL queries, use this column for precise record selection, joining with related tables, or ensuring unique constraints, particularly when managing multilingual portioning and packaging content."
portioning_packaging_lang,portioning_packaging_id,int,NO,MUL,,,portioning_packaging,portioning_packaging_id,,10.0,0.0,"The portioning_packaging_id column serves as a foreign key in the portioning_packaging_lang table, linking each translation record to its corresponding base entry in the portioning_packaging table. When writing SQL queries, use this column to join with the main portioning_packaging table to retrieve or filter multilingual packaging information, ensuring that language-specific content is properly associated with its parent record."
portioning_packaging_lang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the portioning_packaging_lang table stores language codes (up to 10 characters) that identify the specific language of each translation entry. This required field is commonly used in WHERE clauses or JOINs to filter or retrieve packaging information in specific languages, typically using standard language codes like 'en', 'es', or 'fr'."
portioning_packaging_lang,packaging_name_lang,varchar(150),NO,,,,,,150.0,,,"The packaging_name_lang column stores the translated or localized name of packaging information in different languages, with a maximum length of 150 characters and cannot be null. This column should be used in conjunction with language identifiers and the portioning_packaging_id to retrieve or filter packaging names in specific languages, making it essential for multilingual queries and displays."
portioning_speed_group,portioning_speed_group_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The portioning_speed_group_id column serves as the primary key in the portioning_speed_group table, uniquely identifying each distinct speed category or group. When writing SQL queries, use this column to join with related tables (particularly portioning_speed_group_lang) and to filter or group products based on their speed characteristics."
portioning_speed_group,name,varchar(120),NO,,,,,,120.0,,,"The 'name' column in the portioning_speed_group table stores the primary identifier or label for different product speed categories, using text values up to 120 characters in length. This required field (non-nullable) is used to give meaningful names to groups of products that share similar portioning or processing speed characteristics, making it useful for filtering and categorizing products in queries."
portioning_speed_group,seconds_per_portion,int,NO,,,,,,,10.0,0.0,"The seconds_per_portion column is a required integer field that specifies how many seconds it takes to process or portion a single unit of product within a speed group. This metric is essential for comparing and categorizing products based on their processing speed capabilities, making it useful in queries that need to filter or sort products by their operational efficiency."
portioning_speed_group_lang,portioning_speed_group_lang_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The portioning_speed_group_lang_id is the primary key column that uniquely identifies each language-specific translation record for portioning speed groups. When writing SQL queries, use this column for precise record selection or joins when you need to work with specific translations, though typically you'll more commonly join using the portioning_speed_group_id and language code combination."
portioning_speed_group_lang,portioning_speed_group_id,int,NO,MUL,,,portioning_speed_group,portioning_speed_group_id,,10.0,0.0,"The portioning_speed_group_id column serves as a foreign key in the portioning_speed_group_lang table, linking each language-specific translation to its corresponding base speed group record in the portioning_speed_group table. When writing SQL queries, use this column to join with the main portioning_speed_group table or to filter translations for specific speed groups, noting that it cannot contain NULL values and is indexed for improved query performance."
portioning_speed_group_lang,lang_id,varchar(10),YES,,,,,,10.0,,,"The lang_id column in the portioning_speed_group_lang table stores language identifiers (such as 'en', 'es', 'de') as variable-length strings up to 10 characters. This column is used to specify which language each translation record corresponds to, enabling the system to retrieve the appropriate localized content for portioning speed groups based on the desired language."
portioning_speed_group_lang,l_name,varchar(120),NO,,,,,,120.0,,,"The l_name column in portioning_speed_group_lang stores the localized name or translated label for a portioning speed group, with a maximum length of 120 characters. This required field (non-nullable) should be used in SQL queries when you need to retrieve or filter speed group names in specific languages, typically joined with the portioning_speed_group table to match translations with their base speed group records."
portioning_workstation,station_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The station_id column serves as the primary key in the portioning_workstation table, uniquely identifying each physical workstation used for material portioning operations. When writing SQL queries, use this column to join with related tables (particularly portioning_workstation_activity) and to filter or group workstation-specific data."
portioning_workstation,status,"enum('Inactive','Empty','In use')",NO,,,,,,8.0,,,"The 'status' column in the portioning_workstation table is a required (non-nullable) enumerated field that indicates the current operational state of a workstation, with three possible values: 'Inactive' (station is disabled), 'Empty' (station is available), or 'In use' (station is currently occupied). When querying workstations, this column can be used to filter for specific operational states, such as finding available workstations with ""WHERE status = 'Empty'"" or monitoring occupied stations with ""WHERE status = 'In use'""."
portioning_workstation,serial,varchar(10),YES,,,,,,10.0,,,"The 'serial' column in the portioning_workstation table stores the unique serial number identifier (up to 10 characters) for each physical workstation used in portioning operations. This optional field can be used to track and query specific workstations by their manufacturer-assigned serial numbers, which is particularly useful for maintenance records and asset management."
portioning_workstation,conservation_mode_in_warehouse,int,NO,,,,,,,10.0,0.0,The conservation_mode_in_warehouse column is a required integer field that indicates the conservation or preservation mode used at a specific portioning workstation within the warehouse. This field helps track and enforce specific environmental or storage conditions needed for proper material handling during the portioning process.
portioning_workstation,created_at,datetime,NO,,,,,,,,,"The created_at column in the portioning_workstation table records the exact date and time when a portioning workstation record was first created in the system. This non-nullable datetime field is useful for tracking when workstations were added to the system and can be used in SQL queries for temporal filtering or auditing purposes, such as finding recently added workstations or analyzing workstation setup patterns over time."
portioning_workstation_activity,workstation_activity_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The workstation_activity_id is the primary key column that uniquely identifies each activity record in the portioning_workstation_activity table. When writing SQL queries, use this column to specifically reference or join individual workstation activity records, particularly when you need to track or analyze specific portioning tasks performed at workstations."
portioning_workstation_activity,station_id,int,YES,MUL,,,portioning_workstation,station_id,,10.0,0.0,"The station_id column in the portioning_workstation_activity table is a foreign key that identifies which specific portioning workstation performed an activity or operation. When writing queries, this column can be used to filter or group activities by workstation, or to join with related workstation tables to access additional workstation details."
portioning_workstation_activity,status,"enum('Inactive','Empty','In use')",NO,,,,,,8.0,,,"The 'status' column in the portioning_workstation_activity table is an enumerated field that indicates the current operational state of a portioning workstation, with three possible values: 'Inactive', 'Empty', or 'In use'. When writing SQL queries, this column can be used to filter or group workstation activities based on their operational status, such as finding all workstations currently 'In use' or identifying periods of inactivity."
portioning_workstation_activity,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The task_id column in the portioning_workstation_activity table is a required integer field that references specific tasks performed at portioning workstations. When writing SQL queries, this column can be used to join with a tasks table to get detailed task information or to group and analyze workstation activities by task type, making it valuable for tracking productivity and task completion patterns."
portioning_workstation_activity,created_at,datetime,NO,,,,,,,,,"The created_at column in the portioning_workstation_activity table stores the exact date and time when a specific activity or operation was performed at a portioning workstation. This non-nullable datetime field is essential for temporal analysis and can be used in SQL queries to filter activities by time periods, track workstation productivity across different timeframes, or analyze task completion patterns chronologically."
predicted_sales_forecast,sale_date,date,NO,PRI,,,,,,,,"The sale_date column in the predicted_sales_forecast table represents the specific date for which a sales forecast has been generated, serving as part of the primary key. When querying this table, use this column to filter or group forecast data by specific dates or date ranges, such as WHERE sale_date BETWEEN '2023-01-01' AND '2023-12-31' or GROUP BY sale_date."
predicted_sales_forecast,product_id,int,NO,PRI,,,,,,10.0,0.0,The product_id column in the predicted_sales_forecast table serves as the primary key identifier for each unique product being forecasted. This integer field is required (non-nullable) and can be used to join with other product-related tables to access additional product details or to filter and group forecast data by specific products.
predicted_sales_forecast,predicted_quantity_sold,int,NO,,,,,,,10.0,0.0,The predicted_quantity_sold column in the predicted_sales_forecast table stores integer values representing the forecasted number of units expected to be sold for a given prediction record. This required (non-nullable) field is essential for sales planning and can be used in aggregate functions (like SUM or AVG) to analyze predicted sales volumes across different dimensions or time periods.
predicted_sales_forecast,supplier_id,int,YES,,,,,,,10.0,0.0,"The supplier_id column in the predicted_sales_forecast table is an integer field that identifies the specific supplier associated with each sales forecast record. This optional field (as indicated by being nullable) can be used to filter or group forecast data by supplier, making it useful for analyzing predicted sales performance across different suppliers or supply chain partners."
predicted_sales_forecast,category_id,int,YES,,,,,,,10.0,0.0,"The category_id column in the predicted_sales_forecast table is an integer field that links forecast data to specific product categories or business segments. This column can be used to group and analyze sales predictions by category, and since it's nullable, some forecast entries might not be associated with a specific category."
predicted_sales_forecast,sub_category_id,int,YES,,,,,,,10.0,0.0,"The sub_category_id column in the predicted_sales_forecast table is an integer field that links to product sub-categories, allowing sales forecasts to be organized and analyzed at a sub-category level. When writing queries, this column can be used to filter or group forecast data by specific product sub-categories, and it's typically joined with a product sub-category reference table to access the actual sub-category names and details."
predicted_sales_forecast,sub_sub_category_id,int,YES,,,,,,,10.0,0.0,"The sub_sub_category_id column in the predicted_sales_forecast table is an integer field that identifies the specific sub-subcategory of products for which sales are being forecasted. When writing queries, this column can be used to filter or group forecast data by detailed product classifications, and it can likely be joined with a product category reference table to get the actual sub-subcategory names."
predicted_sales_forecast,was_promoted_on_the_website,tinyint(1),YES,,,,,,,3.0,0.0,"This boolean column (was_promoted_on_the_website) indicates whether a particular sales forecast entry was associated with website promotional activities (1 for yes, 0 for no), with NULL values allowed when the promotional status is unknown. When writing queries, you can use this column to analyze how website promotions correlate with predicted sales figures or to filter forecast data based on promotional status."
predicted_sales_forecast,was_flagged_as_new_product_on_the_website,tinyint(1),YES,,,,,,,3.0,0.0,"This boolean column (was_flagged_as_new_product_on_the_website) indicates whether a product was marked as ""new"" on the website during the forecast period, with 1 representing true and 0 representing false. It can be useful in SQL queries to analyze how new product status might affect sales forecasts or to filter predictions specifically for newly launched items."
predicted_sales_forecast,promotion_intensity,int,YES,,,,,,,10.0,0.0,"The promotion_intensity column in the predicted_sales_forecast table represents a numerical measure (integer) indicating the level or strength of promotional activities associated with the sales forecast. This optional field (nullable) can be used in SQL queries to analyze how different promotional effort levels impact predicted sales figures, making it useful for filtering or grouping forecast data based on promotional intensity levels."
predicted_sales_forecast,availability_percentage,int,YES,,,,,,,10.0,0.0,"The availability_percentage column in the predicted_sales_forecast table represents the expected percentage of time that products or services will be available for sale during the forecasted period, stored as an integer value (e.g., 95 for 95% availability). When writing SQL queries, this column can be used to filter or analyze forecasts based on product availability thresholds, helping identify potential supply chain or inventory concerns in future sales predictions."
predicted_sales_forecast,normal_retail_price_per_unit,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The normal_retail_price_per_unit column represents the standard retail price per individual unit of a product in the predicted sales forecast, stored as a decimal number with up to 10 digits total and 2 decimal places (e.g., 99999999.99). When querying this column, you can use it for price-based calculations or comparisons, and since it's nullable, remember to handle NULL values appropriately in your calculations."
predicted_sales_forecast,current_retail_price_per_unit,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The current_retail_price_per_unit column represents the current selling price of a single unit of product at retail level, stored as a decimal number with up to 10 digits total and 2 decimal places (e.g., 199.99). When writing SQL queries, this column can be used for price-based calculations or filtering, such as analyzing predicted revenue (by multiplying with forecasted quantities) or finding products within specific price ranges."
predicted_sales_forecast,product_weight_in_grams,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The product_weight_in_grams column in the predicted_sales_forecast table stores the weight of each product in grams with up to 2 decimal places of precision. This column can be used in SQL queries to analyze weight-based metrics or filter products by their weight, and since it's nullable, some products may not have weight information recorded."
predicted_sales_forecast,purchasing_price_per_unit,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The purchasing_price_per_unit column in the predicted_sales_forecast table represents the estimated cost to acquire each unit of a product, stored as a decimal number with up to 10 digits total and 2 decimal places. This column can be used in SQL queries to calculate projected costs, profit margins, or to analyze the financial impact of forecasted sales, and since it's nullable, some records may not have a purchasing price specified."
predicted_sales_forecast,number_of_clients,int,YES,,,,,,,10.0,0.0,"The number_of_clients column in the predicted_sales_forecast table represents the projected count of clients or customers expected during a given forecast period. This integer field can be used in SQL queries to analyze predicted customer volumes, and since it's nullable, some forecast records may not include client count predictions."
prepbasket_buffer,prepbasket_buffer_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The prepbasket_buffer_id is the primary key column that uniquely identifies each preparation and buffering record in the prepbasket_buffer table. When writing SQL queries, use this column for joining to related tables or filtering specific preparation records, as it serves as the main identifier for tracking individual item preparation and buffering statuses within the order fulfillment workflow."
prepbasket_buffer,order_id,int,NO,MUL,,,orders,order_id,,10.0,0.0,"The order_id column in the prepbasket_buffer table is a required integer field that references the specific order being prepared or buffered for delivery. This column serves as a foreign key to link preparation/buffering records with their corresponding orders, enabling queries to track preparation status and buffer requirements for individual orders within the fulfillment workflow."
prepbasket_buffer,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the prepbasket_buffer table is a required integer field that serves as a foreign key reference to identify specific products being prepared or buffered for orders. When writing queries, this column can be used to join with the products table to access product details, or to filter/group preparation records by specific product identifiers."
prepbasket_buffer,quantity,int,NO,,,,,,,10.0,0.0,"The `quantity` column in the prepbasket_buffer table represents the number of units of a specific item that needs to be prepared and buffered for an order. This required integer field is essential for tracking the exact amount of each product that needs to be processed, helping to ensure accurate order fulfillment and inventory management in the preparation workflow."
prepbasket_buffer,box,smallint,NO,,,,,,,5.0,0.0,"The 'box' column in the prepbasket_buffer table is a required smallint field that indicates the box number or position where an item is placed during the picking and packing process. This column helps track and organize items within physical storage or buffering locations, enabling efficient item retrieval and route preparation workflows."
prepbasket_buffer,weight,int,NO,,,,,,,10.0,0.0,"The 'weight' column in the prepbasket_buffer table stores the integer weight value of items being prepared and buffered for delivery, likely measured in a standard unit (e.g., grams). This non-nullable field is essential for logistics planning and can be used in SQL queries to calculate total weights for routes, verify weight limits, or aggregate weight metrics across different preparation batches."
prepbasket_buffer,lbri_id,int,YES,MUL,,,load_basket_route_info,route_info_id,,10.0,0.0,"The `lbri_id` column in the prepbasket_buffer table is an integer field that likely serves as a foreign key (indicated by the MUL key type) linking to a related route or buffer information table. This column helps track which route or buffer location an item is assigned to during the preparation and packing process, enabling efficient coordination of order fulfillment workflows."
prepbasket_buffer_issue_202410281248,prepbasket_buffer_id,int,NO,,,0,,,,10.0,0.0,"The prepbasket_buffer_id column is a non-nullable integer field that serves as an identifier for records in this temporary buffer table. When writing queries against the prepbasket_buffer_issue_202410281248 table, this column can be used to uniquely reference specific buffer entries, making it useful for JOIN operations or WHERE clause filtering."
prepbasket_buffer_issue_202410281248,order_id,int,NO,,,,,,,10.0,0.0,"The order_id column in the prepbasket_buffer_issue_202410281248 table is a required integer field that uniquely identifies orders being processed or analyzed in this temporary buffer table. When querying this table, you can use order_id to join with other order-related tables or to filter specific orders that were involved in PrepBasket-related issues during the troubleshooting period."
prepbasket_buffer_issue_202410281248,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column is a required integer field that uniquely identifies products within this temporary PrepBasket buffer table. When querying this table, use product_id to join with other product-related tables or to filter specific product records during troubleshooting or data processing operations."
prepbasket_buffer_issue_202410281248,quantity,int,NO,,,,,,,10.0,0.0,"The 'quantity' column in the prepbasket_buffer_issue_202410281248 table stores non-null integer values representing count or amount information related to PrepBasket issues. When querying this temporary buffer table, the quantity field can be used for numerical calculations or filtering without needing to handle NULL values, making it reliable for aggregate functions like SUM or COUNT."
prepbasket_buffer_issue_202410281248,box,smallint,NO,,,,,,,5.0,0.0,"The ""box"" column is a required (non-nullable) smallint field that likely represents a box identifier or sequence number within the PrepBasket buffer system. When querying this temporary troubleshooting table, use this column to filter or group PrepBasket-related issues by their associated box assignments, keeping in mind that the values will be small integers suitable for the smallint data type range (-32,768 to 32,767)."
prepbasket_buffer_issue_202410281248,weight,int,NO,,,,,,,10.0,0.0,"The 'weight' column is a required integer field that likely represents the weight value associated with PrepBasket items or issues being processed in this temporary buffer table. When querying this column, you can use it for numerical comparisons or aggregations without needing to handle NULL values, as the column is defined as NOT NULL."
prepbasket_buffer_issue_202410281248,lbri_id,int,YES,,,,,,,10.0,0.0,"The lbri_id column is an integer field in the temporary buffer table that likely serves as a reference or identifier for PrepBasket-related issues. When querying this column, it can be used to join with other tables or filter specific issues, though being nullable means you should handle NULL values appropriately in your queries."
price_scraper_data,psd_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The psd_id column serves as the primary key in the price_scraper_data table, uniquely identifying each price data record collected from various sources. This auto-incrementing integer field is essential for referencing specific price entries and can be used in JOIN operations or WHERE clauses when querying historical price information."
price_scraper_data,psd_psl_id,int,NO,MUL,,,price_scraper_list,psl_id,,10.0,0.0,"The psd_psl_id column is a required foreign key in the price_scraper_data table that links each price record to its corresponding item definition in the price_scraper_list table. When writing queries, use this column to join with price_scraper_list to access item details or to filter price data for specific tracked items."
price_scraper_data,psd_scrape_date,date,NO,,,,,,,,,"The psd_scrape_date column in the price_scraper_data table records the specific date when a price was scraped from a source, serving as a temporal marker for historical price tracking. This mandatory date field is essential for analyzing price trends over time and should be included in queries when temporal analysis or filtering of price data is needed."
price_scraper_data,psd_price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The psd_price column stores the actual price value (with 2 decimal places) of items being tracked in the price monitoring system. This non-nullable decimal field is essential for historical price analysis and can be used in SQL queries to calculate price trends, averages, or compare prices across different time periods or sources."
price_scraper_data,psd_default_price,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The psd_default_price column stores the base or default price value for tracked items as a decimal number with up to 10 digits total and 2 decimal places. This column is required (not nullable) and defaults to 0.00, making it useful for price comparison queries or when calculating price changes over time from the scraped data."
price_scraper_data,psd_in_promotion,tinyint,NO,,,0,,,,3.0,0.0,"The psd_in_promotion column is a boolean flag (stored as tinyint) that indicates whether the scraped price was part of a promotional offer or regular pricing at the time of collection. When writing queries, use this column with values 0 (not in promotion) or 1 (in promotion) to filter or analyze promotional pricing patterns in the scraped data."
price_scraper_list,psl_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The psl_id column serves as the primary key identifier for each unique price monitoring entry in the price_scraper_list table, using auto-incrementing integers. When writing SQL queries, use this column to uniquely identify specific price monitoring configurations or to establish relationships with related tables like price_scraper_data through foreign key connections."
price_scraper_list,psl_product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The psl_product_id column in the price_scraper_list table is a non-nullable integer field that serves as a foreign key reference to the products table, establishing which specific products should be monitored for price changes. When writing queries, this column can be used to join with the products table to access product details or with price_scraper_data to retrieve historical price information for a particular product."
price_scraper_list,psl_retail_store_name,enum('Voila'),NO,,,Voila,,,5.0,,,"The psl_retail_store_name column in the price_scraper_list table specifies the retail store where the product's price should be monitored, currently supporting only 'Voila' as a valid value through an enum constraint. This mandatory field helps identify which e-commerce platform should be scraped for price information, ensuring consistent tracking across specific retailers."
price_scraper_list,psl_sku,varchar(255),YES,,,,,,255.0,,,The psl_sku column in the price_scraper_list table stores the Stock Keeping Unit (SKU) identifier for products that require price monitoring. This optional field (being nullable) helps match products across different systems and can be used to join with the products table or filter specific items for price tracking.
price_scraper_list,psl_product_name,varchar(255),YES,,,,,,255.0,,,"The psl_product_name column stores the display name or title of products being monitored for price changes, allowing for easy identification of items in the price scraping system. This column can be used in SELECT queries to filter or display product names, and while it's nullable, it typically contains meaningful text that matches or closely relates to the product name as it appears on the monitored website."
price_scraper_list,psl_brand,varchar(255),YES,,,,,,255.0,,,"The psl_brand column in the price_scraper_list table stores the brand name of products being monitored for price changes, using a variable-length string format up to 255 characters. When writing SQL queries, this column can be used to filter or group price monitoring data by specific brands, though it's optional (nullable) which allows for tracking products where the brand information might not be available or relevant."
price_scraper_list,psl_weight,int,YES,,,0,,,,10.0,0.0,"The psl_weight column in the price_scraper_list table is an optional integer field that likely determines the priority or importance level of price monitoring for each product. When writing SQL queries, this column can be used to sort or filter products based on their monitoring priority, with higher weights potentially indicating products that need more frequent or prioritized price tracking."
price_scraper_list,psl_status,"enum('active','inactive')",YES,,,active,,,8.0,,,"The psl_status column in price_scraper_list is an enumerated field that indicates whether a product is currently being monitored for price changes, accepting either 'active' or 'inactive' as values. When writing queries, use this column to filter products that should be included in price scraping operations (WHERE psl_status = 'active') or to identify products where price monitoring has been suspended."
price_scraper_list,psl_created_at,timestamp,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The psl_created_at column records the timestamp when a product was first added to the price monitoring list, automatically populated with CURRENT_TIMESTAMP when a new record is inserted. This timestamp can be useful in SQL queries for analyzing how long products have been monitored or for filtering products based on when they were added to the price tracking system."
price_scraper_list,psl_created_by,int,NO,,,,,,,10.0,0.0,"The psl_created_by column in the price_scraper_list table is a required integer field that stores the user ID of the person who initially added the product to the price monitoring list. When writing SQL queries, this column can be used to filter or group price monitoring entries by their creator, and it's commonly joined with a users table to get creator details."
price_scraper_list,psl_product_url,varchar(255),NO,,,,,,255.0,,,"The psl_product_url column stores the complete URL of the webpage where the product's price needs to be scraped, with a maximum length of 255 characters. This required field is essential for web scraping operations as it provides the exact location where the price monitoring system should look for product pricing information."
price_scraper_list,psl_same_product,tinyint,NO,MUL,,0,,,,3.0,0.0,"The psl_same_product column is a boolean flag (tinyint) that indicates whether multiple scraping entries in the price_scraper_list table refer to the same physical product across different retailers or websites. This column is indexed (MUL) to optimize queries that filter or group products based on their similarity status, and it must always contain a value (NOT NULL)."
printers,printer_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The printer_id column serves as the primary key in the printers table, uniquely identifying each printer record with a non-nullable integer value. When writing SQL queries, use this column for precise printer lookups, joining with related tables, or filtering specific printer records (e.g., WHERE printer_id = 123)."
printers,hostname,varchar(255),NO,,,,,,255.0,,,"The `hostname` column in the `printers` table stores the network hostname or identifier assigned to each printer, formatted as a string up to 255 characters long. This required field (non-nullable) helps uniquely identify printers on the network and is commonly used in SQL queries for locating specific printer devices or joining with other network-related tables."
printers,port,int,NO,,,,,,,10.0,0.0,"The 'port' column in the printers table stores the numeric port number that each printer uses for network communication. This required integer field is essential for identifying the specific network port where the printer listens for print jobs and management commands, making it crucial for printer configuration and troubleshooting."
printers,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the printers table stores the descriptive name or identifier of each printer as a text string (up to 255 characters) and cannot be left empty. When querying printer information, this column can be used to search for or filter specific printers by their assigned names, such as ""Marketing Floor Printer"" or ""HR Department LaserJet."""
processes,process_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The process_id column serves as the primary key in the processes table and uniquely identifies each running process in the system. When writing SQL queries, use this column to join with other tables that reference processes or to filter for specific process records, for example: ""SELECT * FROM processes WHERE process_id = 123"" or ""JOIN processes ON processes.process_id = other_table.process_id""."
processes,process_name,varchar(255),NO,,,,,,255.0,,,"The process_name column in the processes table stores the human-readable name or identifier of each running process as a string (up to 255 characters). This required field is commonly used in WHERE clauses to filter or search for specific processes by their names, or in JOIN operations to correlate process information with other system metrics."
processes,process_params,varchar(255),YES,,,,,,255.0,,,"The process_params column in the processes table stores command-line parameters or configuration arguments passed to running processes as a text string (up to 255 characters). This column can be used to filter or analyze processes based on their startup parameters, though it may be NULL if no parameters were specified or captured."
processes,process_value,varchar(255),NO,,,,,,255.0,,,"The process_value column in the processes table stores a string-based value (up to 255 characters) that represents specific attributes or characteristics of a running process. This required field (non-nullable) can be used to store various process-related information such as command arguments, process names, or other process-specific string values that help identify or describe the process's purpose or configuration."
processes,updated,datetime,NO,,,,,,,,,"The ""updated"" column in the processes table stores the timestamp of when a process record was last modified, using a datetime format that captures both the date and time of the update. This non-nullable field is essential for tracking the recency of process information and can be useful in queries that need to identify recently changed processes or monitor update patterns."
processes,emergency_mode_trigger,tinyint,NO,,,0,,,,3.0,0.0,"The emergency_mode_trigger column in the processes table is a required boolean-like indicator (stored as a tinyint) that flags whether a process has triggered emergency mode operations. When querying this column, use 0 for normal operations and 1 for emergency mode, making it useful for filtering processes that have entered critical states or require immediate attention."
processes,process_details,text,NO,,,,,,65535.0,,,"The process_details column in the processes table stores detailed textual information about running processes, which may include configuration settings, command-line arguments, or other process-specific metadata. When querying this column, you can use text-based operations (like LIKE, ILIKE, or string functions) to search or filter process information, and since it's marked as NOT NULL, you can expect every row to contain some process details."
productCategoriesLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the `productCategoriesLang` table, uniquely identifying each multilingual translation entry for product categories. When writing SQL queries, use this column for precise record identification and for joining with related tables that reference product category translations."
productCategoriesLang,category_id,int,NO,MUL,,,,,,10.0,0.0,"The category_id column in the productCategoriesLang table serves as a foreign key that links each translation record to its corresponding base product category. When writing queries, this column should be used to join with the primary product categories table to match translations with their original category entries, and since it's non-nullable, every translation record must have an associated category."
productCategoriesLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the `productCategoriesLang` table stores language identifiers (such as 'en', 'es', 'fr') as text strings up to 10 characters long, and is required (non-nullable) for every record. When querying multilingual product category information, this column should be used to filter or join records based on the desired language code."
productCategoriesLang,l_name,varchar(255),NO,,,,,,255.0,,,"The l_name column in the productCategoriesLang table stores the localized name of a product category in different languages, with a maximum length of 255 characters and cannot be null. When writing SQL queries, this column should be used to retrieve or filter product category names in specific languages, typically in conjunction with a language identifier column to get the appropriate translation."
productCategoriesLang,l_slug,varchar(255),NO,,,,,,255.0,,,"The l_slug column in the productCategoriesLang table stores URL-friendly versions of localized category names, using a varchar(255) format that cannot be null. This column likely contains lowercase, hyphenated versions of the translated category names (e.g., ""winter-clothing"" or ""electronic-devices"") and can be used for generating localized URLs or as a human-readable identifier in multilingual contexts."
productSubCategories,subcategory_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The subcategory_id column serves as the primary key in the productSubCategories table, uniquely identifying each product subcategory with a non-nullable integer value. This column is commonly used in JOIN operations, particularly with the disabled_subcategories table, and should be referenced when filtering or grouping products by their subcategory classification."
productSubCategories,category_id,int,NO,MUL,,,,,,10.0,0.0,"The category_id column in the productSubCategories table is a required integer field that serves as a foreign key, linking each subcategory to its parent product category. This column is essential for organizing the product hierarchy and should be used in JOIN operations with the product categories table to retrieve the full category-subcategory relationship structure."
productSubCategories,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the productSubCategories table stores the descriptive text labels (up to 255 characters) used to identify different product subcategories, and it cannot contain NULL values. When writing SQL queries, this column is commonly used for filtering, sorting, or displaying subcategory names, such as in WHERE clauses (e.g., WHERE name LIKE '%electronics%') or in JOIN operations when connecting with related product data."
productSubCategories,weight,int,YES,MUL,,0,,,,10.0,0.0,"The 'weight' column in the productSubCategories table is an optional integer field that likely determines the display order or priority of subcategories within the product catalog. When writing SQL queries, this column can be used for sorting subcategories (ORDER BY weight) or filtering based on priority levels, with higher weight values typically indicating higher priority or prominence in the system."
productSubCategories,linked_subcategory_id,int,NO,,,1,,,,10.0,0.0,"The linked_subcategory_id column in the productSubCategories table is a required integer field that establishes relationships between related subcategories, potentially creating hierarchical or associative connections between different product subcategories. When writing SQL queries, this column can be used to join or filter subcategories that have logical connections to each other, enabling queries to traverse related subcategory relationships."
productSubCategoriesLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the `productSubCategoriesLang` table, uniquely identifying each multilingual translation record for product subcategories. As a non-nullable integer field, it should be used in JOIN operations when connecting to related tables and in WHERE clauses when filtering specific translation entries."
productSubCategoriesLang,subcategory_id,int,NO,MUL,,,,,,10.0,0.0,"The subcategory_id column in the productSubCategoriesLang table serves as a foreign key that links to the main product subcategories table, identifying which subcategory each translation record belongs to. This integer column is required (non-nullable) and is part of a multiple-column index (MUL), likely combined with a language code to ensure unique translations per subcategory per language."
productSubCategoriesLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the productSubCategoriesLang table stores language codes (up to 10 characters) that identify which language each translation record corresponds to. This required field (non-nullable) is essential for filtering and retrieving product subcategory translations for specific languages, and would typically contain standard language codes like 'EN', 'ES', or 'FR'."
productSubCategoriesLang,l_name,varchar(255),NO,,,,,,255.0,,,"The `l_name` column in the `productSubCategoriesLang` table stores the localized name of a product subcategory in different languages, with a maximum length of 255 characters. As a required field (non-nullable), it should always contain a valid translated name value when querying or inserting data into the localization table."
productSubSubCategories,sub_sub_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The sub_sub_id column serves as the primary key in the productSubSubCategories table, uniquely identifying each third-tier product category with a non-nullable integer value. This column is essential for joining with other tables in the product hierarchy and should be referenced when querying specific product sub-subcategories or establishing relationships with parent categories."
productSubSubCategories,subcategory_id,int,YES,MUL,,,,,,10.0,0.0,"The subcategory_id column in the productSubSubCategories table is a foreign key that references the parent productSubCategories table, establishing the relationship between a sub-subcategory and its corresponding subcategory. When writing SQL queries, this column can be used in JOIN operations to connect with the productSubCategories table and traverse up the product classification hierarchy."
productSubSubCategories,weight,int,YES,,,,,,,10.0,0.0,"The 'weight' column in the productSubSubCategories table is an optional integer field that likely represents a sorting or priority value for product sub-subcategories. When writing SQL queries, this column can be used to order sub-subcategories in a specific sequence (using ORDER BY weight) or to filter categories based on their relative importance."
productSubSubCategories,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the productSubSubCategories table stores descriptive text labels (up to 255 characters) that identify specific third-tier product classifications. When writing SQL queries, this column can be used to filter, group, or display the most granular level of product categorization, and since it's nullable, queries should handle potential NULL values appropriately."
productSubSubCategories,tolerance,tinyint,NO,,,10,,,,3.0,0.0,"The 'tolerance' column in the productSubSubCategories table is a required (non-nullable) tinyint field that likely represents an acceptable variance or margin of error for products within this sub-subcategory. When querying this column, you can use it to filter or group products based on their tolerance levels, with values typically ranging from 0 to the specified maximum of 10."
productSubSubCategories,min_weight,"enum('Published','Tolerance')",NO,,,Tolerance,,,9.0,,,"The min_weight column in the productSubSubCategories table is an enumerated field that specifies whether the minimum weight value for products in this sub-subcategory is a published specification ('Published') or a tolerance range ('Tolerance'). This non-nullable field helps determine how to interpret weight specifications for products within each sub-subcategory, which is particularly useful when filtering or validating product weights in SQL queries."
productSubSubCategories,cbw_min_weight_packing,"enum('Published','Tolerance')",NO,,,Tolerance,,,9.0,,,"This column 'cbw_min_weight_packing' in the productSubSubCategories table uses an ENUM data type to specify how minimum weight packing requirements are handled for products in this sub-subcategory, with possible values of either 'Published' or 'Tolerance'. When writing queries, this column can be used to filter or group products based on their weight packing requirements, where 'Published' likely indicates standard published weights and 'Tolerance' suggests some flexibility in the minimum weight specifications."
productSubSubCategoriesLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ""l_id"" column serves as the primary key in the productSubSubCategoriesLang table, uniquely identifying each multilingual translation record for product sub-subcategories. When writing SQL queries, use this column for precise record identification, joining with related tables, or when you need to ensure unique selection of translation entries."
productSubSubCategoriesLang,sub_sub_id,int,YES,MUL,,,,,,10.0,0.0,"The sub_sub_id column in productSubSubCategoriesLang serves as a foreign key that links to the main product sub-subcategory table, connecting translations to their corresponding base category entries. When writing queries, this column should be used for joining with the parent sub-subcategory table and for filtering or grouping translations by their associated sub-subcategory identifier."
productSubSubCategoriesLang,l_name,varchar(255),YES,,,,,,255.0,,,"The `l_name` column in the `productSubSubCategoriesLang` table stores localized names of product sub-subcategories in various languages, with a maximum length of 255 characters. This column is nullable and can be used in SQL queries to retrieve or filter translated sub-subcategory names, typically in conjunction with a language identifier column to get the appropriate translation for a specific locale."
productSubSubCategoriesLang,lang_id,varchar(10),YES,MUL,,,,,10.0,,,"The `lang_id` column in the `productSubSubCategoriesLang` table stores language identifiers (such as 'en', 'es', 'fr') as variable-length strings up to 10 characters, indicating the language of each translation record. When writing queries, this column can be used to filter or join on specific language versions of product sub-subcategory information, and its MUL key type suggests it's part of an index to optimize language-based lookups."
product_attributes,product_attribute_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_attribute_id column serves as the primary key in the product_attributes table, uniquely identifying each product attribute record. When writing SQL queries, use this column to join with related tables or to specifically target individual attribute records, particularly when connecting to the product_attributes_lang table for multilingual attribute information."
product_attributes,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the product_attributes table serves as a foreign key that links attribute records to their corresponding products in the main products table. This column is indexed (MUL) and required (NOT NULL), making it essential for efficient joins and ensuring every attribute record is properly associated with a valid product."
product_attributes,attribute_name,varchar(255),NO,,,,,,255.0,,,"The attribute_name column in the product_attributes table stores the name or identifier of specific product characteristics (like ""size"", ""color"", ""material"") as text strings up to 255 characters. This required field is essential for categorizing and identifying different types of product attributes, and it works in conjunction with the product_attributes_lang table to support multilingual attribute names."
product_attributes,attribute_value,varchar(255),YES,,,,,,255.0,,,"The attribute_value column in the product_attributes table stores the actual values of product characteristics (like ""Red"" for color, ""Large"" for size, or ""Cotton"" for material) as text strings up to 255 characters long. This column is used to query or filter products based on their specific attribute values, and since it's nullable, some attributes may not have values assigned."
product_attributes_lang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the product_attributes_lang table, uniquely identifying each localized translation record for product attributes. This auto-incrementing integer field ensures each translation entry can be distinctly referenced and maintains data integrity when joining with other tables in multilingual product attribute queries."
product_attributes_lang,product_attribute_id,int,NO,MUL,,,product_attributes,product_attribute_id,,10.0,0.0,"The product_attribute_id column in the product_attributes_lang table serves as a foreign key that links to the main product_attributes table, establishing a connection between base attribute definitions and their translations. This column should be used in JOIN operations when combining attribute data with their corresponding translations, and can be referenced in WHERE clauses when filtering for specific attribute translations."
product_attributes_lang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the product_attributes_lang table stores language codes (e.g., 'en', 'es', 'fr') that identify which language each attribute translation corresponds to. When querying localized product attribute information, this column should be used in WHERE clauses or JOINs to filter for specific language versions, typically in combination with product_attribute_id to retrieve the correct translation."
product_attributes_lang,l_attribute_value,varchar(255),NO,,,,,,255.0,,,"The l_attribute_value column stores the translated text value of a product attribute in a specific language, with a maximum length of 255 characters. This column is mandatory (non-nullable) and works in conjunction with other columns in the product_attributes_lang table to provide localized versions of product attribute values, enabling multilingual product information display."
product_availability_stats,product_availability_stats_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_availability_stats_id is the primary key column that uniquely identifies each statistical record in the product_availability_stats table. When writing SQL queries, use this column for joining to related tables or filtering specific availability statistics records, but avoid using it for business logic as it's purely a technical identifier."
product_availability_stats,delivery_date,date,NO,MUL,,,,,,,,"The delivery_date column in the product_availability_stats table represents the specific date when inventory metrics were recorded or when products were delivered, serving as a temporal reference point for analyzing stock levels and availability patterns. As a non-nullable date field with a multi-column index (MUL), this column is commonly used in WHERE clauses and GROUP BY operations to analyze inventory trends over specific time periods or date ranges."
product_availability_stats,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the product_availability_stats table serves as a foreign key that links each availability record to a specific product in the system. This non-nullable integer column is indexed (MUL) to optimize queries that filter or join based on product_id, making it efficient to retrieve availability statistics for particular products."
product_availability_stats,snapshot_timestamp,datetime,NO,,,,,,,,,"The snapshot_timestamp column in the product_availability_stats table represents the specific point in time when inventory and availability metrics were captured, serving as a temporal marker for each statistical record. This non-nullable datetime field is essential for time-series analysis and should be used in WHERE clauses or GROUP BY statements when analyzing inventory trends over specific time periods."
product_availability_stats,qty_available_for_sell,int,NO,,,,,,,10.0,0.0,"The qty_available_for_sell column represents the current quantity of a product that is available to be sold to customers, stored as a non-negative integer value. This column can be used in SQL queries to analyze inventory levels, filter for low-stock items, or calculate stock availability metrics, and since it's non-nullable, it will always contain a valid quantity value."
product_categories,category_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The category_id column serves as the primary key in the product_categories table, uniquely identifying each product category in the hierarchical classification system. When writing SQL queries, use this column to join with related tables that reference product categories or to filter/group results based on specific category identifiers."
product_categories,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the product_categories table stores the descriptive text labels for each product category (e.g., ""Electronics,"" ""Clothing,"" ""Home & Garden"") as variable-length strings up to 255 characters. When writing SQL queries, this column is commonly used for category-based filtering, searching, or grouping products, and since it's nullable, you should consider handling NULL values appropriately in your queries."
product_categories,weight,int,YES,,,0,,,,10.0,0.0,"The 'weight' column in the product_categories table is an optional integer field that likely determines the display order or relative importance of product categories in the hierarchy. When writing queries that display or sort product categories, you can use this column to prioritize or order categories according to their assigned weight values, where higher weights typically indicate higher priority or prominence."
product_categories,status,tinyint,NO,,,1,,,,3.0,0.0,"The `status` column in the product_categories table is a required (non-nullable) tinyint field that indicates whether a product category is active or inactive, typically using 1 for active and 0 for inactive states. When writing SQL queries, this column can be used to filter for active categories or to exclude inactive ones, making it essential for displaying valid product categories in the catalog hierarchy."
product_categories,slug,varchar(255),NO,,,,,,255.0,,,"The `slug` column in the `product_categories` table stores URL-friendly versions of category names, using lowercase letters, hyphens, and numbers (e.g., ""mens-shoes"" or ""home-decor""). This column is required (non-nullable) and is commonly used in constructing SEO-friendly URLs or as a human-readable identifier for category pages."
product_categories,product_categories_netsuite_id,int,YES,,,,,,,10.0,0.0,"The product_categories_netsuite_id column stores the unique identifier from NetSuite's system for each product category, enabling integration and data synchronization between the local product catalog and NetSuite's platform. When writing SQL queries, this nullable integer field can be used to match or filter product categories based on their corresponding NetSuite identifiers, particularly useful in scenarios involving data reconciliation or cross-system reporting."
product_delivery_days,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the product_delivery_days table, uniquely identifying each delivery timeframe record with an auto-incrementing integer value. This column is essential for maintaining data integrity and establishing relationships with other tables, particularly when querying or joining delivery timeframe information with product details."
product_delivery_days,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the product_delivery_days table serves as a foreign key that links to the products table, identifying which product each delivery timeframe record belongs to. This non-nullable integer column is indexed (MUL) for efficient joins and lookups, making it ideal for queries that need to match delivery times with specific products or filter delivery records by product."
product_delivery_days,day,tinyint,NO,,,,,,,3.0,0.0,"The 'day' column in the product_delivery_days table stores the number of days required to deliver a product as a small integer value (tinyint) and cannot be null. When writing queries, this column can be used to filter or sort products based on their delivery timeframes, such as finding items that can be delivered within a specific number of days."
product_discount_reasons,product_discount_reason_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_discount_reason_id column serves as the primary key in the product_discount_reasons table, uniquely identifying each valid discount reason or justification. This non-nullable integer column is essential for establishing relationships with other tables, particularly the product_discount_reasonsLang table where translations for these discount reasons are stored."
product_discount_reasons,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the product_discount_reasons table stores the primary identifier or label for each discount reason (e.g., ""Seasonal Clearance"", ""Bulk Purchase"", ""Holiday Special""). When writing SQL queries, this required varchar field can be used to filter, group, or display discount reasons, though for multi-language support, you should join with the product_discount_reasonsLang table instead of using this column directly."
product_discount_reasons,description,varchar(500),NO,,,,,,500.0,,,"The description column in the product_discount_reasons table stores detailed explanations (up to 500 characters) of why a particular discount can be applied to products. When writing SQL queries, this column can be used to search for or filter specific discount justifications, and since it's non-nullable, every discount reason must have a description value."
product_discount_reasonsLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the product_discount_reasonsLang table, uniquely identifying each translation record for product discount reasons. When writing SQL queries, this column can be used to join with other language-related tables or to specifically retrieve or filter individual translation entries."
product_discount_reasonsLang,product_discount_reason_id,int,YES,MUL,,,product_discount_reasons,product_discount_reason_id,,10.0,0.0,"The product_discount_reason_id column serves as a foreign key in the product_discount_reasonsLang table, linking to the primary key in the product_discount_reasons table. When writing SQL queries, use this column to join with the main product_discount_reasons table to retrieve or filter localized discount reason content, or to aggregate translations across different languages for a specific discount reason."
product_discount_reasonsLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in product_discount_reasonsLang table stores language identifiers (like 'en', 'es', 'fr') as varchar strings up to 10 characters long and is required (non-nullable). When writing SQL queries, use this column to filter or join on specific language versions of discount reason descriptions, typically in combination with product_discount_reason_id to get the appropriate translation for a given language."
product_discount_reasonsLang,l_name,varchar(255),NO,,,,,,255.0,,,"The l_name column in product_discount_reasonsLang stores the localized name or description of a product discount reason in different languages, with a maximum length of 255 characters. When writing SQL queries, this column should be used to retrieve or filter the translated names of discount reasons, typically in conjunction with a language identifier to get the appropriate translation for a specific locale."
product_discount_reasonsLang,l_description,varchar(500),NO,,,,,,500.0,,,"The l_description column in product_discount_reasonsLang stores the localized (translated) description of a product discount reason, with a maximum length of 500 characters. When writing SQL queries, this column should be used to retrieve or filter the translated explanations of why a product is discounted in different languages, and it must always contain a value since it's marked as non-nullable."
product_group_relations,product_group_relation_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_group_relation_id is the primary key column that uniquely identifies each parent-child relationship between products in the product_group_relations table. When writing SQL queries, use this column for precise relationship identification, joining with other tables, or when you need to modify or delete specific product grouping relationships."
product_group_relations,parent_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The parent_id column in the product_group_relations table stores the identifier of the parent product in a hierarchical product relationship, referencing the primary key from the products table. This column is essential for constructing SQL queries that need to find all child products belonging to a specific parent product, or for traversing the product hierarchy upwards to find parent products."
product_group_relations,child_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The child_id column in the product_group_relations table stores the identifier of a product that is part of a larger product group or bundle, referencing the id column in the products table. When writing SQL queries, use this column to find which products are components of other products or to traverse the product hierarchy from child to parent products."
product_group_relations,quantity,int,NO,,,1,,,,10.0,0.0,"The 'quantity' column in the product_group_relations table specifies how many units of the child product are included within its parent product grouping or bundle. When writing SQL queries, this column can be used to calculate total quantities or to filter product relationships based on the number of child items included in a bundle, with a default value of 1 indicating a one-to-one relationship if not specified otherwise."
product_icons,product_icon_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_icon_id column serves as the primary key identifier for each unique icon asset entry in the product_icons table, using auto-incrementing integers. When writing SQL queries, use this column to uniquely identify specific icon records or establish relationships with other tables that reference product icons."
product_icons,slug,varchar(255),NO,,,,,,255.0,,,"The `slug` column in the `product_icons` table stores URL-friendly text identifiers for product icons, formatted as lowercase alphanumeric strings with hyphens (e.g., ""blue-star-icon"" or ""shopping-cart-small""). This column is required (non-nullable) and serves as a human-readable reference for identifying and accessing specific icon assets within the system."
product_icons,name,varchar(500),NO,,,,,,500.0,,,"The ""name"" column in the product_icons table stores the display name or identifier for product icon assets, with a maximum length of 500 characters and cannot be null. This column is likely used to reference or identify specific icons when querying for product visual assets, and can be used in WHERE clauses or JOINs when you need to find or filter specific product icons by their names."
product_iconsLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the `product_iconsLang` table, using an integer data type to uniquely identify each language-specific icon entry. This non-nullable identifier is essential for maintaining data integrity and can be used in JOIN operations or WHERE clauses when querying language-specific icon information across the system."
product_iconsLang,product_icon_id,int,YES,,,,,,,10.0,0.0,"The product_icon_id column in the product_iconsLang table serves as a reference to identify specific product icons in a multilingual context. When writing queries, this integer field can be used to filter or join with related icon data, though since it's nullable, queries should handle potential NULL values appropriately."
product_iconsLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the `product_iconsLang` table stores language identifiers as text strings (up to 10 characters) and is required for every record as indicated by its non-nullable status. This column is likely used to specify which language a particular icon entry corresponds to, making it essential for filtering and joining operations when retrieving language-specific icon information."
product_iconsLang,l_name,varchar(500),NO,,,,,,500.0,,,"The `l_name` column in the `product_iconsLang` table stores localized names or text descriptions for product icons, with a maximum length of 500 characters and cannot be null. This column is likely used to store translated or language-specific versions of icon names, making it essential for queries that need to retrieve icon names in specific languages or locales."
product_icons_rel,product_icons_rel_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_icons_rel_id column serves as the primary key for the product_icons_rel table, uniquely identifying each product-to-icon relationship record. When writing SQL queries, use this column for precise record selection, joining with related tables, or ensuring data integrity, but avoid using it for business logic as it's an internal identifier."
product_icons_rel,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the product_icons_rel table serves as a required identifier that links to a specific product record. When writing SQL queries, use this column to join with the main products table or to filter/group icon relationships for particular products, noting that NULL values are not allowed in this column."
product_icons_rel,product_icon_id,int,NO,,,,,,,10.0,0.0,"The product_icon_id column in the product_icons_rel table serves as a non-nullable integer identifier for each product-to-icon relationship record. When writing SQL queries, this column can be used to uniquely identify and filter specific product-icon mappings, making it useful for JOIN operations and WHERE clauses when you need to track or manage which icons are associated with particular products."
product_images,product_image_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_image_id column serves as the primary key in the product_images table, uniquely identifying each image record associated with product listings. This non-nullable integer field should be used in JOIN operations when linking product images to other tables, and can be referenced in WHERE clauses when querying for specific image records."
product_images,product_id,int,NO,,,,,,,10.0,0.0,The product_id column in the product_images table is a required integer field that serves as a reference to identify which product each image belongs to. This column enables joining product_images with other product-related tables and is essential for retrieving all images associated with a specific product.
product_images,image_url,varchar(500),NO,,,,,,500.0,,,"The image_url column in the product_images table stores the web-accessible URL or file path (up to 500 characters) where each product image can be accessed. This required field (non-nullable) is essential for retrieving and displaying product images in applications, and can be used in SQL queries to locate specific product images or join with other product-related tables."
product_ingredients,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column in the product_ingredients table serves as the primary key, uniquely identifying each ingredient record with a non-nullable integer value. When writing SQL queries, this column can be used for precise record selection (WHERE id = X) or for joining to related tables that reference specific ingredients."
product_ingredients,name,varchar(128),NO,,,,,,128.0,,,"The 'name' column in the product_ingredients table stores the descriptive name of each ingredient as a text string (up to 128 characters) and cannot contain NULL values. This column is essential for identifying and referencing specific ingredients when querying ingredient information for products, and should be used in WHERE clauses or JOIN conditions when looking up specific ingredients by their names."
product_ingredientsLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column serves as the primary key in the product_ingredientsLang table, uniquely identifying each ingredient language entry. When writing SQL queries, use this column for joining with related tables or when you need to reference specific ingredient language records, ensuring each row can be distinctly identified."
product_ingredientsLang,product_ingredient_id,int,NO,,,,,,,10.0,0.0,"The product_ingredient_id column in the product_ingredientsLang table serves as a reference identifier for specific ingredient entries, linking them to their corresponding translations. This non-nullable integer column should be used in WHERE clauses or JOIN conditions when you need to match or retrieve ingredient information across different language versions."
product_ingredientsLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the product_ingredientsLang table stores language identifiers (such as 'en', 'es', 'fr') as character strings up to 10 characters long, and is required (non-nullable). This column is used to specify which language version an ingredient description represents, enabling queries to filter or join ingredient information based on specific language requirements."
product_ingredientsLang,l_name,varchar(128),NO,,,,,,128.0,,,"The `l_name` column in the product_ingredientsLang table stores ingredient names in different languages as text strings up to 128 characters long. This required (non-nullable) field is essential for multilingual ingredient display and can be used in queries to retrieve or filter ingredient names in specific languages, making it a key field for language-specific ingredient lookups."
product_ingredients_rel,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the product_ingredients_rel table, uniquely identifying each product-ingredient relationship with an integer value. This auto-incrementing identifier helps maintain data integrity and provides a reliable way to reference specific product-ingredient associations in queries and relationships."
product_ingredients_rel,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the product_ingredients_rel table serves as one half of a mapping relationship, storing the unique identifier of a product that contains specific ingredients. When writing SQL queries, this column should be used to join with the primary products table and is commonly referenced in WHERE clauses or JOINs to filter or retrieve ingredient information for specific products."
product_ingredients_rel,product_ingredient_id,int,NO,,,,,,,10.0,0.0,"The product_ingredient_id column serves as a unique identifier for each product-ingredient relationship record in the product_ingredients_rel mapping table. This non-nullable integer column can be used in WHERE clauses or JOINs to reference specific product-ingredient combinations, making it useful for tracking or querying which ingredients belong to particular products."
product_lot_expire_stats,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the product_lot_expire_stats table, uniquely identifying each statistical record about product lot expirations. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific expiration statistics entry."
product_lot_expire_stats,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the product_lot_expire_stats table serves as a reference to identify specific products for which expiration statistics are being tracked. This required integer field should be used in WHERE clauses or JOIN conditions when you need to filter or combine expiration statistics for particular products, and it likely corresponds to a primary key in a related products table."
product_lot_expire_stats,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the product_lot_expire_stats table is a required integer field that identifies the supplier or manufacturer associated with each product lot expiration record. When writing queries, this column can be used to filter or group expiration statistics by specific suppliers, and it's commonly used to join with supplier-related tables to access additional supplier information."
product_lot_expire_stats,lot_id,int,NO,,,,,,,10.0,0.0,"The lot_id column serves as a unique identifier for each product lot in the product_lot_expire_stats table, allowing for tracking of expiration-related statistics at the lot level. When writing SQL queries, use this non-nullable integer column to join with other lot-related tables or to filter/group expiration statistics for specific product lots."
product_lot_expire_stats,expiry_date,date,NO,,,,,,,,,"The expiry_date column in the product_lot_expire_stats table represents the specific date when a product lot becomes expired or unusable. This non-nullable date field is essential for tracking product expiration patterns and can be used in SQL queries to analyze expiration trends, filter for upcoming expirations, or calculate time remaining until expiration (e.g., DATEDIFF(expiry_date, CURRENT_DATE))."
product_lot_expire_stats,qty,int,NO,,,,,,,10.0,0.0,"The ""qty"" column in the product_lot_expire_stats table represents the quantity or count of items in a product lot, stored as a non-nullable integer value. When writing SQL queries, this column can be used for aggregating total quantities, filtering by specific quantity thresholds, or calculating average lot sizes across different product groups."
product_lot_expire_stats,storage_units_id,int,YES,,,,,,,10.0,0.0,"The storage_units_id column in the product_lot_expire_stats table serves as a reference to identify specific storage locations or units where products are kept. When writing SQL queries, this nullable integer column can be used to filter or group expiration statistics by storage location, making it useful for analyzing expiration patterns across different storage areas."
product_lot_expire_stats,created_at,datetime,NO,,,,,,,,,The created_at column in the product_lot_expire_stats table records the exact timestamp when each statistical record was initially created in the system. This non-nullable datetime field is essential for temporal analysis and can be used to track when specific lot expiration statistics were first documented or calculated.
product_refunds,product_refunds_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_refunds_id column serves as the primary key for the product_refunds table, uniquely identifying each refund transaction with a non-nullable integer value. When writing SQL queries, use this column to join with related tables or to filter specific refund records, such as ""WHERE product_refunds_id = 123""."
product_refunds,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the product_refunds table is a required integer field that identifies which specific product was refunded in each transaction. When writing queries, this column can be used to join with other product-related tables or to filter/group refund records for specific products."
product_refunds,delivery_date,date,NO,,,,,,,,,The delivery_date column in the product_refunds table represents the date when the original product was delivered to the customer before being refunded. This mandatory date field is essential for tracking the timeline of refund transactions and can be used in SQL queries to analyze delivery-to-refund intervals or filter refund records based on when products were initially delivered.
product_refunds,refunded_percentage,float,NO,,,,,,,12.0,,"The refunded_percentage column in the product_refunds table stores the proportion of the original purchase amount that was refunded to the customer, expressed as a decimal value (e.g., 0.50 for a 50% refund). When writing SQL queries, this non-nullable float column can be used to filter or analyze partial versus full refunds, with values typically ranging between 0.0 and 1.0 (or higher in special cases)."
product_refunds,box_locations,text,NO,,,,,,65535.0,,,"The ""box_locations"" column in the product_refunds table stores text information about where returned products are physically located during the refund process. This column is required (non-nullable) and can be used to track and query the storage or handling locations of items being refunded, which is essential for warehouse management and refund processing workflows."
product_refunds,staff_id,int,NO,,,,,,,10.0,0.0,"The staff_id column in the product_refunds table is a required integer field that identifies which staff member processed or handled the refund transaction. When querying refund data, this column can be used to join with a staff/employees table to get information about the personnel who managed specific refunds or to analyze refund patterns by staff member."
product_refunds,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the product_refunds table records the exact timestamp when each refund transaction was initially created in the system, automatically populated with CURRENT_TIMESTAMP. This non-nullable timestamp field is useful for filtering refunds by date ranges, analyzing refund patterns over time, or sorting refunds chronologically in SQL queries."
product_refunds,status,int,NO,,,0,,,,10.0,0.0,"The 'status' column in the product_refunds table is a required integer field that represents the current state of a refund transaction, likely using predefined status codes (e.g., 0 for pending, 1 for approved, 2 for rejected). When querying this column, you can use integer comparisons to filter refunds by their processing status, making it useful for tracking the lifecycle of refund requests."
product_refunds,amount_refunded,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The amount_refunded column in the product_refunds table stores the monetary value of each refund transaction as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). This required (non-nullable) field represents the exact amount returned to the customer, defaulting to 0.00 if not specified, and can be used in financial calculations or aggregations when analyzing refund data."
product_refunds,processed_at,timestamp,YES,,,,,,,,,"The processed_at column in the product_refunds table stores the exact date and time when a refund transaction was processed or completed in the system. This timestamp field can be used in SQL queries to filter, sort, or analyze refund transactions by their processing time, making it useful for tracking processing delays, analyzing refund patterns over time, or generating time-based reports."
product_refunds,comment_from_distribution,text,NO,,,,,,65535.0,,,"The comment_from_distribution column in the product_refunds table stores text feedback or notes provided by the distribution department regarding a product refund transaction. This required field (non-nullable) can be used to filter or search for specific distribution-related comments associated with refunds, and it's commonly used in WHERE clauses or JOIN conditions when analyzing refund cases with distribution feedback."
product_sales,product_sale_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_sale_id column serves as the primary key for the product_sales table, uniquely identifying each individual sale transaction. This non-nullable integer field should be used in JOIN operations when linking sale records to related tables, and can be referenced in WHERE clauses when looking up specific sale transactions."
product_sales,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the product_sales table serves as a foreign key that references the primary key in the products table, establishing a link between each sale transaction and its corresponding product. This column is required (non-nullable) and indexed (MUL) to optimize queries that join product_sales with the products table or filter sales by specific products."
product_sales,start_date,date,NO,,,,,,,,,The start_date column in the product_sales table represents the date when a product sale transaction was initiated or recorded. This mandatory date field is essential for temporal analysis of sales data and can be used in SQL queries for filtering transactions within specific date ranges or aggregating sales by time periods.
product_sales,end_date,date,NO,,,,,,,,,The end_date column in the product_sales table represents the date when a product sale transaction was completed or finalized. This mandatory date field is essential for tracking when sales are concluded and can be used for analyzing sales patterns over time or filtering transactions within specific date ranges.
product_sales,created_date,datetime,NO,,,,,,,,,"The created_date column in the product_sales table stores the timestamp when each sale transaction was recorded, using a datetime format that captures both the date and time of the sale. This non-nullable field is essential for temporal analysis of sales data and can be used in SQL queries for filtering sales within specific time periods or aggregating sales data by various time intervals (e.g., daily, monthly, yearly)."
product_sales,created_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `created_by` column in the `product_sales` table is a required integer field that stores the user ID of the person who recorded each sale transaction. This column serves as a foreign key (indicated by the MUL key type) linking to the users table, enabling tracking and accountability of which user created each sales record."
product_sales,purchasing_price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The purchasing_price column in the product_sales table stores the per-unit cost price of products at the time of the sale transaction, represented as a decimal number with up to 10 digits total and 2 decimal places. This required field is useful for calculating profit margins and cost analysis in SQL queries, and can be used in aggregate functions (like AVG, SUM) or in calculations with the sale price to determine profitability metrics."
product_sales,products_sunday_bb_cap,int,YES,,,,,,,10.0,0.0,"This column in the product_sales table represents the maximum capacity or limit for product sales specifically on Sundays, stored as an integer value. It can be used in queries to validate or check against actual Sunday sales volumes, and being nullable indicates that not all products may have Sunday-specific sales caps."
product_sales,products_monday_bb_cap,int,YES,,,,,,,10.0,0.0,"This column in the product_sales table stores the quantity cap or maximum limit for product sales specifically on Mondays, represented as an integer value. When writing queries involving Monday sales restrictions or validations, use this column to ensure sales quantities don't exceed the specified cap value, and since it's nullable, remember to handle NULL cases appropriately."
product_sales,products_tuesday_bb_cap,int,YES,,,,,,,10.0,0.0,"This column 'products_tuesday_bb_cap' in the product_sales table stores an integer value representing the maximum capacity or limit for product sales specifically on Tuesdays. When writing SQL queries, this field can be used to check or validate if Tuesday sales are within permitted limits, though the field is optional as indicated by its nullable property."
product_sales,products_wednesday_bb_cap,int,YES,,,,,,,10.0,0.0,"This column in the product_sales table stores the maximum capacity or limit for product sales specifically on Wednesdays, represented as an integer value. When writing queries involving Wednesday sales restrictions or planning, reference this column to ensure sales don't exceed the specified capacity limits."
product_sales,products_thursday_bb_cap,int,YES,,,,,,,10.0,0.0,"This column in the product_sales table stores the maximum capacity or limit for product sales specifically on Thursdays, represented as an integer value. It can be used in queries to validate or restrict Thursday sales quantities, and being nullable suggests that not all products may have Thursday-specific limitations."
product_sales,products_friday_bb_cap,int,YES,,,,,,,10.0,0.0,"This column in the product_sales table stores the quantity cap or maximum limit for products specifically sold on Fridays during ""Blue Badge"" promotions or special events. When writing queries involving Friday sales restrictions or analyzing Blue Badge promotion limits, reference this column to ensure sales quantities don't exceed the specified cap value."
product_sales,products_saturday_bb_cap,int,YES,,,,,,,10.0,0.0,"The products_saturday_bb_cap column in the product_sales table stores an integer value representing the maximum number of units of a product that can be sold on Saturdays. This optional field (nullable) helps enforce business rules around Saturday sales limits, and can be used in queries to validate or restrict Saturday transaction quantities."
product_stats,product_stats_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_stats_id column serves as the primary key for the product_stats table, uniquely identifying each statistical record for products in the catalog. This auto-incrementing integer field is required (non-nullable) and should be referenced when joining with related tables or filtering specific statistical records."
product_stats,product_id,int,YES,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the product_stats table serves as a foreign key that links to the primary product information in the products table. When writing SQL queries, use this column to join product_stats with the products table to combine statistical metrics with core product details, or to filter/group statistical data for specific products."
product_stats,supplier_id,smallint,YES,,,,,,,5.0,0.0,"The supplier_id column in the product_stats table identifies the supplier associated with each product's statistical record, allowing queries to analyze metrics by supplier. This optional field (nullable) can be used to group or filter product performance data by supplier, enabling supplier-level analysis and comparisons of product metrics."
product_stats,categ_id,smallint,YES,,,,,,,5.0,0.0,"The categ_id column in the product_stats table represents the category identifier for each product's statistical record, allowing for grouping and analysis of metrics by product category. This optional field (nullable) can be used in SQL queries to segment product performance data by category, enabling category-level aggregations and comparisons of product statistics."
product_stats,subcateg_id,smallint,YES,,,,,,,5.0,0.0,"The subcateg_id column in the product_stats table represents the subcategory classification of products, allowing for grouping and analysis of metrics at the subcategory level. This optional field (nullable) uses a smallint data type to efficiently store subcategory identifiers, and can be used in GROUP BY clauses or JOIN operations to analyze product performance trends within specific subcategories."
product_stats,subcategtype_id,smallint,YES,,,,,,,5.0,0.0,"The subcategtype_id column in the product_stats table is a smallint field that likely represents a subcategory type classification for products, helping to organize and group products into more specific segments within the broader product hierarchy. This optional field (as indicated by being nullable) can be used in SQL queries to filter or aggregate product statistics based on subcategory types, enabling more granular analysis of product performance metrics."
product_stats,featured_flag,"enum('0','1')",YES,,,0,,,1.0,,,"The featured_flag column in the product_stats table is an enumerated field that indicates whether a product is featured (1) or not featured (0) in the catalog. When writing SQL queries, you can use this column to filter or group products based on their featured status, for example: ""SELECT * FROM product_stats WHERE featured_flag = '1'"" to find all featured products."
product_stats,new_flag,"enum('0','1')",YES,,,0,,,1.0,,,"The new_flag column in the product_stats table is an enumerated field that indicates whether a product is considered new (1) or not (0). This binary flag can be used in SQL queries to filter or segment products based on their novelty status, making it useful for analyzing performance metrics of new versus established products."
product_stats,account_manager_id,int,YES,,,,,,,10.0,0.0,The account_manager_id column in the product_stats table stores the unique identifier of the account manager assigned to oversee the product's performance and metrics. This optional (nullable) integer field can be used to join with an account managers or employees table to analyze product performance by account manager or to group and filter product statistics based on account ownership.
product_stats,date,date,YES,MUL,,,,,,,,"The 'date' column in the product_stats table stores the specific date when product metrics were recorded, allowing for temporal analysis of product performance. This column is indexed (MUL) to optimize queries involving date-based filtering or grouping, and can be used effectively in SQL queries for time-series analysis, trend reporting, and date-range filtering of product statistics."
product_stats,availability_nb_checks,smallint,NO,,,0,,,,5.0,0.0,"The availability_nb_checks column in the product_stats table stores the number of times a product's availability has been verified or checked, represented as a small integer that cannot be null and defaults to 0. This metric can be used in SQL queries to analyze the frequency of availability checks for products, helping to monitor inventory tracking patterns and system verification activities."
product_stats,availability_nb_times_was_available,smallint,NO,,,0,,,,5.0,0.0,"The availability_nb_times_was_available column in the product_stats table records the number of times a product has been marked as available in the system, stored as a non-null smallint value. This metric can be used in SQL queries to analyze product availability patterns and track how frequently products are in stock, with values starting from 0."
product_stats,availability_percentage,"decimal(5,2)",NO,,,0.00,,,,5.0,2.0,"The availability_percentage column in the product_stats table stores the percentage of time a product is available for purchase, represented as a decimal number with two decimal places (e.g., 98.75). This required field ranges from 0.00 to 100.00 and is useful in SQL queries for analyzing product availability trends or filtering products based on their availability thresholds."
product_stats,defined_retail_price,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The defined_retail_price column in the product_stats table stores the official retail price for each product with high precision (up to 6 decimal places) and cannot contain NULL values. This column is essential for price analysis and reporting, representing the standard retail price point set for each product in the catalog, and should be used when querying for official product pricing information."
product_stats,default_retail_price,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The default_retail_price column in the product_stats table stores the standard retail price for each product with high precision (up to 6 decimal places) and cannot contain NULL values. This column is essential for price analysis and reporting, representing the base selling price of products before any discounts or adjustments are applied."
product_stats,default_retail_weight,smallint,NO,,,0,,,,5.0,0.0,"The default_retail_weight column in the product_stats table stores the standard weight value for products as a small integer, which cannot be null. This column is used to track the typical or default weight of products for retail purposes, likely measured in a standardized unit, and can be useful in queries involving shipping calculations, inventory management, or product comparison analyses."
product_stats,default_purchasing_price,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The default_purchasing_price column in the product_stats table stores the standard cost or base price for acquiring each product, represented as a precise decimal number with up to 6 decimal places. This non-nullable field is essential for cost analysis and profit margin calculations, and can be used in SQL queries to analyze purchasing costs or compare against selling prices for margin analysis."
product_stats,default_purchasing_weight,smallint,NO,,,0,,,,5.0,0.0,"The default_purchasing_weight column in the product_stats table stores a non-null integer value representing the standard weight or priority assigned to products for purchasing-related calculations. This required field helps determine product ordering preferences or relative importance in purchasing decisions, with a default value of 0 if not explicitly specified."
product_stats,qty_sold,mediumint,NO,MUL,,0,,,,7.0,0.0,"The qty_sold column in the product_stats table stores the total quantity sold for each product as a medium-sized integer value, which cannot be null and must contain a value. This column is part of a multi-column index (indicated by MUL key type) and can be used in SQL queries to analyze sales volumes, filter products by popularity, or calculate aggregate sales metrics when joined with the products table through the product_id relationship."
product_stats,qty_for_sales,mediumint,NO,,,0,,,,7.0,0.0,"The qty_for_sales column in the product_stats table stores the current quantity of each product that is available for sale, represented as a non-null medium-sized integer. This column is essential for inventory tracking and can be used in SQL queries to monitor stock levels, analyze product availability, or set up alerts for low inventory situations."
product_stats,nb_orders_with_this_product,mediumint,NO,,,0,,,,7.0,0.0,"The nb_orders_with_this_product column stores the total number of orders that have included this specific product, represented as a non-negative integer. This metric is useful for analyzing product popularity and sales frequency, and can be used in queries to identify best-selling products or filter products based on their order volume."
product_stats,inventory_out_qty,mediumint,NO,,,0,,,,7.0,0.0,"The inventory_out_qty column in the product_stats table stores the quantity of products that have been removed from inventory, represented as a non-null medium-sized integer. This column is essential for tracking product outflow and can be used in SQL queries to analyze inventory movement patterns or calculate depletion rates for specific products."
product_stats,was_by_default_in_a_basket_design,smallint,NO,,,0,,,,5.0,0.0,"The ""was_by_default_in_a_basket_design"" column is a required smallint field (non-nullable) that indicates whether a product was automatically included in pre-designed gift baskets (1) or not (0). When querying product statistics, this column can be used to filter or analyze products based on their default inclusion status in basket designs, helping to understand product placement strategies."
product_stats,gross_revenue,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The gross_revenue column in the product_stats table stores the total monetary value generated by each product before any deductions, represented as a precise decimal number with up to 6 decimal places. This non-nullable field is essential for financial analysis and reporting, allowing queries to calculate revenue metrics and perform aggregations across different products or time periods."
product_stats,cost,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The ""cost"" column in the product_stats table stores the precise unit cost value for each product with up to 6 decimal places of accuracy, using a decimal(14,6) data type. This non-nullable field is essential for financial calculations and cost analysis, and should be used when querying for product cost metrics or performing calculations involving product expenses."
product_stats,sales_per_basket,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The sales_per_basket column in the product_stats table represents the average number of units sold per customer basket/order for each product, stored as a precise decimal number with up to 6 decimal places. This metric helps analyze product purchase patterns and can be used in SQL queries to identify products with high or low basket penetration, with a default value of 0 if no sales data is available."
product_stats,gross_revenue_after_weight_adjustment,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The gross_revenue_after_weight_adjustment column stores the final revenue amount for each product after applying weight-based adjustments, with precision up to 6 decimal places. When writing SQL queries, this column can be used to analyze adjusted revenue metrics for products, and since it's non-nullable, you can reliably perform aggregations and calculations without needing to handle NULL values."
product_stats,default_weight_per_unit,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The default_weight_per_unit column stores the standard weight of a single unit of a product with high precision (up to 6 decimal places), making it useful for shipping calculations and inventory management. This non-nullable field represents the base weight measurement for each product, and can be used in aggregate calculations or comparisons to identify products within specific weight ranges."
product_stats,avg_real_weight_per_unit,"decimal(14,6)",NO,,,0.000000,,,,14.0,6.0,"The avg_real_weight_per_unit column stores the average actual measured weight per unit of a product with high precision (up to 6 decimal places). This non-nullable decimal field is essential for accurate inventory management and shipping calculations, representing the typical physical weight of individual product units based on real measurements rather than estimated values."
product_stats,qty_sold_organic,mediumint,YES,,,0,,,,7.0,0.0,The qty_sold_organic column in the product_stats table represents the number of units sold through organic (non-promotional) channels for each product. This optional numeric field accepts medium-sized integers and can be used in aggregate functions or comparisons to analyze natural product demand patterns and baseline sales performance.
product_stats,qty_sold_with_prepop_method_bobb,int,YES,,,0,,,,10.0,0.0,"The qty_sold_with_prepop_method_bobb column in the product_stats table stores the number of units sold for a product specifically when using the ""BOBB"" pre-population method. When querying this column, it can be used to analyze sales performance specific to this pre-population method, and since it's nullable, NULL values should be handled appropriately in aggregations or comparisons."
product_stats,qty_sold_with_prepop_method_boph,int,YES,,,0,,,,10.0,0.0,"The qty_sold_with_prepop_method_boph column in the product_stats table stores the number of units sold using the ""Buy Online, Pickup Here"" (BOPH) pre-population method for each product. When querying this column, you can use it to analyze the effectiveness of BOPH sales channels or compare it with other fulfillment methods, with NULL values indicating products that haven't utilized this sales method."
product_stats,qty_placed_with_prepop_method_bobb,mediumint,YES,,,0,,,,7.0,0.0,"The qty_placed_with_prepop_method_bobb column in the product_stats table stores the number of times a product was ordered using the ""Buy One, Buy Back"" (BOBB) pre-population method. This nullable mediumint column can be used in SQL queries to analyze the effectiveness of the BOBB ordering method for different products, such as comparing it with other ordering methods or identifying products with high BOBB usage."
product_stats,qty_placed_with_prepop_method_boph,mediumint,YES,,,0,,,,7.0,0.0,"The qty_placed_with_prepop_method_boph column in the product_stats table stores the number of items placed using a pre-populated method specifically for BOPH (Buy Online Pickup Here) orders. This nullable mediumint column can be used to analyze the popularity of BOPH ordering methods for specific products, and can be included in aggregations or filtering conditions when examining product placement patterns through this particular fulfillment channel."
product_tags,product_tag_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_tag_id column serves as the primary key in the product_tags table, uniquely identifying each tag-to-product association with a non-nullable integer value. When writing SQL queries, use this column for joining with related tables, filtering specific tag associations, or ensuring unique identification of tag relationships in the product categorization system."
product_tags,name,varchar(500),NO,,,,,,500.0,,,"The 'name' column in the product_tags table stores the actual text of each product tag or label (e.g., ""organic"", ""gluten-free"", ""seasonal"") with a maximum length of 500 characters. When querying this column, it's commonly used in WHERE clauses for filtering products by specific tags or in JOIN operations to connect products with their associated tags."
product_tags,status,tinyint,YES,,,1,,,,3.0,0.0,"The `status` column in the `product_tags` table is a tinyint field that indicates whether a product tag is active or inactive in the system. When writing queries, you can filter product tags based on their status (typically 1 for active, 0 for inactive) to include or exclude tags from search results or product categorization operations."
product_tags,icon_url,varchar(500),YES,,,,,,500.0,,,"The icon_url column in the product_tags table stores the URL path (up to 500 characters) to visual icons or images that represent each product tag. This optional field can be used in queries when you need to retrieve or display visual representations of tags, particularly useful for UI elements that show tag icons alongside their text labels."
product_tagsLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'l_id' column serves as the primary key in the product_tagsLang table, uniquely identifying each language-specific product tag entry with an integer value. This column is essential for maintaining data integrity and establishing relationships with other tables in the multi-language product tagging system."
product_tagsLang,product_tag_id,int,YES,,,,,,,10.0,0.0,"The product_tag_id column in the product_tagsLang table serves as a reference to link language-specific tag variations with their base product tag entries. When writing queries, this column can be used to join with the main product tags table or to filter/group language-specific tag variations for a particular product tag."
product_tagsLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the `product_tagsLang` table is a required (non-nullable) varchar field that stores language identifiers (such as 'en', 'es', 'fr') with a maximum length of 10 characters. This column is used to specify which language version a particular product tag represents, enabling queries to filter or retrieve tag translations for specific languages."
product_tagsLang,l_name,varchar(255),NO,,,,,,255.0,,,"The `l_name` column in the `product_tagsLang` table stores the localized or translated name of a product tag in a specific language, with a maximum length of 255 characters. Since this field is marked as NOT NULL, it must always contain a value, ensuring that every language variation of a product tag has a proper name defined."
product_tags_rel,product_tags_rel_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_tags_rel_id column serves as the primary key for the product_tags_rel junction table, uniquely identifying each product-tag relationship with an integer value. This auto-incrementing identifier is essential for maintaining data integrity and can be used in JOIN operations or WHERE clauses when querying specific product-tag associations."
product_tags_rel,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the product_tags_rel table serves as a foreign key that references the unique identifier of a product. This column is used to establish the product side of the many-to-many relationship between products and tags, and should be included in JOIN operations when querying for products and their associated tags."
product_tags_rel,product_tag_id,int,NO,,,,,,,10.0,0.0,The product_tag_id column in the product_tags_rel table serves as a unique identifier for each product-tag relationship record. This integer column is required (non-nullable) and should be referenced when you need to identify or join specific product-tag associations in queries.
product_user_ratings,product_user_rating_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_user_rating_id column serves as the primary key for the product_user_ratings table, uniquely identifying each individual product rating and review entry. This non-nullable integer column is essential for joining with other tables and should be referenced when querying specific rating records or establishing relationships between ratings and other data."
product_user_ratings,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the product_user_ratings table is a required integer field that serves as a foreign key to identify which product a rating or review belongs to. This column is indexed (MUL) to optimize queries that filter or join based on product_id, and its non-nullable nature ensures that every rating must be associated with a valid product."
product_user_ratings,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the product_user_ratings table is a required integer field that identifies which user submitted each product rating and review. This column can be used to join with other tables containing user information or to filter/group ratings by specific users, making it essential for analyzing user-specific rating patterns or aggregating review statistics per user."
product_user_ratings,rating,int,NO,,,,,,,10.0,0.0,"The ""rating"" column in the product_user_ratings table stores numerical scores (as integers) that users have assigned to products, and it is required for every review entry as indicated by its non-nullable status. When querying this column, you can use it for calculations like average ratings or to filter reviews based on rating thresholds (e.g., WHERE rating >= 4 to find highly-rated products)."
product_user_ratings,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the product_user_ratings table records the exact date and time when a user submitted their product rating or review, automatically populated with CURRENT_TIMESTAMP when the record is created. This timestamp field is mandatory (non-nullable) and can be useful for analyzing rating trends over time or filtering reviews by date ranges."
product_user_ratings,updated_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the product_user_ratings table records the most recent timestamp when a user's product rating or review was modified, automatically updating to the current time whenever a record is changed. This datetime field is non-nullable and defaults to the current timestamp, making it useful for tracking the recency of reviews and filtering for recently updated ratings."
products,product_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The product_id column is the primary key in the products table, serving as a unique identifier for each product in the system. This non-nullable integer field is essential for establishing relationships with other tables and should be referenced when joining product-related data or filtering specific product information in queries."
products,crop_id,int,YES,,,,,,,10.0,0.0,"The crop_id column in the products table is an optional integer field that creates a link between a product and its associated crop information, likely connecting to a separate crops reference table. This column is particularly useful when querying agricultural or farm-related products, allowing you to filter or join products based on their source crop type."
products,crop_variety_id,int,NO,MUL,,,,,,10.0,0.0,"The crop_variety_id column in the products table is a required integer field that establishes a foreign key relationship to identify the specific variety of crop associated with each product. This column is indexed (MUL) to optimize queries joining product data with crop variety information, making it efficient to retrieve or filter products based on their crop variety characteristics."
products,supplier_id,int,YES,,,,,,,10.0,0.0,"The supplier_id column in the products table is an integer field that establishes a connection to the supplier who provides or manufactures each product. This optional field (as indicated by being nullable) allows for tracking and organizing products by their respective suppliers, enabling queries to filter or group products based on their source supplier."
products,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the products table stores the descriptive title or label of each product as a variable-length string up to 255 characters, allowing for detailed product names while being memory efficient. When querying this column, you can use string operations (like LIKE, CONTAINS) for product searches, and since it's nullable, remember to handle potential NULL values appropriately in your queries."
products,units,varchar(15),YES,,,,,,15.0,,,"The ""units"" column in the products table stores the unit of measurement or packaging format for each product as a text string (e.g., ""kg"", ""pieces"", ""liters"", ""boxes""). This column helps specify how products are quantified and sold, making it essential for inventory management and order processing, though it can be left empty (NULL) when not applicable."
products,weight,varchar(15),YES,,,,,,15.0,,,"The weight column in the products table stores the weight specification of each product as a variable-length string up to 15 characters, allowing for different weight formats and units (e.g., ""500g"", ""1.2 kg"", ""2 lbs""). When querying this column, be aware that since it's stored as varchar rather than a numeric type, numerical comparisons will require appropriate string handling or conversion functions, and the column can contain NULL values for products where weight information is not applicable or available."
products,product_weight_with_packaging,int,NO,,,,,,,10.0,0.0,"The product_weight_with_packaging column in the products table stores the total weight of a product including its packaging material, measured in grams as a whole number (integer). This mandatory field (non-nullable) is essential for shipping calculations and logistics planning, and should be included in queries where total shipping weight or packaging specifications need to be considered."
products,volume,int,NO,,,1,,,,10.0,0.0,"The volume column in the products table represents the physical volume measurement of each product, stored as a non-null integer value. This column is essential for logistics and shipping calculations, helping determine packaging requirements and shipping costs, and should be included in queries where product dimensions or space requirements need to be considered."
products,price,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The price column in the products table stores the monetary value of each product with support for up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67), allowing for precise price representation. When querying this column, you can perform numerical comparisons and calculations, and since it's nullable, remember to handle NULL values appropriately using IS NULL or COALESCE when necessary."
products,packing_order,int,NO,,,1,,,,10.0,0.0,"The packing_order column in the products table is a required integer field that determines the sequence or priority in which products should be packed or processed during order fulfillment. This value helps warehouse staff and automated systems optimize the packing process by indicating which items should be handled first, likely based on factors such as fragility, weight, or size considerations."
products,image_url,varchar(255),YES,,,,,,255.0,,,"The image_url column in the products table stores the web-accessible URL path (up to 255 characters) where the product's primary image can be found. This optional field can be used in SELECT queries to retrieve product image locations for display purposes, or in JOIN operations when correlating product visuals with other product data, making it particularly useful for frontend display and image management functionality."
products,status,tinyint,NO,MUL,,0,,,,3.0,0.0,"The 'status' column in the products table is a required tinyint field that indicates the current state of a product (e.g., active, inactive, discontinued) using numeric codes. When writing SQL queries, this column can be used for filtering products based on their operational status, and its indexed nature (MUL) makes it efficient for queries that need to retrieve products in specific states."
products,seconds_needed_to_pack,int,NO,,,5,,,,10.0,0.0,"The seconds_needed_to_pack column in the products table stores the estimated time (in seconds) required to package each product for shipment, represented as a non-null integer value. This metric is crucial for warehouse operations and delivery time calculations, and can be used in SQL queries to calculate packing time estimates for orders or optimize warehouse workflow efficiency."
products,featured,tinyint,NO,MUL,,0,,,,3.0,0.0,"The 'featured' column in the products table is a boolean flag (stored as tinyint) that indicates whether a product should be highlighted or prominently displayed in the system, typically used for special promotions or showcase items. When querying, use this column with values 0 (not featured) or 1 (featured) to filter or sort products based on their featured status, such as ""WHERE featured = 1"" to retrieve only featured products."
products,manipulation_needed,int,NO,,,0,,,,10.0,0.0,"The manipulation_needed column in the products table is a required integer flag (0/1) that indicates whether a product requires special handling or manipulation before being sold or shipped. This binary indicator helps operational teams identify products that need additional processing, preparation, or modification, making it useful in queries that filter or group products based on their handling requirements."
products,manipulation_instructions,text,NO,,,,,,65535.0,,,"The manipulation_instructions column in the products table contains required text instructions that detail how to handle, store, or process specific products throughout the supply chain and fulfillment process. This column is essential for operations teams to understand any special requirements or precautions needed when working with each product, ensuring proper product handling from warehouse to delivery."
products,gift,tinyint,NO,,,0,,,,3.0,0.0,"The 'gift' column in the products table is a boolean flag (stored as tinyint) that indicates whether a product can be purchased as a gift, where 0 typically means not available as a gift and 1 means available as a gift. When writing queries, this column can be used to filter or identify gift-eligible products, making it particularly useful for features like gift shopping or special gift-related promotions."
products,unlocked_above,float,YES,,,,,,,12.0,,"The unlocked_above column in the products table represents a threshold value that determines when a product becomes available or ""unlocked"" for purchase, likely based on certain conditions or achievements in the system. This floating-point value can be used in SQL queries to filter products based on user progress or other numerical metrics, with NULL values potentially indicating products that are always available without restrictions."
products,automated_purchase,tinyint,YES,,,,,,,3.0,0.0,"The automated_purchase column in the products table is a boolean flag (stored as tinyint) that indicates whether a product can be purchased automatically through the system without manual intervention. This flag helps determine which products are eligible for immediate automated processing in the e-commerce workflow, with NULL values potentially indicating that the automated purchase status hasn't been determined yet."
products,refrigerated,int,YES,,,0,,,,10.0,0.0,"The `refrigerated` column in the products table is a binary indicator (stored as an integer) that specifies whether a product requires refrigeration during storage and transport, where 0 typically indicates non-refrigerated items and 1 indicates refrigerated items. This column is particularly useful when filtering products based on storage requirements or when coordinating shipping logistics that require temperature control."
products,description,text,YES,,,,,,65535.0,,,"The description column in the products table contains detailed textual descriptions of each product, providing comprehensive information about the product's features, specifications, and characteristics. This column is commonly used in LIKE or ILIKE queries for product searches, and while it can be NULL, it's typically populated to ensure customers have adequate product information for making purchase decisions."
products,lead_time,int,NO,,,0,,,,10.0,0.0,"The lead_time column in the products table represents the number of days required between placing an order and receiving the product, stored as a non-nullable integer value. This field is essential for inventory management and customer delivery estimates, helping to set accurate expectations for product availability and shipping timelines."
products,gift_certificate,tinyint,NO,,,0,,,,3.0,0.0,"The gift_certificate column in the products table is a binary flag (tinyint) that indicates whether a product can be purchased as a gift certificate (1) or not (0). This non-nullable field helps the system quickly identify and filter gift certificate products, which may require special handling in checkout processes or have different business rules than standard products."
products,product_barcode,varchar(255),YES,,,,,,255.0,,,"The product_barcode column in the products table stores standard barcode identifiers (such as UPC, EAN, or other formats) for physical products as variable-length strings up to 255 characters. When querying products by their barcode identifiers, keep in mind that this field is nullable, meaning some products might not have associated barcodes, so it's recommended to use appropriate NULL handling in your WHERE clauses or JOIN conditions."
products,apply_provincial_tax,int,NO,,,0,,,,10.0,0.0,"The apply_provincial_tax column in the products table is a binary integer flag (0 or 1) that indicates whether a product is subject to provincial tax calculations. When querying products that require provincial tax, filter using `WHERE apply_provincial_tax = 1`, or join with tax-related tables only when this flag is set to 1 to ensure accurate tax calculations in pricing operations."
products,apply_national_tax,int,NO,,,0,,,,10.0,0.0,"The apply_national_tax column in the products table is a binary integer flag (0 or 1) that indicates whether a national tax should be applied to the product during price calculations. When querying products that require national tax application, use WHERE apply_national_tax = 1, or join with tax-related tables only when this flag is set to 1."
products,cc_pending_TODELETE,tinyint,YES,,,0,,,,3.0,0.0,"The cc_pending_TODELETE column in the products table is a legacy boolean flag (tinyint) that appears to be marked for removal, as indicated by its name suffix ""TODELETE"". When writing queries, this column should be avoided as it is likely deprecated and scheduled for deletion, though its current presence in the schema suggests it may have historically tracked some form of pending credit card or content control status."
products,flow_through,tinyint,YES,,,0,,,,3.0,0.0,"The flow_through column in the products table is a boolean-like indicator (stored as a tinyint) that specifies whether a product is handled through direct flow-through processing. This flag helps determine the product's fulfillment method, where a value of 1 typically indicates the product bypasses normal warehouse storage for direct shipping/processing, while 0 indicates standard handling procedures."
products,location_header_id,int,YES,,,,,,,10.0,0.0,"The location_header_id column in the products table is an optional integer field that links products to their associated location header information, likely indicating where products are primarily stored or managed. This column can be used in JOIN operations with a location headers table to retrieve geographical or organizational hierarchy details, and its nullable nature means products may exist without a specific location assignment."
products,qty_ready_for_picking,int,NO,,,0,,,,10.0,0.0,"The qty_ready_for_picking column in the products table represents the current quantity of a product that is available and prepared for order fulfillment or picking operations. This non-nullable integer field, defaulting to 0, is crucial for inventory management queries, particularly when determining which products are immediately available for processing customer orders or managing warehouse operations."
products,slug,varchar(255),NO,,,,,,255.0,,,"The `slug` column in the products table stores URL-friendly versions of product names, using lowercase letters, numbers, and hyphens (e.g., ""organic-banana-bunch"" or ""whole-grain-bread""). This column is required (non-nullable) and is commonly used in constructing SEO-friendly URLs for product pages and as a human-readable unique identifier in API endpoints or routing."
products,created,datetime,NO,,,,,,,,,"The 'created' column in the products table stores the timestamp indicating when each product record was initially added to the system, using a datetime format that captures both the date and time of creation. This non-nullable field is essential for tracking product lifecycle management and can be particularly useful in SQL queries for auditing purposes, filtering recently added products, or analyzing product onboarding patterns over time."
products,updated,datetime,NO,,,,,,,,,"The 'updated' column in the products table stores the timestamp of when a product record was last modified, automatically tracking changes to any product information. This non-nullable datetime field is essential for auditing purposes and helps maintain data integrity by providing a clear timeline of product updates, which can be useful for synchronizing data with external systems or tracking modification history."
products,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the products table is a required integer field that identifies the user who created or owns the product listing, establishing a connection between products and their sellers/vendors. This column is essential for filtering products by seller, managing product ownership, and implementing seller-specific functionality in the e-commerce system."
products,release_rate,int,NO,,,100,,,,10.0,0.0,"The release_rate column in the products table is a required integer field that indicates how quickly or at what rate a product is released or made available, with a default value of 100. This column can be used in SQL queries to filter or sort products based on their release timing characteristics, which could be particularly relevant for managing product launches or controlling the gradual introduction of items into the marketplace."
products,purchasing_price,float,YES,,,0,,,,12.0,,"The purchasing_price column in the products table stores the cost at which the business acquires each product from suppliers, represented as a floating-point number. This column is optional (nullable) and helps calculate profit margins and track procurement costs, making it essential for financial analysis and inventory valuation within the e-commerce system."
products,is_customizable,tinyint,NO,,,0,,,,3.0,0.0,"The is_customizable column in the products table is a binary flag (tinyint) that indicates whether a product can be customized by customers (1) or not (0). This non-nullable field is essential for filtering and identifying products that support customization options, making it useful in queries where you need to display or filter products based on their customization capabilities."
products,conservation_mode_in_basket,int,YES,,,,,,,10.0,0.0,"The conservation_mode_in_basket column in the products table is an integer field that specifies how a product should be handled or preserved when placed in a customer's shopping basket. This column helps determine special handling requirements or storage conditions needed to maintain product quality during the shopping and checkout process, which is particularly relevant for items like perishables or temperature-sensitive products."
products,conservation_mode_in_warehouse,int,NO,,,0,,,,10.0,0.0,"The conservation_mode_in_warehouse column in the products table is a required integer field that specifies how a product should be stored or preserved within the warehouse environment. When querying this column, use integer values that correspond to different conservation modes (e.g., 0 for ambient temperature, 1 for refrigerated, 2 for frozen, etc.), which is essential for proper warehouse management and product handling."
products,supplier_product_name,varchar(255),YES,,,,,,255.0,,,"The supplier_product_name column in the products table stores the original name or designation given to the product by its supplier, which may differ from the product's internal or customer-facing name. This optional field (nullable) can contain up to 255 characters and is useful when querying or referencing products using supplier-specific terminology, particularly in supplier-related operations or when reconciling product information with supplier documentation."
products,supplier_product_code,varchar(255),YES,,,,,,255.0,,,"The supplier_product_code column in the products table stores the unique identifier or SKU that suppliers use to reference their products, allowing for cross-referencing between the marketplace's internal product system and suppliers' inventory systems. This optional field (being nullable) helps in product tracking, order fulfillment, and communication with suppliers, particularly when dealing with product inquiries or placing restock orders."
products,lock_status,tinyint,YES,,,0,,,,3.0,0.0,"The lock_status column in the products table is a tinyint flag that indicates whether a product is currently locked for modifications or available for updates. This column helps control concurrent access and modifications to product records, where a non-zero value typically indicates the product is locked, while 0 or NULL suggests the product is available for editing."
products,unit_of_measure,int,YES,,,,,,,10.0,0.0,"The unit_of_measure column in the products table is an integer field that specifies how each product is measured or sold (e.g., 1 for pieces, 2 for kilograms, 3 for liters, etc.), with the specific meaning of each integer value defined in a reference table or enumeration. When querying products, this column can be used to filter or group items based on their measurement type, and its nullable property allows for products where the unit of measure might not be applicable or hasn't been specified yet."
products,is_new,tinyint,YES,MUL,,1,,,,3.0,0.0,"The `is_new` column in the products table is a boolean flag (stored as tinyint) that indicates whether a product is considered new in the system, where 1 typically represents new products and 0 represents regular products. This column is indexed (MUL) to optimize queries filtering or sorting by product newness, and its nullable property allows for cases where the new status might not be applicable or determined."
products,created_by,int,YES,,,1,,,,10.0,0.0,The created_by column in the products table is an integer field that stores the ID of the user or system entity responsible for initially creating the product record. This optional field (as it's nullable) can be used in SQL queries to track product creation ownership or to join with a users/employees table to retrieve information about who created specific products.
products,days_alert_before_expiry_date,int,YES,MUL,,2,,,,10.0,0.0,"The days_alert_before_expiry_date column in the products table specifies how many days in advance the system should generate alerts before a product reaches its expiration date, with a default value of 2 days. This integer field can be used in SQL queries to identify products that are approaching expiration by comparing the current date plus this alert threshold against the product's expiration date, helping to manage inventory and prevent waste."
products,days_remove_before_expiry_date,int,YES,,,2,,,,10.0,0.0,"The days_remove_before_expiry_date column in the products table specifies how many days before a product's expiration date it should be removed from active inventory or sales. This integer value helps automate inventory management by indicating when products should be pulled from shelves or marked as unavailable, with a NULL value potentially indicating that the product either doesn't expire or follows a different removal policy."
products,default_duration_days_minimum_expiration,int,YES,,,,,,,10.0,0.0,"The default_duration_days_minimum_expiration column in the products table specifies the minimum number of days a product should remain usable or valid before expiring, serving as a default threshold for quality control and inventory management. This integer value can be used in SQL queries to identify products nearing their minimum shelf life or to filter products based on expiration timeline requirements, with NULL values indicating that no minimum expiration duration has been set for the product."
products,group_type,tinyint,NO,MUL,,0,,,,3.0,0.0,"The group_type column in the products table is a required tinyint field that categorizes products into specific groupings or classifications, with a multiple-column index (MUL) to optimize queries filtering or joining on this column. When writing SQL queries, this column can be used to filter products by their group type (e.g., WHERE group_type = 1) or to aggregate products based on their groupings (e.g., GROUP BY group_type), making it particularly useful for reporting and inventory management purposes."
products,visible_on_marketplace,tinyint,NO,,,1,,,,3.0,0.0,"The visible_on_marketplace column is a boolean flag (stored as tinyint) that determines whether a product should be displayed to customers on the marketplace interface. This required field (non-nullable) uses 1 to indicate products that are publicly visible and 0 for products that should be hidden from the marketplace, making it essential for controlling product visibility in e-commerce operations."
products,display_position_for_supplier,int,YES,,,1,,,,10.0,0.0,"The display_position_for_supplier column in the products table is an optional integer field that determines the order in which products appear when filtered or grouped by supplier. When writing queries that need to sort products within a supplier's catalog or display, use this column in ORDER BY clauses to maintain the intended presentation sequence."
products,lock_status_comment,varchar(140),YES,,,,,,140.0,,,"The lock_status_comment column in the products table stores optional explanatory text (up to 140 characters) that provides context or reasoning for why a product might be locked or have restricted status. When writing SQL queries, this column can be used to retrieve or filter products based on their lock status explanations, though its nullable nature means you should handle NULL values appropriately in your conditions."
products,apply_provincial_tax_purchasing,tinyint,NO,,,0,,,,3.0,0.0,"The apply_provincial_tax_purchasing column is a boolean flag (stored as tinyint) in the products table that indicates whether provincial tax should be applied when purchasing the product. When writing SQL queries, use this column with values 0 (false) or 1 (true) to filter or identify products that require provincial tax calculation during the purchasing process."
products,apply_national_tax_purchasing,tinyint,NO,,,0,,,,3.0,0.0,"The apply_national_tax_purchasing column in the products table is a boolean flag (stored as tinyint) that indicates whether national tax rules should be applied when purchasing this product. When querying, use this column with binary operators (= 0 or = 1) to filter products based on their tax application status, particularly useful in tax calculation scenarios or when generating purchase orders."
products,virtual,int,NO,MUL,,0,,,,10.0,0.0,"The 'virtual' column in the products table is a boolean flag (stored as an integer) that indicates whether a product is virtual/digital (1) or physical (0). This column is indexed (MUL) to optimize queries filtering or grouping by product type, and its non-nullable nature ensures every product must be explicitly categorized as either virtual or physical."
products,delivery_service_fees,tinyint(1),YES,,,0,,,,3.0,0.0,"The delivery_service_fees column in the products table is a boolean flag (tinyint(1)) that indicates whether a product requires additional delivery service charges. This optional field can be used in SQL queries to filter or identify products that have special delivery fee requirements, making it particularly useful when calculating final costs or displaying shipping information to customers."
products,charge_by_weight,int,NO,,,0,,,,10.0,0.0,"The charge_by_weight column in the products table is a required integer flag (0 or 1) that indicates whether a product's price should be calculated based on its weight. When writing SQL queries, use this column to identify and filter products that require weight-based pricing (charge_by_weight = 1) versus fixed-price products (charge_by_weight = 0), which is particularly important for order calculations and pricing logic."
products,provenance_required_upon_reception,tinyint(1),NO,,,0,,,,3.0,0.0,"The provenance_required_upon_reception column is a boolean flag (stored as tinyint(1)) that indicates whether proof of origin or source documentation must be provided when receiving this product into inventory. When querying this column, use it as a binary condition (WHERE provenance_required_upon_reception = 1) to filter products that require provenance documentation during the receiving process."
products,weight_variance,int,YES,,,,,,,10.0,0.0,"The weight_variance column in the products table represents the acceptable variation (in standard units) from the listed weight of a product, helping to account for natural fluctuations in product weight during packaging or processing. This optional integer field is particularly useful when querying products where precise weight consistency is important, such as in food items or bulk materials, and can be used to establish acceptable weight ranges for quality control purposes."
products,average_price_quantity,int,YES,,,,,,,10.0,0.0,"The average_price_quantity column in the products table represents the typical or recommended quantity of units that should be used when calculating average pricing for a product. This optional integer field helps standardize price comparisons and calculations across different product offerings, particularly useful when products are sold in varying quantities or package sizes."
products,average_price_unit_id,int,YES,,,,,,,10.0,0.0,"The average_price_unit_id column in the products table is a foreign key reference that specifies the unit of measurement used for the product's average price (e.g., per pound, per piece, per ounce). When writing SQL queries involving product pricing analysis or comparisons, this column should be joined with a corresponding units/measurements reference table to provide meaningful context about how the product's price is measured."
products,restricted_to_lufa,int,NO,MUL,,0,,,,10.0,0.0,"The restricted_to_lufa column in the products table is a binary flag (integer) that indicates whether a product is exclusively available through LUFA's distribution channels. When querying products, use this column with a value of 1 to filter for LUFA-exclusive items or 0 for generally available products, making it useful for controlling product visibility and distribution restrictions."
products,weight_published_and_always_same,int,NO,,,0,,,,10.0,0.0,"The weight_published_and_always_same column in the products table is a boolean flag (stored as an integer) that indicates whether a product has a consistent, published weight that never varies. When querying, use this column to filter or identify products with fixed, reliable weight specifications (value = 1) versus products that may have variable or unpublished weights (value = 0), which is particularly useful for shipping calculations and inventory management purposes."
products,ingredient_list,text,YES,,,,,,65535.0,,,"The ingredient_list column in the products table stores a detailed text listing of all ingredients contained within a product, making it particularly useful for food, beverage, or cosmetic items. When querying this column, you can use text search functions (like LIKE or ILIKE) to find products containing specific ingredients, and since it's nullable, always consider using IS NOT NULL checks when you need to ensure the ingredient information is available."
products,photo_reshoot_required,tinyint,YES,,,0,,,,3.0,0.0,"The photo_reshoot_required column in the products table is a boolean flag (stored as a tinyint) that indicates whether a product needs new photography. This column helps manage product image quality control by marking items (1 for true, 0 for false) that require updated or improved product photos, making it useful in queries that filter or report on products needing visual content updates."
products,reason_for_unpublishing,varchar(500),YES,,,,,,500.0,,,The reason_for_unpublishing column in the products table stores text explanations (up to 500 characters) detailing why a product was removed from active listing or public visibility. This optional field helps track the administrative history of product management decisions and can be useful in SQL queries when analyzing product lifecycle patterns or auditing unpublishing events.
products,is_charge_by_weight_capped,int,NO,,,0,,,,10.0,0.0,"The is_charge_by_weight_capped column in the products table is a binary integer flag (0 or 1) that indicates whether a weight-based pricing has an upper limit for charging customers. When writing SQL queries, use this column to filter or identify products that have capped weight-based pricing (1) versus those with uncapped weight-based charges (0), particularly useful in pricing calculations and order processing logic."
products,max_percentage_of_surplus_charged_for_charge_by_weight_product,int,NO,,,100,,,,10.0,0.0,"This column specifies the maximum percentage markup that can be applied to products sold by weight, with a default value of 100 (representing 100%). For products where the final price is determined by weight, this column acts as a constraint to prevent excessive pricing variations, ensuring that the charged price doesn't exceed this percentage above the base price."
products,is_gluten_free,int,YES,,,0,,,,10.0,0.0,"The is_gluten_free column in the products table is a binary indicator (stored as an integer) that identifies whether a product is gluten-free (1) or contains gluten (0). When querying products based on gluten content, you can use this column in WHERE clauses or JOIN conditions, with NULL values potentially indicating that the gluten status is unknown or not applicable for certain products."
products,width,int,YES,,,1,,,,10.0,0.0,"The 'width' column in the products table stores the width measurement of a product as an integer value, which can be null if the dimension is not applicable or unknown. This measurement is useful for queries involving product dimensions, shipping calculations, or filtering products based on size requirements, and can be referenced in SQL queries where physical product specifications are needed."
products,height,int,YES,,,1,,,,10.0,0.0,"The 'height' column in the products table stores the vertical measurement of a product in standard units (likely millimeters or centimeters), represented as an integer value. This optional field (nullable) can be used in SQL queries to filter or sort products based on their physical dimensions, which is particularly useful for logistics, packaging, and display-related operations."
products,length,int,YES,,,1,,,,10.0,0.0,"The `length` column in the products table stores the physical length measurement of a product as an integer value, likely representing the measurement in a standard unit (e.g., millimeters or inches). This optional field can be used in SQL queries to filter or sort products based on their length dimensions, which is particularly useful for shipping calculations, product categorization, or when customers need to find items that fit specific space requirements."
products,units_per_box,int,YES,,,1,,,,10.0,0.0,"The units_per_box column in the products table indicates how many individual product units are contained within a single box or standard packaging unit. This optional integer field is useful for inventory management and bulk order calculations, helping to convert between individual unit quantities and packaged box quantities."
products,security_factor,"decimal(10,2)",YES,,,1.00,,,,10.0,2.0,"The security_factor column in the products table stores a decimal value that likely represents a safety or risk multiplier used in product-related calculations, defaulting to 1.00. This optional field can be used in SQL queries to adjust or scale other product metrics (such as pricing or inventory thresholds) based on security considerations or risk assessments, and can be referenced using standard decimal comparison operators."
products,eligible_for_6_pack,int,YES,,,0,,,,10.0,0.0,"The eligible_for_6_pack column in the products table is a binary indicator (stored as an integer) that determines whether a product can be sold in a 6-pack configuration. When querying this column, use 1 to filter for products that are eligible for 6-pack sales and 0 for products that aren't eligible, with NULL values potentially indicating that the 6-pack eligibility hasn't been determined yet."
products,sub_sub_id,int,YES,MUL,,,,,,10.0,0.0,"The sub_sub_id column in the products table is a foreign key that represents the most granular level of product categorization, typically linking to a sub-subcategory table in a hierarchical category structure (e.g., Electronics > Smartphones > Android Phones). When querying products, this column can be used to filter or group items by their most specific category classification, and its nullable property allows for products that may not fit into the finest level of categorization."
products,number_of_items_per_package,smallint,YES,,,1,,,,5.0,0.0,"The number_of_items_per_package column in the products table indicates how many individual items are contained within a single product package or unit (for example, a 6-pack of beverages would have a value of 6). When writing SQL queries, this column can be used to calculate total item quantities or for filtering products based on package sizes, and its nullable property allows for products that don't have a defined package quantity."
products,reception_type,tinyint(1),YES,,,0,,,,3.0,0.0,"The reception_type column in the products table is a binary flag (tinyint(1)) that indicates how a product should be received or handled upon delivery. This optional field (nullable) likely distinguishes between different reception methods or handling requirements, where 0 might represent standard reception and 1 could indicate special handling needs, helping to streamline the product receiving process in warehouses or delivery locations."
products,reception_weight,float,NO,,,,,,,12.0,,"The reception_weight column in the products table stores the weight of a product as measured when it is received into inventory, represented as a floating-point number. This mandatory field (non-nullable) is crucial for logistics, shipping calculations, and inventory management, likely used in conjunction with other weight-related fields to track any weight variations throughout the product lifecycle."
products,reception_height,float,NO,,,,,,,12.0,,"The reception_height column in the products table stores the vertical height measurement (as a floating-point number) required for receiving and handling the product, which is a mandatory field as indicated by its non-nullable status. This measurement is likely used for logistics, warehousing, and delivery planning purposes, helping ensure proper handling and storage of products throughout the supply chain."
products,reception_width,float,NO,,,,,,,12.0,,"The reception_width column in the products table stores the width measurement (as a floating-point number) required for receiving or handling the product, likely in standard units like meters or inches. This mandatory field (non-nullable) is essential for logistics and warehouse operations, helping determine space requirements and handling procedures during product reception and storage."
products,reception_length,float,NO,,,,,,,12.0,,"The reception_length column in the products table stores a floating-point number representing the required reception duration or handling time for a product, likely measured in hours or minutes. This mandatory field (non-nullable) can be used in SQL queries to calculate logistics timing, plan delivery schedules, or filter products based on their handling requirements at reception points."
products,reception_cost,float,NO,,,,,,,12.0,,"The reception_cost column in the products table stores the monetary cost associated with receiving and processing each product when it arrives at the warehouse or facility, represented as a floating-point number. This non-nullable field is essential for calculating total product costs and can be used in SQL queries to analyze operational expenses or determine profit margins by comparing it with selling prices."
products,reception_tolerance,float,NO,,,,,,,12.0,,"The reception_tolerance column in the products table stores a floating-point value that defines the acceptable margin of deviation when receiving product deliveries, expressed as a decimal (e.g., 0.05 for 5% tolerance). This value is used to determine whether received quantities fall within acceptable limits during inventory reception processes, helping maintain quality control and accurate stock management."
products,may_drip_force_1st_level,tinyint,NO,,,,,,,3.0,0.0,"The may_drip_force_1st_level column is a binary flag (tinyint) in the products table that indicates whether a product requires first-level drip force handling. When querying this column, use it as a boolean condition (0 or 1) to filter products based on their drip force requirements, particularly useful in scenarios involving product handling specifications or delivery requirements."
products,requires_light,tinyint,NO,,,,,,,3.0,0.0,"The requires_light column in the products table is a boolean flag (stored as a tinyint) that indicates whether a product needs light exposure for proper storage or display. This mandatory field (non-nullable) helps determine specific handling and storage requirements, particularly relevant for products like plants or light-sensitive items in the e-commerce system."
products,store_close_to_drain,tinyint,NO,,,,,,,3.0,0.0,"The store_close_to_drain column in the products table is a boolean flag (stored as tinyint) that indicates whether a product needs to be stored near a drainage system in a warehouse or storage facility. When querying this column, use 1 to filter for products requiring drain proximity and 0 for those that don't, which is particularly useful for warehouse organization and storage requirement queries."
products,minimal_margin,"decimal(7,2)",YES,,,0.00,,,,7.0,2.0,"The minimal_margin column in the products table stores the minimum acceptable profit margin (as a decimal value) for each product, helping to establish pricing thresholds and profitability guidelines. This optional field (allowing NULL values) can store values up to 99999.99 with 2 decimal places of precision, defaulting to 0.00 when not specified, and is commonly used in pricing calculations and profit analysis queries."
products,state,tinyint,NO,MUL,,,,,,3.0,0.0,"The 'state' column in the products table is a required tinyint field that indicates the current status or condition of a product (such as active, inactive, discontinued, etc.) using numeric codes. When writing SQL queries, this column can be used for filtering products based on their operational state, and its MUL key type suggests it's frequently used in WHERE clauses and joins to related tables that reference product states."
products,state_comment,varchar(255),YES,,,,,,255.0,,,"The state_comment column in the products table stores optional text explanations (up to 255 characters) about a product's current state or status. This field can be used to provide additional context or notes about why a product is in a particular state (e.g., ""Temporarily unavailable due to supplier issues"" or ""Seasonal item - returns in spring""), making it useful in SQL queries that need to analyze or report on product status changes or availability conditions."
products,initial_approval_date,date,YES,,,,,,,,,The initial_approval_date column in the products table records the date when a product was first approved for listing or sale in the system. This optional date field helps track the product lifecycle and can be useful for analyzing product onboarding patterns or filtering products based on when they were initially approved for the marketplace.
products,disabled_date,date,YES,,,,,,,,,"The disabled_date column in the products table records the date when a product was deactivated or removed from active selling status, with NULL indicating the product is currently active. This column is commonly used in WHERE clauses to filter out disabled products (WHERE disabled_date IS NULL) or to track product lifecycle changes, and it's particularly useful for maintaining historical records while controlling product visibility in the e-commerce system."
products,average_price_flag,tinyint(1),NO,,,,,,,3.0,0.0,"The average_price_flag column in the products table is a boolean indicator (stored as a tinyint(1)) that must contain either 0 or 1, with no null values allowed. This flag is likely used to identify products that are priced at or near the average price point for their category or type, which can be useful for filtering products in price-based queries or for business analytics purposes."
products,internal_notes,text,NO,,,,,,65535.0,,,"The internal_notes column in the products table stores administrative text notes and internal comments about products that are meant for staff reference only and should not be displayed to customers. When querying this column, it's important to note that it contains required (non-nullable) text data that may include important operational details, special handling instructions, or other internal documentation about the product."
products,suggested_description,text,YES,,,,,,65535.0,,,"The suggested_description column in the products table stores recommended or system-generated descriptive text for products, which can be used as a baseline or alternative to manually entered product descriptions. This optional (nullable) text field can be particularly useful in SQL queries when you need to retrieve or filter products based on their suggested content, or when you need a fallback description if the main product description is not available."
products,suggested_name,varchar(255),YES,,,,,,255.0,,,The suggested_name column in the products table stores alternative or recommended product names that might be more user-friendly or marketable than the primary product name. This optional field (being nullable) can be used in search queries to improve product discoverability or in UI displays where a more consumer-friendly product name is preferred.
products,image,int,NO,,,,,,,10.0,0.0,"The 'image' column in the products table stores an integer identifier that links to product images, likely referencing an ID in a separate images or media table. This mandatory field (non-nullable) ensures that every product has at least one associated image reference, which is essential for displaying product visuals in the e-commerce interface."
products,existing_image_product_id,int,NO,,,,,,,10.0,0.0,"The existing_image_product_id column in the products table is a required integer field that references another product's ID whose images should be used for the current product. This column enables image sharing between products, allowing multiple product entries to utilize the same set of images without duplicating image assets, which is particularly useful for products that are variants or identical in appearance but differ in other attributes."
products,biso_location,int,YES,,,0,,,,10.0,0.0,"The biso_location column in the products table is an optional integer field that likely represents a specific location identifier or code within the business's internal storage/operations (BISO) system. This column can be used in SQL queries to filter or group products based on their physical storage location, making it useful for inventory management and logistics-related queries."
products,manipulation_instructions_packer,int,NO,MUL,,1,pap_handling_instructions,handling_instruction_id,,10.0,0.0,"The manipulation_instructions_packer column in the products table is a required integer field that stores a reference code indicating specific handling or packing instructions for warehouse staff. This column, indexed for optimized querying (MUL), helps ensure proper product handling during the fulfillment process by linking to standardized packing instruction sets, making it particularly useful in queries related to warehouse operations and order processing workflows."
products,special_instructions_packer,varchar(255),NO,,,,,,255.0,,,"The special_instructions_packer column in the products table stores specific handling or packing instructions that must be followed by warehouse staff when preparing the product for shipment. This required field (non-nullable) can contain up to 255 characters of text and is crucial for ensuring proper product handling, special packaging requirements, or any specific precautions that packers need to be aware of when processing orders containing this product."
products,is_organic,tinyint(1),YES,,,0,,,,3.0,0.0,"The is_organic column in the products table is a boolean flag (stored as tinyint(1)) that indicates whether a product is certified organic (1) or not (0). This column can be used in WHERE clauses to filter organic products or in reporting queries to analyze organic product metrics, with NULL values potentially indicating products where organic status is unknown or not applicable."
products,is_hermetically_sealed,tinyint(1),YES,,,0,,,,3.0,0.0,"The is_hermetically_sealed column in the products table is a boolean flag (stored as tinyint(1)) that indicates whether a product is packaged in an airtight, hermetically sealed container. When querying this column, use 1 to filter for hermetically sealed products and 0 for non-sealed products, with NULL values potentially indicating that the sealing status is unknown or not applicable for certain products."
products,dynamic_pricing,int,YES,,,0,,,,10.0,0.0,"The dynamic_pricing column in the products table is a nullable integer flag (0/1) that indicates whether a product's price can be automatically adjusted based on various factors like demand, competition, or market conditions. When querying products that use dynamic pricing strategies, filter for dynamic_pricing = 1, or join with pricing-related tables to access the current calculated price values."
products,reception_instructions,text,YES,,,,,,65535.0,,,"The reception_instructions column in the products table stores detailed text instructions for receiving, handling, or storing specific products, which can be particularly important for items requiring special care or specific handling procedures. This optional field (nullable) can be used in queries when you need to filter or display products with particular reception requirements, making it valuable for warehouse operations, delivery personnel, or customer communications."
products,low_quantity_notification,int,NO,,,,,,,10.0,0.0,"The low_quantity_notification column in the products table specifies the minimum threshold quantity at which the system should trigger inventory alerts or notifications for restocking purposes. This required integer value helps maintain optimal inventory levels by indicating when stock is running low, enabling proactive inventory management and preventing stockouts."
products,sample,tinyint(1),YES,,,0,,,,3.0,0.0,"The 'sample' column in the products table is a boolean flag (tinyint(1)) that indicates whether a product is marked as a sample item. When writing SQL queries, you can use this column to filter or identify sample products (where sample = 1) versus regular products (where sample = 0), and since it's nullable, you should consider handling NULL values appropriately in your conditions."
products,preference_restriction,"enum('All markets','Vegan','Omnivore')",YES,,,All markets,,,11.0,,,"The preference_restriction column in the products table indicates the dietary market segment for which a product is suitable, using one of three possible values: 'All markets', 'Vegan', or 'Omnivore'. When querying products based on dietary preferences, this column can be used to filter items (e.g., WHERE preference_restriction = 'Vegan'), with NULL values defaulting to 'All markets' as indicated by the extra info."
products,consigne_amount,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The consigne_amount column in the products table stores the deposit or return fee amount (with 2 decimal places) associated with each product, commonly used for recyclable or returnable items like bottles or containers. This mandatory field (non-nullable) defaults to 0.00 and represents the refundable amount customers pay upfront when purchasing the product, which they can reclaim upon returning the item's container or packaging."
products,alcohol,tinyint,NO,,,0,,,,3.0,0.0,"The 'alcohol' column in the products table is a required boolean-like field (tinyint) that indicates whether a product contains alcohol (1) or not (0). This flag is crucial for enforcing age restrictions, shipping regulations, and legal compliance in product sales, and should be included in queries when filtering or categorizing products based on their alcohol content."
products,freezer_storage,tinyint,YES,,,0,,,,3.0,0.0,"The freezer_storage column in the products table is a boolean-like indicator (using tinyint) that specifies whether a product requires freezer storage (1) or not (0). This column is particularly useful when querying for products with specific storage requirements, such as in SQL queries that need to filter frozen items or help manage cold chain logistics."
products,storage_format_in_wh,"enum('Any','Pallet','Standard Totes')",YES,,,Any,,,14.0,,,"The storage_format_in_wh column in the products table specifies how each product is physically stored in the warehouse, using one of three standardized formats: 'Any', 'Pallet', or 'Standard Totes'. When querying this column, you can use it to filter or group products based on their storage requirements, which is particularly useful for warehouse management and logistics-related queries (e.g., SELECT * FROM products WHERE storage_format_in_wh = 'Pallet')."
products,tote_format_id,int,YES,MUL,,,tote_formats,tote_format_id,,10.0,0.0,"The tote_format_id column in the products table is a foreign key that references the specific tote or container format used for storing and shipping the product. This integer field helps determine packaging and handling requirements for warehouse operations, with NULL values indicating products that don't require specific tote formatting."
products,units_per_tote,int,NO,,,0,,,,10.0,0.0,"The units_per_tote column in the products table specifies the number of product units that can fit into a standard tote container, which is essential for warehouse operations and order fulfillment calculations. This required integer value helps optimize storage space and shipping efficiency, with a default value of 0 indicating either that tote storage is not applicable for the product or that the value needs to be determined."
products,display_nutritional_values,tinyint,NO,,,0,,,,3.0,0.0,"The display_nutritional_values column is a boolean flag (stored as tinyint) in the products table that indicates whether nutritional information should be shown for a particular product. This required field (non-nullable) uses 0 to indicate that nutritional values should be hidden and 1 to indicate they should be displayed, making it useful for filtering products where nutritional information is relevant or required to be shown."
products,nutritional_values_status,tinyint,NO,,,0,,,,3.0,0.0,"The nutritional_values_status column in the products table is a required tinyint field that indicates the current state or completeness of a product's nutritional information. When querying this column, use it to filter or check products based on their nutritional data status, where different integer values likely represent states such as ""pending,"" ""complete,"" ""not applicable,"" or ""needs review."""
products,nutritional_values_file,varchar(255),YES,,,,,,255.0,,,"The nutritional_values_file column in the products table stores the file path or URL (as a string up to 255 characters) that points to a document containing detailed nutritional information for food or supplement products. This optional field enables the system to link to comprehensive nutritional data sheets or documentation, which can be particularly useful for food products, dietary supplements, or any items requiring detailed nutritional disclosures."
products,nutritional_values_file_uploaded_at,datetime,YES,,,,,,,,,"The nutritional_values_file_uploaded_at column in the products table tracks the timestamp when nutritional information files were last uploaded for each product, helping monitor and manage product nutritional data updates. This datetime field can be used to query products based on when their nutritional information was last updated or to identify products that may need nutritional data updates, making it valuable for data freshness and compliance monitoring."
products,nutritional_values_file_uploaded_by,int,YES,,,,,,,10.0,0.0,"The nutritional_values_file_uploaded_by column in the products table stores the user ID (as an integer) of the person who uploaded the nutritional values file for a product, allowing for tracking and accountability of nutritional data submissions. This column can be null if no nutritional file has been uploaded yet, and it likely forms a logical connection to a users or employees table where the complete uploader information can be found."
products,quality_visible_to_packer,tinyint,NO,,,1,,,,3.0,0.0,"The quality_visible_to_packer column in the products table is a binary flag (tinyint) that determines whether quality-related information should be displayed to packing staff during order fulfillment. When querying this column, use 1 to filter for products where quality details are visible to packers and 0 for products where quality information is hidden, making it useful for controlling information visibility in packing workflows."
products,received_in,tinyint,NO,,,0,,,,3.0,0.0,"The received_in column in the products table is a required tinyint field that likely indicates the receiving status or condition of a product when it enters the system. This field, being non-nullable with a default of 0, appears to be used as a flag or status indicator that helps track how products are received into inventory, which is essential for inventory management and quality control processes."
products,is_scs_certified,tinyint,NO,,,0,,,,3.0,0.0,"The is_scs_certified column in the products table is a boolean flag (stored as a tinyint) that indicates whether a product has received SCS (Scientific Certification Systems) certification, where 0 represents uncertified and 1 represents certified products. This mandatory field (non-nullable) helps filter and identify products that meet specific certification standards, which can be particularly useful when querying for products that comply with certain environmental or quality standards."
products,portion_in_biso,tinyint(1),YES,,,0,,,,3.0,0.0,"The portion_in_biso column in the products table is a boolean flag (tinyint(1)) that indicates whether a product is sold or measured in portions according to BISO (Business Information System Operations) standards. When writing queries, you can use this column to filter or identify products that follow BISO portion measurements (1/true) versus those that don't (0/false), with NULL values indicating that the portion status is undefined or not applicable."
products,is_organic_USDA,tinyint,NO,,,0,,,,3.0,0.0,"The is_organic_USDA column in the products table is a binary flag (tinyint) that indicates whether a product has USDA organic certification, where 0 represents non-organic products and 1 represents USDA-certified organic products. This non-nullable field can be used in WHERE clauses to filter organic products or in aggregate functions to analyze organic product metrics, making it particularly useful for queries related to organic product listings and inventory analysis."
products,trial_product,tinyint,NO,,,0,,,,3.0,0.0,"The trial_product column in the products table is a binary flag (tinyint) that indicates whether a product is offered as a trial or sample item (1) or a regular product (0). This non-nullable field helps identify special trial products in the system, which may be subject to different pricing, shipping, or promotional rules than standard products."
products,portioning_speed_group_id,int,NO,MUL,,4,portioning_speed_group,portioning_speed_group_id,,10.0,0.0,"The portioning_speed_group_id column in the products table is a required integer field that categorizes products based on their portioning or preparation speed characteristics, likely used for operational efficiency calculations. This column, indexed for optimized querying (MUL), helps group products with similar handling times or processing requirements, which can be essential for order fulfillment planning and kitchen/preparation workflow management."
products,portioning_packaging_id,int,YES,MUL,,,portioning_packaging,portioning_packaging_id,,10.0,0.0,"The portioning_packaging_id column in the products table is a foreign key that links to packaging and portioning specifications for each product, indicating how the item is packaged and portioned for sale or delivery. This column can be used in JOIN operations to retrieve detailed packaging information, and its nullable nature suggests that not all products necessarily have specific portioning or packaging requirements defined."
products,purchaser_id,int,YES,,,,,,,10.0,0.0,"The purchaser_id column in the products table is an optional integer field that identifies the user or entity who purchased or acquired the product, allowing for tracking of product ownership or acquisition history. This column can be used in JOIN operations with user/purchaser-related tables to retrieve purchaser details, and its nullable nature indicates that not all products necessarily have an associated purchaser."
products,category_manager_id,int,YES,,,,,,,10.0,0.0,"The category_manager_id column in the products table is an optional integer field that identifies the employee responsible for managing the product's category. This column can be used to join with an employee or user management table to retrieve information about the category manager, enabling queries that analyze product management assignments or filter products by their assigned manager."
products,products_sunday_bb_cap,int,NO,,,3000,,,,10.0,0.0,"The products_sunday_bb_cap column in the products table represents the maximum number of units (capped at 3000) that can be ordered or processed for a specific product on Sundays, likely for business/bandwidth capacity management. This integer field is required (non-nullable) and helps enforce order limits and capacity planning specifically for Sunday operations."
products,products_monday_bb_cap,int,NO,,,3000,,,,10.0,0.0,"The products_monday_bb_cap column in the products table represents the maximum number of units (capped at 3000) that can be ordered or processed for a specific product on Mondays, specifically during ""BB"" (likely a business or time block designation). This integer field is required (non-nullable) and helps enforce order quantity limitations and capacity planning for Monday operations."
products,products_tuesday_bb_cap,int,NO,,,3000,,,,10.0,0.0,"The products_tuesday_bb_cap column in the products table represents the maximum number of units (capped at 3000) that can be ordered or processed for a specific product on Tuesdays, likely related to business capacity or delivery constraints. This integer field is required (non-nullable) and helps enforce business rules around order volumes and capacity management specifically for Tuesday operations."
products,products_wednesday_bb_cap,int,NO,,,3000,,,,10.0,0.0,"The products_wednesday_bb_cap column in the products table represents the maximum number of products that can be ordered or processed on Wednesdays, with a default capacity limit of 3000 units. This integer field is required (non-nullable) and can be used in SQL queries to enforce business rules around Wednesday order limits or to check available capacity for Wednesday-specific operations."
products,products_thursday_bb_cap,int,NO,,,3000,,,,10.0,0.0,"The products_thursday_bb_cap column in the products table represents the maximum number of units (capped at 3000) that can be ordered or processed for a specific product on Thursdays, likely related to business capacity or bandwidth limitations. This integer field is required (non-nullable) and helps enforce operational limits for product handling specifically on Thursdays, which is essential for managing order volumes and delivery planning."
products,products_friday_bb_cap,int,NO,,,3000,,,,10.0,0.0,"The products_friday_bb_cap column in the products table represents a numerical limit or capacity value (maximum of 3000) specifically applied to products on Fridays, likely for business or operational constraints. When writing SQL queries involving Friday-specific product limitations or capacity planning, this integer column can be used to filter or validate product availability against the defined cap value."
products,products_saturday_bb_cap,int,NO,,,3000,,,,10.0,0.0,"The products_saturday_bb_cap column in the products table represents the maximum number of units (capped at 3000) that can be ordered or processed for a specific product on Saturdays, specifically for ""BB"" (likely referring to a business or delivery type). When writing queries involving Saturday-specific capacity limits, use this integer column to enforce or check against the maximum allowed quantity, particularly in order validation or inventory planning scenarios."
products,dp_minimal_price,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The dp_minimal_price column in the products table stores the minimum allowable selling price for a product, represented as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). This column is typically used in pricing rules and validation checks to ensure products aren't sold below their designated minimum price, and can be NULL if no minimum price restriction exists for a particular product."
products,super_aubaines_image_url,varchar(255),YES,,,,,,255.0,,,"The super_aubaines_image_url column in the products table stores the URL path (up to 255 characters) to a special promotional or ""super deals"" image associated with a product. This optional field (as indicated by being nullable) likely contains links to high-resolution or specially formatted images used when the product is featured in super savings or special promotional campaigns."
products,temperature_validation,int,NO,,,0,,,,10.0,0.0,"The temperature_validation column in the products table is a required integer field that specifies temperature-related validation rules or requirements for product handling. This column likely helps enforce temperature control standards during storage and shipping, with different integer values representing specific temperature validation requirements or thresholds that must be maintained for product safety and quality."
products,temperature_validation_min,int,YES,,,,,,,10.0,0.0,"The temperature_validation_min column in the products table specifies the minimum acceptable temperature (in standard units) at which a product can be safely stored or transported. This optional integer field is particularly relevant for temperature-sensitive items like perishables or certain pharmaceuticals, and can be used in queries to validate storage conditions or filter products based on temperature requirements."
products,temperature_validation_max,int,YES,,,,,,,10.0,0.0,"The temperature_validation_max column in the products table specifies the maximum allowable temperature (in standard units) at which a product can be safely stored or transported. This optional integer field is particularly useful in SQL queries when validating temperature-controlled logistics requirements or filtering products based on their temperature tolerance thresholds, especially for perishable or temperature-sensitive items."
products,expiration_validation,int,NO,,,0,,,,10.0,0.0,"The expiration_validation column in the products table is a required integer field that specifies how the system should handle expiration date validation for each product. This flag helps control product quality and safety by enforcing different levels of expiration date checks, where the value likely indicates specific validation rules or thresholds that should be applied during inventory and sales processes."
products,sample_weight_validation,int,NO,,,0,,,,10.0,0.0,"The sample_weight_validation column in the products table is a required integer field that indicates whether a product's sample weight has been verified or validated according to specific criteria. This validation flag (likely using 0 for unvalidated and other values for different validation states) helps ensure product weight accuracy and compliance with quality control standards, which is particularly important for shipping calculations and product specifications."
products,qtyoh_calc_validation,int,NO,,,0,,,,10.0,0.0,"The qtyoh_calc_validation column in the products table is an integer field that likely serves as a validation flag or status indicator for quantity-on-hand calculations. This required field (non-nullable) appears to use 0 as a default value, suggesting it may function as a binary indicator or status code to verify or track the accuracy of inventory quantity calculations."
products,temporary_exempt_of_national_tax,int,NO,,,0,,,,10.0,0.0,"The temporary_exempt_of_national_tax column in the products table is a binary integer flag (0 or 1) that indicates whether a product is currently exempt from national tax requirements. When querying this column, use it as a boolean condition where 0 represents products subject to normal national taxation and 1 indicates temporarily tax-exempt products, which is particularly useful for filtering products based on their tax status or implementing tax-related business logic."
products,create_with_forecast_tool,tinyint,NO,,,0,,,,3.0,0.0,
productsLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The l_id column serves as the primary key in the productsLang table, uniquely identifying each language-specific product entry. This auto-incrementing integer field is essential for maintaining data integrity and establishing relationships with other tables in the multilingual product management system."
productsLang,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the productsLang table serves as a foreign key that links to the main products table, enabling the association of language-specific content with base product records. This indexed column (MUL) requires a non-null integer value and should be used in JOIN operations when combining product data with its corresponding translations or when filtering language-specific product content."
productsLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the productsLang table stores the language identifier (such as 'en', 'es', 'fr') for each product translation record, using a varchar(10) format. This required field helps filter and retrieve product information in specific languages, and should be included in queries when you need to fetch language-specific product content or join with other language-related tables."
productsLang,l_name,varchar(255),NO,MUL,,,,,255.0,,,"The l_name column in the productsLang table stores the translated product name for different languages, with a maximum length of 255 characters and cannot be null. This column is part of a multi-column index (indicated by MUL key type) and should be used in conjunction with language identifiers when querying for product names in specific languages."
productsLang,l_units,varchar(15),NO,,,,,,15.0,,,"The l_units column in the productsLang table stores the localized unit of measurement text (up to 15 characters) for products in different languages, such as ""kilogram"" in English or ""kilogramo"" in Spanish. This column is required (non-nullable) and should be included when querying for language-specific product measurements or when displaying unit information in the user's preferred language."
productsLang,l_description,text,YES,,,,,,65535.0,,,"The l_description column in the productsLang table stores the localized (translated) long-form description of a product in different languages. When writing queries, this text field can be used to retrieve or filter detailed product descriptions in specific languages, typically used in conjunction with a language identifier column to get the appropriate translation for the desired locale."
productsLang,l_slug,varchar(255),NO,,,,,,255.0,,,"The l_slug column in the productsLang table stores URL-friendly versions of product names in different languages, using lowercase letters, hyphens, and no special characters (e.g., ""blue-cotton-shirt-xl""). This column is essential for generating language-specific SEO-friendly URLs and should be used in WHERE clauses or JOINs when building multilingual product page links or filtering products by their localized URL slugs."
productsLang,l_ingredient_list,text,YES,,,,,,65535.0,,,"The l_ingredient_list column in the productsLang table stores the translated list of ingredients for products in different languages, represented as text data. This column is optional (nullable) and should be used when querying for language-specific ingredient information, typically joined with the main products table using product_id to retrieve ingredient lists in the desired language."
productsLang,l_suggested_description,text,YES,,,,,,65535.0,,,"The l_suggested_description column in the productsLang table stores the recommended or suggested product description in different languages, allowing for localized product content. This text field can be used in SQL queries to retrieve or filter language-specific product descriptions, and since it's nullable, some products may not have suggested descriptions in certain languages."
productsLang,l_suggested_name,varchar(255),YES,,,,,,255.0,,,"The l_suggested_name column in the productsLang table stores localized suggested or recommended names for products in different languages, with a maximum length of 255 characters. This column is optional (nullable) and can be used in queries to retrieve language-specific alternative product names, particularly useful when displaying product suggestions or recommendations in a user's preferred language."
productsLang,l_manipulation_instructions,text,NO,,,,,,65535.0,,,"The l_manipulation_instructions column in the productsLang table stores localized handling and usage instructions for products in different languages, ensuring customers receive proper guidance in their preferred language. This text field is required (non-nullable) and should be included when inserting new product language entries, typically used in SELECT queries when displaying product details or in JOIN operations with the main products table to show language-specific handling instructions."
productsLang,l_special_instructions_packer,varchar(255),NO,,,,,,255.0,,,"The l_special_instructions_packer column in the productsLang table stores language-specific packing instructions or special handling notes for warehouse staff, with a maximum length of 255 characters. This required field (non-nullable) should be included in queries when retrieving or updating localized packing instructions for products, and it works in conjunction with the product_id to provide language-specific packing guidance for each product variant."
productsLang,l_reception_instructions,text,YES,,,,,,65535.0,,,"The l_reception_instructions column in the productsLang table stores localized handling and reception instructions for products in different languages, such as storage requirements or special handling notes. This text field allows for detailed, language-specific instructions that help recipients properly receive and handle the product, and being nullable indicates that not all products require special reception instructions."
products_inventory,inventory_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The inventory_id column serves as the primary key in the products_inventory table, uniquely identifying each inventory record with a non-nullable integer value. This column should be used in JOIN operations when linking inventory data to other tables, and can be referenced in WHERE clauses when querying specific inventory records."
products_inventory,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the products_inventory table serves as a foreign key that links each inventory record to its corresponding product in the main products table. This column is essential for querying and joining inventory data with product details, and since it's non-nullable, every inventory record must be associated with a valid product."
products_inventory,quantity,int,YES,,,,,,,10.0,0.0,"The 'quantity' column in the products_inventory table represents the current available stock level for each product, stored as an integer value. This column can be used in SQL queries to check stock availability, filter for low-stock items, or calculate inventory totals, and since it's nullable, a NULL value might indicate that the stock level is unknown or not tracked for certain products."
products_inventory,inventory_date,date,NO,MUL,,,,,,,,"The inventory_date column in the products_inventory table records the specific date when inventory levels were measured or updated for each product. This date field, which is required (non-nullable) and indexed (MUL), is essential for tracking historical inventory changes and can be used to analyze stock levels over time or filter inventory records for specific dates."
products_inventory,default_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The default_price column in the products_inventory table stores the standard retail price of each product as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67). This non-nullable field is essential for pricing-related queries and calculations, with a default value of 0.00 if not explicitly set."
products_inventory,current_price,"decimal(7,2)",NO,,,0.00,,,,7.0,2.0,"The current_price column in the products_inventory table stores the present selling price of each product as a decimal number with up to 5 digits before the decimal point and 2 digits after (e.g., 12345.67), and cannot contain NULL values. When querying this column, it can be used for price-based calculations, filtering products within specific price ranges, or aggregating total inventory value, with a default value of 0.00 if no price is specified."
products_inventory,is_featured,tinyint,YES,,,0,,,,3.0,0.0,"The `is_featured` column in the products_inventory table is a boolean flag (stored as tinyint) that indicates whether a product is marked as featured in the inventory system, where 0 typically represents false and 1 represents true. When querying, this column can be used to filter or identify specially highlighted inventory items, and since it's nullable, you should consider handling NULL values appropriately in your conditions (e.g., using IS NULL or COALESCE)."
products_inventory,is_new,tinyint,YES,,,0,,,,3.0,0.0,"The `is_new` column in the products_inventory table is a boolean flag (stored as tinyint) that indicates whether a product is considered new in the inventory, where 0 typically represents existing/old products and 1 represents new products. This column can be used in SQL queries to filter or identify newly added merchandise, and being nullable means some products may not have this designation specified."
products_inventory,avaliable,int,NO,,,,,,,10.0,0.0,"The ""avaliable"" column in the products_inventory table stores the current quantity of each product that is in stock and ready for sale, represented as a non-negative integer. This required field is essential for inventory management queries, such as checking stock levels or identifying products that need reordering, and can be used in WHERE clauses to filter products based on their availability (e.g., WHERE avaliable > 0 to find in-stock items)."
products_inventory,product_discount_reason_id,int,YES,,,,,,,10.0,0.0,"The product_discount_reason_id column in the products_inventory table is a nullable integer field that references the reason or justification for any discount applied to a product in inventory. This column helps track and categorize why certain products have been marked down or discounted, which is useful for inventory management and financial analysis purposes."
products_inventory,reserved,tinyint,NO,,,0,,,,3.0,0.0,"The ""reserved"" column in the products_inventory table is a boolean flag (tinyint) that indicates whether a product unit is currently reserved for a pending order or transaction. When writing queries, use this non-nullable column with values 0 (not reserved) or 1 (reserved) to filter or track products that are committed to specific orders but haven't yet been physically removed from inventory."
products_inventory,products_inventory_is_top_new,tinyint,YES,,,0,,,,3.0,0.0,"The products_inventory_is_top_new column is a boolean flag (stored as tinyint) that indicates whether a product is considered a ""top new"" item in the inventory. This flag can be used in SQL queries to filter or identify newly added products that are performing well or have been designated as featured new items, with NULL values indicating products where this designation hasn't been determined yet."
products_inventory,super_featured,tinyint,YES,,,0,,,,3.0,0.0,"The `super_featured` column in the products_inventory table is a boolean flag (stored as tinyint) that indicates whether a product is designated as a ""super featured"" item in the inventory. When querying this column, use 1 to filter for super featured products and 0 for regular products, with NULL values indicating that the super featured status hasn't been determined."
products_inventory,is_dp_disabled,tinyint(1),YES,,,0,,,,3.0,0.0,"The `is_dp_disabled` column in the products_inventory table is a boolean flag (stored as tinyint(1)) that indicates whether dynamic pricing is disabled (1) or enabled (0) for a specific product. This flag helps control pricing automation features and can be used in WHERE clauses to filter products based on their dynamic pricing status, such as `WHERE is_dp_disabled = 0` to find products eligible for dynamic pricing adjustments."
products_inventory,exclude_from_random_base_basket_content,tinyint,YES,,,0,,,,3.0,0.0,"The `exclude_from_random_base_basket_content` column is a boolean flag (stored as tinyint) that determines whether a product should be excluded from randomly generated base basket contents. When querying for products to include in automated basket generation, filter for records where this column is 0 (or NULL) to ensure only eligible products are selected."
products_inventory_scheduled_price_changes,scheduled_product_price_change_id,int,NO,PRI,,,,,,10.0,0.0,"The scheduled_product_price_change_id is the primary key column that uniquely identifies each scheduled price change record in the products_inventory_scheduled_price_changes table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific price change entries (e.g., WHERE scheduled_product_price_change_id = X)."
products_inventory_scheduled_price_changes,inventory_id,int,NO,PRI,,,,,,10.0,0.0,"The inventory_id column serves as the primary key in the products_inventory_scheduled_price_changes table, uniquely identifying each scheduled price change record. This column links directly to the corresponding product in the inventory system and should be used in JOIN operations or WHERE clauses when querying specific product price change schedules."
products_nutritional_values,products_nutritional_value_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The products_nutritional_value_id column serves as the primary key for the products_nutritional_values table, uniquely identifying each nutritional value record. This auto-incrementing integer field is commonly used in JOIN operations to link nutritional data with other tables and should be referenced when you need to uniquely identify or update specific nutritional value records."
products_nutritional_values,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the products_nutritional_values table serves as a foreign key that links each nutritional record to its corresponding product in the main products table. When writing SQL queries, use this column to join with the products table to access combined product and nutritional information, or to filter nutritional records for specific products."
products_nutritional_values,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the products_nutritional_values table is a required integer field that categorizes the nutritional value entry type (such as calories, protein, carbohydrates, etc.) for each product. When writing SQL queries, this column can be used to filter or group nutritional data by specific types of measurements, enabling analysis of particular nutritional aspects across products."
products_nutritional_values,value,"decimal(8,3)",NO,,,,,,,8.0,3.0,"The 'value' column in the products_nutritional_values table stores precise numerical measurements of nutritional components (such as grams of protein, carbohydrates, etc.) with up to three decimal places of precision. When querying this column, you can perform mathematical calculations and comparisons to analyze nutritional content, and since it's non-nullable, you can rely on every record having a valid numerical value."
products_nutritional_values,unit,varchar(4),NO,,,,,,4.0,,,"The ""unit"" column in the products_nutritional_values table specifies the measurement unit (such as 'g', 'mg', 'kcal', etc.) for the nutritional values of each product. This column is mandatory (NOT NULL) and helps interpret the numerical nutritional values by providing their corresponding units of measurement."
products_nutritional_values_generated_by_ai,products_nutritional_value_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The products_nutritional_value_id column serves as the primary key for the products_nutritional_values_generated_by_ai table, uniquely identifying each AI-generated nutritional record. When writing SQL queries, use this column for precise record selection, joining with other tables, or ensuring data integrity, particularly when you need to reference specific nutritional entries."
products_nutritional_values_generated_by_ai,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The product_id column serves as a foreign key in the products_nutritional_values_generated_by_ai table, linking each nutritional record to its corresponding product in the main products table. This column should be used in JOIN operations when combining product details with their AI-generated nutritional information, and can also be used in WHERE clauses to filter nutritional data for specific products."
products_nutritional_values_generated_by_ai,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the products_nutritional_values_generated_by_ai table is a required integer field that categorizes the nutritional information entry. When writing SQL queries, this column can be used to filter or group nutritional data based on specific types of nutritional values (e.g., calories, proteins, fats) associated with products."
products_nutritional_values_generated_by_ai,value,"decimal(8,3)",NO,,,,,,,8.0,3.0,"The 'value' column stores precise numerical measurements of nutritional components (such as calories, protein, fat, etc.) with up to three decimal places of accuracy. This decimal field is mandatory (non-nullable) and should be used in SQL queries when calculating or comparing specific nutritional quantities for AI-generated product data."
products_nutritional_values_generated_by_ai,unit,varchar(4),NO,,,,,,4.0,,,"The ""unit"" column in the products_nutritional_values_generated_by_ai table specifies the measurement unit (e.g., 'g', 'mg', 'kcal') for the corresponding nutritional value of a product. When writing SQL queries, this required (non-nullable) varchar(4) field should be used to properly contextualize nutritional measurements and can be helpful for filtering or grouping nutritional data based on specific units of measurement."
promo_users_log,promo_users_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The promo_users_log_id column serves as the primary key for the promo_users_log table, uniquely identifying each promotional interaction or engagement record. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific promotional log entries."
promo_users_log,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the promo_users_log table is a required integer field that identifies which user interacted with a promotional activity or marketing campaign. When writing queries, this column can be used to join with other user-related tables (as indicated by the MUL key type) and is commonly used in WHERE clauses to filter promotional interactions for specific users."
promo_users_log,shown,tinyint(1),YES,,,0,,,,3.0,0.0,"The ""shown"" column in the promo_users_log table is a boolean flag (stored as tinyint(1)) that indicates whether a promotional item was displayed or made visible to a user. When querying this column, use 1 to filter for promotions that were shown to users and 0 for those that weren't, making it useful for analyzing promotional exposure rates and visibility metrics."
promo_users_log,opted_in,tinyint(1),YES,,,0,,,,3.0,0.0,"The `opted_in` column in the `promo_users_log` table is a boolean flag (stored as tinyint(1)) that indicates whether a user has consented to or opted into a promotional campaign or marketing offer. When querying this column, use 1 to filter for users who have opted in and 0 for those who haven't, with NULL potentially representing cases where the opt-in status is unknown or not applicable."
promo_users_log,first_seen_at,datetime,YES,,,,,,,,,"The first_seen_at column in the promo_users_log table records the initial timestamp when a user first interacted with or was exposed to a specific promotional campaign or offer. This datetime field is useful for analyzing user engagement patterns and measuring the time-to-action from first exposure, making it particularly valuable in SQL queries that track the effectiveness of promotional campaigns over time."
promo_users_log,opted_in_at,datetime,YES,,,,,,,,,"The opted_in_at column in the promo_users_log table stores the specific date and time when a user opted into or agreed to participate in a promotional campaign or marketing offer. When querying this column, you can use datetime functions to analyze opt-in patterns over time or filter for users who opted in during specific time periods, with NULL values indicating users who haven't yet opted into any promotions."
promo_users_log,promo,varchar(255),YES,,,,,,255.0,,,"The 'promo' column in the promo_users_log table stores the identifier or name of specific promotional campaigns or offers that users have interacted with, using a variable-length string format up to 255 characters. When querying this column, it can be used to filter or group promotional activities by specific campaign names, and since it's nullable, be sure to handle NULL values appropriately when analyzing promotional engagement patterns."
promo_users_log,tier_id,tinyint,YES,,,,,,,3.0,0.0,"The tier_id column in the promo_users_log table represents the membership or reward tier level associated with a user when they interacted with a promotional offer. When querying this column, you can use it to segment or filter promotional interactions based on user tier levels, with the tinyint data type efficiently storing small numeric values representing different tier categories."
promo_users_log,threshold,int,NO,,,0,,,,10.0,0.0,"The ""threshold"" column in the promo_users_log table stores an integer value that represents a required minimum or maximum limit related to promotional activity tracking. When writing SQL queries, this non-nullable column can be used to filter or group promotional interactions based on specific threshold values, such as minimum spend requirements or usage limits for promotional offers."
promo_users_log,coupon_id,int,YES,,,,,,,10.0,0.0,"The coupon_id column in the promo_users_log table stores the unique identifier of a coupon or promotional offer that a user interacted with. When querying promotional activity, this column can be used to filter or group interactions by specific coupon campaigns, though the nullable property indicates that some promotional interactions might not be associated with a coupon."
promo_users_log,start_display_popup_date,date,YES,,,,,,,,,"The start_display_popup_date column records the date when a promotional popup was first shown to a user as part of a marketing campaign. When querying this column, it's useful for analyzing when promotional campaigns began displaying to users and can be used to track the temporal aspects of popup-based marketing initiatives."
promo_users_log,stop_display_popup_date,date,YES,,,,,,,,,"The stop_display_popup_date column records the date when a promotional popup should cease being shown to a specific user, typically after they've opted out or the promotion has ended for them. When querying this column, you can compare it against the current date (CURRENT_DATE) to determine if a popup should still be displayed to a user, where NULL values generally indicate the popup is still active."
promo_users_log,start_apply_promo,date,YES,,,,,,,,,"The start_apply_promo column in the promo_users_log table records the date when a user first began participating in or applied a promotional offer. When writing SQL queries, this date field can be used to analyze promotional engagement timing, filter promotional activity within specific date ranges, or track the initial uptake of marketing campaigns."
promo_users_log,end_apply_promo,date,YES,,,,,,,,,"The end_apply_promo column in the promo_users_log table stores the date when a promotional offer or marketing campaign expires or stops being applicable to a user. This date field is useful for filtering active promotions or analyzing the duration of promotional engagements, and being nullable allows for tracking ongoing or open-ended promotions where no end date has been set."
prompt_banner_log,prompt_banner_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The prompt_banner_log_id is the primary key column that uniquely identifies each promotional banner display and interaction event in the prompt_banner_log table. This auto-incrementing integer column should be used when joining to related tables or when needing to reference a specific banner display instance, though it's typically not used as a filtering column in everyday queries unless looking up a particular record."
prompt_banner_log,order_id,int,YES,,,,,,,10.0,0.0,"The order_id column in the prompt_banner_log table is an optional reference to an associated order, allowing promotional banner interactions to be linked to specific purchase transactions. This column helps track which banner displays or interactions may have influenced or resulted in actual orders, enabling analysis of promotional effectiveness and conversion rates."
prompt_banner_log,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the prompt_banner_log table is a required integer field that identifies which user was shown or interacted with a promotional banner. This column is indexed (MUL) to optimize queries that filter or join based on user identity, and it likely references a user table as a foreign key for tracking individual user interactions with promotional content."
prompt_banner_log,banner,tinyint,YES,,,,,,,3.0,0.0,"The ""banner"" column in the prompt_banner_log table is a tinyint field that serves as an identifier for different promotional banners or prompts shown to users. When querying this column, you can use it to filter or group banner-related metrics by specific banner types, where each distinct value represents a different promotional banner variant or campaign."
prompt_banner_log,to_see,tinyint,YES,,,,,,,3.0,0.0,"The ""to_see"" column in the prompt_banner_log table is a boolean-like flag (stored as a tinyint) that indicates whether a promotional banner is intended to be shown to users. When querying, this column can be used to filter or analyze which banners were marked for display, regardless of whether they were actually shown, making it useful for comparing intended versus actual banner exposure."
prompt_banner_log,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the prompt_banner_log table records the exact timestamp when a promotional banner or prompt was displayed to a user, automatically populated with CURRENT_TIMESTAMP when the record is created. This datetime field is essential for temporal analysis of banner performance and can be used in SQL queries to filter banner interactions by time periods or analyze display patterns over time."
pup_kit_requests,pup_kit_request_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The pup_kit_request_id column serves as the primary key for the pup_kit_requests table, uniquely identifying each puppy starter kit request with a non-nullable integer value. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific requests (e.g., WHERE pup_kit_request_id = X)."
pup_kit_requests,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the pup_kit_requests table is a required integer field that identifies the person requesting a puppy starter kit. When writing queries, this column can be used to filter or group requests by specific users, and while it's not currently set up as a foreign key, it's designed to potentially link to a future user/customer table for more detailed user information."
pup_kit_requests,droppoint_id,int,NO,,,,,,,10.0,0.0,"The droppoint_id column in the pup_kit_requests table is a required integer field that identifies the specific location where a puppy starter kit should be delivered or picked up. When writing queries, this column can be used to filter or group requests by delivery location, and while it's not currently a foreign key, it likely corresponds to a standardized list of approved drop-off points or distribution centers."
pup_kit_requests,active_request,tinyint,NO,,,1,,,,3.0,0.0,"The active_request column in the pup_kit_requests table is a required boolean flag (stored as a tinyint) that indicates whether a puppy starter kit request is currently active (1) or inactive (0). When querying this table, use this column to filter for current/pending requests by adding WHERE active_request = 1, or to exclude inactive/completed requests from result sets."
pup_kit_requests,requested_date,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The requested_date column in the pup_kit_requests table automatically records the timestamp when each puppy starter kit request is created, using the server's current time as the default value. This non-nullable datetime field is essential for tracking when customers submit their requests and can be useful for analyzing request patterns or implementing time-based business logic."
pup_schedule_changes,pup_closure_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The pup_closure_id column serves as the primary key in the pup_schedule_changes table, uniquely identifying each schedule modification or adjustment record. This integer field is required (non-nullable) and should be referenced when querying specific schedule changes or joining with related tables that track puppy/dog appointment modifications."
pup_schedule_changes,droppoint_id,int,NO,,,,,,,10.0,0.0,"The droppoint_id column in the pup_schedule_changes table is a required integer field that references the location or designated point where a dog is to be picked up or dropped off as part of a schedule change. When writing queries, this column can be used to filter or join with other location-related tables to analyze schedule modifications by specific drop points or locations."
pup_schedule_changes,status,"enum('Requested','Refused','Accepted')",NO,,,,,,9.0,,,"The 'status' column in the pup_schedule_changes table is a required (non-nullable) enumerated field that tracks the approval state of schedule modifications, containing one of three possible values: 'Requested', 'Refused', or 'Accepted'. When querying this column, you can filter or group by these status values to analyze schedule change requests and their outcomes, such as finding all accepted changes or pending requests."
pup_schedule_changes,schedule_date,date,NO,,,,,,,,,"The schedule_date column in the pup_schedule_changes table represents the specific date when a puppy/dog schedule or appointment was modified or adjusted. This required (non-nullable) date field is essential for filtering and organizing schedule changes chronologically, making it useful in queries that need to analyze schedule modifications within specific date ranges or on particular dates."
pup_schedule_changes,statutory_holiday_id,int,YES,,,,,,,10.0,0.0,"The statutory_holiday_id column in the pup_schedule_changes table is an optional integer field that references a statutory holiday when it affects a schedule change. This column helps identify when puppy/dog schedule modifications are made due to holiday-related adjustments, allowing queries to filter or analyze schedule changes specifically related to statutory holidays."
pup_schedule_changes,closed,tinyint(1),NO,,,0,,,,3.0,0.0,"The 'closed' column in the pup_schedule_changes table is a boolean flag (stored as tinyint(1)) that indicates whether a schedule change record has been completed or finalized. When querying this table, use this column with values 0 (open/active) or 1 (closed/completed) to filter schedule changes based on their completion status."
pup_schedule_changes,open_time,time,NO,,,,,,,,,"The `open_time` column in the `pup_schedule_changes` table stores the new or modified opening time for a puppy/dog's schedule or appointment, represented in a time format (HH:MM:SS). When writing queries, this required (non-nullable) field can be used to track when schedule adjustments begin or to filter schedule changes by specific times of day."
pup_schedule_changes,close_time,time,NO,,,,,,,,,"The close_time column in the pup_schedule_changes table stores the updated closing or end time for a modified dog/puppy appointment or schedule slot, recorded in time format (HH:MM:SS). This required field helps track when a scheduled activity or appointment is set to conclude after a change has been made, making it essential for queries involving schedule duration calculations or end-time comparisons."
pup_schedule_changes,description,text,NO,,,,,,65535.0,,,"The ""description"" column in the pup_schedule_changes table stores mandatory text explanations detailing what changes were made to a puppy's schedule or appointment. This column should be included in INSERT statements and can be searched using text-based conditions (e.g., LIKE, ILIKE) to find specific types of schedule modifications, such as ""cancelled due to illness"" or ""rescheduled for next week."""
pup_schedule_changes,requested_date,datetime,NO,,,,,,,,,"The requested_date column in the pup_schedule_changes table stores the timestamp when a schedule change or modification was requested for a puppy/dog appointment. When writing SQL queries, this datetime field can be used to filter or sort schedule changes by when they were initially requested, and since it's non-nullable, every schedule change record will have a request timestamp."
pup_schedule_changes,requested_by,int,NO,,,,,,,10.0,0.0,"The `requested_by` column in the `pup_schedule_changes` table is a required integer field that stores the identifier of the user or staff member who initiated the schedule change. When writing queries, this column can be used to filter or join with a users/staff table to track who requested specific schedule modifications, making it useful for accountability and audit trail purposes."
pup_schedule_changes,approved_date,date,NO,,,,,,,,,The approved_date column in the pup_schedule_changes table records the date when a schedule modification or appointment change was officially approved. This required (non-nullable) date field is essential for tracking when schedule adjustments were authorized and can be used in SQL queries to filter or analyze schedule changes based on their approval timeline.
pup_schedule_changes,approved_by,int,NO,,,,,,,10.0,0.0,"The approved_by column in the pup_schedule_changes table stores the unique identifier (ID) of the staff member or user who authorized the schedule change. This required integer field helps maintain accountability and audit trails by linking each schedule modification to the person who approved it, likely referencing a user or staff ID from another table."
pup_schedule_changes,euf_note,text,NO,,,,,,65535.0,,,"The `euf_note` column in the `pup_schedule_changes` table stores required text notes explaining why a puppy/dog's schedule or appointment was modified. When writing queries, this column can be used to search for specific types of schedule changes or to provide detailed explanations in result sets about schedule modifications."
pup_schedule_changes,additional_closure_type,int,NO,,,,,,,10.0,0.0,"The additional_closure_type column in the pup_schedule_changes table is a required integer field that categorizes the type of extra or supplementary closure affecting a puppy's schedule or appointment. This column helps track and classify different kinds of schedule modifications, likely using predefined numeric codes to represent specific closure scenarios (such as emergency closures, maintenance periods, or holiday-related adjustments)."
pup_schedule_changes,canceled,tinyint,NO,,,0,,,,3.0,0.0,"The 'canceled' column in the pup_schedule_changes table is a boolean flag (stored as tinyint) that indicates whether a schedule change resulted in a cancellation (1) or not (0). When querying schedule modifications, you can use this column to filter for or exclude canceled appointments, for example: ""WHERE canceled = 0"" to show only non-canceled schedule changes."
pup_snapshots,snapshot_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The snapshot_id column serves as the primary key in the pup_snapshots table, uniquely identifying each point-in-time record of pickup point data. When writing SQL queries, use this column to join with related tables or to filter specific snapshots, ensuring it's always included in GROUP BY clauses when performing aggregations alongside other columns."
pup_snapshots,droppoint_id,int,NO,MUL,,,droppoints,droppoint_id,,10.0,0.0,"The droppoint_id column in the pup_snapshots table is a required integer field that serves as a foreign key reference to the droppoints table, establishing a relationship between snapshot records and their corresponding pickup points. This column is indexed (MUL) to optimize join operations and queries that filter or group by droppoint_id, making it efficient to retrieve historical snapshot data for specific pickup points."
pup_snapshots,old_subscriptions,int,YES,,,,,,,10.0,0.0,"The old_subscriptions column in the pup_snapshots table records the number of previous or historical subscriptions associated with a pickup point at the time the snapshot was taken. This integer field can be used to track changes in subscription counts over time and analyze historical subscription patterns at specific pickup points, though it can contain NULL values when the subscription count is unknown or not applicable."
pup_snapshots,lufavores,int,YES,,,,,,,10.0,0.0,"The ""lufavores"" column in the pup_snapshots table stores an integer value representing the number of favorable ratings or positive feedback received at a specific pickup point at the time of the snapshot. This metric can be used in SQL queries to analyze customer satisfaction trends or filter pickup points based on their popularity, with NULL values indicating that no favorable ratings were recorded for that particular snapshot."
pup_snapshots,capacity,int,YES,,,,,,,10.0,0.0,"The 'capacity' column in the pup_snapshots table represents the maximum number of packages or items that can be handled at a pickup point at the time the snapshot was taken. This nullable integer field helps track how the storage capacity of pickup points changes over time, which is useful for queries analyzing historical capacity trends or identifying capacity constraints at specific points in time."
pup_snapshots,max_capacity,int,YES,,,,,,,10.0,0.0,"The max_capacity column in the pup_snapshots table represents the maximum number of packages or items that can be handled at a pickup point at the time the snapshot was taken. This integer value helps track the capacity limits of pickup points over time, which is useful for queries analyzing historical capacity trends or identifying when pickup points reached or exceeded their capacity thresholds."
pup_snapshots,take_rate,int,YES,,,,,,,10.0,0.0,"The take_rate column in the pup_snapshots table represents the rate at which packages are being picked up from a specific pickup point at the time of the snapshot, stored as an integer value. This metric can be used in SQL queries to analyze pickup point performance over time or to identify locations with high or low package collection rates, and being nullable means some snapshots may not have this data recorded."
pup_snapshots,shipped_orders,int,YES,,,,,,,10.0,0.0,"The shipped_orders column in the pup_snapshots table represents the count of orders that have been shipped from a specific pickup point at the time the snapshot was taken. This integer field can be used to track shipping volume trends over time and analyze pickup point performance, with NULL values indicating either no shipped orders or missing data for that particular snapshot."
pup_snapshots,date,date,NO,,,,,,,,,"The 'date' column in the pup_snapshots table represents the specific calendar date when a pickup point snapshot was recorded, stored in a standard date format. This non-nullable field is essential for temporal queries and helps track the historical timeline of pickup point status changes, making it a crucial component for analyzing pickup point conditions over time."
pup_snapshots,full_percent,float,YES,,,,,,,12.0,,"The `full_percent` column in the `pup_snapshots` table represents the percentage of capacity utilized at a pickup point at the time the snapshot was taken, stored as a floating-point number. This metric can be used to analyze pickup point utilization trends and capacity management, where NULL values may indicate that capacity data was not available at the time of measurement."
pup_snapshots,active_transfers,int,YES,,,,,,,10.0,0.0,"The active_transfers column in the pup_snapshots table represents the number of ongoing or active transfers associated with a pickup point at the time the snapshot was taken. This integer field can be used to analyze pickup point utilization and track concurrent transfer activity, making it useful in queries that need to identify busy periods or capacity patterns at pickup locations."
purchase_order_documents,purchase_order_document_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The purchase_order_document_id column serves as the primary key identifier for each document record in the purchase_order_documents table, using auto-incrementing integers to ensure unique identification. When writing SQL queries, use this column to uniquely reference specific documents, join with related tables, or filter document records."
purchase_order_documents,purchase_order_id,int,NO,,,,,,,10.0,0.0,The purchase_order_id column in the purchase_order_documents table is a required integer field that links document records to their corresponding purchase orders. This column should be used in JOIN operations with the main purchase orders table and in WHERE clauses when filtering for documents related to specific purchase orders.
purchase_order_documents,po_document_id,int,NO,,,,,,,10.0,0.0,"The po_document_id column serves as a unique identifier for each document record in the purchase_order_documents table. When writing SQL queries, use this column to uniquely reference specific purchase order documents, join with related tables, or filter document records."
purchase_order_documents,po_document_type_id,int,NO,,,,,,,10.0,0.0,"The po_document_type_id column in the purchase_order_documents table is a required integer field that categorizes the type of document being stored (e.g., 1 for invoices, 2 for receipts, etc.). When querying this table, you can use this column to filter or group documents by their type, making it useful for retrieving specific categories of purchase order documentation."
purchase_order_documents,created_at,datetime,YES,,,,,,,,,"The created_at column in the purchase_order_documents table records the timestamp when a document or file related to a purchase order was initially added to the system. This datetime field can be used in SQL queries to filter, sort, or analyze documents based on their creation dates, such as finding recently uploaded documents or generating time-based reports on document submissions."
purchase_order_documents,created_by,int,YES,,,,,,,10.0,0.0,"The created_by column in the purchase_order_documents table is an integer field that stores the user ID of the person who uploaded or created the document record. This column can be used to join with a users table to retrieve information about document creators, and since it's nullable, some documents may not have a recorded creator."
purchase_order_documents,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the purchase_order_documents table records the timestamp when a document record was last modified, storing this information as a datetime value. This column is useful for tracking document version history and can be used in SQL queries to filter or sort documents based on their modification dates, such as finding recently updated documents or identifying changes within a specific time period."
purchase_order_documents,updated_by,int,YES,,,,,,,10.0,0.0,The `updated_by` column in the purchase_order_documents table stores the user ID (as an integer) of the person who last modified the document record. This column can be used to track document changes and can be joined with a users or employees table to get detailed information about who made updates to purchase order documents.
purchase_order_items,purchase_order_item_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The purchase_order_item_id column serves as the primary key for the purchase_order_items table, uniquely identifying each individual line item within a purchase order. When writing SQL queries, use this column for precise item-level filtering, joining to related tables that reference specific line items, or when you need to track or modify individual order items."
purchase_order_items,purchase_order_id,int,NO,,,,,,,10.0,0.0,"The purchase_order_id column in the purchase_order_items table is a required integer field that links each line item to its parent purchase order. This column is commonly used in JOIN operations with the purchase_orders table to retrieve complete order details, and it's essential to include in WHERE clauses when filtering for items from specific purchase orders."
purchase_order_items,po_request_item_id,int,NO,,,,,,,10.0,0.0,"The po_request_item_id column is a required integer field that uniquely identifies each line item within a purchase order request. When writing SQL queries, use this column to reference specific items within purchase orders, particularly when joining with related tables or filtering for particular line items."
purchase_order_items,item_details,json,NO,,,,,,,,,"The item_details column in the purchase_order_items table stores additional product-specific information in JSON format, which could include attributes like specifications, customizations, or special handling instructions for each ordered item. When querying this column, use JSON functions (like JSON_EXTRACT or ->) to access specific properties within the JSON structure, and remember that the column cannot contain NULL values."
purchase_order_items,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in the purchase_order_items table is a required (non-nullable) tinyint field that represents the current state of each individual line item within a purchase order. When writing SQL queries, this column can be used to filter or group line items based on their processing status (e.g., pending, received, cancelled), with different numeric values corresponding to different states."
purchase_order_items,created_at,datetime,NO,,,,,,,,,"The created_at column in the purchase_order_items table records the exact date and time when each line item was added to a purchase order, stored as a datetime value. This non-nullable field is useful for tracking the chronological sequence of order items and can be used in SQL queries for filtering, sorting, or analyzing order item creation patterns over time."
purchase_order_items,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the purchase_order_items table is a required integer field that stores the user ID of the person who created the line item entry. When writing SQL queries, this column can be used to filter or join with a users table to track who entered specific purchase order items, and since it's non-nullable, you can always expect a valid user reference."
purchase_order_items,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the purchase_order_items table records the timestamp of when each line item was last modified, automatically tracking changes to order item details. This non-nullable datetime field is commonly used in WHERE clauses for finding recently modified items or in data synchronization queries, and can be helpful for audit trails and troubleshooting order changes."
purchase_order_items,updated_by,int,NO,,,,,,,10.0,0.0,"The updated_by column in the purchase_order_items table stores the user ID (as an integer) of the person who last modified the line item record. This mandatory field (non-nullable) is commonly used in WHERE clauses to filter line items by their last modifier, or in JOIN operations with a users table to get information about who made the most recent changes to purchase order items."
purchase_orders,purchase_order_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The purchase_order_id column is the primary key of the purchase_orders table, uniquely identifying each purchase order record with a non-nullable integer value. This column should be used in WHERE clauses when querying specific purchase orders and in JOIN conditions when relating purchase order data to other tables in the database."
purchase_orders,supplier_id,int,YES,,,,,,,10.0,0.0,"The supplier_id column in the purchase_orders table is an integer field that identifies the vendor or supplier associated with each purchase order. This column can be used to join with a suppliers or vendors table to retrieve detailed supplier information, and since it's nullable, some purchase orders may not have an assigned supplier."
purchase_orders,parent_id,int,YES,,,,,,,10.0,0.0,"The parent_id column in the purchase_orders table is used to establish hierarchical relationships between purchase orders, where a purchase order may be related to or derived from another purchase order. When querying, this column can be used to trace purchase order lineage or group related orders together, with NULL values indicating top-level purchase orders that don't have a parent."
purchase_orders,po_no,int,YES,,,,,,,10.0,0.0,"The po_no column in the purchase_orders table stores the internal purchase order number as an integer value, which can be used to uniquely identify individual purchase orders within the procurement system. When writing SQL queries, this column is commonly used in WHERE clauses to filter specific purchase orders or in JOIN operations to link purchase order details with related tables, and since it's nullable, queries should account for potential NULL values when filtering or joining data."
purchase_orders,po_supplier_contact_id,int,YES,,,,,,,10.0,0.0,"The po_supplier_contact_id column in the purchase_orders table stores the unique identifier of the contact person at the supplier/vendor associated with each purchase order. This optional (nullable) integer field can be used to join with a supplier contacts table to retrieve detailed information about the vendor representative handling the purchase order, making it useful for queries that need to analyze or report on supplier communication and relationships."
purchase_orders,company_id,int,YES,,,,,,,10.0,0.0,"The company_id column in the purchase_orders table is an integer field that identifies which company is associated with each purchase order, allowing for tracking of procurement activities across different company entities. This optional field (as it's nullable) can be used to filter or group purchase orders by company, making it useful for queries that need to analyze purchasing patterns or expenditures at a company level."
purchase_orders,payment_status,int,YES,,,,,,,10.0,0.0,"The payment_status column in the purchase_orders table is an integer field that indicates the current payment state of a purchase order, likely using predefined status codes (e.g., 1 for pending, 2 for paid, 3 for cancelled). When writing SQL queries, this column can be used to filter or group purchase orders based on their payment condition, and since it's nullable, you should consider handling NULL values appropriately in your queries."
purchase_orders,payment_method_id,int,YES,,,,,,,10.0,0.0,"The payment_method_id column in the purchase_orders table is an integer field that references the specific payment method used for each purchase order transaction (such as credit card, wire transfer, or check). This optional field (as indicated by being nullable) helps track and categorize how payments are made for different purchase orders, enabling analysis of payment patterns and financial reporting."
purchase_orders,po_location_id,int,YES,,,,,,,10.0,0.0,"The po_location_id column in the purchase_orders table is an integer field that identifies the specific location or facility where a purchase order was created or is being managed. This optional field (as indicated by being nullable) helps organizations track and analyze purchasing activities across different locations, enabling them to segment and monitor procurement patterns by geographical or operational sites."
purchase_orders,receipient_id,int,YES,,,,,,,10.0,0.0,"The receipient_id column in the purchase_orders table is an integer field that identifies the person or department who will receive the ordered items. When writing queries, this column can be used to filter or join with other tables to track who the intended recipients are for specific purchase orders, though the field is optional as indicated by its nullable property."
purchase_orders,department_id,int,YES,,,,,,,10.0,0.0,"The department_id column in the purchase_orders table is an integer field that identifies which department within the organization initiated or is responsible for a specific purchase order. This optional field (as indicated by being nullable) enables filtering and grouping of purchase orders by department, making it useful for analyzing departmental spending patterns and allocating costs across the organization."
purchase_orders,shipping_info,text,YES,,,,,,65535.0,,,"The shipping_info column in the purchase_orders table stores text-based shipping details and delivery instructions for procurement orders, which may include shipping addresses, special handling requirements, or carrier preferences. This optional field (nullable) can be used in SQL queries to filter or analyze orders based on their shipping requirements, such as finding all orders going to a specific shipping destination or containing particular delivery instructions."
purchase_orders,tracking_code,varchar(45),YES,,,,,,45.0,,,"The tracking_code column in the purchase_orders table stores the shipment tracking number or reference code (up to 45 characters) associated with each purchase order delivery. This optional field can be used to query or filter purchase orders based on their shipping status or to link orders with external shipping systems, making it useful for tracking the physical movement of ordered items."
purchase_orders,tracking_url,varchar(255),YES,,,,,,255.0,,,"The tracking_url column in the purchase_orders table stores the web URL or link that can be used to track the shipment or delivery status of a purchase order. When writing SQL queries, this optional (nullable) text field can be used to retrieve or filter orders based on their tracking information, though not all orders may have an associated tracking URL."
purchase_orders,arrival_date,datetime,YES,,,,,,,,,"The arrival_date column in the purchase_orders table stores the actual date and time when ordered items were received or delivered. This optional datetime field can be used to track when purchases physically arrived at their destination, enabling queries to analyze delivery timeframes or filter orders based on their receipt dates."
purchase_orders,sub_total,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The sub_total column in the purchase_orders table stores the pre-tax and pre-shipping total amount of a purchase order as a decimal number with up to 10 digits total and 2 decimal places. When writing SQL queries, this column can be used for financial calculations and reporting, such as summing total purchase amounts by vendor or time period, and can be NULL if the subtotal hasn't been calculated or recorded yet."
purchase_orders,total_taxes,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The total_taxes column in the purchase_orders table stores the total tax amount applied to each purchase order, represented as a decimal number with up to 10 digits and 2 decimal places (e.g., 1234567.89). When querying this column, you can use it for calculations or filtering tax-related information, and since it's nullable, be sure to handle NULL values appropriately using COALESCE or IS NULL/IS NOT NULL operators when necessary."
purchase_orders,gst_total_taxes,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The gst_total_taxes column in the purchase_orders table stores the Goods and Services Tax (GST) amount for each purchase order as a decimal number with up to 10 digits total and 2 decimal places. When querying this column, you can use it for calculating total order costs including taxes or for tax-related reporting, and since it's nullable, remember to handle potential NULL values appropriately in your calculations."
purchase_orders,qst_total_taxes,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The qst_total_taxes column in the purchase_orders table stores the Quebec Sales Tax (QST) amount for each purchase order, represented as a decimal number with up to 10 digits total and 2 decimal places. When querying this column, you can use it to calculate total tax obligations or filter purchase orders based on specific QST amounts, with NULL values indicating orders where QST may not be applicable or hasn't been recorded."
purchase_orders,other_fees,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The 'other_fees' column in the purchase_orders table stores additional charges or miscellaneous fees associated with a purchase order, represented as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). When querying this column, you can include or exclude NULL values depending on whether you want to consider purchase orders with no additional fees, and you can perform mathematical operations to calculate total costs by combining this with other monetary fields."
purchase_orders,fee_tax,tinyint(1),YES,,,,,,,3.0,0.0,"The fee_tax column in the purchase_orders table is a boolean flag (tinyint(1)) that indicates whether a tax or fee has been applied to the purchase order. When writing queries, you can use this column to filter or identify orders with tax/fee applications (where fee_tax = 1) versus those without (where fee_tax = 0), and since it's nullable, you should handle NULL values appropriately in your conditions."
purchase_orders,discount_amt,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The discount_amt column in the purchase_orders table stores the monetary discount amount applied to a purchase order, represented as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). When querying this column, you can use it for calculations involving order totals or filter orders based on discount thresholds, and since it's nullable, be sure to handle NULL values appropriately in your calculations or comparisons."
purchase_orders,total_cost,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The total_cost column in the purchase_orders table stores the monetary value of each purchase order with two decimal places of precision, allowing for amounts up to 99,999,999.99. This column can be used in SQL queries to filter, sum, or analyze purchase order amounts, and since it's nullable, some records may not have a total cost assigned yet."
purchase_orders,status,tinyint,YES,,,,,,,3.0,0.0,"The 'status' column in the purchase_orders table is a tinyint field that indicates the current state of a purchase order using numerical codes (e.g., 0, 1, 2, etc.). When writing SQL queries, this column can be used to filter or group purchase orders based on their processing status, such as distinguishing between pending, approved, or completed orders."
purchase_orders,old_status,tinyint,YES,,,,,,,3.0,0.0,"The `old_status` column in the purchase_orders table stores the previous status of a purchase order as a small integer (tinyint) value, allowing for status change tracking over time. This column can be used in SQL queries to analyze status transitions or compare historical states with current ones, and since it's nullable, it may contain NULL values for new orders that haven't undergone any status changes."
purchase_orders,note,text,YES,,,,,,65535.0,,,"The 'note' column in the purchase_orders table stores optional text comments or additional information related to specific purchase orders. This free-form text field can be used to capture important remarks, special instructions, or any relevant details that don't fit into other structured columns, making it useful for filtering or retrieving purchase orders with specific annotations."
purchase_orders,reception_status,int,NO,,,1,,,,10.0,0.0,"The reception_status column in the purchase_orders table is a required integer field that indicates the current delivery status of a purchase order. When writing queries, this column can be used to filter or group purchase orders based on their reception state (e.g., WHERE reception_status = 1 for received orders), with the non-null constraint ensuring that every purchase order must have a defined reception status."
purchase_orders,created_at,datetime,YES,,,,,,,,,"The created_at column in the purchase_orders table stores the timestamp when each purchase order was initially created in the system, using a datetime format. This column can be used for filtering orders by date ranges, analyzing order patterns over time, or sorting orders chronologically, and since it's nullable, some historical records might not have this information."
purchase_orders,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the purchase_orders table stores the user ID (as an integer) of the employee who initiated or created the purchase order. This optional field (nullable) can be used to track and filter purchase orders by their creators, making it useful for queries that need to analyze ordering patterns by employee or establish accountability for purchasing activities."
purchase_orders,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the purchase_orders table stores the timestamp of when a purchase order record was last modified, using a datetime format. This column helps track the history of changes to purchase order records and can be useful for auditing purposes or filtering orders based on their last update time."
purchase_orders,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the purchase_orders table stores the user ID (as an integer) of the person who last modified the purchase order record. This optional field (nullable) helps track who made changes to purchase order details, which is useful for audit trails and accountability in procurement processes."
purchase_orders,approved_by,int,YES,,,,,,,10.0,0.0,The approved_by column in the purchase_orders table stores the employee ID (as an integer) of the person who authorized the purchase order. This optional field (as indicated by being nullable) helps track the approval chain for procurement activities and can be used to join with an employees table to get the approver's details.
purchase_orders,quote,int,YES,,,,,,,10.0,0.0,"The 'quote' column in the purchase_orders table stores an integer value that likely represents a reference number or identifier for a price quotation associated with the purchase order. When writing SQL queries, this column can be used to link purchase orders to their corresponding price quotes or to filter/group orders based on specific quotation numbers, though its nullable property indicates that not all purchase orders may have an associated quote."
purchase_orders,invoice,int,YES,,,,,,,10.0,0.0,"The 'invoice' column in the purchase_orders table stores integer values representing invoice numbers associated with purchase orders. This optional field (as indicated by being nullable) can be used to link purchase orders with their corresponding invoice documentation, making it useful for filtering or joining queries related to invoice tracking and reconciliation."
purchase_orders,Est_arrival_date,datetime,NO,,,,,,,,,"The Est_arrival_date column in the purchase_orders table stores the expected delivery date and time for each purchase order as a datetime value. This non-nullable field is essential for tracking when ordered items are anticipated to arrive and can be used in SQL queries for date-based filtering, scheduling, and reporting of procurement timelines."
purchase_orders,type,tinyint,NO,,,0,,,,3.0,0.0,"The 'type' column in the purchase_orders table is a required (non-nullable) tinyint field that categorizes different types of purchase orders using numeric codes. When writing SQL queries, this column can be used to filter or group purchase orders by their classification, where different numeric values (typically small integers) represent distinct purchase order categories or classifications."
purchasing_automation_delivery_schedule,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the purchasing_automation_delivery_schedule table, uniquely identifying each automated delivery schedule record. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference a specific delivery schedule (e.g., WHERE id = X or JOIN ... ON schedule.id = other_table.schedule_id)."
purchasing_automation_delivery_schedule,product_id,int,NO,,,,,,,10.0,0.0,The product_id column in the purchasing_automation_delivery_schedule table is a required integer field that identifies which specific product the automated delivery schedule applies to. This column is essential for linking delivery schedules to their corresponding products and should be used in JOIN operations with product-related tables or when filtering delivery schedules for specific items.
purchasing_automation_delivery_schedule,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the purchasing_automation_delivery_schedule table is a required integer field that identifies which supplier is associated with each automated delivery schedule. When writing queries, this column can be used to join with supplier tables or filter delivery schedules by specific suppliers, making it essential for tracking and managing supplier-specific delivery arrangements."
purchasing_automation_delivery_schedule,order_date,date,NO,,,,,,,,,"The order_date column in the purchasing_automation_delivery_schedule table represents the specific calendar date when an automated purchase order should be generated. When writing SQL queries, this required date field can be used to filter or sort delivery schedules by their planned order dates, and it's commonly used in date-based comparisons (e.g., WHERE order_date >= '2023-01-01') to find upcoming or past scheduled orders."
purchasing_automation_delivery_schedule,delivery_date,date,NO,,,,,,,,,"The delivery_date column in the purchasing_automation_delivery_schedule table stores the specific calendar date when a scheduled delivery is expected to occur, using a standard date format (YYYY-MM-DD). This required field is essential for querying and filtering delivery schedules, allowing you to find upcoming deliveries, track past deliveries, or analyze delivery patterns across different time periods."
purchasing_automation_delivery_schedule,display_on_marketplace,date,YES,,,,,,,,,"The display_on_marketplace column in the purchasing_automation_delivery_schedule table indicates the date when a delivery schedule should become visible or active on the marketplace platform. This date field can be used in SQL queries to filter or identify delivery schedules that should be shown to users at specific times, making it useful for controlling the timing of when automated delivery options appear to marketplace participants."
purchasing_automation_delivery_schedule,shipping_type,smallint,NO,,,0,,,,5.0,0.0,"The shipping_type column in the purchasing_automation_delivery_schedule table is a required smallint field that specifies the delivery method or shipping service type for automated purchase orders. When writing queries, this column can be used to filter or group delivery schedules based on different shipping methods, where each distinct integer value likely corresponds to a specific shipping service or delivery option (e.g., 1 for standard ground, 2 for express, etc.)."
purchasing_automation_sfids,id,int unsigned,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the purchasing_automation_sfids table, using an unsigned integer data type to ensure positive values only. This auto-incrementing identifier uniquely identifies each Salesforce ID mapping record in the purchasing automation system and is required (non-nullable) for all rows."
purchasing_automation_sfids,sfid_content,text,NO,,,,,,65535.0,,,"The sfid_content column in the purchasing_automation_sfids table stores the actual Salesforce ID text values used in purchasing automation processes. This required (non-nullable) text field is essential for maintaining the mapping between Salesforce records and the purchasing automation system, and should be referenced when querying for specific Salesforce record associations."
purchasing_automation_sfids,product_id,int,NO,,,,,,,10.0,0.0,"The product_id column in the purchasing_automation_sfids table is a required integer field that uniquely identifies products within the purchasing automation system. This column likely serves as a reference to connect Salesforce product records with internal purchasing systems, enabling accurate product tracking and automation workflows."
purchasing_automation_sfids,date,date,NO,,,,,,,,,"The 'date' column in the purchasing_automation_sfids table represents the specific date associated with a Salesforce ID record in the purchasing automation process. This non-nullable date field is essential for temporal tracking and can be used in SQL queries for filtering, sorting, or joining records based on when specific Salesforce IDs were used or processed."
purchasing_automation_sfids,quantity,int,NO,,,,,,,10.0,0.0,"The 'quantity' column in the purchasing_automation_sfids table is a required integer field that stores the number of items or units associated with a particular Salesforce purchasing record. When writing SQL queries, this column can be used for numerical calculations, filtering purchase quantities, or aggregating total volumes across purchasing records."
purchasing_automation_sfids,sfid_id,int,NO,,,0,,,,10.0,0.0,"The sfid_id column is a required integer field that serves as a unique identifier in the purchasing_automation_sfids table. This column is used to reference and track individual Salesforce ID records within the purchasing automation system, making it a crucial field for joining or filtering queries related to Salesforce purchasing data."
pusher_apps,id,varchar(255),NO,PRI,,,,,255.0,,,"The 'id' column in the pusher_apps table serves as the primary key and contains unique string identifiers (up to 255 characters) for each Pusher application configuration. When querying this table, use this column to uniquely identify or join specific Pusher application records, for example: `SELECT * FROM pusher_apps WHERE id = 'your_app_id'`."
pusher_apps,key,varchar(255),NO,,,,,,255.0,,,The 'key' column in the pusher_apps table stores the unique API key (as a string up to 255 characters) that authenticates and identifies a specific Pusher application. This required field is essential for making API calls to Pusher's services and should be included in queries when tracking or managing specific Pusher app configurations.
pusher_apps,secret,varchar(255),NO,,,,,,255.0,,,"The 'secret' column in the pusher_apps table stores the Pusher application's secret key, which is a required authentication credential used to securely interact with the Pusher API. When writing SQL queries, this non-nullable varchar(255) field should be treated as sensitive data and is typically used in conjunction with other Pusher credentials for authentication and API operations."
pusher_apps,max_connections,int,NO,,,,,,,10.0,0.0,"The max_connections column in the pusher_apps table specifies the maximum number of concurrent connections allowed for a Pusher application instance. This integer value serves as a connection limit threshold, helping to manage server resources and prevent overload, and since it's non-nullable, each Pusher app configuration must have this limit defined."
pusher_apps,enable_client_messages,tinyint(1),NO,,,,,,,3.0,0.0,"The enable_client_messages column is a boolean flag (stored as tinyint(1)) that determines whether client-to-client messaging is allowed for a specific Pusher application. When writing queries, use this column with values 1 (true) or 0 (false) to filter or identify Pusher apps based on their client messaging capabilities, such as ""WHERE enable_client_messages = 1"" to find apps where client messages are enabled."
pusher_apps,enabled,tinyint(1),NO,,,,,,,3.0,0.0,"The 'enabled' column in the pusher_apps table is a boolean flag (stored as tinyint(1)) that indicates whether a Pusher application is currently active and allowed to send/receive messages. When writing queries, use this column to filter for active Pusher applications (WHERE enabled = 1) or inactive ones (WHERE enabled = 0), as it cannot be null and must always have a definitive state."
pusher_apps,max_backend_events_per_sec,int,NO,,,,,,,10.0,0.0,"The max_backend_events_per_sec column in the pusher_apps table specifies the maximum number of events per second that can be sent from the backend to a Pusher application. When writing SQL queries, use this non-nullable integer column to filter or analyze applications based on their event rate limits, such as identifying apps with high throughput limits or ensuring applications stay within specified event rate thresholds."
pusher_apps,max_client_events_per_sec,int,NO,,,,,,,10.0,0.0,"The max_client_events_per_sec column in the pusher_apps table specifies the maximum number of client-side events that can be triggered per second for a specific Pusher application. When writing queries, this integer value can be used to filter or identify applications based on their event rate limits, and since it's non-nullable, you can rely on it always having a defined value."
pusher_apps,max_read_req_per_sec,int,NO,,,,,,,10.0,0.0,"The max_read_req_per_sec column in the pusher_apps table specifies the maximum number of read requests allowed per second for a Pusher application, serving as a rate limit control mechanism. When querying this column, you can use it to filter or analyze applications based on their read request throughput limits, and since it's a non-nullable integer, it will always contain a numeric value."
pusher_apps,webhooks,json,YES,,,,,,,,,"The `webhooks` column in the `pusher_apps` table stores JSON-formatted webhook configurations for Pusher applications, which can include endpoint URLs, trigger events, and authentication settings. When querying this column, use JSON operators and functions to extract or filter specific webhook configuration details, and note that the column can contain NULL values if webhook settings aren't configured for a particular Pusher application."
pusher_apps,max_presence_members_per_channel,tinyint(1),YES,,,,,,,3.0,0.0,"The max_presence_members_per_channel column in the pusher_apps table specifies the maximum number of members that can be present in a single Pusher presence channel, stored as a small integer (tinyint). When writing queries, this column can be used to filter or validate applications based on their presence channel capacity limits, with NULL values potentially indicating no specific limit is set."
pusher_apps,max_presence_member_size_in_kb,tinyint(1),YES,,,,,,,3.0,0.0,"This column specifies the maximum allowed size (in kilobytes) for presence channel member data in a Pusher application, using a small integer value (0-255). When writing queries, use this column to filter or analyze applications based on their presence member size limits, which is particularly relevant when managing real-time presence features and optimizing data usage."
pusher_apps,max_channel_name_length,tinyint(1),YES,,,,,,,3.0,0.0,"The max_channel_name_length column in the pusher_apps table specifies the maximum number of characters allowed in channel names for a Pusher application, stored as a small integer value. This configuration setting helps enforce channel naming constraints and can be used in SQL queries to validate or filter Pusher applications based on their channel name length limitations."
pusher_apps,max_event_channels_at_once,tinyint(1),YES,,,,,,,3.0,0.0,"The max_event_channels_at_once column in the pusher_apps table specifies the maximum number of channels that can simultaneously receive events in a Pusher application, stored as a small integer (tinyint) value. When writing queries, this column can be used to filter or validate applications based on their channel capacity limits, with NULL values potentially indicating no specific limit is set."
pusher_apps,max_event_name_length,tinyint(1),YES,,,,,,,3.0,0.0,"The max_event_name_length column in the pusher_apps table specifies the maximum number of characters allowed in event names for a Pusher application's messaging system. When writing SQL queries, you can use this column to validate or filter applications based on their event name length restrictions, with the tinyint(1) data type suggesting a small numeric value that likely represents a specific character limit."
pusher_apps,max_event_payload_in_kb,tinyint(1),YES,,,,,,,3.0,0.0,"The max_event_payload_in_kb column in the pusher_apps table specifies the maximum allowed size (in kilobytes) for individual event payloads sent through a Pusher application, stored as a small integer value. This column can be used in WHERE clauses or JOIN conditions to filter or identify Pusher applications based on their payload size limits, helping to enforce data size restrictions in real-time messaging operations."
pusher_apps,max_event_batch_size,tinyint(1),YES,,,,,,,3.0,0.0,"The max_event_batch_size column in the pusher_apps table specifies the maximum number of events that can be sent in a single batch operation for a Pusher application, stored as a small integer value (0-255). This configuration setting helps control message throughput and optimize performance when sending real-time notifications through the Pusher service."
pusher_apps,enable_user_authentication,tinyint(1),NO,,,,,,,3.0,0.0,"The enable_user_authentication column is a boolean flag (stored as tinyint(1)) that determines whether user authentication is required for the Pusher application's messaging features. When writing queries, use this column with values 1 (true) or 0 (false) to filter or identify Pusher apps based on their authentication requirements, such as ""WHERE enable_user_authentication = 1"" to find apps where user authentication is enabled."
put_away_history,put_away_history_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The put_away_history_id is the primary key column in the put_away_history table, serving as a unique identifier for each inventory put-away operation record. When writing SQL queries, use this column to uniquely reference specific put-away events or join with related tables that track inventory movements and verifications."
put_away_history,warehouse_id,int,NO,,,,,,,10.0,0.0,"The warehouse_id column in the put_away_history table is a required integer field that identifies the specific warehouse where an item was stored during a put-away operation. When writing queries, this column can be used to filter or group put-away records by warehouse location, and it's commonly used to join with other warehouse-related tables to access additional facility information."
put_away_history,location_header_id,int,YES,,,,,,,10.0,0.0,"The location_header_id column in the put_away_history table is an integer field that references the primary storage location where items were put away during inventory operations. When writing queries, this column can be used to filter or group put-away records by their storage locations, helping track where specific inventory items were stored during the put-away process."
put_away_history,lot_id,int,YES,MUL,,,,,,10.0,0.0,"The lot_id column in the put_away_history table is a foreign key that references specific lots or batches of inventory items involved in put-away operations. When querying, this column can be used to join with related lot tables to access batch-specific information or to filter put-away records for particular inventory lots."
put_away_history,status_code,int,YES,,,0,,,,10.0,0.0,"The status_code column in the put_away_history table is an integer field that indicates the current state of a put-away operation, likely using predefined status codes (e.g., 0 for pending, 1 for completed, etc.). When writing SQL queries, this column can be used to filter or group put-away records based on their completion status, and since it's nullable, queries should handle potential NULL values appropriately."
put_away_history,inventory_type,int,YES,,,,,,,10.0,0.0,"The inventory_type column in the put_away_history table is an integer field that categorizes the type of inventory being stored during put-away operations. When writing queries, this column can be used to filter or group put-away records based on different inventory classifications, though its nullable property means some records might not have a specified inventory type."
put_away_history,task_id,int,NO,,,,,,,10.0,0.0,"The task_id column in the put_away_history table is a required integer field that uniquely identifies each inventory put-away operation. When writing SQL queries, use this column to join with related tables or filter specific put-away tasks, particularly when connecting to the task_type_inventorycheck table for inventory verification details."
put_away_history,reason_code,int,YES,,,0,,,,10.0,0.0,"The reason_code column in the put_away_history table stores integer values that indicate why a particular put-away operation was performed or any special circumstances surrounding the storage action. When querying this column, it can be used to filter or group put-away records based on their underlying reasons, and since it's nullable, queries should handle potential NULL values appropriately."
put_away_history,expire_date,date,YES,,,,,,,,,"The expire_date column in the put_away_history table stores the expiration date of items that were put away during inventory storage operations. This optional date field is useful for filtering and managing inventory based on expiration dates, and can be particularly important for queries involving perishable goods or items with limited shelf life."
put_away_history,reception_date,date,YES,,,,,,,,,"The reception_date column in the put_away_history table records the date when inventory items were initially received before being put away in their storage locations. When writing SQL queries, this date field can be used to analyze receiving patterns, filter put-away records by specific time periods, or track the time gap between reception and final storage of items."
put_away_history,created,datetime,NO,MUL,,,,,,,,"The 'created' column in the put_away_history table stores the exact date and time when each inventory put-away operation was initiated, using a datetime format. This non-nullable field is indexed (MUL) for optimized querying and can be used to analyze put-away patterns over time or filter records within specific time periods."
put_away_history,modified,datetime,NO,,,,,,,,,"The 'modified' column in the put_away_history table stores the timestamp when a put-away record was last updated, using a datetime format that captures both the date and time of modification. This non-nullable field is essential for tracking the chronological sequence of changes to put-away records and can be used in SQL queries for temporal analysis, auditing, or filtering records based on when they were modified."
put_away_history,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the put_away_history table is a required integer field that identifies the specific user who performed the inventory put-away operation. When writing queries, this column can be used to filter or join with user-related tables to track which employees handled specific put-away tasks or to analyze put-away patterns by user."
put_away_history,photo_name,varchar(255),YES,,,,,,255.0,,,"The photo_name column in the put_away_history table stores the filename or identifier of any photographs taken during the inventory put-away process, with a maximum length of 255 characters. This optional field (as indicated by being nullable) can be used in SQL queries to retrieve or verify visual documentation associated with specific put-away operations, though not all put-away records will necessarily have an associated photo."
putaway_zone,putaway_zone_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The putaway_zone_id column serves as the primary key identifier for each unique storage zone in the warehouse putaway system. When writing SQL queries, use this column to uniquely identify specific zones, join with related tables, or filter putaway zone records, such as ""SELECT * FROM putaway_zone WHERE putaway_zone_id = 123""."
putaway_zone,putaway_zone_name,varchar(255),NO,,,,,,255.0,,,"The putaway_zone_name column stores the descriptive name or identifier for each storage zone within the warehouse, using text values up to 255 characters in length. This required field (non-nullable) helps uniquely identify and reference different areas where items can be stored during putaway operations, making it useful in queries that need to filter, group, or join based on specific storage zone names."
putaway_zone,putaway_zone_desc,text,YES,,,,,,65535.0,,,"The putaway_zone_desc column stores a text description of a storage zone used in warehouse putaway operations, providing details about the zone's characteristics, purpose, or special handling requirements. This descriptive field helps warehouse staff and systems understand the nature and intended use of each putaway zone, making it useful in queries that need to search, filter, or display zone information based on their descriptions."
putaway_zone,created,datetime,NO,,,,,,,,,"The 'created' column in the putaway_zone table stores the timestamp indicating when each storage zone record was initially created in the system. This non-nullable datetime field is essential for audit tracking and can be used in SQL queries to filter or sort storage zones based on their creation date, such as finding recently added zones or analyzing zone creation patterns over time."
putaway_zone,modified,datetime,NO,,,,,,,,,"The 'modified' column in the putaway_zone table stores the timestamp of when a storage zone's record was last updated, using a datetime format. This non-nullable field is essential for tracking the history of changes to storage zone configurations and can be useful in SQL queries for auditing purposes or filtering zones based on when they were last modified."
putaway_zone,staff_id,int,NO,,,,,,,10.0,0.0,"The staff_id column in the putaway_zone table is a required integer field that identifies the warehouse staff member responsible for managing or operating within a specific storage zone. This column can be used to join with staff-related tables to retrieve information about zone assignments and accountability, or to filter putaway zones based on staff responsibilities."
question_categories,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the question_categories table, uniquely identifying each category used for survey question classification. This integer field is non-nullable and is commonly referenced by other tables (like questions and survey_question_categories) to establish relationships between categories and their associated survey questions."
question_categories,category_name,varchar(255),NO,,,,,,255.0,,,"The category_name column in the question_categories table stores the descriptive name or label of each survey question category as a text string (up to 255 characters) and cannot be null. This column is essential for identifying and organizing survey questions into logical groupings, making it a key field to use in SELECT statements when displaying category information or JOIN operations when connecting questions to their respective categories."
question_categories,key,varchar(255),NO,,,,,,255.0,,,"The 'key' column in the question_categories table stores unique string identifiers (up to 255 characters) that represent different question categories used in surveys. This required field serves as a machine-readable identifier for each category, making it useful for programmatic operations and queries that need to reference specific categories within the survey system."
question_categories,title,text,YES,,,,,,65535.0,,,"The 'title' column in the question_categories table stores the descriptive name or label of each question category (e.g., ""Demographics,"" ""Customer Satisfaction,"" ""Product Feedback""). When writing SQL queries, this text field can be used for filtering, grouping, or displaying category names, and is particularly useful in JOIN operations with the questions table to analyze or report on questions by their categorical classifications."
question_categories,l_title,text,YES,,,,,,65535.0,,,The `l_title` column in the `question_categories` table stores the localized or translated title of a question category in text format. This column is optional (nullable) and can be used in queries when you need to display or filter question categories in different languages or localized formats.
questions,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the questions table, uniquely identifying each question record with a non-nullable integer value. This identifier is essential for establishing relationships with other tables in the survey system, allowing you to join and reference specific questions when querying related data such as responses, translations, or category assignments."
questions,question_text,text,NO,,,,,,65535.0,,,"The question_text column in the questions table stores the actual text content of survey questions in their default language, and it is a required field (non-nullable). When writing SQL queries, this column can be used to search for specific questions, analyze question content, or display the primary question text to users, making it a fundamental field for retrieving and working with survey question content."
questions,question_type,varchar(50),NO,,,,,,50.0,,,"The question_type column in the questions table is a required varchar field that specifies the format or type of question being asked (such as multiple choice, free text, rating scale, etc.). This column helps determine how the question should be displayed and processed within the survey system, and since it's non-nullable, every question must have a defined type."
questions,required,tinyint,YES,,,,,,,3.0,0.0,"The 'required' column in the questions table is a boolean flag (stored as tinyint) that indicates whether a question must be answered in a survey or questionnaire. When writing queries, use this column to filter or identify mandatory questions (where required = 1) versus optional questions (where required = 0 or NULL), which can be helpful for validation logic or reporting on question requirements."
questions,category_id,int,YES,MUL,,,question_categories,id,,10.0,0.0,"The category_id column in the questions table is a foreign key that links each question to its corresponding category classification in a related categories table. This optional field (nullable) helps organize and group questions by their subject matter or purpose, enabling efficient filtering and categorization of questions within the survey system."
questions,order,int,YES,,,,,,,10.0,0.0,"The 'order' column in the questions table is an integer field that determines the sequence or position in which questions should be displayed within a survey or questionnaire. When writing SQL queries, this column can be used to sort questions in their intended presentation order (e.g., ORDER BY order ASC) or to maintain a specific sequence when joining with related tables."
questions_lang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The l_id column serves as the primary key in the questions_lang table, uniquely identifying each language-specific version of a question. When writing SQL queries, this column can be used to join with other tables or to specifically target individual translations, though for most translation-related queries, you'll likely use it in combination with question_id and language identifiers."
questions_lang,question_id,int,YES,MUL,,,questions,id,,10.0,0.0,"The question_id column in the questions_lang table serves as a foreign key that links to the primary key in the main questions table, establishing a relationship between a question and its translations. When writing SQL queries, use this column to join the questions_lang table with the main questions table to retrieve language-specific versions of questions, or to filter translations for specific questions."
questions_lang,lang_id,varchar(10),NO,,,,,,10.0,,,"The lang_id column in the questions_lang table stores language identifiers (like 'en', 'es', 'fr') as varchar strings up to 10 characters long, indicating which language each question translation is in. This required field is essential for filtering and retrieving question content in specific languages, making it a key component for implementing multilingual functionality in queries."
questions_lang,l_text,varchar(500),NO,,,,,,500.0,,,"The l_text column in the questions_lang table stores the translated text of a question in a specific language, with a maximum length of 500 characters. This column is required (non-nullable) and works in conjunction with other columns in the table to maintain language-specific versions of questions from the main questions table."
r_and_d_log,r_and_d_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The r_and_d_log_id column serves as the primary key identifier for each unique research and development log entry in the r_and_d_log table. When writing SQL queries, use this non-nullable integer column to uniquely identify specific R&D records, join with related tables, or filter for particular log entries (e.g., WHERE r_and_d_log_id = 123)."
r_and_d_log,project_id,int,NO,,,,,,,10.0,0.0,"The project_id column in the r_and_d_log table serves as a numerical identifier for individual research and development projects, allowing for unique tracking and referencing of specific R&D initiatives. When writing SQL queries, this non-nullable integer column can be used to filter, join, or group R&D log entries by their associated projects, making it essential for retrieving project-specific research data and activities."
r_and_d_log,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the r_and_d_log table is a required integer field that identifies the specific employee or researcher who created or is responsible for each R&D log entry. This column can be used to join with a users or employees table to retrieve information about the person conducting the research, and is commonly used in WHERE clauses to filter R&D logs by specific team members."
r_and_d_log,action,varchar(500),YES,,,,,,500.0,,,"The 'action' column in the r_and_d_log table stores detailed descriptions (up to 500 characters) of specific research activities, experimental steps, or project actions taken during R&D initiatives. This text field can be used to filter or search for particular types of research activities, and since it's nullable, not every log entry requires an action description."
r_and_d_log,strategy_id,int,YES,,,,,,,10.0,0.0,"The strategy_id column in the r_and_d_log table is an integer field that links research and development activities to specific strategic initiatives or approaches. This optional field (as it's nullable) can be used to group or filter R&D activities by their associated strategic plans or methodological frameworks, enabling analysis of research activities within the context of broader organizational strategies."
r_and_d_log,created_at,datetime,YES,,,,,,,,,"The created_at column in the r_and_d_log table stores the date and time when each research and development activity or experiment record was initially created in the system. This datetime field can be used for temporal analysis, filtering records by time periods, or tracking when specific R&D activities began, making it valuable for queries that need to analyze research activities within specific timeframes."
r_and_d_log,order_id,int,YES,,,,,,,10.0,0.0,"The order_id column in the r_and_d_log table is an integer field that helps identify and track specific research and development activities or experiments in sequential order. This optional field (as indicated by being nullable) can be used to sort or filter R&D records chronologically or by priority, making it useful for queries that need to analyze the progression of research activities."
ratelimit_logs,ratelimit_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ratelimit_log_id column serves as the primary key for the ratelimit_logs table, uniquely identifying each rate limiting event or attempt. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific rate limit events (e.g., WHERE ratelimit_log_id = X)."
ratelimit_logs,key,varchar(255),NO,MUL,,,,,255.0,,,"The 'key' column in the ratelimit_logs table stores a unique identifier or pattern used for rate limiting, typically combining factors like IP address, user ID, or endpoint path. This indexed column (MUL) is essential for grouping and counting requests when enforcing rate limits, and its varchar(255) type allows for flexible key formats while being required (non-nullable) for all entries."
ratelimit_logs,count,int,NO,,,,,,,10.0,0.0,"The `count` column in the ratelimit_logs table stores the number of requests made within a specific time window for a particular IP address or endpoint combination. This integer value is essential for tracking and enforcing rate limits, as it represents the actual request count that can be compared against defined thresholds to determine if a rate limit has been exceeded."
ratelimit_logs,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the ratelimit_logs table stores the timestamp when a rate limit event was recorded, automatically populated with CURRENT_TIMESTAMP when a new record is inserted. This datetime field is useful for temporal analysis of rate limiting incidents and can be used in SQL queries to filter or group rate limit events by time periods, such as finding all rate limit violations within a specific date range or analyzing patterns of API usage over time."
ratelimit_logs,period,int,YES,,,,,,,10.0,0.0,The 'period' column in the ratelimit_logs table represents the time window (in seconds) over which rate limiting is being applied for a particular request or endpoint. This integer value helps define the duration for calculating request quotas and can be used in queries to analyze rate limiting patterns or configure time-based access restrictions.
rating_feedback_type,rating_feedback_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The rating_feedback_type_id column serves as the primary key in the rating_feedback_type table, uniquely identifying each type of rating or feedback format available in the system. When writing SQL queries, use this column to join with other tables (particularly the ratings table) to specify or filter by specific feedback types, and since it's non-nullable, you can rely on it always having a valid value."
rating_feedback_type,type,"enum('Basket','HD Delivery','PUP Delivery','Stationary Delivery','CS experience')",YES,,,,,,19.0,,,"The 'type' column in the rating_feedback_type table is an enumerated field that categorizes different service areas or touchpoints where customer feedback can be collected, including options like Basket, HD Delivery, PUP Delivery, Stationary Delivery, and CS experience. When writing SQL queries, you can filter or group ratings by these specific feedback categories using the 'type' column, for example: ""SELECT * FROM rating_feedback_type WHERE type = 'HD Delivery'"" to find all ratings related to home delivery service."
rating_feedback_type,value,"enum('Positive','Negative','Neutral')",YES,,,,,,8.0,,,"The 'value' column in the rating_feedback_type table stores the sentiment classification of a feedback type using an enumerated value of either 'Positive', 'Negative', or 'Neutral'. When querying this column, you can filter or group feedback types based on their sentiment value, for example: SELECT * FROM rating_feedback_type WHERE value = 'Positive'."
rating_feedback_type,lower_basket_rating_limit,tinyint,YES,,,,,,,3.0,0.0,"The lower_basket_rating_limit column specifies the minimum allowed rating value for this feedback type, stored as a small integer (tinyint). When writing queries involving ratings, use this column to validate or filter ratings that meet the minimum threshold for a particular feedback type, such as ensuring star ratings aren't below the acceptable minimum value."
rating_feedback_type,higher_basket_rating_limit,tinyint,YES,,,,,,,3.0,0.0,"The higher_basket_rating_limit column specifies the maximum possible value for a particular rating type, such as 5 for a five-star rating system or 10 for a ten-point scale. When writing SQL queries, this column can be used to validate or normalize rating values, ensuring they fall within the appropriate range for each feedback type."
rating_feedback_type,text_en,varchar(128),YES,,,,,,128.0,,,"The text_en column in the rating_feedback_type table stores the English-language description or label for each feedback type, such as ""Five Star Rating"" or ""Thumbs Up/Down."" This optional text field (up to 128 characters) provides human-readable context for the different rating formats available in the system and can be used in queries to display or filter rating types by their descriptive names."
rating_feedback_type,text_fr,varchar(128),YES,,,,,,128.0,,,"The text_fr column in the rating_feedback_type table stores the French language description or label for each feedback type, with a maximum length of 128 characters. This column is optional (nullable) and is typically used for providing localized French translations of feedback type names, enabling multi-language support in the rating system."
rating_feedback_type,active,tinyint,YES,,,,,,,3.0,0.0,"The 'active' column in the rating_feedback_type table is a boolean flag (stored as tinyint) that indicates whether a particular feedback type is currently available for use in the system. When querying for valid rating feedback types, you should typically include ""WHERE active = 1"" to ensure only currently active feedback options are returned, unless specifically needing to view inactive types."
rating_feedback_type,driver_related,tinyint,YES,MUL,,1,,,,3.0,0.0,"The `driver_related` column in the `rating_feedback_type` table is a boolean flag (tinyint) that indicates whether a particular feedback type is specifically related to driver evaluation (1) or not (0). When writing queries, you can use this column to filter or group feedback types that are specifically associated with driver performance assessments, making it useful for analyzing driver-specific rating patterns."
rating_feedback_type,rating_feedback_type_violation_type_id,int,YES,,,,,,,10.0,0.0,"This optional integer column in the rating_feedback_type table links to violation types that may be associated with specific rating feedback formats. It can be used in SQL queries to filter or join with violation-related data, helping identify which rating feedback types are subject to particular violation categories or moderation rules."
ratings,ratings_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ratings_id column serves as the primary key for the ratings table, uniquely identifying each customer rating and feedback entry. This auto-incrementing integer field is required (non-nullable) and should be referenced when joining with other tables or filtering specific rating records."
ratings,rating_type,int,YES,,,,,,,10.0,0.0,"The rating_type column in the ratings table is an integer field that categorizes the type or category of rating given by customers for orders and workflow steps. This column likely contains reference values that correspond to predefined rating categories in the rating_feedback_type table, making it useful for filtering and grouping ratings by their classification when analyzing customer feedback."
ratings,ww_step_id,int,YES,MUL,,,ww_steps,step_id,,10.0,0.0,"The ww_step_id column in the ratings table is a foreign key that references the workflow step being rated by the customer. When writing queries, use this column to join with the ww_steps table to analyze feedback for specific stages in the workflow process, or to filter ratings by particular workflow steps."
ratings,order_id,int,YES,MUL,,,orders,order_id,,10.0,0.0,"The order_id column in the ratings table is a foreign key that references the specific order being rated or reviewed by a customer. This column enables queries to join ratings data with order details, allowing analysis of customer feedback and satisfaction levels for individual orders throughout the workflow process."
ratings,rating_feedback_type_id,int,YES,MUL,,,rating_feedback_type,rating_feedback_type_id,,10.0,0.0,"The rating_feedback_type_id column in the ratings table is a foreign key that references the rating_feedback_type table, indicating the category or type of feedback provided by customers. This column helps classify and organize different types of ratings (such as satisfaction scores, quality assessments, or delivery feedback) and can be used in JOIN operations with the rating_feedback_type table to retrieve detailed information about the feedback category."
ratings,value,"decimal(2,1)",YES,,,,,,,2.0,1.0,"The 'value' column in the ratings table stores numerical customer ratings with one decimal place precision (e.g., 4.5, 3.0) for orders and workflow steps. This column can be used in SQL queries to calculate average ratings, filter for specific rating thresholds, or analyze customer satisfaction trends, and since it's nullable, some records may not have a rating value assigned."
ratings,created_at,datetime,YES,MUL,,,,,,,,"The created_at column in the ratings table captures the timestamp when a customer rating or feedback entry was recorded, stored in datetime format. This column is commonly used for temporal analysis of customer feedback patterns and can be helpful in filtering or sorting ratings by their submission time, with a secondary index (MUL) optimizing such time-based queries."
ratings,ratings_lufa_user_id_associated,int,YES,,,,,,,10.0,0.0,"This column stores the ID of a Lufa user who is associated with or involved in the rating, though not necessarily the one who created it. It can be used in JOIN operations to connect with user tables for identifying associated personnel, and being nullable indicates that not all ratings require a linked user."
raw_survey_answer,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column in the raw_survey_answer table serves as the primary key, uniquely identifying each individual survey response entry. This non-nullable integer field is essential for referencing specific survey answers and establishing relationships with other tables in the database."
raw_survey_answer,survey_id,int,NO,,,,,,,10.0,0.0,"The survey_id column in the raw_survey_answer table is a required integer field that identifies which survey the response belongs to. This column can be used to group or filter survey responses by their associated survey, making it useful for analyzing responses from specific surveys or joining with other survey-related tables."
raw_survey_answer,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the raw_survey_answer table is a required integer field that identifies which survey participant provided each response. When querying survey responses, this column can be used to group or filter answers by specific participants, or to join with other tables containing user information."
raw_survey_answer,response_text,text,YES,,,,,,65535.0,,,"The response_text column in the raw_survey_answer table stores the actual text responses provided by survey participants, which can include open-ended answers, comments, or detailed feedback. When querying this column, be aware that it can contain NULL values and may store responses of varying lengths, making it suitable for text-based filtering, pattern matching (using LIKE or regular expressions), or full-text search operations."
raw_survey_answer,created_at,timestamp,YES,,,,,,,,,"The created_at column in the raw_survey_answer table records the exact timestamp when each survey response was submitted by a participant. This timestamp field is useful for temporal analysis of survey responses and can be used in SQL queries to filter or group responses by submission time, track response patterns over time, or identify the most recent submissions."
recipeIngredients,ingredients_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ingredients_id column in the recipeIngredients table is a primary key that uniquely identifies each ingredient entry and is commonly used to link to a separate ingredients table. When writing SQL queries, use this column for joining with the ingredients table to access detailed ingredient information, or for filtering specific ingredient entries within recipe combinations."
recipeIngredients,recipe_id,int unsigned,YES,MUL,,,,,,10.0,0.0,"The recipe_id column in the recipeIngredients table is an unsigned integer that serves as a foreign key reference to identify which recipe an ingredient entry belongs to. This column is commonly used in JOIN operations to connect recipe details with their corresponding ingredients, and since it's nullable and has a MUL (non-unique) index, multiple ingredient records can be associated with the same recipe_id."
recipeIngredients,product_id,smallint,YES,,,,,,,5.0,0.0,"The product_id column in the recipeIngredients table references the specific ingredient or product being used in a recipe. This optional field (as it's nullable) can be used in SQL queries to join with a products or ingredients table to retrieve detailed information about each ingredient, such as its name, category, or nutritional information."
recipeIngredients,quantity,smallint,YES,,,,,,,5.0,0.0,"The 'quantity' column in the recipeIngredients table represents the numeric amount of each ingredient needed in a recipe, stored as a small integer value. When writing SQL queries, this column can be used to filter or aggregate ingredient amounts (e.g., finding recipes that require more than a certain quantity of an ingredient), and since it's nullable, remember to handle potential NULL values appropriately in your queries."
recipeIngredients,option,smallint,YES,,,,,,,5.0,0.0,"The 'option' column in the recipeIngredients table indicates alternative ingredient choices within a recipe, where a non-null value groups related ingredients that can be used as substitutes for each other. When querying recipes, you can use this column to identify and group alternative ingredients, allowing for recipe variations and substitutions."
recipeIngredients,priority,smallint,YES,,,,,,,5.0,0.0,"The 'priority' column in the recipeIngredients table indicates the order or importance of ingredients within a recipe, stored as a small integer value. This optional field can be used to sort ingredients in a logical sequence (e.g., primary ingredients first, garnishes last) or to highlight key ingredients when querying recipe components."
recipeIngredients,common,tinyint,NO,,,0,,,,3.0,0.0,"The 'common' column in the recipeIngredients table is a boolean flag (stored as tinyint) that indicates whether an ingredient is considered commonly available in most kitchens. This flag can be used in SQL queries to filter recipes based on whether they require mostly common ingredients (common = 1) or include specialty ingredients (common = 0), helping users find recipes that match their ingredient availability."
recipeIngredients,cup_conversion,mediumint,YES,,,0,,,,7.0,0.0,"The cup_conversion column in the recipeIngredients table stores a numerical value representing how many milliliters (mL) are equivalent to one cup for a specific ingredient, helping standardize recipe measurements across different units. This optional field is particularly useful when writing queries that need to convert between cup measurements and metric volumes, making it easier to scale recipes or convert between measurement systems."
recipeIngredients,alternate_name,varchar(255),YES,,,,,,255.0,,,"The alternate_name column in the recipeIngredients table stores optional alternative names or descriptions for ingredients as they appear in specific recipes, allowing for recipe-specific ingredient naming variations (e.g., ""finely diced onions"" instead of just ""onions""). When writing queries, this column can be used for more detailed ingredient searches or when you need to display recipe-specific ingredient descriptions, but since it's nullable, always consider using COALESCE or checking for NULL values when referencing it."
recipeIngredientsNotIncluded,ingredients_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ingredients_id column serves as the primary key in the recipeIngredientsNotIncluded table, uniquely identifying each excluded ingredient record. When writing SQL queries, use this column to join with other ingredient-related tables or to specifically reference excluded ingredients, ensuring that the integer values match across related tables."
recipeIngredientsNotIncluded,recipe_id,int unsigned,YES,,,,,,,10.0,0.0,"The recipe_id column in the recipeIngredientsNotIncluded table serves as a reference to identify which recipe an excluded ingredient belongs to. When writing SQL queries, use this column to join with the main recipes table or to filter/group excluded ingredients by specific recipes, noting that the column accepts only positive integers and can contain NULL values."
recipeIngredientsNotIncluded,quantity,mediumint,YES,,,,,,,7.0,0.0,"The ""quantity"" column in the recipeIngredientsNotIncluded table stores the numeric amount of an ingredient that should be excluded from a recipe, represented as a medium-sized integer value. When writing SQL queries, this column can be used to specify or filter the exact amount of an ingredient to be omitted, though it's optional as indicated by its nullable property."
recipeIngredientsNotIncluded,cup_conversion,mediumint,YES,,,,,,,7.0,0.0,"The cup_conversion column in the recipeIngredientsNotIncluded table stores the equivalent measurement in cups (likely represented in milliliters or a standardized unit) for excluded ingredients, allowing for easy conversion between different measurement systems. This optional field can be used in SQL queries to calculate alternative measurements or perform quantity-based comparisons when working with recipe modifications and exclusions."
recipeIngredientsNotIncluded,price_per_portion,"decimal(7,2)",YES,,,,,,,7.0,2.0,"The price_per_portion column stores the estimated cost (with up to 2 decimal places) of excluding or substituting a specific ingredient from a recipe on a per-portion basis. This optional field can be useful for calculating cost adjustments when modifying recipes or understanding the financial impact of ingredient omissions, though its nullable nature suggests that pricing information may not always be available or relevant for all excluded ingredients."
recipeIngredientsNotIncluded,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the recipeIngredientsNotIncluded table stores the textual names of ingredients (up to 255 characters) that should be excluded from specific recipes. When writing SQL queries, this column can be used to filter or identify specific excluded ingredients, such as ""nuts"" or ""dairy,"" making it particularly useful for queries related to dietary restrictions or recipe modifications."
recipeIngredientsNotIncluded,name_en,varchar(255),YES,,,,,,255.0,,,"The name_en column in the recipeIngredientsNotIncluded table stores the English-language name of ingredients that should be excluded from recipes, with a maximum length of 255 characters. When writing SQL queries, use this column to search for or filter specific excluded ingredients by their English names, such as 'peanuts' or 'dairy', making it particularly useful for queries related to dietary restrictions or recipe modifications."
recipeOrders,recipe_order_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The recipe_order_id column serves as the primary key in the recipeOrders table, uniquely identifying each recipe order record with a non-nullable integer value. When writing SQL queries, use this column for precise record selection (e.g., WHERE recipe_order_id = X) or for joining with related tables that reference specific recipe orders."
recipeOrders,order_id,int unsigned,YES,MUL,,,,,,10.0,0.0,"The order_id column in the recipeOrders table serves as a non-unique identifier for recipe orders, as indicated by its MUL (multiple) key type and integer data type. This column can be used in WHERE clauses or JOIN conditions to filter or link specific orders, and since it's nullable, queries should account for potential NULL values when referencing this field."
recipeOrders,recipe_id,int unsigned,YES,,,,,,,10.0,0.0,"The recipe_id column in the recipeOrders table stores the unique identifier for each recipe being ordered, using positive integers. Since this field is nullable, it suggests that orders might be created before a specific recipe is assigned, though in most typical queries you'll want to join or filter based on non-null recipe_id values to analyze recipe-specific order data."
recipeOrders,portions,int unsigned,YES,,,,,,,10.0,0.0,"The ""portions"" column in the recipeOrders table stores the number of servings requested for each recipe order as a non-negative integer value. This column can be used in SQL queries to filter or aggregate order quantities, such as finding orders with large portion sizes or calculating total portions ordered over a time period, and allows NULL values when the portion size is not specified."
recipe_availability_stats,recipe_availability_stats_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The recipe_availability_stats_id is the primary key column that uniquely identifies each statistical record in the recipe_availability_stats table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific statistical entries about recipe availability and usage patterns."
recipe_availability_stats,recipe_id,int,NO,MUL,,,,,,10.0,0.0,"The recipe_id column in the recipe_availability_stats table serves as a foreign key that links each statistical record to a specific recipe in the system. This non-nullable integer column is indexed (MUL) to optimize queries that filter or join based on recipe_id, making it efficient to retrieve availability statistics for particular recipes."
recipe_availability_stats,market_date,date,NO,MUL,,,,,,,,"The market_date column in recipe_availability_stats represents the specific calendar date for which recipe statistics and availability data were recorded. As a non-nullable date field with a multi-column index (MUL), it's commonly used in WHERE clauses and GROUP BY operations to analyze recipe metrics over time periods or to retrieve statistics for specific dates."
recipe_availability_stats,is_ruptured,tinyint,NO,,,0,,,,3.0,0.0,"The `is_ruptured` column in the recipe_availability_stats table is a boolean flag (stored as a tinyint) that indicates whether a recipe's availability has been interrupted or broken in some way. When querying, use this column with values 0 (not ruptured) or 1 (ruptured) to filter recipes based on their availability status, such as `WHERE is_ruptured = 0` to find recipes with normal availability."
recipe_availability_stats,snapshot_timestamp,datetime,NO,,,,,,,,,"The snapshot_timestamp column in recipe_availability_stats represents the specific point in time when recipe statistics were captured, storing the date and time with precision. This non-nullable datetime field is essential for temporal analysis and tracking historical trends in recipe usage patterns, allowing queries to filter or group recipe statistics by different time periods."
recipe_user_ratings,recipe_user_ratings,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The recipe_user_ratings column serves as the primary key identifier for each unique rating/review entry in the recipe_user_ratings table, using an integer value. When writing SQL queries, use this column for precise record identification, joining with other tables, or when you need to reference a specific rating entry uniquely."
recipe_user_ratings,recipe_id,int,NO,MUL,,,,,,10.0,0.0,"The recipe_id column in the recipe_user_ratings table is a required integer field that serves as a foreign key reference to identify which recipe is being rated. This column enables joining with the recipes table to connect ratings and reviews with their corresponding recipes, and its non-nullable nature ensures that every rating must be associated with a valid recipe."
recipe_user_ratings,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the recipe_user_ratings table is a required integer field that identifies which user submitted a particular rating or review. When writing queries, this column can be joined with a users table's primary key to access user details, and it's commonly used in WHERE clauses to filter ratings by specific users or in GROUP BY clauses to aggregate ratings per user."
recipe_user_ratings,rating,tinyint,NO,,,,,,,3.0,0.0,"The `rating` column in the recipe_user_ratings table stores numerical scores that users give to recipes, represented as a tinyint value (typically ranging from 1-5 or 0-10). This required field (non-nullable) is essential for calculating average recipe ratings and analyzing user satisfaction with recipes."
recipe_user_ratings,created_at,datetime,NO,,,,,,,,,"The created_at column in the recipe_user_ratings table records the exact date and time when a user submitted their rating or review for a recipe. This non-nullable datetime field is useful for tracking when feedback was given and can be used for time-based analysis, such as finding the most recent reviews or analyzing rating patterns over time."
recipe_user_ratings,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the recipe_user_ratings table records the timestamp of when a user's rating or review was last modified, stored as a datetime value. This column is required (non-nullable) and can be useful for tracking the recency of reviews, filtering for recently updated ratings, or sorting reviews by their modification date."
recipes,recipe_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The recipe_id column serves as the primary key in the recipes table, uniquely identifying each cooking recipe in the database. When writing SQL queries, use this column to join with related tables or to precisely select specific recipes, as it's a non-nullable integer that guarantees unique identification of recipe records."
recipes,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the recipes table stores the title or name of each cooking recipe as a variable-length text string up to 255 characters. This column can be used to search for specific recipes by their names or to display recipe titles in query results, and since it's nullable, some recipe entries might not have a name assigned."
recipes,prep_time,smallint,YES,,,,,,,5.0,0.0,"The prep_time column in the recipes table represents the estimated preparation time for a recipe in minutes. This optional numeric field (smallint) can be used to filter or sort recipes based on their preparation duration, making it useful for queries that need to find quick recipes (e.g., ""WHERE prep_time <= 30"") or organize recipes by time commitment."
recipes,cook_time,smallint,YES,,,,,,,5.0,0.0,"The cook_time column in the recipes table represents the total cooking time required for a recipe, stored as a small integer value (likely in minutes). This optional field (as it's nullable) can be used in queries to filter or sort recipes based on cooking duration, making it useful for finding quick recipes or organizing recipes by time commitment."
recipes,total_time,smallint,YES,,,,,,,5.0,0.0,"The total_time column in the recipes table represents the total number of minutes required to prepare and cook a recipe from start to finish. This optional field (nullable) uses a smallint data type to efficiently store time values, making it useful for filtering recipes based on time constraints or sorting recipes by their preparation duration."
recipes,image_url,varchar(255),YES,,,,,,255.0,,,"The image_url column in the recipes table stores web URLs (up to 255 characters) that link to photographs or visual representations of the completed dishes. This optional field can be used in SQL queries to retrieve recipe images for display purposes, such as filtering recipes that have images (`WHERE image_url IS NOT NULL`) or joining with other tables that reference recipe images."
recipes,description,varchar(1200),YES,,,,,,1200.0,,,"The 'description' column in the recipes table contains a detailed text overview of the recipe, allowing up to 1,200 characters to describe the dish's characteristics, flavor profile, or special notes. When querying this column, you can use string operations (LIKE, CONTAINS, etc.) to search for recipes based on specific descriptive terms or phrases, and since it's nullable, remember to handle potential NULL values appropriately in your queries."
recipes,steps,longtext,YES,,,,,,4294967295.0,,,"The 'steps' column in the recipes table contains the detailed cooking instructions for each recipe, stored as longtext to accommodate lengthy preparation methods and cooking directions. When querying this column, you can use text search functions (like LIKE or REGEXP) to find recipes with specific cooking techniques or instructions, and since it's nullable, remember to handle potential NULL values appropriately in your queries."
recipes,extra_ingredients,longtext,YES,,,,,,4294967295.0,,,"The `extra_ingredients` column in the `recipes` table stores optional or alternative ingredients that can be used in a recipe, formatted as a long text field. This column can be searched using text-based operations (LIKE, CONTAINS) to find recipes with specific optional ingredients, and since it's nullable, some recipes may not have any extra ingredients listed."
recipes,created_at_date,date,YES,,,,,,,,,"The created_at_date column in the recipes table stores the date when each recipe was first added to the database, using a standard date format (YYYY-MM-DD). This column can be useful for filtering recipes by their creation date or sorting recipes chronologically, though it can be null if the creation date wasn't recorded."
recipes,created_at_time,time,YES,,,,,,,,,"The created_at_time column in the recipes table stores the specific time of day (without date) when a recipe was added to the database, using the time data type. This optional field can be useful for analyzing recipe submission patterns throughout the day or filtering recipes based on when they were created during the day."
recipes,updated_at_date,date,YES,,,,,,,,,The updated_at_date column in the recipes table tracks the date when a recipe was last modified or updated. This optional date field can be useful for filtering recipes by their last update date or sorting recipes chronologically to find recently updated entries.
recipes,updated_at_time,time,YES,,,,,,,,,"The `updated_at_time` column in the `recipes` table stores the specific time of day (without date) when a recipe was last modified, using a standard time format (HH:MM:SS). This column can be useful for tracking when during the day recipe updates typically occur or for filtering recipes based on their modification time, though since it's nullable, some recipes may not have this information recorded."
recipes,status,tinyint,YES,MUL,,,,,,3.0,0.0,"The 'status' column in the recipes table is a tinyint field that indicates the current state or condition of a recipe entry, likely using predefined status codes (e.g., 1 for active, 0 for inactive, 2 for pending review). The MUL key type suggests this column is part of a multi-column index, making it efficient to filter or group recipes by their status in SQL queries."
recipes,portions,smallint,YES,,,0,,,,5.0,0.0,"The ""portions"" column in the recipes table represents the number of servings each recipe yields, stored as a small integer value. This column can be used to filter or sort recipes based on serving size requirements, and since it's nullable, some recipes may not have specified portion information."
recipes,instructions_list_product_id,int,YES,,,,,,,10.0,0.0,"The instructions_list_product_id column in the recipes table is an optional integer field that links recipe instructions to specific product IDs, allowing recipes to reference particular cooking products or tools needed for preparation. This column can be used in JOIN operations to connect recipes with product information from a related products table, or it can be filtered to find recipes that require specific cooking equipment."
recipes,subcategory_id,int,NO,,,,,,,10.0,0.0,"The subcategory_id column in the recipes table is a required integer field that categorizes recipes into more specific groups within broader recipe categories (like ""Italian Pasta"" within ""Italian Cuisine"" or ""Holiday Cookies"" within ""Desserts""). When writing queries, this column can be used to filter or group recipes by their specific subcategories, and it's commonly joined with a recipe_subcategories reference table to get the actual subcategory names."
recipes,featured,int,YES,,,0,,,,10.0,0.0,"The 'featured' column in the recipes table is a binary/flag field (stored as an integer) that indicates whether a recipe is marked as featured or not, typically using 0 for non-featured and 1 for featured recipes. This column can be used to filter or highlight special recipes that should be prominently displayed, making it useful in queries where you need to find or display featured recipes (e.g., SELECT * FROM recipes WHERE featured = 1)."
recipes,pdf_url,text,YES,,,,,,65535.0,,,"The pdf_url column in the recipes table stores optional URLs pointing to PDF versions of the recipes, which can contain detailed recipe cards, printable instructions, or additional documentation. When querying this column, you can use it to retrieve or filter recipes based on whether they have associated PDF documents, though be aware that the field may contain NULL values since not all recipes require PDF attachments."
recipes,is_bundle,tinyint,YES,,,0,,,,3.0,0.0,"The ""is_bundle"" column in the recipes table is a boolean flag (stored as a tinyint) that indicates whether a recipe is a bundle or collection of multiple related recipes (1) or a single standalone recipe (0). This column can be useful when filtering queries to either include or exclude recipe bundles, such as meal plans or themed recipe collections."
recipes,is_new,tinyint,NO,,,0,,,,3.0,0.0,"The `is_new` column in the recipes table is a boolean flag (stored as tinyint) that indicates whether a recipe is newly added to the database, where 0 typically represents older recipes and 1 represents new recipes. When querying recipes, this column can be used to filter or highlight recently added recipes, making it useful for features like ""New Recipes"" sections or recent content displays."
recipes,first_published_at_date,date,YES,,,,,,,,,"The first_published_at_date column in the recipes table records the calendar date when a recipe was first published or added to the database. This optional date field can be used to track recipe chronology, filter recipes by publication date, or sort recipes from newest to oldest, making it useful for queries that need to analyze recipe trends over time or find recently added recipes."
recipes,marketplace_family_id,int,YES,,,,,,,10.0,0.0,"The marketplace_family_id column in the recipes table is an optional integer field that groups related recipes into marketplace families or collections. This column can be used to filter or join recipes that belong to the same marketplace grouping, such as recipe bundles or themed collections, making it useful for queries that need to retrieve sets of related recipes."
recipesLang,recipe_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The recipe_id column in the recipesLang table serves as a primary key that links language-specific recipe content to its corresponding base recipe record. When writing queries, this column should be used to join with the main recipes table and to uniquely identify specific recipe translations, making it essential for retrieving localized recipe content."
recipesLang,l_name,varchar(255),YES,,,,,,255.0,,,"The `l_name` column in the `recipesLang` table stores the localized name or title of a recipe in a specific language, with a maximum length of 255 characters. This column is optional (nullable) and can be used in SQL queries to retrieve or filter recipe names in different language versions, making it essential for displaying recipe titles in the user's preferred language."
recipesLang,l_description,varchar(1200),YES,,,,,,1200.0,,,"The l_description column in the recipesLang table stores localized recipe descriptions with a maximum length of 1200 characters, allowing for detailed explanations of recipes in different languages. When querying this column, you can use it to retrieve or filter recipe descriptions in specific languages, and since it's nullable, some recipes may not have descriptions available in all languages."
recipesLang,l_steps,longtext,YES,,,,,,4294967295.0,,,"The `l_steps` column in the `recipesLang` table stores detailed cooking instructions or preparation steps for recipes in different languages as longtext data. This column allows for extensive, multi-step recipe instructions to be stored without length restrictions, and its nullable property indicates that some recipe entries might not have steps documented."
recipesLang,l_extra_ingredients,longtext,YES,,,,,,4294967295.0,,,"The `l_extra_ingredients` column in the `recipesLang` table stores additional or optional ingredient information for recipes in different languages as longtext data. This column can be used to query or store supplementary ingredient details that may be specific to certain regional variations or language-specific recipe adaptations, and being nullable means not all recipe translations require extra ingredient information."
recipesLang,lang_id,varchar(10),YES,,,,,,10.0,,,"The `lang_id` column in the `recipesLang` table stores language identifiers (such as ""en"", ""es"", ""fr"") as text strings up to 10 characters long, indicating which language version each recipe translation represents. This column is optional (nullable) and helps organize recipe content across different languages, making it useful for filtering or joining queries when retrieving language-specific recipe information."
recipesLang,l_pdf_url,text,YES,,,,,,65535.0,,,"The l_pdf_url column in the recipesLang table stores URL links to PDF documents containing recipe information in specific languages. This column can be used to retrieve or reference the location of language-specific PDF versions of recipes, making it useful in queries where you need to access or display links to downloadable recipe documentation."
referral_program_logs,referral_program_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The referral_program_log_id is the primary key column that uniquely identifies each record in the referral_program_logs table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific log entries related to referral program activities."
referral_program_logs,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the referral_program_logs table is a required integer field that identifies the user who performed or was affected by a referral program action. As a foreign key (indicated by MUL), it links to the primary user record and is commonly used in JOIN operations or WHERE clauses to filter referral activities for specific users."
referral_program_logs,invited_user,varchar(255),NO,MUL,,,,,255.0,,,"The ""invited_user"" column in the referral_program_logs table stores the identifier (typically an email address or username) of the person who was invited through the referral program. As a required field (non-nullable) with a multi-column index (MUL), this column is commonly used in JOIN operations and WHERE clauses to track and analyze referral program participation, making it essential for queries that need to monitor invited user activity or measure referral program effectiveness."
referral_program_logs,status,tinyint(1),NO,,,0,,,,3.0,0.0,"The 'status' column in the referral_program_logs table is a required boolean field (tinyint(1)) that indicates whether a referral program activity or event is active (1) or inactive (0). When querying this table, you can use this column to filter records based on their current status, such as ""WHERE status = 1"" to find active referral program events."
referral_program_logs,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the referral_program_logs table automatically records the exact date and time when each referral program activity or event is logged in the system. This timestamp field is essential for temporal analysis of referral program activities and can be used in SQL queries to filter, sort, or group referral events by time periods, with the column automatically populated with the current timestamp when new records are inserted."
referral_program_logs,accepted_on,datetime,YES,,,,,,,,,"The `accepted_on` column in the `referral_program_logs` table stores the timestamp when a referral was officially accepted or approved in the referral program. This nullable datetime field is useful for filtering and analyzing referral acceptance patterns, and can be used in SQL queries to track the time gap between referral submission and acceptance or to generate reports on acceptance rates over specific time periods."
regions,region_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The region_id column serves as the primary key in the regions table, uniquely identifying each geographical region with a non-nullable integer value. This column is commonly used in JOIN operations and WHERE clauses when linking region-specific data across tables or filtering results by specific geographical areas."
regions,code,varchar(20),NO,,,,,,20.0,,,"The 'code' column in the regions table stores unique text-based identifiers for geographical regions, using a maximum of 20 characters. As a required (non-nullable) field, this column is commonly used in WHERE clauses and JOIN conditions to filter or link region-specific data, such as ""SELECT * FROM regions WHERE code = 'NA'"" or when joining with other tables that reference regional information."
regions,region_name,varchar(255),NO,,,,,,255.0,,,"The region_name column in the regions table stores the text names of geographical regions (like ""North America"" or ""Western Europe"") as strings up to 255 characters long. Since this column is marked as NOT NULL, it must always contain a value, making it a reliable field for querying and joining when you need to filter or group data by region names."
regions,slug,varchar(255),YES,,,,,,255.0,,,"The `slug` column in the `regions` table stores URL-friendly versions of region names as varchar strings, which can be used for generating clean URLs or unique identifiers in web applications. This column allows NULL values and can be used in SQL queries to match or filter regions using their simplified text representations (e.g., ""north-america"" or ""western-europe"")."
relays,token,char(23),YES,UNI,,,,,23.0,,,"The `token` column in the `relays` table stores a unique 23-character identifier for each relay node in the network routing system. When writing queries, this column can be used to uniquely identify specific relay nodes, and since it has a unique constraint (UNI), you can rely on it as an alternative lookup key to find exactly one matching relay record."
relays,user_id,int,YES,,,,,,,10.0,0.0,"The user_id column in the relays table is an optional integer field that identifies which user account owns or is associated with a particular relay node. When writing queries, this column can be used to filter or join with user-related tables to find relay nodes associated with specific users, though the nullable property means some relay nodes may not have an assigned user."
relays,link_id,int,YES,,,,,,,10.0,0.0,"The `link_id` column in the `relays` table is an optional integer field that identifies a specific network connection or path associated with a relay node. This column can be used in SQL queries to filter or join with other tables based on specific network link configurations, helping to analyze or manage network routing paths through the relay system."
replenishment_history,replenishment_history_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The replenishment_history_id is the primary key column in the replenishment_history table, serving as a unique identifier for each inventory replenishment event. When querying this table, use this column to uniquely reference specific replenishment records or to join with related tables that track inventory management activities."
replenishment_history,warehouse_id,int,NO,,,,,,,10.0,0.0,"The warehouse_id column in the replenishment_history table is a required integer field that identifies which warehouse location received the inventory replenishment. This column is essential for filtering and grouping replenishment activities by specific warehouse locations, allowing queries to track and analyze inventory restocking patterns at different facilities."
replenishment_history,location_header_id,int,YES,,,,,,,10.0,0.0,"The location_header_id column in the replenishment_history table is an integer field that references the physical location or storage area where the inventory replenishment took place. When querying replenishment activities, this column can be used to filter or group inventory updates by specific storage locations, helping track where stock was added throughout the facility."
replenishment_history,lot_id,int,YES,,,,,,,10.0,0.0,"The `lot_id` column in the `replenishment_history` table is an optional integer field that identifies the specific batch or lot number associated with a replenishment event. This column can be used to track and query inventory items that were received or restocked together as part of the same manufacturing or shipping batch, enabling traceability and batch-level analysis of inventory movements."
replenishment_history,reserved_lot_id,int,YES,,,,,,,10.0,0.0,"The reserved_lot_id column in the replenishment_history table is an optional integer field that links to specific lot numbers or batches of inventory items being used for replenishment. When querying this column, it can be used to track or filter replenishment activities by specific inventory lots, though the NULL values indicate that not all replenishment records require lot tracking."
replenishment_history,status_code,int,YES,,,0,,,,10.0,0.0,"The status_code column in the replenishment_history table is an integer field that indicates the current state of a replenishment activity (e.g., pending, completed, cancelled). When querying this column, you can use it to filter or group replenishment records based on their processing status, with the field accepting NULL values when the status is unknown or not yet determined."
replenishment_history,inventory_type,varchar(1),YES,,,,,,1.0,,,"The `inventory_type` column in the replenishment_history table is a single-character varchar field that categorizes the type of inventory being replenished. When querying this column, you can use it to filter or group replenishment records based on different inventory classifications, though since it's nullable, be sure to handle NULL values appropriately in your conditions."
replenishment_history,task_id,int,NO,,,,,,,10.0,0.0,"The task_id column in the replenishment_history table serves as a unique identifier for each individual inventory replenishment activity. When querying replenishment records, this integer field can be used to specifically reference or join to a particular restocking task, making it useful for tracking and analyzing specific replenishment events."
replenishment_history,old_qty,int,YES,,,,,,,10.0,0.0,The `old_qty` column in the replenishment_history table stores the previous quantity of inventory that existed before a replenishment action was performed. This integer value is useful for tracking inventory changes over time and can be used in queries to calculate the net change in stock levels (by comparing with the new quantity after replenishment).
replenishment_history,new_qty,int,YES,,,,,,,10.0,0.0,"The `new_qty` column in the `replenishment_history` table stores the quantity of items added during each inventory replenishment event as an integer value. This column helps track how many units were added to stock during each restock operation, making it useful for analyzing inventory addition patterns and calculating total stock increases over time."
replenishment_history,reason_code,int,YES,,,0,,,,10.0,0.0,"The `reason_code` column in the replenishment_history table stores integer values that categorize the reason for each inventory replenishment action (such as regular restock, emergency restock, or seasonal preparation). When querying this column, you can use it to filter or group replenishment records by their underlying reasons, though note that it's nullable so you may want to handle NULL values in your queries."
replenishment_history,expire_date,date,YES,,,,,,,,,"The expire_date column in the replenishment_history table stores the date when replenished inventory items are expected to expire or become unusable. This optional field is particularly useful for tracking perishable items or products with limited shelf life, and can be used in SQL queries to identify soon-to-expire inventory or analyze stock rotation patterns."
replenishment_history,reception_date,date,YES,,,,,,,,,"The reception_date column in the replenishment_history table stores the date when inventory items were physically received and added to stock. This date field is useful for analyzing replenishment patterns, tracking when specific stock additions occurred, and can be used in queries to filter or group replenishment activities within specific time periods."
replenishment_history,created,datetime,NO,,,,,,,,,"The 'created' column in the replenishment_history table stores the exact date and time when each inventory replenishment event occurred, using a datetime format. This non-nullable field is essential for temporal tracking and can be used in SQL queries to filter, sort, or analyze replenishment activities within specific time periods or to create time-based reports."
replenishment_history,modified,datetime,NO,,,,,,,,,"The 'modified' column in the replenishment_history table stores the exact date and time when a replenishment record was last updated, using a datetime format. This non-nullable field is essential for tracking the chronological sequence of inventory updates and can be used in SQL queries for filtering, sorting, or analyzing replenishment activities within specific time periods."
replenishment_history,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the replenishment_history table is a required integer field that identifies which employee or system user performed the inventory replenishment action. When querying replenishment activities, this column can be used to filter or group records by specific users, or joined with a users/employees table to get additional information about who performed the restocking."
reports_log,reports_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The reports_log_id column serves as the primary key for the reports_log table, uniquely identifying each report generation event in the system. When writing SQL queries, use this column to join with other tables or to filter specific report log entries, as it provides a guaranteed unique reference point for each record in the reports_log table."
reports_log,name_func,varchar(255),YES,MUL,,,,,255.0,,,"The name_func column in the reports_log table stores the name or identifier of the function or process that generated each report, allowing for tracking of different report generation methods. This column can be used in SQL queries to filter, group, or analyze reports based on their generation source, making it useful for auditing and monitoring which report generation functions are being used most frequently."
reports_log,staff_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The staff_id column in the reports_log table is a foreign key that references the users table, identifying which staff member generated each report. This nullable integer field enables tracking and analysis of report generation patterns by staff members, and can be used in JOIN operations with the users table to retrieve additional information about the report generator."
reports_log,created_at,datetime,YES,,,,,,,,,"The created_at column in the reports_log table captures the exact date and time when each report was generated in the system. This datetime field can be used in SQL queries for filtering report events by time periods, analyzing report generation patterns, or sorting reports chronologically."
reports_log,resolved_at,datetime,YES,,,,,,,,,"The resolved_at column in the reports_log table captures the date and time when a report generation event was completed or resolved. This nullable datetime field can be used to filter or analyze report completion times, track unresolved reports (where resolved_at is NULL), or calculate report generation duration when compared with other timestamp fields in the table."
reports_log,params,text,YES,,,,,,65535.0,,,"The 'params' column in the reports_log table stores the parameters or settings used when generating a report, saved as text data. This column can be queried to understand the specific configuration or filters that were applied during report generation, though it's optional (nullable) and may not contain values for all report entries."
reports_log,status,int,YES,,,,,,,10.0,0.0,"The 'status' column in the reports_log table is an integer field that indicates the current state of a report generation event, likely using predefined status codes (e.g., 1 for pending, 2 for completed, 3 for failed). When querying this column, it can be used to filter or group report events based on their processing state, and since it's nullable, be sure to handle NULL values appropriately in your conditions."
reports_log,link,text,YES,,,,,,65535.0,,,"The ""link"" column in the reports_log table stores the URL or file path where the generated report can be accessed. This optional text field can be used in SQL queries to retrieve or filter report locations, helping to locate specific reports in the system."
request_comments,request_comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The request_comment_id column serves as the primary key for the request_comments table, uniquely identifying each comment or feedback entry. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference specific comments (e.g., WHERE request_comment_id = X)."
request_comments,request_id,int,NO,MUL,,,,,,10.0,0.0,"The request_id column in the request_comments table is a required integer field that serves as a foreign key reference to identify which request a comment belongs to. This column is indexed (MUL) to optimize queries that filter or join based on request_id, making it efficient to retrieve all comments associated with a specific request."
request_comments,type,tinyint,NO,MUL,,,,,,3.0,0.0,"The 'type' column in the request_comments table is a required tinyint field that categorizes different kinds of comments or feedback associated with requests. As indicated by the MUL key type, this column is likely indexed to optimize queries that filter or group comments by their type, suggesting it's frequently used in WHERE clauses or JOIN conditions."
request_comments,comment,text,NO,,,,,,65535.0,,,"The 'comment' column in the request_comments table stores the actual text content of comments or feedback related to requests, and it cannot be null. When writing SQL queries, this column should be used to access or search through the comment content, such as using LIKE operators for text searching or selecting the full comment text for display purposes."
requested_changes,request_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The request_id column serves as the primary key in the requested_changes table, uniquely identifying each change request record with a non-nullable integer value. When querying this table, request_id can be used for precise record selection, joining with related tables, or filtering specific change requests."
requested_changes,class_pk_id,int,NO,MUL,,,,,,10.0,0.0,"The class_pk_id column in the requested_changes table is a required integer field that serves as a foreign key reference, likely linking to a primary class or classification table. This column helps categorize or classify change requests by associating them with specific classes or categories in the system, enabling queries to filter or group change requests based on their classification."
requested_changes,variable_id,int,NO,MUL,,,,,,10.0,0.0,"The variable_id column in the requested_changes table is a required integer field that serves as a foreign key reference, likely linking to a variables or configuration table that defines what specific element is being modified in each change request. When querying this table, you can use variable_id to join with related tables or filter change requests to focus on specific variables or configuration items being modified."
requested_changes,state,tinyint,NO,MUL,,,,,,3.0,0.0,"The 'state' column in the requested_changes table is a required tinyint field that represents the current status or phase of a change request, likely using predefined numeric codes to indicate states like pending, approved, rejected, or completed. As indicated by the MUL key type, this column is part of an index, suggesting it's frequently used for filtering or joining operations when querying change request statuses."
requested_changes,created_date,date,NO,,,,,,,,,"The created_date column in the requested_changes table stores the date when a change request was initially submitted or created in the system. This mandatory date field (non-nullable) is essential for temporal tracking and can be used in SQL queries to filter, sort, or analyze change requests by their creation dates, such as finding requests created within specific date ranges or grouping requests by creation period."
requested_changes,created_time,time,NO,,,,,,,,,"The created_time column in the requested_changes table stores the specific time of day when a change request was initiated, using a standard time format (HH:MM:SS). This non-nullable field is essential for tracking the precise timing of change requests and can be used in SQL queries for filtering requests by time of day or analyzing patterns in when changes are typically requested."
requested_changes,updated_date,date,NO,,,,,,,,,"The updated_date column in the requested_changes table stores the date when a change request was last modified or updated in the system. This mandatory date field can be used in SQL queries to filter, sort, or analyze change requests by their modification dates, making it useful for tracking the timeline of changes and generating reports based on when updates occurred."
requested_changes,updated_time,time,NO,,,,,,,,,"The updated_time column in the requested_changes table stores the specific time of day when a change request was modified or updated, using a standard time format (HH:MM:SS). This non-nullable field is essential for tracking the precise timing of change request updates and can be used in SQL queries for filtering or sorting change requests based on the time component, such as finding changes made during specific hours of operation."
requested_changes,creator_id,int,NO,,,,,,,10.0,0.0,"The creator_id column in the requested_changes table is a required integer field that identifies the user who initiated or created the change request. This column can be used to join with a users or employees table to retrieve information about the change request creator, and is commonly used in WHERE clauses to filter change requests by their originator."
requested_changes,updater_id,int,NO,,,,,,,10.0,0.0,"The updater_id column in the requested_changes table is a required integer field that identifies the user or system entity who initiated or submitted the change request. This column can be used to join with user or employee tables to retrieve information about who requested specific changes, making it valuable for audit trails and accountability tracking."
requested_changes,old_value,varchar(255),YES,,,,,,255.0,,,"The `old_value` column in the requested_changes table stores the previous value of a field before a change was requested, captured as a text string up to 255 characters in length. This column is useful for comparing the state of data before and after changes, making it valuable in SQL queries that need to analyze historical values or track the evolution of specific fields over time."
requested_changes,new_value,varchar(255),YES,,,,,,255.0,,,"The ""new_value"" column in the requested_changes table stores the proposed or desired value that should be applied after the change is implemented, accepting text-based values up to 255 characters in length. This column can be null, which might indicate cases where the change request involves a deletion or where the new value hasn't been specified yet, and it's commonly used in SQL queries to compare the requested changes against current values or to analyze the nature of change requests."
response_options,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column in the response_options table serves as the primary key, uniquely identifying each response selection record with an auto-incrementing integer value. This column should be used when joining with other tables that reference specific response selections or when needing to uniquely identify or retrieve individual response option records."
response_options,response_id,int,NO,,,,,,,10.0,0.0,"The response_id column in the response_options table is a required integer field that identifies a specific response instance where options were selected. This column is typically used to group multiple option selections that belong to the same response, making it essential for queries that need to retrieve all options chosen in a particular response context."
response_options,option_id,int,NO,MUL,,,options,id,,10.0,0.0,"The option_id column in the response_options table is a required integer field that references available options from a related options table, serving as a foreign key. This column is used to track which specific option was selected in a response, making it essential for queries that need to analyze option selections or join with the options table to get detailed option information."
response_options,response_type,"enum('cancelation','survey')",NO,,,,,,11.0,,,"The response_type column in the response_options table is a required field that categorizes the context of the response selection, specifically distinguishing between 'cancelation' and 'survey' responses. When querying this table, you can use this column to filter or group responses based on their type, for example: SELECT * FROM response_options WHERE response_type = 'survey'."
rights,itemname,varchar(64),NO,PRI,,,,,64.0,,,"The ""itemname"" column in the rights table serves as the primary key and stores unique identifiers (up to 64 characters) for different system permissions or access rights. When writing SQL queries, use this column to specifically identify or filter individual rights, such as in WHERE clauses or JOIN conditions (e.g., `WHERE rights.itemname = 'specific_right'`)."
rights,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the rights table is a required integer field that categorizes different kinds of access rights or permissions within the system. When writing SQL queries, this column can be used to filter or group permissions by their classification type, where each distinct integer value likely represents a specific category of system privilege or access level."
rights,weight,int,YES,,,,,,,10.0,0.0,"The 'weight' column in the rights table is an integer field that likely represents the relative importance or priority level of different access rights within the system. When writing queries, this column can be used to sort or filter rights based on their significance, where higher weight values typically indicate more important or higher-priority permissions."
roles,role_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The role_id column serves as the primary key in the roles table, uniquely identifying each role definition within the system's role-based access control (RBAC) framework. When writing SQL queries, use this column to join with related tables like user_roles or permission logs, and ensure referential integrity when managing role relationships and hierarchies."
roles,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the roles table stores the unique textual identifier or title for each role in the system's access control hierarchy, with a maximum length of 255 characters. This required field (non-nullable) is used to reference and identify specific roles when managing permissions, role assignments, and access control throughout the application."
roles,department_id,int,NO,MUL,,,temp_departments,department_id,,10.0,0.0,"The department_id column in the roles table is a required foreign key that links each role to its associated department within the organizational structure. This column is essential for queries that need to filter or group roles by department, enabling department-specific role management and access control implementations."
roles,hr_editable,tinyint,YES,,,0,,,,3.0,0.0,"The hr_editable column in the roles table is a boolean flag (stored as a tinyint) that indicates whether HR personnel have permission to modify this role definition. When writing queries, use this column to filter or identify roles that can be managed by HR staff, where 1 typically indicates HR-editable roles and 0 indicates roles that require higher-level administrative access to modify."
roles,parent_role_id,int,YES,,,,,,,10.0,0.0,"The parent_role_id column in the roles table is used to establish role hierarchies by referencing the ID of a parent role, enabling the creation of nested role structures where permissions can be inherited. When querying role relationships, this column can be used in self-joins to traverse the role hierarchy tree, with NULL values indicating top-level roles that don't have a parent."
roles,active,tinyint(1),YES,,,1,,,,3.0,0.0,"The 'active' column in the roles table is a boolean flag (stored as tinyint(1)) that indicates whether a role definition is currently in use within the system's RBAC framework. When querying roles, you should typically include ""WHERE active = 1"" to retrieve only currently active roles, unless specifically needing to access inactive or historical role definitions."
roles,punch_system,int,YES,,,,,,,10.0,0.0,"The punch_system column in the roles table is an optional integer field that likely indicates which time tracking or punch clock system a particular role is associated with. When writing queries involving role-based access to time tracking features, you can use this column to filter or group roles based on their assigned punch system, with NULL values potentially indicating roles that don't have any punch clock system access."
roles,license_type,varchar(255),YES,,,,,,255.0,,,"The license_type column in the roles table specifies the type of software license or subscription tier associated with each role definition, stored as a variable-length string up to 255 characters. This column helps determine what features or capabilities are available to users assigned to specific roles based on their organization's licensing agreements, and being nullable allows for roles that aren't tied to specific license types."
roles,google_groups,json,YES,,,,,,,,,"The `google_groups` column in the roles table stores JSON data that maps role definitions to corresponding Google Workspace groups, enabling integration between the system's RBAC and Google's organizational structure. This column can be queried using JSON operators to extract or filter specific Google group information associated with roles, though it may contain NULL values as not all roles necessarily have Google group mappings."
roles,gmail_required,tinyint(1),YES,,,,,,,3.0,0.0,"The gmail_required column in the roles table is a boolean flag (tinyint(1)) that indicates whether a Gmail account is mandatory for users assigned to this particular role. When writing queries, this column can be used to filter or check which roles require Gmail authentication, helping enforce email-based access control policies within the RBAC system."
roles_lang,role_lang_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The role_lang_id column serves as the primary key in the roles_lang table, uniquely identifying each language-specific role translation record. When writing SQL queries, use this column for precise record selection or when joining with related tables that reference specific role translations."
roles_lang,role_id,int,NO,,,,,,,10.0,0.0,"The role_id column in the roles_lang table serves as a foreign key reference to link language-specific translations with their corresponding base role records. This required integer field enables queries to join role translations with the main roles table, making it essential for retrieving localized role information across different languages."
roles_lang,lang_id,varchar(10),YES,,,,,,10.0,,,"The lang_id column in the roles_lang table stores language identifiers (like 'en', 'es', 'fr') as variable-length strings up to 10 characters, indicating which language each role translation corresponds to. This column is optional (nullable) and is typically used in WHERE clauses or JOINs to filter or retrieve role information for specific languages."
roles_lang,l_name,varchar(255),NO,,,,,,255.0,,,"The `l_name` column in the roles_lang table stores the localized (translated) name of a role in different languages, using a variable-length string format with a maximum of 255 characters. Since this field is marked as NOT NULL, every role translation record must include a localized name value, making it a mandatory field for maintaining role translations across different languages."
root_employee_role_request,root_employee_role_request_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The root_employee_role_request_id is the primary key column that uniquely identifies each employee role change request in the root_employee_role_request table. When writing SQL queries, use this column for joining with related tables or filtering specific role change requests, particularly when tracking workflow configurations for employee role transitions."
root_employee_role_request,task_type_defaults_id,int,NO,MUL,,,task_type_defaults,task_type_id,,10.0,0.0,"The task_type_defaults_id column in the root_employee_role_request table is a required foreign key that references the task type configuration settings for each employee role change request. This column enables the system to associate specific task type parameters and workflow settings with each role change request, ensuring proper task management and workflow execution based on the employee's requested role."
root_employee_role_request,employee_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The employee_id column in the root_employee_role_request table is a required integer field that references an employee's record from the users table. This column serves as a foreign key to identify which employee is associated with a specific role change request, making it essential for filtering and joining operations when tracking role-based workflow changes."
root_employee_role_request,date,datetime,NO,,,,,,,,,"The 'date' column in the root_employee_role_request table stores the timestamp when an employee role change request was created or submitted. This non-nullable datetime field is essential for tracking and ordering role change requests chronologically, making it useful for filtering requests by time period or analyzing request patterns over time."
root_employee_role_request,evaluated,tinyint(1),YES,,,0,,,,3.0,0.0,"The 'evaluated' column in the root_employee_role_request table is a boolean flag (tinyint(1)) that indicates whether an employee's role change request has been assessed or reviewed. When writing SQL queries, you can use this column to filter requests based on their evaluation status (0 for pending/not evaluated, 1 for evaluated), making it useful for tracking which role change requests still need review or have already been processed."
root_employee_role_request,comment,text,YES,,,,,,65535.0,,,"The 'comment' column in the root_employee_role_request table stores optional text notes or explanations related to employee role change requests. This free-form text field can be used to document reasons for the role change, special considerations, or any additional context about the request, making it useful for filtering or reporting on role changes with specific annotations."
root_message,root_message_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The root_message_id column serves as the primary key in the root_message table, uniquely identifying each direct message conversation between users. This integer field is required (non-nullable) and can be used to join or filter message-related queries, particularly when tracking message threads or retrieving specific conversations between users."
root_message,recipient_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The recipient_id column in the root_message table is a required integer field that identifies the user who receives the message, linking to the primary key in the users table through a foreign key relationship. This column is indexed (MUL) to optimize queries that filter or join based on message recipients, making it efficient to retrieve all messages sent to a specific user."
root_message,sender_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The sender_id column in the root_message table is a required integer field that identifies which user sent the message, linking to the primary key in the users table through a foreign key relationship. This column is indexed (MUL) to optimize queries that filter or join based on the message sender, making it efficient to retrieve all messages from a specific user or analyze messaging patterns by sender."
root_message,message,text,NO,,,,,,65535.0,,,The 'message' column in the root_message table stores the actual text content of direct messages sent between users. This required (non-nullable) text field contains the complete message body and should be referenced when querying for message content or performing full-text searches across user communications.
root_message,created_at,datetime,NO,,,,,,,,,"The created_at column in the root_message table records the exact date and time when each direct message was sent, stored as a datetime value. This non-nullable field is essential for message chronology and can be used in SQL queries for filtering messages by time periods, sorting conversations chronologically, or analyzing messaging patterns between users."
root_message,read_time,datetime,YES,,,,,,,,,"The read_time column in the root_message table records the timestamp when a recipient first opens or reads a direct message. This optional datetime field can be used to track message read status and calculate message read rates, where NULL values indicate unread messages."
root_message,is_notice,int,YES,,,0,,,,10.0,0.0,"The `is_notice` column in the `root_message` table is an integer flag that indicates whether a message is a system notice (1) or a regular user-to-user message (0). When querying messages, you can use this column to filter or distinguish between standard communications and system-generated notices or announcements."
root_message,subject,text,YES,,,,,,65535.0,,,"The 'subject' column in the root_message table stores the optional topic or title of a direct message conversation between users. When writing SQL queries, this text field can be used to search, filter, or group message threads by their subject matter, though its nullable property means some messages may not have a subject line."
root_message,expiration,datetime,YES,,,,,,,,,"The 'expiration' column in the root_message table stores the date and time when a direct message is set to expire or become inaccessible. When querying messages, you can use this column to filter out expired messages by comparing it against the current timestamp (e.g., WHERE expiration > NOW() OR expiration IS NULL) to show only active messages."
root_resources,root_resource_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The root_resource_id column serves as the primary key in the root_resources table, uniquely identifying each system resource record with an integer value. When writing SQL queries, use this column for precise record selection, joining operations where root-level resources are needed, or when establishing relationships with any dependent tables that reference these fundamental system resources."
root_resources,category,int,YES,,,,,,,10.0,0.0,"The 'category' column in the root_resources table is an optional integer field that classifies system resources into distinct groups or types. This column can be used in SQL queries to filter or group resources by their categorical designation, making it useful for organizing and retrieving related system resources together."
root_resources,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the root_resources table is a required integer field that identifies the user associated with each system resource. When writing queries, this column can be used to filter or group resource configurations by specific users, though note that it's not defined as a foreign key despite potentially referencing users."
root_resources,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the root_resources table is a non-nullable timestamp field that automatically records when a system resource record was first created, using CURRENT_TIMESTAMP as its default value. This column is useful for tracking resource creation history and can be used in SQL queries for temporal filtering, auditing, or sorting resources by their creation date."
root_resources,last_updated,timestamp,NO,,,,,,,,,"The `last_updated` column in the `root_resources` table is a required timestamp field that tracks when each system resource record was most recently modified. When writing queries, this column can be used for temporal filtering or sorting to identify recent changes, and should always be included in INSERT statements or updated automatically through triggers since it cannot be null."
root_resources,status,int,YES,,,,,,,10.0,0.0,"The 'status' column in the root_resources table is an integer field that indicates the current operational state of a system resource. When writing queries, this column can be used to filter or group resources based on their status values (e.g., WHERE status = 1 for active resources), with NULL values being permitted to indicate resources with an undetermined state."
root_resources,archive,tinyint,NO,,,,,,,3.0,0.0,"The 'archive' column in the root_resources table is a required boolean flag (stored as tinyint) that indicates whether a system resource has been archived. When writing queries, use this column to filter active resources (where archive = 0) from archived ones (where archive = 1), helping maintain data organization without permanently deleting records."
root_resources,title_en,text,NO,,,,,,65535.0,,,"The title_en column in the root_resources table stores the English-language title or name of system resources as text values, and it must always contain a value (non-nullable). When writing SQL queries, use this column to search, filter, or display the English titles of fundamental system resources, such as in SELECT statements or WHERE clauses for title-based filtering."
root_resources,title_fr,text,NO,,,,,,65535.0,,,"The title_fr column in the root_resources table stores the French language title or name of system resources as non-nullable text. This column should be used when querying or displaying resource titles specifically in French language contexts, and must always contain a value as NULL is not permitted."
root_resources,content_en,text,NO,,,,,,65535.0,,,"The content_en column in the root_resources table stores the English-language content or description of system resources as non-nullable text. This column should be used when querying for or displaying English resource descriptions, and since it's required (non-nullable), any INSERT operations must include an English content value."
root_resources,content_fr,text,NO,,,,,,65535.0,,,"The content_fr column in the root_resources table stores the French-language content or description of system resources, ensuring multilingual support for the system's base-level configurations. This required (non-nullable) text field should be used when querying or displaying French-specific resource content, and it's commonly paired with queries that need to present resource information to French-speaking users or systems."
root_scheduling,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the root_scheduling table, uniquely identifying each employee work assignment or rotation record. When writing queries, this column is essential for joining with related tables like employee_daily_stats and can be used to uniquely reference specific scheduling records."
root_scheduling,employee_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The employee_id column in the root_scheduling table serves as a foreign key that links to the users table, identifying which employee is assigned to each work schedule or rotation. This mandatory integer field is indexed (MUL) to optimize joins and lookups, making it efficient to query employee-related scheduling information and connect to performance metrics in the employee_daily_stats table."
root_scheduling,start_time,datetime,NO,MUL,,,,,,,,"The start_time column in the root_scheduling table stores the exact date and time when an employee's work assignment or rotation begins, using a datetime format. This non-nullable field is indexed (MUL) for optimized querying and is essential for temporal analysis of work schedules, often used in WHERE clauses or JOIN conditions when analyzing employee scheduling patterns or calculating shift durations."
root_scheduling,end_time,datetime,NO,MUL,,,,,,,,"The end_time column in the root_scheduling table stores the datetime when an employee's work assignment or rotation period concludes, and it is a required field (non-nullable) with a multi-column index (MUL). When writing SQL queries, this column can be used to filter or join records based on schedule completion times, and it's commonly used in combination with other temporal conditions to analyze work periods or generate reports about employee scheduling patterns."
root_scheduling,adjusted_start_time,datetime,NO,MUL,,,,,,,,"The adjusted_start_time column in the root_scheduling table stores the actual beginning timestamp of an employee's work assignment or rotation, accounting for any schedule modifications. This non-nullable datetime field is frequently used in queries to filter or join scheduling records based on temporal conditions, and its indexed nature (MUL) makes it efficient for range-based searches and temporal analysis of employee work patterns."
root_scheduling,adjusted_end_time,datetime,NO,MUL,,,,,,,,"The adjusted_end_time column in the root_scheduling table stores the final, potentially modified completion time for an employee's work assignment or rotation, represented as a datetime value. This non-nullable field is indexed (MUL) for efficient querying and can be used to calculate shift durations, verify schedule completion times, or analyze schedule adjustments when compared to the original end time."
root_scheduling,comment,varchar(255),YES,,,,,,255.0,,,"The 'comment' column in the root_scheduling table stores optional text notes (up to 255 characters) related to specific employee work assignments or rotations. This field can be used to record important scheduling remarks, special instructions, or explanatory notes about the assignment, and since it's nullable, it can be left empty when no additional comments are needed."
root_scheduling,po_location_id,int,YES,,,,,,,10.0,0.0,"The po_location_id column in the root_scheduling table represents the physical location or post where an employee is scheduled to work. This optional integer field helps track and organize work assignments by specific locations, allowing queries to filter or group schedules based on where employees are stationed."
route_details,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column in the route_details table serves as the primary key, uniquely identifying each route assignment record with an auto-incrementing integer value. This column is essential for referencing specific route assignments in SQL queries and establishing relationships with other tables in the delivery management system."
route_details,delivery_date,date,NO,MUL,,,,,,,,"The delivery_date column in the route_details table represents the scheduled date when a delivery route is to be executed, stored in a standard date format (YYYY-MM-DD). This column is frequently used for filtering and grouping route assignments by date, and its non-nullable nature ensures that every route detail record has a specific delivery date assigned, making it essential for scheduling and reporting queries."
route_details,route_id,int,NO,MUL,,,routes,route_id,,10.0,0.0,"The route_id column in the route_details table is a required integer field that serves as a foreign key reference to identify specific routes. This column is used to link route execution details with their parent route definitions, making it essential for queries that need to join or filter route-specific information, such as finding all droppoints or drivers associated with a particular route."
route_details,droppoint_id,int,NO,MUL,,,droppoints,droppoint_id,,10.0,0.0,"The droppoint_id column in the route_details table is a required integer field that references specific delivery locations or stops within a route. This column serves as a foreign key linking to the droppoints table, allowing queries to join and retrieve detailed information about each delivery location associated with a route assignment."
route_details,stopover_id,int,NO,,,,,,,10.0,0.0,"The stopover_id column in the route_details table is a required integer field that identifies specific stopover points within a route assignment. This column helps track the sequence and details of individual stops that drivers need to make during their delivery routes, making it useful in queries that need to analyze or filter specific stopovers within route assignments."
route_details,driver_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The driver_id column in the route_details table is a foreign key that references the ID of the driver (from the users table) who is assigned to handle a specific route. This column enables queries to link route assignments with driver information, allowing for analysis of driver assignments and performance tracking, though it can be null if a route hasn't been assigned to a driver yet."
route_details,status,tinyint,NO,,,0,,,,3.0,0.0,"The 'status' column in the route_details table is a required tinyint field that tracks the current state of a route assignment using numeric codes (e.g., 0 might represent 'pending', 1 for 'in progress', etc.). When writing SQL queries, this column can be used to filter or group route assignments based on their operational status, making it useful for monitoring route execution and generating status-based reports."
route_details,number_of_boxes,int,NO,,,0,,,,10.0,0.0,"The number_of_boxes column in the route_details table is a required integer field that tracks the total quantity of boxes or packages assigned to a specific route delivery. This column helps monitor delivery volume and workload for each route assignment, and since it cannot be null and has a default value of 0, it ensures there's always a valid count of boxes for every route detail record."
route_details,created_at,timestamp,NO,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The created_at column in the route_details table automatically records the timestamp when a route assignment record is first created, using CURRENT_TIMESTAMP as the default value. This non-nullable timestamp field is useful for tracking when route assignments were initially made and can be used in SQL queries for temporal analysis, filtering records by creation date, or ordering route assignments chronologically."
route_details,updated_at,timestamp,NO,,,0000-00-00 00:00:00,,,,,,The `updated_at` column in the route_details table is a required timestamp field that records when a route assignment or its details were last modified. This column helps track the chronological history of changes to route assignments and is commonly used in WHERE clauses for filtering records by modification date or in ORDER BY clauses to sort records based on their last update time.
route_details,completed_at,timestamp,NO,,,0000-00-00 00:00:00,,,,,,"The completed_at column in the route_details table records the exact date and time when a specific route assignment was finished by the driver, using a timestamp format. This non-nullable field is essential for tracking route completion times and can be used in SQL queries to analyze delivery performance, filter completed routes, or calculate route duration metrics."
route_details,support_notified,tinyint,NO,,,0,,,,3.0,0.0,"The `support_notified` column in the route_details table is a boolean flag (stored as a tinyint) that indicates whether support staff has been notified about any issues or updates regarding this specific route assignment. When querying this column, use 1 to filter for routes where support has been notified and 0 for routes where support has not been notified, for example: `WHERE support_notified = 1`."
route_details,violation_check,tinyint,NO,,,0,,,,3.0,0.0,"The violation_check column in the route_details table is a required boolean flag (tinyint) that indicates whether a route assignment has any violations or compliance issues. When writing SQL queries, this column can be used to filter or identify route assignments with violations (1) or without violations (0), making it useful for compliance reporting and route quality monitoring."
route_details,image_url,varchar(255),YES,,,,,,255.0,,,"The `image_url` column in the route_details table stores URL references to images associated with route deliveries or assignments, such as delivery confirmation photos or route documentation, as a variable-length string up to 255 characters. Since this field is nullable, not all route details records are required to have an associated image, making it suitable for optional photo documentation of deliveries or route-related activities."
route_details,notes,varchar(255),YES,,,,,,255.0,,,"The 'notes' column in the route_details table allows for optional text comments or annotations (up to 255 characters) related to specific route assignments and their execution. This field can be used to store important remarks, special instructions, or any relevant observations about the route, driver, or delivery that might be useful for operational purposes."
routes,route_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The route_id column serves as the primary key in the routes table, uniquely identifying each transportation route in the system. When writing SQL queries, this column can be used to join with the route_details table for accessing detailed route information, and since it's non-nullable, you can rely on it always having a valid integer value."
routes,warehouse_id,int,NO,,,,,,,10.0,0.0,"The warehouse_id column in the routes table is a required integer field that identifies which warehouse a transportation route is associated with. This column helps track and organize routes based on their originating or destination warehouse, enabling queries to filter or group transportation routes by specific warehouse locations."
routes,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the routes table stores the descriptive name or title of a transportation route as a variable-length string (up to 255 characters). This column can be used in SQL queries to search for, filter, or display human-readable route identifiers, such as ""Downtown Express"" or ""Airport Shuttle Line"", and since it's nullable, some routes may not have a name assigned."
routes,owner,varchar(255),YES,,,,,,255.0,,,"The `owner` column in the routes table stores the name or identifier of the entity (such as a company, agency, or organization) responsible for managing or operating a specific transportation route. When writing queries, this column can be used to filter or group routes by their operating authority, though its nullable property means some routes might not have an assigned owner."
routes,vehicule,varchar(255),YES,,,,,,255.0,,,"The 'vehicule' column in the routes table stores the type or name of the vehicle used for a specific transportation route (e.g., ""bus"", ""train"", ""ferry""). This optional (nullable) text field can contain up to 255 characters and helps identify the mode of transport associated with each route entry."
routes,priority_order,float,YES,,,0,,,,12.0,,"The priority_order column in the routes table is a floating-point number that indicates the relative importance or sequence of transportation routes, with lower values typically representing higher priority. This optional field can be used in SQL queries to sort or filter routes based on their operational priority, making it useful for queries that need to organize routes in a specific hierarchical order."
routes,departure_time,time,NO,,,,,,,,,"The departure_time column in the routes table stores the scheduled starting time of a transportation route in a standard time format (HH:MM:SS). This required field is essential for queries involving route scheduling and can be used to filter or sort routes based on their departure times, making it particularly useful for operations like finding routes departing within specific time windows or organizing routes chronologically."
routes,dow,int,NO,,,1,,,,10.0,0.0,"The 'dow' column in the routes table is a non-nullable integer field that represents the day of the week when a transportation route operates, likely using values 1-7 (where 1 typically represents Sunday or Monday, depending on the system). This field is essential for filtering and organizing routes based on their operational schedule, making it useful in queries that need to identify routes available on specific days."
routes,color,varchar(25),YES,,,#42bff4,,,25.0,,,"The 'color' column in the routes table stores the visual color identifier for a transportation route using a varchar format that can accommodate color codes or names up to 25 characters. This optional field (as indicated by being nullable) typically contains hex color codes (like #42bff4) or color names, which can be used for displaying routes on maps or in user interfaces."
routes,enable_for_billing,int,YES,,,1,,,,10.0,0.0,"The enable_for_billing column in the routes table is a binary flag (stored as an integer) that indicates whether a transportation route is eligible for billing operations. This column can be used in WHERE clauses to filter routes that should be included in billing calculations or reports (WHERE enable_for_billing = 1), making it useful for financial queries and billing-related operations."
routes,emptybin_route,int,YES,,,0,,,,10.0,0.0,"The emptybin_route column in the routes table is an optional integer field that likely indicates whether a transportation route is designated for empty bin collection or handling (where 0 typically represents ""no"" and other values represent ""yes""). This field can be used in WHERE clauses or JOIN conditions to filter or identify routes specifically associated with empty bin operations, making it useful for queries that need to analyze or report on empty bin collection patterns."
routes,channel,tinyint,YES,,,0,,,,3.0,0.0,"The 'channel' column in the routes table is a tinyint field that likely represents a categorization or type indicator for different transportation channels or modes of transport. When writing queries, this column can be used to filter or group routes based on their transportation channel type (e.g., 0 might represent road transport, 1 for rail, etc.), though since it's nullable, queries should handle NULL values appropriately."
routing_jobs,routing_job_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The routing_job_id is the primary key identifier for each unique routing job record in the routing_jobs table, serving as a crucial reference point for linking orders, drop instances, and routing simulations together. This non-nullable integer column should be used in JOIN operations when connecting to related tables and in WHERE clauses when filtering for specific routing jobs."
routing_jobs,delivery_date,date,NO,MUL,,,,,,,,"The delivery_date column in the routing_jobs table represents the scheduled date when deliveries associated with this routing job are planned to occur. This indexed date field is mandatory (non-nullable) and is commonly used to filter or group routing jobs by their delivery timeframes, making it essential for queries that analyze routing operations within specific date ranges."
routing_jobs,lat,"decimal(11,8)",NO,,,,,,,11.0,8.0,"The 'lat' column in the routing_jobs table stores the latitude coordinate as a high-precision decimal number (11 digits total, 8 after decimal point) representing the geographical position for routing operations. This non-nullable field is essential for spatial calculations and mapping in routing simulations, and should be used in conjunction with longitude coordinates when querying location-based data or performing geographic calculations."
routing_jobs,lng,"decimal(11,8)",NO,,,,,,,11.0,8.0,"The 'lng' column in the routing_jobs table stores the longitude coordinate as a high-precision decimal number (11 digits total, 8 after decimal point) representing the geographic location associated with the routing job. This non-nullable coordinate value is essential for spatial operations and mapping functions within the routing system, and should be used in conjunction with latitude when querying for location-based routing data."
routing_jobs,order_id,int,YES,MUL,,,orders,order_id,,10.0,0.0,"The order_id column in the routing_jobs table is a foreign key that references the ID of an order being processed in the routing system. When writing SQL queries, this column can be used to join routing_jobs with the orders table to access order-specific details or to filter routing jobs based on specific order criteria."
routing_jobs,drop_instance_id,int,YES,MUL,,,drop_instance,drop_instance_id,,10.0,0.0,"The drop_instance_id column in the routing_jobs table is a foreign key that references a specific drop instance associated with a routing job. When writing SQL queries, this column can be used to join with the drop instances table to access detailed information about the delivery drop point, and since it's nullable, LEFT JOIN operations should be considered when complete data sets are needed regardless of drop instance association."
routing_jobs,simulation,tinyint,YES,,,0,,,,3.0,0.0,"The 'simulation' column in the routing_jobs table is a tinyint flag that indicates whether a routing job record represents a simulation (1) or a real routing operation (0). When writing SQL queries, this column can be used to filter or distinguish between simulated and actual routing jobs, making it particularly useful for analyzing or separating test scenarios from production routing operations."
routing_jobs,status,"enum('Unassigned','Assigned')",YES,,,Unassigned,,,10.0,,,"The 'status' column in the routing_jobs table is an enumerated field that indicates whether a routing job has been assigned, accepting only two possible values: 'Unassigned' or 'Assigned'. When writing SQL queries, this column can be used to filter or group routing jobs based on their assignment status, with NULL values being permitted, and 'Unassigned' serving as the default value."
routing_jobs,service_time,int,NO,,,,,,,10.0,0.0,"The service_time column in the routing_jobs table represents the estimated or required time (in seconds) to complete service at a particular routing stop or location. This required integer value is essential for routing simulations and scheduling calculations, helping determine the total duration of routes and ensuring accurate time windows for deliveries or service operations."
routing_jobs,start_time,time,NO,,,,,,,,,"The start_time column in the routing_jobs table represents the scheduled beginning time of a routing operation, stored in a time format (HH:MM:SS). This required field is essential for temporal sequencing of routing operations and can be used in SQL queries to filter, sort, or analyze routing jobs based on their start times, such as finding jobs that begin within specific time windows or ordering jobs chronologically."
routing_jobs,end_time,time,NO,,,,,,,,,"The end_time column in the routing_jobs table stores the scheduled completion time for a routing operation in time format (HH:MM:SS). This required field is crucial for tracking when routing jobs are expected to finish and can be used in queries to analyze job durations, schedule overlaps, or filter routing operations based on their completion times."
routing_jobs,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the routing_jobs table stores descriptive labels or identifiers for routing job records as variable-length strings up to 255 characters. This optional field (nullable) can be used in SQL queries to search, filter, or identify specific routing jobs by their human-readable names, making it useful for queries that need to present or filter routing operations in a user-friendly way."
routing_jobs,address,varchar(255),YES,,,,,,255.0,,,"The 'address' column in the routing_jobs table stores the delivery or service location address as a text string (up to 255 characters) associated with each routing job. This column can be used in SQL queries to filter, group, or analyze routing jobs by their destination addresses, though it's worth noting that the field is nullable, meaning some routing jobs might not have an address specified."
routing_jobs,comment,varchar(255),YES,,,,,,255.0,,,"The 'comment' column in the routing_jobs table stores optional text notes or remarks (up to 255 characters) related to specific routing job operations. This field can be used in SQL queries to search for or filter routing jobs based on specific annotations or to include relevant notes when retrieving routing job information, though being nullable means it may not always contain data."
routing_jobs,phone,varchar(64),YES,,,,,,64.0,,,"The 'phone' column in the routing_jobs table stores contact phone numbers (up to 64 characters) associated with routing operations, likely for communication purposes during delivery or pickup. This optional field (nullable) can be used in SQL queries to filter or retrieve routing jobs based on specific phone numbers, or to join with other contact-related information in the routing system."
routing_jobs,box_to_pickup,int,YES,,,,,,,10.0,0.0,"The `box_to_pickup` column in the routing_jobs table stores the number of boxes or containers that need to be collected during a routing operation. This integer value helps in capacity planning and resource allocation for routing jobs, allowing the system to determine the pickup requirements for each routing operation. Since the field is nullable, it can be left empty in cases where box pickup information is not relevant or not yet determined for a particular routing job."
routing_jobs,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the routing_jobs table is a required integer field that categorizes the different kinds of routing operations being performed. When writing SQL queries, this column can be used to filter or group routing jobs based on their operational classification, helping to distinguish between different routing scenarios or processing methods."
routing_jobs,asset_nbr,int,NO,,,,,,,10.0,0.0,"The asset_nbr column in the routing_jobs table is a required integer field that identifies the specific asset (likely a vehicle or equipment) assigned to handle the routing job. When writing queries, this column can be used to filter or group routing jobs by their assigned assets, helping track which assets are handling specific routes or orders in the routing system."
routing_jobs,volume,int,NO,,,,,,,10.0,0.0,"The 'volume' column in the routing_jobs table stores the total volumetric measurement (as an integer) for a routing job, representing the combined space requirements of all items being routed. This non-nullable field is essential for capacity planning and route optimization calculations, helping ensure that vehicle capacity constraints are properly considered during routing simulations."
routing_jobs,push_to_vroom,tinyint,YES,,,1,,,,3.0,0.0,The `push_to_vroom` column in the routing_jobs table is a boolean flag (stored as tinyint) that indicates whether a routing job should be processed by the VROOM routing engine. This column helps control the flow of routing operations by determining which jobs need to be sent to the VROOM system for route optimization and simulation.
routing_jobs,route_id,int,YES,MUL,,,,,,10.0,0.0,"The `route_id` column in the routing_jobs table is a foreign key that references a specific route within the routing simulation system. This integer field can be used to join with related route tables to access detailed route information, and since it's nullable, it indicates that a routing job may exist before a specific route is assigned."
routing_jobs,vroom_priority,tinyint,NO,,,0,,,,3.0,0.0,"The `vroom_priority` column in the routing_jobs table is a required tinyint field that specifies the priority level for routing job processing within the VROOM routing engine. When writing queries, use this column to filter or sort routing jobs based on their processing priority, where lower values typically indicate higher priority tasks in the routing simulation workflow."
routing_jobs,routing_simulation_id,int,YES,MUL,,,routing_simulations,routing_simulation_id,,10.0,0.0,"The routing_simulation_id column in the routing_jobs table is a foreign key that references a specific routing simulation associated with each routing job. This column can be used in JOIN operations to connect routing jobs with their corresponding simulation data, and since it's nullable, some routing jobs may not have an associated simulation (indicated by NULL values)."
routing_jobs,routing_simulation_route_id,int,YES,MUL,,,routing_simulation_routes,routing_simulation_route_id,,10.0,0.0,"The routing_simulation_route_id column in the routing_jobs table is a foreign key that references a specific route within a routing simulation. This column can be used to join routing_jobs with the corresponding routing simulation route data, enabling queries to access detailed route information associated with each routing job, though the column can be null in cases where a routing job hasn't been assigned to a specific simulation route yet."
routing_simulation_routes,routing_simulation_route_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The routing_simulation_route_id column serves as the primary key identifier for individual routes within the routing_simulation_routes table, using auto-incrementing integers to ensure each route has a unique identifier. When writing SQL queries, use this column to uniquely identify specific routes or to join with other tables that reference individual simulation routes."
routing_simulation_routes,date,date,NO,,,,,,,,,The 'date' column in the routing_simulation_routes table represents the specific calendar date for which a route was generated in the simulation. This required field is essential for temporal analysis of routing patterns and can be used to filter or group routes by their planned execution date.
routing_simulation_routes,vehicle_id,int,NO,,,,,,,10.0,0.0,"The vehicle_id column in the routing_simulation_routes table is a required integer field that identifies which vehicle was assigned to perform this specific route in the simulation. When querying route data, this column can be used to filter or group results by vehicle, allowing analysis of route assignments and vehicle utilization patterns across different simulation scenarios."
routing_simulation_routes,routing_simulation_id,int,NO,MUL,,,routing_simulations,routing_simulation_id,,10.0,0.0,"The routing_simulation_id column in the routing_simulation_routes table is a required foreign key that links each route to its parent routing simulation run. This column enables queries to filter or join routes based on their associated simulation, making it essential for analyzing routes within the context of specific simulation scenarios."
routing_simulation_routes,geometry_string,text,YES,,,,,,65535.0,,,"The geometry_string column stores the geographical path of a route in text format, typically containing encoded coordinate sequences or a standardized geometry representation (like WKT or GeoJSON). This column can be used in spatial queries or for visualizing the exact path taken by vehicles in routing simulations, though you may need to cast or parse the text into a proper geometry type for spatial operations."
routing_simulation_routes,departure_time,time,YES,,,00:00:00,,,,,,"The departure_time column in routing_simulation_routes stores the scheduled start time of a route in HH:MM:SS format, representing when a vehicle is planned to begin its journey. When querying this column, you can use time comparison operators (e.g., <, >, BETWEEN) to filter routes based on their departure times, and it can be NULL if the departure time hasn't been determined yet."
routing_simulation_stops,routing_simulation_stop_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The routing_simulation_stop_id is the primary key column in the routing_simulation_stops table, uniquely identifying each stop or location within routing simulations. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference specific stops within a routing simulation (e.g., SELECT * FROM routing_simulation_stops WHERE routing_simulation_stop_id = 123)."
routing_simulation_stops,routing_job_id,int,NO,MUL,,,routing_jobs,routing_job_id,,10.0,0.0,"The routing_job_id column in the routing_simulation_stops table is a required integer field that serves as a foreign key linking each stop to its parent routing simulation job in the routing_jobs table. This column is frequently used in JOIN operations to connect stop data with its corresponding routing job details, and it's indexed (MUL) to optimize these join operations and related queries."
routing_simulation_stops,arrival_sec,int,YES,,,0,,,,10.0,0.0,"The arrival_sec column in the routing_simulation_stops table represents the arrival time at each stop in seconds, measured from the start of the routing simulation. This nullable integer field is used to track when vehicles are expected to reach or have reached specific stops within a routing job, enabling analysis of timing and scheduling within the simulation."
routing_simulation_stops,start_sec,int,YES,,,0,,,,10.0,0.0,"The `start_sec` column in the routing_simulation_stops table represents the starting time of a stop in seconds, likely measured from the beginning of the routing simulation or a reference point. This integer field can be used in queries to sequence stops chronologically or calculate time windows between stops, making it valuable for analyzing stop timing within routing simulations."
routing_simulation_stops,end_sec,int,YES,,,0,,,,10.0,0.0,"The `end_sec` column in the routing_simulation_stops table represents the ending time (in seconds) for a particular stop within a routing simulation. This integer value helps track when a stop's activities are scheduled to complete, which is essential for calculating route timing and sequencing in the simulation."
routing_simulation_stops,order,int,YES,,,,,,,10.0,0.0,"The 'order' column in the routing_simulation_stops table represents the sequence number or position of each stop within its associated routing job. This integer field helps determine the order in which stops should be visited during a route simulation, with NULL values potentially indicating stops that haven't been sequenced yet."
routing_simulation_stops,status,int,YES,,,0,,,,10.0,0.0,"The 'status' column in the routing_simulation_stops table is an integer field that indicates the current state or condition of each stop within a routing simulation. This column can be used in WHERE clauses to filter stops based on their status (e.g., pending, completed, failed) and is commonly used to track the progress of individual stops within a routing job."
routing_simulation_stops,type,int,NO,,,,,,,10.0,0.0,"The 'type' column in the routing_simulation_stops table is a required integer field that categorizes the nature or purpose of each stop within a routing simulation (e.g., pickup, delivery, or waypoint). When writing SQL queries, this column can be used to filter or group stops based on their operational type, helping to analyze different kinds of stops within routing jobs."
routing_simulation_stops,distance_to_next,int,YES,,,,,,,10.0,0.0,"The distance_to_next column represents the distance (likely in meters or similar unit) from the current stop to the next sequential stop in the routing simulation. This nullable integer field is useful for calculating total route distances and analyzing the spacing between consecutive stops within a routing job, making it valuable for queries that need to evaluate route metrics or optimize stop sequences."
routing_simulation_stops,user_id,int,YES,,,,,,,10.0,0.0,"The user_id column in the routing_simulation_stops table identifies the user associated with each routing stop location. This optional field (nullable) can be used to filter or group stops by user, and is particularly useful when querying stops across multiple users or when analyzing routing patterns for specific users."
routing_simulation_stops,time_to_next,int,YES,,,0,,,,10.0,0.0,"The `time_to_next` column in the routing_simulation_stops table represents the estimated travel time (in seconds) from the current stop to the next sequential stop in the routing simulation. This optional integer field can be used in SQL queries to calculate total route durations or analyze time gaps between consecutive stops, with NULL values potentially indicating final stops in a route where there is no ""next"" destination."
routing_simulation_stops,address,varchar(255),YES,,,,,,255.0,,,"The 'address' column in the routing_simulation_stops table stores the street address or location description for each stop in a routing simulation, with a maximum length of 255 characters. This optional field (nullable) helps identify the physical location of each stop within a routing job, making it useful for queries that need to filter, group, or analyze stops based on their geographical addresses."
routing_simulation_stops,depot_id,int,YES,,,,,,,10.0,0.0,"The depot_id column in the routing_simulation_stops table identifies the depot or warehouse facility associated with a particular stop in a routing simulation. This optional integer field can be used in SQL queries to filter or group stops by their associated depot, enabling analysis of route patterns and stop distributions across different depot locations."
routing_simulation_stops,scheduled_datetime,datetime,YES,,,0000-00-00 00:00:00,,,,,,"The scheduled_datetime column in the routing_simulation_stops table represents the planned date and time when a vehicle is expected to arrive at a particular stop within a routing simulation. This nullable datetime field helps track the temporal aspects of route planning, allowing queries to analyze stop scheduling, calculate time windows, and evaluate routing efficiency across different simulation scenarios."
routing_simulation_stops,distance_from_previous,int,YES,,,,,,,10.0,0.0,The distance_from_previous column in routing_simulation_stops represents the distance (likely in meters or similar units) between the current stop and the previous stop in the routing sequence. This nullable integer field is useful for calculating total route distances and analyzing the spacing between consecutive stops in a routing simulation job.
routing_simulation_stops,time_from_previous,int,YES,,,,,,,10.0,0.0,"The time_from_previous column represents the travel time (in seconds) required to reach this stop from the previous stop in the routing sequence. This nullable integer field is useful when calculating cumulative travel times or analyzing time gaps between consecutive stops in a routing simulation, and can be used in queries to evaluate route timing and efficiency."
routing_simulation_stops,actual_time_from_previous,int,YES,,,,,,,10.0,0.0,The actual_time_from_previous column in the routing_simulation_stops table represents the actual time (in seconds) it took to travel from the previous stop to the current stop in a routing simulation. This nullable integer field is useful for comparing planned versus actual travel times between consecutive stops and can be used in queries to analyze route efficiency or identify delays in the routing sequence.
routing_simulation_stops,return_distance,int,YES,,,,,,,10.0,0.0,"The return_distance column in routing_simulation_stops represents the distance (likely in meters or similar unit) from this stop back to the origin or depot location. This optional integer field is useful when calculating total route distances or analyzing return trips in routing simulations, and can be used in queries to filter or aggregate stops based on their return journey lengths."
routing_simulations,routing_simulation_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The routing_simulation_id column is the primary key in the routing_simulations table, uniquely identifying each simulation run. This integer field serves as a crucial linking field, referenced by child tables routing_jobs and routing_simulation_routes, making it essential for joining these tables when querying simulation data and its related components."
routing_simulations,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the routing_simulations table stores a descriptive label or identifier (up to 255 characters) for each routing simulation run. This optional field helps users and systems identify specific simulation configurations, making it useful in SELECT queries for filtering or displaying meaningful simulation names, such as ""Rush Hour Traffic Simulation"" or ""Weekend Route Optimization."""
routing_simulations,description,text,YES,,,,,,65535.0,,,"The `description` column in the routing_simulations table stores free-form text descriptions of individual routing simulation runs, providing context about the simulation's purpose or specific configuration details. This optional text field can be used in SQL queries to search for or filter simulations based on their documented characteristics, making it useful for queries that need to find simulations with specific descriptive attributes."
routing_simulations,date,date,YES,,,,,,,,,"The 'date' column in the routing_simulations table records the calendar date when a particular routing simulation was run or scheduled. This nullable date field can be used to filter, sort, or group routing simulations by their execution date, making it useful for analyzing simulation patterns over time or retrieving simulations from specific date ranges."
routing_simulations,depot_address,varchar(255),YES,,,,,,255.0,,,"The depot_address column in the routing_simulations table stores the starting location or base address (up to 255 characters) from which routes in a simulation begin or end. When writing SQL queries, this column can be used to filter or group routing simulations by their depot locations, though it may contain NULL values if the depot address hasn't been specified for a particular simulation."
routing_simulations,depot_lat,"decimal(11,8)",YES,,,,,,,11.0,8.0,"The depot_lat column in the routing_simulations table stores the latitude coordinate (in decimal degrees) of the depot or starting location for a routing simulation, with precision up to 8 decimal places. This geographical coordinate is used as a reference point for calculating routes and can be used in spatial queries or distance calculations, though it's optional as indicated by its nullable status."
routing_simulations,depot_lng,"decimal(11,8)",YES,,,,,,,11.0,8.0,"The depot_lng column in the routing_simulations table stores the longitude coordinate (in decimal degrees) of the depot or starting location for a routing simulation, with precision up to 8 decimal places. This geographical coordinate is used as a reference point for calculating routes and can be used in spatial queries or distance calculations, though it can be null if the depot location is not specified."
rpc_group_activity,rpc_group_activity_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The rpc_group_activity_id is the primary key identifier for each unique activity or operation performed on groups of shipments or pallets in the RPC system. When writing SQL queries, use this column to uniquely identify specific activities, join with related tables, or filter activity records, as it provides a guaranteed unique reference point for each activity entry in the system."
rpc_group_activity,type,tinyint,YES,MUL,,,,,,3.0,0.0,"The 'type' column in the rpc_group_activity table is a tinyint field that categorizes different kinds of activities or operations performed on groups of RPC shipments or pallets. When writing SQL queries, this column can be used to filter or group activities by their specific type (e.g., SELECT * FROM rpc_group_activity WHERE type = specific_activity_code), and its MUL key type indicates it's indexed for improved query performance."
rpc_group_activity,supplier_id,int,YES,MUL,,,suppliers,supplier_id,,10.0,0.0,"The supplier_id column in the rpc_group_activity table is a foreign key that identifies which supplier is associated with a specific RPC group activity or operation. When writing queries, this column can be used to filter or join with the suppliers table to analyze activities by specific suppliers or to gather supplier-related information for RPC operations."
rpc_group_activity,tote_format_id,int,YES,MUL,,,tote_formats,tote_format_id,,10.0,0.0,"The tote_format_id column in the rpc_group_activity table is a foreign key that references the specific type or format of tote container used in a group shipment activity. When querying, this column can be used to join with a tote formats reference table to obtain detailed specifications of the container type, or to filter/group activities based on the tote format used in the operation."
rpc_group_activity,expected_quantity,int,YES,,,,,,,10.0,0.0,"The expected_quantity column represents the anticipated number of items (such as pallets or totes) that should be included in a specific RPC group activity. This integer value helps track and validate whether the actual received quantities match what was initially planned or requested, making it useful in queries that analyze discrepancies between expected and actual shipment quantities."
rpc_group_activity,confirmed_quantity,int,YES,,,,,,,10.0,0.0,"The confirmed_quantity column in rpc_group_activity stores the actual or verified number of items (such as pallets or totes) involved in a specific RPC group activity. This integer field can be used in SQL queries to track or calculate the confirmed quantities of shipments, compare against requested quantities, or aggregate total confirmed volumes across different activities or suppliers."
rpc_group_activity,rpc_shipment_request_id,int,YES,MUL,,,rpc_shipment_request,rpc_shipment_request_id,,10.0,0.0,"The rpc_shipment_request_id column in the rpc_group_activity table serves as a foreign key that links activities to specific shipment requests within the RPC system. When querying, this column can be used to filter or join activities based on their associated shipment requests, allowing you to track and analyze operations performed on specific groups of shipments."
rpc_group_activity,supplier_pallet_per_delivery_id,int,YES,MUL,,,supplier_pallet_per_delivery,supplier_pallet_per_delivery_id,,10.0,0.0,"The supplier_pallet_per_delivery_id column in the rpc_group_activity table serves as a foreign key that links to specific pallet delivery records from suppliers within the RPC system. When querying, this column can be used to join with related tables to access detailed information about supplier pallet deliveries or to filter activities based on specific delivery instances."
rpc_group_activity,delivery_date,date,YES,,,,,,,,,"The delivery_date column in the rpc_group_activity table represents the date when a group of shipments or pallets was delivered within the RPC system. When writing queries, this date field can be used to filter or analyze delivery timing patterns, and since it's nullable, be sure to handle NULL values appropriately when performing date-based operations or comparisons."
rpc_group_activity,estimate_delivery_time,tinyint,YES,,,,,,,3.0,0.0,"The estimate_delivery_time column in the rpc_group_activity table represents the estimated time (in hours) required for delivery of RPC shipments or pallets. This optional field (nullable) uses a tinyint data type to store small numeric values, making it useful in queries that need to filter, sort, or analyze delivery timeframes for shipment groups."
rpc_group_activity,shipping_type,tinyint,YES,,,,,,,3.0,0.0,"The shipping_type column in rpc_group_activity is a tinyint field that categorizes the method or type of shipping used for groups of RPC shipments or pallets. When writing queries, this column can be used to filter or group activities based on different shipping methods, with the tinyint values likely corresponding to predefined shipping type codes in the system."
rpc_group_activity,user_id,int,YES,MUL,,2,users,user_id,,10.0,0.0,"The user_id column in the rpc_group_activity table is an integer field that identifies which user performed a specific activity or operation on a group of shipments or pallets. This column is indexed (MUL) to optimize queries joining with the users table, and being nullable indicates that some activities might be system-generated or performed without a specific user association."
rpc_group_activity,created_at,datetime,YES,MUL,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the rpc_group_activity table stores the timestamp when a specific activity or operation was initially recorded in the RPC system, automatically populated with the current timestamp when a record is created. This datetime field can be used in SQL queries for temporal analysis, filtering activities by date ranges, or tracking the chronological sequence of RPC-related operations, and its MUL key type indicates it's part of a multi-column index to optimize date-based queries."
rpc_group_activity,comment,varchar(250),YES,,,,,,250.0,,,"The 'comment' column in the rpc_group_activity table stores optional text notes (up to 250 characters) that provide additional context or explanations about specific RPC group activities or operations. When writing SQL queries, this column can be used to search for or filter activities based on their associated comments, though be aware that the field may contain NULL values since it's not required."
rpc_invoices,rpc_invoice_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The rpc_invoice_id column serves as the primary key for the rpc_invoices table, uniquely identifying each repair and maintenance invoice record. This non-nullable integer field is essential for joining to related tables, particularly rpc_invoices_detail, where it's commonly used to link header information with specific line items within each invoice."
rpc_invoices,supplier_id,int,NO,MUL,,,suppliers,supplier_id,,10.0,0.0,"The supplier_id column in the rpc_invoices table is a required foreign key that identifies which supplier/vendor performed the repair or maintenance service for this invoice. When writing queries, join this column with the suppliers table to access vendor details, and use it to filter or group repair invoices by specific suppliers."
rpc_invoices,billing_from,date,NO,,,,,,,,,"The billing_from column in rpc_invoices represents the start date of the billing period for a repair or maintenance invoice. When writing SQL queries, use this required date field to filter or analyze invoices based on when the billing period began, which is particularly useful for reporting and accounting purposes."
rpc_invoices,billing_to,date,NO,,,,,,,,,"The billing_to column in rpc_invoices represents the end date or due date of the billing period for repair and maintenance services provided by suppliers. When writing SQL queries, this required date field can be used to filter invoices by their billing period end dates or to analyze payment timelines, such as ""SELECT * FROM rpc_invoices WHERE billing_to <= CURRENT_DATE"" to find invoices whose billing periods have ended."
rpc_invoices,rpc_handling_fee,"float(7,4) unsigned",NO,,,,,,,7.0,4.0,"The rpc_handling_fee column represents the handling fee percentage (stored as a decimal between 0 and 999.9999) applied to repair and maintenance invoices. When writing SQL queries, this non-nullable field can be used to calculate the actual handling fee amount by multiplying it with the invoice total, or to filter/analyze invoices based on their handling fee rates."
rpc_invoices,rpc_consignment_fee,"float(7,4) unsigned",NO,,,,,,,7.0,4.0,"The rpc_consignment_fee column stores the consignment fee percentage (as a decimal between 0 and 999.9999) applied to repair and maintenance invoices, with precision to 4 decimal places. This fee represents the commission or handling charge associated with the repair transaction and should be used in calculations to determine the total cost of repair services, typically by multiplying it with the base invoice amount."
rpc_invoices,updated_at,timestamp,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The updated_at column in rpc_invoices automatically records the timestamp when an invoice record was last modified, defaulting to CURRENT_TIMESTAMP. This column is useful for tracking the chronological history of invoice changes and can be used in SQL queries for auditing purposes or filtering invoices based on their last update time."
rpc_invoices,updated_by,int,YES,MUL,,2,users,user_id,,10.0,0.0,"The `updated_by` column in the `rpc_invoices` table is a foreign key that references the user who last modified the repair/maintenance invoice record. When writing queries that need to track or filter by who made changes to invoice records, join this column with the users table to access the modifier's details."
rpc_invoices,status,tinyint,YES,,,0,,,,3.0,0.0,"The 'status' column in the rpc_invoices table is a tinyint field that indicates the current state of a repair/maintenance invoice, likely using predefined status codes (e.g., 0 for draft, 1 for approved, etc.). When querying repair invoices, this column can be used to filter or group invoices based on their processing status, making it useful for workflow management and reporting purposes."
rpc_invoices,total_due_consignment_fee,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The total_due_consignment_fee column represents the total consignment fee amount due for a repair/maintenance invoice, stored as a decimal number with up to 10 digits and 2 decimal places. This required field defaults to 0.00 and should be included in queries when calculating total invoice amounts or analyzing consignment-related costs."
rpc_invoices,total_due_handling_fee,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The total_due_handling_fee column represents the handling fee amount charged on a repair/maintenance invoice, stored as a decimal number with up to 10 digits total and 2 decimal places. This required field defaults to 0.00 and should be included when calculating the total invoice amount or analyzing service charges applied to repair transactions."
rpc_invoices_detail,rpc_invoice_detail_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The rpc_invoice_detail_id column serves as the primary key for the rpc_invoices_detail table, uniquely identifying each individual line item or specification entry within an RPC invoice. When writing SQL queries, use this column for precise record selection, joining with related tables, or tracking specific line items, but note that as a system-generated identifier, it should not be manually assigned or modified."
rpc_invoices_detail,rpc_invoice_id,int,NO,MUL,,,rpc_invoices,rpc_invoice_id,,10.0,0.0,"The rpc_invoice_id column serves as a foreign key in the rpc_invoices_detail table, linking each detail record to its parent invoice in the rpc_invoices table. When writing SQL queries, use this column to join with the main rpc_invoices table to access invoice header information or to filter/group detail records by their associated invoice."
rpc_invoices_detail,rpc_type_id,int,NO,MUL,,,tote_formats,tote_format_id,,10.0,0.0,"The rpc_type_id column in the rpc_invoices_detail table is a required foreign key that references specific RPC container types from the tote_formats table. When writing SQL queries, use this column to join with tote_formats table to access container specifications, or to filter/group invoice line items by specific RPC container types."
rpc_invoices_detail,total_taken,int,YES,,,0,,,,10.0,0.0,"The `total_taken` column in the rpc_invoices_detail table represents the quantity of Reusable Plastic Containers (RPCs) that were taken or utilized during a specific invoice line item transaction. When querying this column, you can use it to calculate container usage metrics or aggregate total container movements, with NULL values indicating potentially incomplete or unrecorded quantities."
rpc_invoices_detail,total_returned,int,YES,,,0,,,,10.0,0.0,"The total_returned column in rpc_invoices_detail represents the quantity of Reusable Plastic Containers (RPCs) that were returned by customers for a specific invoice line item. When querying this nullable integer field, it can be used to track return quantities or calculate return rates, and a NULL value typically indicates that no returns have been recorded for that line item."
rpc_pallet_quantity,rpc_pallet_qty_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The rpc_pallet_qty_id column serves as the primary key identifier for each unique RPC pallet quantity record in the rpc_pallet_quantity table. When writing SQL queries, use this column for precise record identification, joining to related tables, or filtering specific pallet quantity entries (e.g., WHERE rpc_pallet_qty_id = X)."
rpc_pallet_quantity,rpc_orders_id,int,NO,,,,,,,10.0,0.0,"The rpc_orders_id column in the rpc_pallet_quantity table serves as a reference to associated RPC (Reusable Plastic Container) orders, storing integer values that cannot be null. When writing SQL queries, this column can be used to join with related order tables or filter pallet quantity records for specific RPC orders."
rpc_pallet_quantity,tote_format_id,int,NO,,,0,,,,10.0,0.0,"The tote_format_id column in the rpc_pallet_quantity table is a required integer field that identifies the specific format or configuration of RPC totes being tracked. When writing SQL queries, this column can be used to filter or group pallet quantities by different tote formats, and since it's non-nullable, you can rely on it always having a value."
rpc_pallet_quantity,expected_quantity,int,NO,,,0,,,,10.0,0.0,"The expected_quantity column in the rpc_pallet_quantity table stores the anticipated or planned number of RPC pallets as a non-null integer value. This column can be used in SQL queries to compare actual versus planned pallet quantities or to calculate inventory discrepancies, making it essential for inventory planning and reconciliation purposes."
rpc_pallet_quantity,expected_quantity_type,float,NO,,,0,,,,12.0,,"The expected_quantity_type column in the rpc_pallet_quantity table stores floating-point numbers representing the anticipated quantity type or measurement unit for RPC pallets, and it cannot contain NULL values. When writing SQL queries, this column can be used for calculations or comparisons involving expected pallet quantities, such as ""SELECT * FROM rpc_pallet_quantity WHERE expected_quantity_type > 0"" to find records with positive quantity types."
rpc_pallet_quantity,confirmed_quantity,int,NO,,,0,,,,10.0,0.0,"The confirmed_quantity column in the rpc_pallet_quantity table stores the verified count of RPC (Reusable Plastic Container) pallets as a non-null integer value. This column can be used in SQL queries to track actual pallet quantities, perform inventory calculations, or filter records based on specific quantity thresholds."
rpc_pallet_quantity,qty_type_options,json,YES,,,,,,,,,"The qty_type_options column in the rpc_pallet_quantity table stores JSON-formatted data that likely defines different types or categories of quantity measurements for RPC pallets. When querying this column, use JSON operators and functions to extract or filter specific quantity type configurations, and since it's nullable, always include NULL handling in your logic when necessary."
rpc_pallet_quantity,created_by,int,NO,,,0,,,,10.0,0.0,"The `created_by` column in the `rpc_pallet_quantity` table is a required integer field that stores the user ID or identifier of the person who created the pallet quantity record. When writing SQL queries, this column can be used to filter or join with user tables to track who initiated specific RPC pallet inventory entries, and since it's non-nullable, you must always provide a value when inserting new records."
rpc_pallet_quantity,updated_by,int,NO,,,0,,,,10.0,0.0,"The `updated_by` column in the `rpc_pallet_quantity` table stores the user ID (as an integer) of the person who last modified the pallet quantity record, and it is required (non-nullable). When writing queries, this column can be used to track who made changes to pallet quantities or to filter/join with a user table to get information about who performed specific inventory updates."
rpc_pallet_quantity,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the rpc_pallet_quantity table stores the timestamp when each RPC pallet quantity record was initially created, automatically populated with CURRENT_TIMESTAMP when a new row is inserted. When querying this column, it's useful for tracking when inventory changes occurred and can be used for historical analysis or filtering records within specific time periods."
rpc_pallet_quantity,updated_at,datetime,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `rpc_pallet_quantity` table automatically records the timestamp when a pallet quantity record is modified, using the CURRENT_TIMESTAMP value. When writing SQL queries, this column can be used to track the most recent inventory updates or filter records based on when they were last changed, making it valuable for auditing and analyzing RPC pallet inventory changes over time."
rpc_request_orders,rpc_orders_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The rpc_orders_id column serves as the primary key in the rpc_request_orders table, uniquely identifying each RPC request order record with a non-nullable integer value. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific RPC request orders (e.g., WHERE rpc_orders_id = X)."
rpc_request_orders,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the rpc_request_orders table is a required integer field that identifies the supplier or service provider associated with each RPC request. When querying this table, you can use supplier_id to filter or group RPC requests by their respective suppliers, making it useful for analyzing request patterns or performance metrics per supplier."
rpc_request_orders,status,int,NO,,,0,,,,10.0,0.0,"The 'status' column in the rpc_request_orders table is a required integer field that represents the current state of an RPC request order. When writing queries, this column can be used to filter or group RPC requests based on their processing status (e.g., pending, completed, failed), where different integer values likely correspond to specific status states."
rpc_request_orders,delivery_date,date,YES,,,,,,,,,"The delivery_date column in the rpc_request_orders table stores the date when an RPC request was or is expected to be delivered/completed, using a standard date format. This optional field (as indicated by being nullable) can be useful for filtering and analyzing RPC requests by their delivery timeframes, making it valuable for queries that need to track request fulfillment timing or generate delivery-based reports."
rpc_request_orders,type,tinyint,NO,,,0,,,,3.0,0.0,"The 'type' column in the rpc_request_orders table is a required (non-nullable) tinyint field that likely represents a categorization or classification of the RPC request. When querying this column, use numeric values to filter or group RPC requests by their type, with the value 0 appearing to be a significant or default type in the system."
rpc_request_orders,shipping_type,int,NO,,,0,,,,10.0,0.0,"The shipping_type column in the rpc_request_orders table is a required integer field that likely represents different shipping methods or delivery options associated with RPC requests. When querying this column, use integer values to filter or group RPC requests based on their shipping classification, though you'll need to reference system documentation for the specific meaning of each shipping_type value."
rpc_request_orders,tote_format_id,int,NO,,,1,,,,10.0,0.0,"The `tote_format_id` column in the `rpc_request_orders` table is a required integer field that likely references a specific tote or container format used in the RPC request. When querying this table, you can use this column to filter or group RPC requests based on their associated tote format, and since it's non-nullable, you should always include a value when inserting new records."
rpc_request_orders,via_3pl,tinyint,NO,,,0,,,,3.0,0.0,"The `via_3pl` column in the `rpc_request_orders` table is a required boolean flag (stored as a tinyint) that indicates whether the RPC request was routed through a third-party logistics (3PL) provider. When querying this column, use 1 to filter for requests handled by 3PL providers and 0 for direct requests, as in `WHERE via_3pl = 1` to find all third-party handled RPC calls."
rpc_request_orders,name_3pl,varchar(150),YES,,,,,,150.0,,,"The `name_3pl` column in the `rpc_request_orders` table stores the name or identifier of third-party logistics (3PL) providers involved in the RPC request, with a maximum length of 150 characters. When querying this column, it can be used to filter or group RPC requests by specific 3PL providers, though the field is optional as indicated by its nullable property."
rpc_request_orders,order_request_id,int,YES,,,,,,,10.0,0.0,"The order_request_id column in the rpc_request_orders table is an integer field that stores a reference identifier for individual RPC request orders. This column can be used to uniquely identify and query specific RPC requests, making it useful for filtering, joining, or tracking specific remote procedure calls in the system, though it's worth noting that since it's nullable and not marked as a key, it may not be the primary identifier for the table."
rpc_request_orders,supplier_forecast_orders_id,int,YES,,,,,,,10.0,0.0,"The supplier_forecast_orders_id column in the rpc_request_orders table is an integer field that likely references forecast orders associated with specific suppliers. When writing SQL queries, this column can be used to filter or join RPC requests with related supplier forecast data, though its nullable nature means you should handle NULL values appropriately in your queries."
rpc_request_orders,estimate_delivery_time,int,NO,,,0,,,,10.0,0.0,"The estimate_delivery_time column in the rpc_request_orders table stores the expected processing or completion time for RPC requests as a non-nullable integer value. When writing SQL queries, this column can be used to filter, sort, or analyze RPC requests based on their estimated delivery times, making it useful for performance monitoring and SLA tracking."
rpc_request_orders,rpc_shipment_request_id,int,YES,,,,,,,10.0,0.0,"The `rpc_shipment_request_id` column in the `rpc_request_orders` table stores integer identifiers that link to specific RPC shipment requests. When writing SQL queries, this nullable column can be used to filter or join related shipment request data, making it useful for tracking and analyzing specific RPC transactions related to shipping operations."
rpc_request_orders,is_linked_sfid_cancelled,int,NO,,,0,,,,10.0,0.0,"The `is_linked_sfid_cancelled` column in the `rpc_request_orders` table is a boolean flag stored as an integer (0 or 1) that indicates whether a linked Salesforce ID has been cancelled. When querying this column, use it as a filter condition to distinguish between active and cancelled Salesforce ID associations, where 0 typically represents active/not cancelled and 1 represents cancelled status."
rpc_request_orders,is_new_sfid_linked,tinyint,YES,,,0,,,,3.0,0.0,"The `is_new_sfid_linked` column in the `rpc_request_orders` table is a boolean flag (stored as a tinyint) that indicates whether a new Salesforce ID has been linked to this RPC request order. When querying this column, use it as a binary condition (0 or 1) to filter or check if RPC requests have new Salesforce ID associations, for example: `WHERE is_new_sfid_linked = 1` to find requests with newly linked Salesforce IDs."
rpc_request_orders,display_warning_message,tinyint,YES,,,0,,,,3.0,0.0,"The `display_warning_message` column in the `rpc_request_orders` table is a boolean flag (stored as a tinyint) that indicates whether a warning message should be shown for a particular RPC request order. When querying this column, use it as a binary condition (where 1 typically means display warning and 0 means don't display warning) to filter or identify RPC requests that require warning notifications."
rpc_request_orders,created_at,datetime,NO,,,,,,,,,"The created_at column in the rpc_request_orders table stores the timestamp when each RPC request order was initially created, using a datetime format that captures both the date and time of creation. This non-nullable field is essential for temporal tracking and auditing of RPC requests, making it useful for queries that need to filter, sort, or analyze RPC requests based on when they occurred."
rpc_request_orders,created_by,int,NO,,,1,,,,10.0,0.0,"The `created_by` column in the `rpc_request_orders` table is a required integer field that stores the identifier of the user or system entity that initiated the RPC request. When writing SQL queries, this column can be used to filter or join with user tables to track who created specific RPC requests, and since it's non-nullable, you should always include a value when inserting new records."
rpc_request_orders,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `rpc_request_orders` table stores the timestamp of when an RPC request order record was last modified, using a datetime format. When writing SQL queries, this column can be used to track changes over time, filter records based on modification dates, or sort RPC requests chronologically, though its nullable nature means some records might not have an update timestamp."
rpc_request_orders,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `rpc_request_orders` table stores the identifier (integer) of the user or system agent who last modified the RPC request order record. When writing queries, this column can be used to track who made changes to RPC request records and can be joined with a users or agents table to get more details about who performed the update."
rpc_request_orders,actual_delivery_date,datetime,YES,,,,,,,,,"The actual_delivery_date column in the rpc_request_orders table stores the timestamp when an RPC request was successfully delivered or completed. This nullable datetime field can be used to track when remote procedure calls actually finished their execution, making it useful for monitoring service level agreements (SLAs), calculating response times, or filtering completed requests in queries."
rpc_shipment_request,rpc_shipment_request_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The rpc_shipment_request_id is the primary key identifier for each unique shipment request in the RPC system, serving as the main reference point for tracking individual container shipments. This integer column should be used in JOIN operations when connecting shipment requests to related activities, supplier information, or user details, and it's commonly referenced in WHERE clauses when querying specific shipment requests."
rpc_shipment_request,supplier_id,int,YES,MUL,,,suppliers,supplier_id,,10.0,0.0,"The supplier_id column in the rpc_shipment_request table is a foreign key that references the suppliers table, identifying which vendor is associated with a particular RPC shipment request. When writing queries, this column can be used to join with the suppliers table to access detailed vendor information or to filter/group shipment requests by specific suppliers."
rpc_shipment_request,tote_format_id,int,YES,MUL,,,tote_formats,tote_format_id,,10.0,0.0,"The tote_format_id column in the rpc_shipment_request table is a foreign key that references container specifications from the tote_formats table, indicating which type of reusable plastic container is being requested for a shipment. When writing queries, this column can be used to join with the tote_formats table to access detailed container specifications or to filter shipment requests by specific container types."
rpc_shipment_request,quantity,int,YES,,,,,,,10.0,0.0,"The 'quantity' column in the rpc_shipment_request table represents the number of Reusable Plastic Containers (RPCs) requested in a specific shipment. When writing SQL queries, this integer field can be used for aggregating total container volumes, filtering shipment sizes, or calculating capacity requirements, though it can contain NULL values if the quantity is not yet specified."
rpc_shipment_request,delivery_date,date,YES,,,,,,,,,"The delivery_date column in the rpc_shipment_request table stores the expected or scheduled date when an RPC shipment should be delivered to its destination. This date field can be used in SQL queries to filter, sort, or analyze shipment timelines, and being nullable means some shipment requests might not have a delivery date assigned yet."
rpc_shipment_request,estimate_delivery_time,tinyint,YES,,,,,,,3.0,0.0,"The estimate_delivery_time column in rpc_shipment_request stores a small integer value representing the estimated time (likely in hours or days) for a shipment to be delivered within the RPC system. This optional field helps in delivery planning and scheduling, allowing queries to filter or sort shipment requests based on their expected delivery duration."
rpc_shipment_request,shipping_type,tinyint,YES,,,,,,,3.0,0.0,"The shipping_type column in rpc_shipment_request is a tinyint field that categorizes the method or type of shipment being requested for RPC containers. When writing queries, this column can be used to filter or group shipment requests based on their shipping classification, with NULL values being permitted if the shipping type hasn't been specified."
rpc_shipment_request,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the rpc_shipment_request table stores the timestamp when a shipment request was initially created in the RPC system, automatically populated with the current date and time. This datetime field is useful for filtering and sorting shipment requests by creation date, enabling queries to track request patterns over time or find requests created within specific date ranges."
rpc_shipment_request,user_id,int,YES,MUL,,2,users,user_id,,10.0,0.0,"The user_id column in the rpc_shipment_request table is a foreign key that references the user who initiated or is responsible for the shipment request in the RPC system. When writing queries, this column can be joined with the users table to retrieve information about the requesting user, and since it's nullable, remember to account for possible NULL values when filtering or joining on this field."
rpc_suppliers_settings,rpc_suppliers_settings_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The rpc_suppliers_settings_id column serves as the primary key identifier for each unique supplier configuration record in the rpc_suppliers_settings table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific supplier settings (e.g., WHERE rpc_suppliers_settings_id = X)."
rpc_suppliers_settings,supplier_id,int,YES,MUL,,,suppliers,supplier_id,,10.0,0.0,"The supplier_id column in the rpc_suppliers_settings table serves as a foreign key that links each configuration record to a specific supplier in the RPC system. When writing queries, this column can be used to filter or join supplier-specific settings, making it particularly useful for retrieving customized RPC handling preferences for individual suppliers."
rpc_suppliers_settings,tote_format_id,int,YES,MUL,,,tote_formats,tote_format_id,,10.0,0.0,"The tote_format_id column in the rpc_suppliers_settings table is a foreign key that references the specific tote format configuration associated with each supplier's RPC settings. When writing queries, this column can be used to join with a tote formats table to access detailed specifications of the container format, or to filter/group supplier settings based on their preferred tote format configurations."
rpc_suppliers_settings,reserve_quantity,int,YES,,,,,,,10.0,0.0,"The reserve_quantity column in rpc_suppliers_settings represents the minimum number of RPCs (Reusable Plastic Containers) that should be kept in reserve for a specific supplier. This optional integer field helps manage inventory buffer levels, ensuring sufficient container availability for each supplier's operations, and can be used in queries to monitor or enforce minimum stock thresholds."
rpc_suppliers_settings,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the rpc_suppliers_settings table automatically records the timestamp when a supplier configuration record is first created, defaulting to CURRENT_TIMESTAMP. This datetime field is useful for tracking when supplier settings were initially established and can be used in SQL queries for auditing purposes or filtering records based on their creation date."
rpc_suppliers_settings,created_by,int,YES,MUL,,2,users,user_id,,10.0,0.0,"The `created_by` column in the `rpc_suppliers_settings` table is an integer field that stores the user ID of the person who initially created the supplier setting record, serving as a foreign key reference to a user table. When writing queries, this column can be used to join with a users table to track who created specific supplier settings or to filter settings based on their creator, though the field is optional as indicated by its nullable property."
rpc_suppliers_settings,updated_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The updated_at column in the rpc_suppliers_settings table automatically records the timestamp when a supplier's configuration settings are modified, defaulting to CURRENT_TIMESTAMP. This column is useful for tracking the chronological history of supplier setting changes and can be used in SQL queries to filter or sort records based on when they were last updated."
rpc_suppliers_settings,updated_by,int,YES,MUL,,2,users,user_id,,10.0,0.0,"The `updated_by` column in the `rpc_suppliers_settings` table is an integer field that stores the user ID of the person who last modified a supplier's RPC configuration settings. When writing queries, this column can be joined with a users table to track who made changes to supplier settings, and its nullable property allows for cases where the last modifier isn't recorded."
sales_forecast,sales_forecast_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The sales_forecast_id column serves as the primary key in the sales_forecast table, uniquely identifying each sales forecast record. When writing SQL queries, use this column for joining with related tables or filtering specific forecast records, such as ""WHERE sales_forecast_id = 123"" or ""JOIN other_table ON sales_forecast.sales_forecast_id = other_table.sales_forecast_id""."
sales_forecast,date,date,NO,UNI,,,,,,,,"The 'date' column in the sales_forecast table is a mandatory (non-nullable) field with a unique constraint that stores the specific date for each sales forecast entry. This column serves as a temporal identifier for forecast records and can be used to filter, group, or join forecast data by specific dates or date ranges, making it essential for time-based analysis and reporting of sales predictions."
sales_forecast,estimated_order,int,YES,,,,,,,10.0,0.0,The estimated_order column in the sales_forecast table represents the predicted number of units expected to be ordered in future sales transactions. This integer field can contain NULL values and is commonly used in forecasting queries to calculate projected inventory needs and revenue estimates.
sales_forecast,estimated_put,int,YES,,,,,,,10.0,0.0,"The estimated_put column in the sales_forecast table represents the predicted number of units expected to be sold in future periods, stored as an integer value. This column can be used in SQL queries to analyze projected sales volumes or compare estimated versus actual sales quantities, and since it's nullable, some forecast records may not have estimated quantities assigned."
sales_forecast,estimated_picks,int,YES,,,,,,,10.0,0.0,"The ""estimated_picks"" column in the sales_forecast table represents the predicted number of items that will be picked from inventory for future sales orders. This integer value helps in inventory planning and warehouse staffing decisions, and being nullable allows for scenarios where pick estimates aren't yet available or applicable."
sales_forecast,estimated_baskets,int,YES,,,,,,,10.0,0.0,"The estimated_baskets column in the sales_forecast table represents the predicted number of shopping baskets or transactions expected in future sales periods. This integer value can be used in SQL queries to analyze expected transaction volumes or to calculate aggregate forecasted metrics, and since it's nullable, queries should handle potential NULL values appropriately when performing calculations."
sales_forecast,estimated_abp,float,YES,,,,,,,12.0,,"The estimated_abp column in the sales_forecast table represents the estimated average base price (ABP) for products or services in future sales projections, stored as a floating-point number. This column can be used in SQL queries to analyze predicted pricing trends or calculate projected revenue by multiplying it with forecasted quantities, and since it's nullable, queries should handle potential NULL values appropriately."
sales_forecast,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the sales_forecast table is a required integer field that stores the ID of the user who created each forecast record. When writing queries, this column can be used to filter or join with user tables to track forecast authorship and is commonly referenced in WHERE clauses or JOIN conditions to analyze forecasts by specific creators."
sales_forecast,created_at,datetime,YES,,,,,,,,,"The created_at column in the sales_forecast table records the timestamp when each forecast record was initially created in the system. This datetime field can be used to track when predictions were made and analyze forecast accuracy over time, making it particularly useful in WHERE clauses for filtering forecasts by creation date or in time-based trend analysis."
sales_stats_aggregated,date,date,NO,PRI,,,,,,,,"The 'date' column in the sales_stats_aggregated table serves as the primary key and represents the specific calendar date for which sales statistics were aggregated. When querying this table, you can use this non-nullable date column for temporal filtering, grouping, or joining with other date-based tables to analyze sales performance trends over time."
sales_stats_aggregated,product_id,int,NO,PRI,,0,,,,10.0,0.0,The product_id column in the sales_stats_aggregated table serves as the primary key and uniquely identifies each product's aggregated sales statistics. This non-nullable integer field can be used to join with other product-related tables and is essential for filtering or grouping sales statistics by specific products.
sales_stats_aggregated,quantity_sold,int,NO,,,0,,,,10.0,0.0,"The quantity_sold column in the sales_stats_aggregated table represents the total number of units sold for a given aggregation period or grouping. This non-nullable integer field is essential for analyzing sales volume and can be used in aggregate functions (SUM, AVG) or filtering conditions to track and compare sales quantities across different dimensions."
sales_stats_aggregated,was_featured,int,NO,,,0,,,,10.0,0.0,"The ""was_featured"" column in the sales_stats_aggregated table is a binary integer flag (0 or 1) that indicates whether a product or item was featured in promotional activities during the sales period. When writing SQL queries, you can use this column to filter or group sales statistics based on whether items were featured (was_featured = 1) or not featured (was_featured = 0) in promotions."
sales_stats_aggregated,availability_percentage_on_marketplace,float,NO,,,0,,,,12.0,,"The availability_percentage_on_marketplace column in the sales_stats_aggregated table stores the percentage of time (as a decimal value) that products were available for purchase on the marketplace platform. This non-nullable float column is essential for analyzing product visibility and can be used in queries to filter or aggregate records based on product availability metrics, with values typically ranging from 0.0 to 100.0."
sales_stats_aggregated,default_retail_price,float,NO,,,0,,,,12.0,,"The default_retail_price column in the sales_stats_aggregated table stores the standard retail price (as a floating-point number) for products before any discounts or adjustments are applied. This non-nullable field is essential for price analysis and margin calculations, and can be used in SQL queries to compare against actual selling prices or to calculate discount percentages."
sales_stats_aggregated,retail_price_on_that_day,float,NO,,,0,,,,12.0,,"The retail_price_on_that_day column in the sales_stats_aggregated table stores the floating-point value representing the product's retail price at the time of sale. This non-nullable field is essential for historical price analysis and can be used in calculations involving price trends, margins, or price-based comparisons across different time periods."
sales_stats_aggregated,nb_basket_with_this_product_by_default,int,NO,,,0,,,,10.0,0.0,"The `nb_basket_with_this_product_by_default` column in the sales_stats_aggregated table stores the count of shopping baskets where a specific product was included as a default item. This non-nullable integer column is useful for analyzing how frequently products appear as default selections in customer orders, which can be valuable for understanding standard purchase patterns and product bundling effectiveness."
sales_stats_aggregated,record_created_on,datetime,NO,,,,,,,,,"The record_created_on column in the sales_stats_aggregated table stores the timestamp indicating when each aggregated sales statistics record was created in the system. This non-nullable datetime field is useful for temporal analysis and data freshness tracking, allowing queries to filter or sort aggregated sales data based on when the statistics were computed."
saved_query,saved_query_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The saved_query_id column serves as the primary key for the saved_query table, uniquely identifying each saved database query or search criteria. This non-nullable integer column should be referenced when joining to related tables or when retrieving specific saved queries from the system."
saved_query,name,varchar(200),NO,,,,,,200.0,,,"The 'name' column in the saved_query table stores the user-assigned name or title of a saved database query, with a maximum length of 200 characters. This required field (non-nullable) helps users identify and reference their saved queries, making it a key field for searching and displaying saved queries in user interfaces."
saved_query,query,text,NO,,,,,,65535.0,,,"The 'query' column in the saved_query table stores the actual SQL query text or search criteria that users have saved for future use. This required (non-nullable) text field contains the complete query string that can be executed when the saved query is retrieved, making it a crucial component for implementing reusable database queries."
scheduled_event_coordinators,scheduled_event_coordinators_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The scheduled_event_coordinators_id is the primary key column that uniquely identifies each coordinator-to-event assignment record in the scheduled_event_coordinators junction table. When writing SQL queries, this column can be used to join with other tables or as a reference point for specific coordinator assignments, though in most cases you'll more likely be querying using the foreign key relationships to users and scheduled_events tables."
scheduled_event_coordinators,scheduled_events_id,int,NO,MUL,,,scheduled_events,scheduled_events_id,,10.0,0.0,"The scheduled_events_id column in the scheduled_event_coordinators table is a required foreign key that references the primary key in the scheduled_events table, establishing which event a coordinator is assigned to. When writing queries, this column can be used to join with the scheduled_events table to retrieve event details or to filter/group coordinator assignments by specific events."
scheduled_event_coordinators,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the scheduled_event_coordinators table stores the unique identifier of a user who is assigned as a coordinator for a specific event, linking to the primary key in the users table. This column is part of a composite key and is used in JOIN operations to connect coordinator information with user details, making it essential for queries that need to identify which users are coordinating specific events."
scheduled_event_coordinators,archive,tinyint,NO,,,0,,,,3.0,0.0,"The `archive` column in the scheduled_event_coordinators table is a boolean flag (stored as a tinyint) that indicates whether a coordinator's assignment to an event has been archived (1) or is currently active (0). When querying for current coordinator assignments, you should typically include `WHERE archive = 0` to exclude archived records, unless specifically working with historical coordinator assignments."
scheduled_event_drafts,scheduled_event_drafts_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The scheduled_event_drafts_id is the primary key column that uniquely identifies each draft version of a scheduled event in the staging table. This integer column is non-nullable and serves as the main reference point for tracking draft events before they are finalized, allowing for a clear connection between draft versions and their corresponding published events in the scheduled_events table."
scheduled_events,scheduled_events_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The scheduled_events_id column serves as the primary key for the scheduled_events table, uniquely identifying each scheduled event instance in the system. This integer field is commonly used in JOIN operations to link event-specific information across related tables and should be referenced when querying for specific event details or establishing relationships with other event-related components."
scheduled_events,community_events_id,int,YES,MUL,,,community_events,community_events_id,,10.0,0.0,"The community_events_id column in the scheduled_events table serves as a foreign key that links each scheduled event instance to its corresponding community event definition. When writing queries, this column can be used to join with the community_events table to access the base event information, and since it's nullable, LEFT JOIN operations might be necessary to include scheduled events that haven't been associated with a community event yet."
scheduled_events,community_event_subtype_id,int,YES,MUL,,,community_event_sub_types,community_event_subtype_id,,10.0,0.0,"The community_event_subtype_id column in the scheduled_events table is a foreign key that references a more specific categorization or sub-classification of community events. When querying, this column can be used to filter or join with a related event subtypes table to get more detailed information about the event's specific category, with NULL values indicating events that haven't been assigned a subtype."
scheduled_events,community_institution_id,int,YES,MUL,,,community_institutions,community_institution_id,,10.0,0.0,"The community_institution_id column in the scheduled_events table is a foreign key that links each event to its associated community institution, allowing queries to identify which institution is hosting or responsible for a particular event. Since this field is nullable, events can exist without being tied to a specific institution, and the MUL key type indicates this column is indexed to optimize queries that filter or join based on institution."
scheduled_events,scheduled_event_drafts_id,int,YES,MUL,,,scheduled_event_drafts,scheduled_event_drafts_id,,10.0,0.0,"The scheduled_event_drafts_id column in the scheduled_events table is a foreign key that links to a draft version of the event, allowing the system to track and reference preliminary event information before it becomes finalized. This optional relationship (as indicated by being nullable) enables event planners to work on draft versions of events while maintaining the connection to the final scheduled instance, which is particularly useful for event planning workflows and revision tracking."
scheduled_events,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the scheduled_events table stores the descriptive title or name of each community event, allowing for up to 255 characters. This optional field (as indicated by being nullable) helps identify and distinguish different events, making it useful for filtering, sorting, or displaying event information in queries where you need to reference specific events by their names."
scheduled_events,description,text,YES,,,,,,65535.0,,,"The `description` column in the scheduled_events table stores detailed text descriptions of community events, providing important context and information about what will take place. This optional (nullable) text field can be used to search for events by their content or to display comprehensive event details to users, making it valuable for both filtering queries and user-facing event displays."
scheduled_events,internal_notes,text,YES,,,,,,65535.0,,,"The internal_notes column in the scheduled_events table stores private administrative notes and comments about event planning and execution that are only visible to event organizers and staff. This optional text field can be used to record important behind-the-scenes information, such as setup instructions, vendor contacts, or special considerations, making it useful for filtering or searching events with specific internal requirements or planning details."
scheduled_events,status,"enum('published','publish_later','draft','past')",NO,,,,,,13.0,,,"The `status` column in the scheduled_events table is a required field that tracks the current publication state of each event using one of four possible values: 'published' for currently visible events, 'publish_later' for scheduled future publications, 'draft' for events still being edited, and 'past' for historical events. When querying events, this column can be used to filter for specific event states, such as finding all currently published events with `WHERE status = 'published'` or excluding past events with `WHERE status != 'past'`."
scheduled_events,archive,tinyint,YES,,,0,,,,3.0,0.0,"The `archive` column in the scheduled_events table is a boolean flag (stored as tinyint) that indicates whether an event has been archived (1) or is still active (0). This column can be used in WHERE clauses to filter between current and historical events, helping to maintain a clean view of active events while preserving past event records."
scheduled_events,publish_date,date,YES,,,,,,,,,"The publish_date column in the scheduled_events table represents the date when an event was or will be made publicly visible to the community. When querying this column, it can be used to filter events based on their publication timeline or to analyze event promotion patterns, with NULL values indicating events that haven't been published yet."
scheduled_events,publish_time,time,YES,,,,,,,,,"The publish_time column in the scheduled_events table stores the time of day when an event should become publicly visible or active in the system. When writing queries, this time field can be used to filter or sort events based on their publication timing, and since it's nullable, queries should handle cases where the publish time hasn't been set."
scheduled_events,price,int,YES,,,0,,,,10.0,0.0,"The ""price"" column in the scheduled_events table stores the cost of attending an event as a whole number integer value, presumably in the smallest currency unit (e.g., cents). This optional field (nullable) can be used in SQL queries to filter or analyze events based on their cost, with a default value of 0 suggesting that many events might be free of charge."
scheduled_events,max_capacity,int,YES,,,,,,,10.0,0.0,"The max_capacity column in the scheduled_events table represents the maximum number of attendees that can participate in a specific community event. This optional integer field helps enforce attendance limits and can be used in queries to check event availability or determine if an event is at capacity (e.g., WHERE current_attendees < max_capacity)."
scheduled_events,check_in_guests_required,tinyint,YES,,,0,,,,3.0,0.0,"The check_in_guests_required column is a boolean flag (stored as a tinyint) that indicates whether guest check-in is mandatory for a particular scheduled event. When querying this column, use 1 to filter for events requiring guest check-in and 0 for events where check-in is optional, making it useful for identifying events with specific attendance tracking requirements."
scheduled_events,start_date,date,YES,,,,,,,,,"The start_date column in the scheduled_events table stores the calendar date when a community event is scheduled to begin. This date field is optional (nullable) and can be used in queries to filter events by date, find upcoming events, or analyze event scheduling patterns over time."
scheduled_events,start_time,time,YES,,,,,,,,,"The start_time column in the scheduled_events table stores the specific time of day when a community event is scheduled to begin, using a standard time format (HH:MM:SS). When querying this column, it can be used to filter events by their start time or to sort events chronologically within a day, though note that it stores only the time component without date information."
scheduled_events,end_date,date,YES,,,,,,,,,"The end_date column in the scheduled_events table stores the date when a community event is scheduled to conclude. When writing queries involving event timing or duration, this column can be used in date comparisons or range conditions to find events that end on specific dates or within certain time periods, and its nullable property means some events might not have a defined end date."
scheduled_events,end_time,time,YES,,,,,,,,,"The end_time column in the scheduled_events table stores the scheduled conclusion time of a community event in a standard time format (HH:MM:SS). When querying this column, it can be used to find events ending at specific times, filter for events within certain time ranges, or calculate event durations when used in conjunction with the start time."
scheduled_events,checkin_open,tinyint,YES,,,0,,,,3.0,0.0,"The `checkin_open` column in the scheduled_events table is a boolean flag (stored as a tinyint) that indicates whether check-in is currently available for a particular event instance. This column helps control access to event check-in functionality, where a value of 1 typically means check-in is open and 0 means it's closed, making it useful in queries that need to filter or display events based on their check-in status."
scheduled_events,english,tinyint,YES,,,,,,,3.0,0.0,"The 'english' column in the scheduled_events table is a boolean flag (tinyint) indicating whether the event will be conducted in English (1) or not (0). This field helps organizers and participants understand the primary language of communication for the event, which is particularly useful for filtering or organizing events based on language requirements."
scheduled_events,french,tinyint,YES,,,,,,,3.0,0.0,"The 'french' column in the scheduled_events table is a boolean flag (stored as a tinyint) indicating whether the event is conducted in French (1) or not (0). This column helps filter and identify French-language events within the community event system, which is useful for language-specific queries and reporting."
scheduled_events,billingual,tinyint,YES,,,,,,,3.0,0.0,"The ""billingual"" column in the scheduled_events table is a boolean flag (stored as tinyint) indicating whether an event will be conducted in multiple languages. When writing queries, use this column to filter or identify events that offer multilingual support, where 1 typically indicates a bilingual event and 0 indicates a single-language event."
scheduled_events,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the scheduled_events table automatically records the timestamp when each event record is first created in the system, using CURRENT_TIMESTAMP as the default value. This non-nullable timestamp field is useful for tracking event creation history and can be used in SQL queries for auditing purposes or filtering events based on when they were added to the system."
scheduled_events,updated_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the scheduled_events table automatically tracks the last modification timestamp of each event record, using CURRENT_TIMESTAMP to update whenever changes are made. When writing queries, this column is useful for filtering recently modified events, tracking change history, or sorting events by their last update time, but you don't need to explicitly set this value in INSERT or UPDATE statements as it's managed automatically by the database."
scheduled_events,virtual_visit_url,text,YES,,,,,,65535.0,,,"The virtual_visit_url column stores the web link or URL where participants can join virtual events or online meetings associated with a scheduled community event. This optional text field can be used in SQL queries to filter or retrieve events based on their virtual attendance options, such as finding all events with virtual components or gathering meeting links for participant communications."
scheduled_events_lang,scheduled_events_lang_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The scheduled_events_lang_id column serves as the primary key for the scheduled_events_lang table, uniquely identifying each language-specific translation record for scheduled events. When writing SQL queries, use this column for precise record selection, joining with other tables, or maintaining referential integrity, but note that it's primarily an internal identifier and not typically used for business logic queries."
scheduled_events_lang,scheduled_events_id,int,NO,MUL,,,scheduled_events,scheduled_events_id,,10.0,0.0,"The scheduled_events_id column in the scheduled_events_lang table serves as a foreign key that links to the primary key in the main scheduled_events table, establishing a relationship between an event and its translations. When writing SQL queries, use this column to join the scheduled_events_lang table with the scheduled_events table to retrieve or filter multilingual event content, such as ""JOIN scheduled_events ON scheduled_events.id = scheduled_events_lang.scheduled_events_id""."
scheduled_events_lang,l_name,varchar(255),YES,,,,,,255.0,,,"The l_name column in the scheduled_events_lang table stores the localized (translated) name or title of a scheduled event in different languages. When writing SQL queries, this column can be used to retrieve or filter event names in specific languages, typically in conjunction with a language identifier column and the scheduled_events_id to match with the main event record."
scheduled_events_lang,l_description,text,YES,,,,,,65535.0,,,"The l_description column in the scheduled_events_lang table stores the localized (translated) description text for scheduled events in different languages. When writing queries, this column should be joined with scheduled_events using scheduled_events_id to retrieve language-specific event descriptions, and you may need to handle NULL values as descriptions are optional."
scheduled_events_lang,lang_id,varchar(20),NO,,,en,,,20.0,,,"The lang_id column in the scheduled_events_lang table stores the language identifier (e.g., 'en' for English) for each event translation, using a varchar(20) format. This required field is essential for filtering and retrieving event content in specific languages, making it a key component in queries where language-specific event information needs to be accessed."
scheduled_events_lang,l_virtual_visit_url,text,YES,,,,,,65535.0,,,"The l_virtual_visit_url column in the scheduled_events_lang table stores localized URLs for virtual event access in different languages, supporting multilingual virtual event links. When querying this column, you can join it with the scheduled_events table using scheduled_events_id to retrieve language-specific virtual meeting URLs for scheduled events."
scheduled_events_lang,l_virtual_visit_url_billingual,text,YES,,,,,,65535.0,,,"This column stores bilingual virtual visit URLs for scheduled events, providing language-specific links for online access to the event. It's stored as nullable text, allowing flexibility in cases where virtual access isn't applicable, and should be used in conjunction with the language identifier in the scheduled_events_lang table to retrieve the appropriate localized virtual meeting link."
scheduled_product_price_change,scheduled_product_price_change_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The scheduled_product_price_change_id is the primary key column that uniquely identifies each scheduled price change record in the scheduled_product_price_change table. When writing SQL queries, use this column for precise record selection, joining with related tables, or tracking specific price change events (e.g., SELECT * FROM scheduled_product_price_change WHERE scheduled_product_price_change_id = 123)."
scheduled_product_price_change,product_id,int,NO,MUL,,,,,,10.0,0.0,"The product_id column in the scheduled_product_price_change table is a required integer field that serves as a foreign key reference to identify which product's price is being scheduled for change. When writing SQL queries, use this column to join with the products table or to filter/group scheduled price changes for specific products."
scheduled_product_price_change,old_purchasing_price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The old_purchasing_price column stores the current/previous purchasing price of a product before a scheduled price change takes effect, represented as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). When writing SQL queries, this non-nullable column can be used to compare historical purchasing prices or calculate price differentials between old and new prices, making it useful for analyzing price change patterns and cost tracking."
scheduled_product_price_change,new_purchasing_price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The new_purchasing_price column represents the updated cost price (in decimal format with 2 decimal places) that will be applied to a product at a scheduled future time. When writing SQL queries, use this column to filter, compare, or analyze planned changes in product purchasing prices, ensuring to handle the decimal values appropriately (e.g., ""WHERE new_purchasing_price > 100.00"")."
scheduled_product_price_change,purchasing_price_date_of_change,date,NO,MUL,,,,,,,,"The purchasing_price_date_of_change column in the scheduled_product_price_change table specifies the exact date when a product's purchasing price is scheduled to change. When querying this column, you can use date comparisons (e.g., WHERE purchasing_price_date_of_change >= '2023-01-01') to find upcoming or past price changes, and since it's indexed (MUL), it's optimized for filtering and sorting operations."
scheduled_product_price_change,old_selling_price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The old_selling_price column in the scheduled_product_price_change table stores the current/previous selling price of a product before a scheduled price change takes effect, represented as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). This non-nullable field is essential for tracking price history and can be used in SQL queries to calculate price differences or analyze historical pricing patterns."
scheduled_product_price_change,new_selling_price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The new_selling_price column stores the target price value (with 2 decimal places) that a product should be changed to when the scheduled price change takes effect. When writing SQL queries, this column can be used to analyze future price points or calculate price differentials, and since it's non-nullable, you can rely on it always containing a valid decimal value."
scheduled_product_price_change,selling_price_date_of_change,date,NO,MUL,,,,,,,,"The selling_price_date_of_change column in the scheduled_product_price_change table specifies the exact date when a product's price change should take effect. When querying this column, you can use date comparisons (e.g., WHERE selling_price_date_of_change >= '2023-01-01') to find upcoming or past scheduled price changes, and it's indexed (MUL) for efficient date-based searches."
scheduled_product_price_change,old_dp_minimal_price,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The old_dp_minimal_price column stores the previous minimum price of a product before a scheduled price change, represented as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). This non-nullable field is essential for tracking price history and can be used in SQL queries to compare price changes or analyze historical pricing patterns."
scheduled_product_price_change,new_dp_minimal_price,"decimal(10,2)",NO,,,,,,,10.0,2.0,The new_dp_minimal_price column stores the new minimum price (in decimal format with 2 decimal places) that will be applied to a product during a scheduled price change. This column is required (non-nullable) and represents the lowest allowable price point for the product after the scheduled change takes effect.
scheduled_product_price_change,created_at,datetime,NO,,,,,,,,,"The created_at column in the scheduled_product_price_change table records the exact date and time when each price change record was initially created in the system. This non-nullable datetime field is useful for auditing purposes and can be used in SQL queries to filter or sort price change records based on when they were entered into the system, such as finding all price changes created within a specific time period."
scheduled_product_price_change,created_by,int,NO,,,,,,,10.0,0.0,"The `created_by` column in the scheduled_product_price_change table is a required integer field that stores the user ID of the person who created the scheduled price change record. When writing SQL queries, this column can be used to filter or join with user tables to track who initiated specific price change schedules, and since it's non-nullable, you should always include a value when inserting new records."
scheduled_product_price_change,scheduled_product_price_change_status,tinyint(1),NO,,,1,,,,3.0,0.0,"The scheduled_product_price_change_status column is a boolean flag (tinyint(1)) that indicates whether a scheduled price change is active or inactive. When writing SQL queries, use this non-nullable column to filter for active price changes (status = 1) or inactive/cancelled price changes (status = 0), helping to identify which scheduled price modifications should be processed or ignored."
scheduled_sfid_logs,scheduled_sfid_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,
scheduled_sfid_logs,scheduled_sfid_id,int,NO,MUL,,,scheduled_sfids,scheduled_sfid_id,,10.0,0.0,
scheduled_sfid_logs,scheduled_sfid_log_created,datetime,YES,,,,,,,,,
scheduled_sfid_logs,scheduled_sfid_log_created_by,int,NO,MUL,,,users,user_id,,10.0,0.0,
scheduled_sfid_logs,scheduled_sfid_log_previous,int,NO,,,,,,,10.0,0.0,
scheduled_sfid_logs,scheduled_sfid_log_new,int,NO,,,,,,,10.0,0.0,
scheduled_sfids,scheduled_sfid_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,
scheduled_sfids,scheduled_sfid_product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,
scheduled_sfids,scheduled_sfid_created,datetime,YES,,,,,,,,,
scheduled_sfids,scheduled_sfid_created_by,int,NO,MUL,,,users,user_id,,10.0,0.0,
scheduled_sfids,scheduled_sfid_qty,int,YES,,,0,,,,10.0,0.0,
scheduled_sfids,scheduled_sfid_delivery_date,date,YES,MUL,,,,,,,,
sfid_challenges,sfid_challenge_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The sfid_challenge_id is the primary key column in the sfid_challenges table, uniquely identifying each supplier forecast order challenge or dispute record. When writing SQL queries, use this column to join with related tables or to filter specific challenge records, and since it's non-nullable, you can rely on it always having a value."
sfid_challenges,supplier_forecast_orders_id,int,NO,MUL,,,supplier_forecast_orders,supplier_forecast_orders_id,,10.0,0.0,"The supplier_forecast_orders_id column in the sfid_challenges table is a required foreign key that references the specific supplier forecast order being challenged or disputed. When writing queries, use this column to join with the supplier_forecast_orders table to access details about the disputed order, and since it's non-nullable, every challenge record must be associated with a valid forecast order."
sfid_challenges,challenged_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The challenged_by column in the sfid_challenges table stores the user ID of the person who initiated the challenge or dispute against a supplier forecast order. This foreign key column links to the users table and is required (non-nullable), making it essential for tracking who raised each challenge and enabling queries that need to join with user information to display challenger details."
sfid_challenges,challenged_at,datetime,NO,,,,,,,,,"The challenged_at column in the sfid_challenges table stores the exact date and time when a challenge or dispute was initially raised against a supplier forecast order. This non-nullable datetime field is essential for temporal tracking and can be used in SQL queries to filter, sort, or analyze when challenges occurred, such as finding challenges within specific date ranges or determining the most recent challenges."
sfid_challenges,status,"enum('Active','Accepted','Rejected','Countered','Canceled')",YES,,,,,,9.0,,,"The 'status' column in the sfid_challenges table indicates the current state of a supplier forecast order challenge using predefined values: 'Active', 'Accepted', 'Rejected', 'Countered', or 'Canceled'. When querying this column, use it to filter or group challenges based on their resolution status, for example, to find all active challenges or count the number of accepted disputes."
sfid_challenges,response_by,int,YES,MUL,,,users,user_id,,10.0,0.0,"The response_by column in the sfid_challenges table stores the user ID of the person who responded to a supplier forecast order challenge, linking to the users table as a foreign key. This column can be used to join with the users table to get details about the responding user, and being nullable indicates that some challenges may not have received a response yet."
sfid_challenges,response_at,datetime,YES,,,,,,,,,"The `response_at` column in the `sfid_challenges` table stores the timestamp when a responder addressed or replied to a supplier forecast order challenge. This datetime field helps track when disputes were resolved and can be used to analyze response times or filter challenges based on when they were answered, with NULL values indicating challenges that haven't received a response yet."
sfid_challenges,initial_qty,int,NO,,,,,,,10.0,0.0,"The initial_qty column in sfid_challenges stores the original quantity value from the supplier forecast order at the time when the challenge was initiated. This non-nullable integer field is essential for tracking the starting point of quantity-related disputes, allowing comparison between the initial quantity and any proposed changes during the challenge resolution process."
sfid_challenges,initial_price,"decimal(10,6)",NO,,,,,,,10.0,6.0,The initial_price column stores the original price value (with up to 6 decimal places) from the supplier forecast order at the time when the challenge was created. This required field serves as a historical reference point to track price changes during the dispute process and should be included in queries when analyzing the financial impact of challenges or comparing initial versus final prices in dispute resolutions.
sfid_challenges,suggested_qty,int,YES,,,,,,,10.0,0.0,"The suggested_qty column in the sfid_challenges table represents the alternative quantity proposed by the challenger when disputing a supplier forecast order. When writing SQL queries, this column can be used to compare the original forecast quantity against what the challenger believes would be more appropriate, helping to analyze the nature and scale of forecast disputes."
sfid_challenges,suggested_price,"decimal(10,6)",YES,,,,,,,10.0,6.0,"The suggested_price column stores the alternative price proposed by the challenger when disputing a supplier forecast order, represented as a decimal number with up to 6 decimal places for precision. This column can be used in SQL queries to compare the suggested price against the original order price or to analyze price-related disputes, and being nullable indicates that not all challenges necessarily involve price disputes."
sfid_challenges,comment,varchar(255),YES,,,,,,255.0,,,"The 'comment' column in the sfid_challenges table stores optional text explanations (up to 255 characters) that provide context or justification for why a supplier forecast order is being challenged or disputed. When writing queries, this column can be used to search for specific types of challenges using LIKE operators or to include relevant dispute details in result sets, though be aware that the field may contain NULL values since it's not required."
sfid_challenges,initial_reception_cost,float,YES,,,,,,,12.0,,"The initial_reception_cost column stores the original reception cost value that was challenged in a supplier forecast order dispute as a floating-point number. This column is useful when comparing the initially disputed cost against any revised costs, and can be used in calculations or filters to analyze cost-related challenges."
sfid_challenges,initial_price_per_unit,"decimal(10,6)",YES,,,,,,,10.0,6.0,"The initial_price_per_unit column stores the original per-unit price that was challenged in a supplier forecast order dispute, represented as a decimal number with up to 6 decimal places. When querying this column, it's useful for comparing the initially proposed price against any revised prices or for analyzing price-related disputes, and since it's nullable, always consider using NULL handling functions like COALESCE when performing calculations or comparisons."
sfid_challenges,suggested_reception_cost,float,YES,,,,,,,12.0,,"The suggested_reception_cost column in sfid_challenges stores the proposed or recommended cost value (as a floating-point number) that the challenger believes should be associated with receiving the disputed forecast order. This column is optional (nullable) and represents an alternative cost figure that differs from the original forecast order's reception cost, serving as part of the challenge documentation."
sfid_challenges,suggested_price_per_unit,"decimal(10,6)",YES,,,,,,,10.0,6.0,"The suggested_price_per_unit column stores the proposed alternative price per unit that the challenger believes should be applied to the disputed supplier forecast order, expressed as a decimal number with up to 6 decimal places. When writing queries, this column can be used to compare the suggested price against the original price in the supplier_forecast_orders table or to calculate potential cost differences, and since it's nullable, always consider using NULL checks when filtering or aggregating this field."
sfid_quantity_change_log,log,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The ""log"" column serves as the primary key identifier for each quantity change event recorded in the sfid_quantity_change_log table. When writing SQL queries, use this column to uniquely identify specific change log entries or to join with other tables that reference these quantity modifications."
sfid_quantity_change_log,supplier_forecast_orders_id,int,NO,MUL,,,supplier_forecast_orders,supplier_forecast_orders_id,,10.0,0.0,"The supplier_forecast_orders_id column is a foreign key that references the primary key in the supplier_forecast_orders table, establishing a direct link to the specific forecast order that was modified. This non-nullable integer column is essential for tracking which forecast order's quantity was changed, making it a crucial field for audit trail queries and for joining with the supplier_forecast_orders table to access the full forecast details."
sfid_quantity_change_log,created_at,datetime,YES,,,,,,,,,"The created_at column in the sfid_quantity_change_log table records the exact date and time when a quantity change was made to a supplier forecast order. This timestamp field is essential for maintaining an accurate audit trail of modifications and can be used in SQL queries to filter or sort quantity changes by when they occurred, such as finding all changes made within a specific time period or identifying the most recent modifications."
sfid_quantity_change_log,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the sfid_quantity_change_log table is a required foreign key that references the users table, identifying which user made a change to a supplier forecast order quantity. When writing queries, this column can be joined with the users table to retrieve details about who performed specific quantity modifications, making it valuable for audit trail reporting and accountability tracking."
sfid_quantity_change_log,initial_quantity,int,YES,,,,,,,10.0,0.0,"The initial_quantity column stores the original quantity value that existed in the supplier forecast order before a change was made, serving as a baseline for tracking modifications. This integer field helps establish the starting point for quantity changes and enables calculation of the difference between the original and modified quantities, which is essential for audit trail purposes."
sfid_quantity_change_log,new_quantity,int,YES,,,,,,,10.0,0.0,The new_quantity column stores the updated quantity value that was set after a change was made to a supplier forecast order. This integer field represents the resulting quantity after modification and can be used in SQL queries to analyze quantity adjustments over time or compare against previous values to determine the magnitude of changes.
sfid_scheduled_price_changes,scheduled_product_price_change_id,int,NO,PRI,,,,,,10.0,0.0,"The scheduled_product_price_change_id is the primary key column that uniquely identifies each scheduled price change record in the sfid_scheduled_price_changes table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific price change entries."
sfid_scheduled_price_changes,supplier_forecast_orders_id,int,NO,PRI,,,,,,10.0,0.0,"The supplier_forecast_orders_id column serves as the primary key in the sfid_scheduled_price_changes table, uniquely identifying each scheduled price change record. When writing SQL queries, use this column for precise record selection or when joining with related tables that reference scheduled price changes."
signup_contents,signup_contents_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The signup_contents_id column serves as the primary key identifier for each unique record in the signup_contents table, using auto-incrementing integers. This column should be used in WHERE clauses and JOIN conditions when you need to reference specific signup content records or establish relationships with other tables that contain signup-related data."
signup_contents,step,tinyint,NO,,,,,,,3.0,0.0,"The ""step"" column in the signup_contents table is a required numeric field that indicates the sequential order or position of content within a multi-step signup flow. When querying this table, you can use this column to order content chronologically (ORDER BY step) or filter for specific stages of the signup process (WHERE step = X)."
signup_contents,section,varchar(150),YES,,,,,,150.0,,,"The ""section"" column in the signup_contents table is a text field that identifies different segments or areas of the signup/registration flow where specific content is displayed. This column helps organize and categorize content elements (like headings, descriptions, or form labels) by their placement or purpose within the signup experience, making it useful for queries that need to retrieve content for specific parts of the registration process."
signup_contents,context,varchar(64),YES,,,,,,64.0,,,"The `context` column in the signup_contents table is a variable-length string field (up to 64 characters) that likely identifies the specific section or purpose of signup content, such as ""welcome-message"", ""terms-section"", or ""confirmation-page"". When querying signup content, this column can be used to filter or group related content elements that belong to the same contextual area of the signup flow."
signup_contents,design,char(10),YES,,,,,,10.0,,,"The ""design"" column in the signup_contents table is a 10-character string field that likely stores design identifiers or codes that determine the visual layout or theme of signup forms. When querying this column, you can use it to filter or group signup content by specific design variations, though note that it's nullable so you may want to handle NULL values in your queries."
signup_contents,data,json,YES,,,,,,,,,"The 'data' column in the signup_contents table stores JSON-formatted configuration and content elements used in signup flows, which may include form field definitions, validation rules, UI text, and display settings. This flexible JSON structure allows for storing complex, nested data that can be queried and manipulated using JSON operators and functions in SQL queries."
signup_contents,start_at,date,YES,,,,,,,,,"The start_at column in the signup_contents table indicates the date when specific signup flow content or configuration becomes active and available for use. This date field helps manage time-based content changes in registration pages, allowing for scheduled updates to signup flows while maintaining historical records of when different versions were implemented."
signup_contents,end_at,date,YES,,,,,,,,,"The `end_at` column in the signup_contents table specifies the date when a particular signup flow content or configuration should stop being displayed or become inactive. This optional date field helps manage the lifecycle of signup-related content, allowing for time-bound campaigns or temporary registration configurations, and can be used in WHERE clauses to filter for currently active content (e.g., WHERE end_at IS NULL OR end_at >= CURRENT_DATE)."
signup_contents,is_default,tinyint,NO,,,1,,,,3.0,0.0,"The `is_default` column in the signup_contents table is a boolean flag (stored as a tinyint) that indicates whether a particular content or configuration entry represents the default setting for signup flows. When querying this table, you can use this column to filter for default content (WHERE is_default = 1) or to identify non-default, customized content entries (WHERE is_default = 0)."
signup_contents,is_active,tinyint,YES,,,0,,,,3.0,0.0,"The `is_active` column in the signup_contents table is a boolean flag (stored as a tinyint) that indicates whether a particular signup content or configuration item is currently in use or enabled. When writing queries, use this column to filter for active content (is_active = 1) or inactive content (is_active = 0), which helps ensure only enabled signup flow elements are displayed to users."
signup_contents,created_at,date,YES,,,,,,,,,"The created_at column in the signup_contents table records the date when each signup content or configuration entry was initially created in the system. This column can be useful for tracking when specific signup flow content was added, enabling queries to filter or sort content by creation date, and is commonly used in WHERE clauses for date-based filtering (e.g., ""WHERE created_at >= '2023-01-01'"")."
skill_types,skill_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The skill_type_id column serves as the primary key in the skill_types table, uniquely identifying each vehicle-related skill or competency type. When writing SQL queries, use this column to join with daily_vehicle_skill and vehicle_skills tables to access or filter specific skill type classifications, and since it's non-nullable, you can rely on it always having a valid value."
skill_types,name,varchar(64),YES,,,,,,64.0,,,"The 'name' column in the skill_types table stores descriptive labels (up to 64 characters) for different vehicle-related skills or competencies. This column can be used in SQL queries to retrieve or filter specific skill type names, and since it's nullable, some skill type records might not have a name assigned."
skill_types,status,tinyint,YES,,,,,,,3.0,0.0,"The 'status' column in the skill_types table is a tinyint field that indicates whether a particular vehicle-related skill type is currently active or inactive in the system. When writing SQL queries, this column can be used to filter skill types based on their operational status, typically using values like 1 for active and 0 for inactive records."
sku_dedctn_type,sku_dedctn_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The sku_dedctn_type_id column serves as the primary key identifier for different types of SKU deductions in the sku_dedctn_type table, using integer values to uniquely identify each deduction type. When writing SQL queries, use this column to join with other tables that reference specific SKU deduction types or to filter for particular deduction categories."
sku_dedctn_type,sku_dedctn_type_name,varchar(255),NO,,,,,,255.0,,,"The sku_dedctn_type_name column stores descriptive names or labels for different types of SKU deductions, using text values up to 255 characters in length. This required field (non-nullable) can be used in SQL queries to filter, group, or join with other tables when analyzing or reporting on specific categories of inventory adjustments or deductions."
sku_dedctn_type,sku_dedctn_type_desc,text,YES,,,,,,65535.0,,,"The sku_dedctn_type_desc column contains text descriptions explaining different types of SKU deductions or inventory adjustments. When writing SQL queries, this column can be used to filter, group, or display human-readable explanations of why inventory quantities were reduced, such as ""Damaged Goods,"" ""Customer Returns,"" or ""Quality Control Rejections."""
sku_dedctn_type,created,datetime,NO,,,,,,,,,"The 'created' column in the sku_dedctn_type table records the exact date and time when each SKU deduction type record was initially added to the system, stored as a non-nullable datetime value. This timestamp can be useful for auditing purposes or tracking when different deduction categories were established in the system."
sku_dedctn_type,modified,datetime,NO,,,,,,,,,"The 'modified' column in the sku_dedctn_type table records the timestamp of when a SKU deduction type record was last updated, storing this information as a datetime value that cannot be null. This column is useful for tracking the history of changes to deduction type definitions and can be used in SQL queries to filter or sort records based on when they were modified."
sku_dedctn_type,staff_id,int,NO,,,,,,,10.0,0.0,"The staff_id column in the sku_dedctn_type table is a required integer field that identifies the employee who created or is responsible for a particular SKU deduction type. When writing queries, this column can be used to join with staff-related tables to track who defined or manages different deduction categories, and since it's non-nullable, you should always include a valid staff identifier when inserting new records."
slot_type,slot_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The slot_type_id column serves as the primary key identifier for different slot types or categories in the system. When writing SQL queries, use this column to uniquely identify specific slot types or to create joins with other tables that reference slot classifications."
slot_type,slot_type_name,varchar(255),NO,,,,,,255.0,,,The slot_type_name column in the slot_type table stores the descriptive name or label for each type of slot/position as a text string (up to 255 characters). This required field serves as a human-readable identifier for different slot categories and should be referenced when querying or filtering slot-related data to ensure consistent classification across the system.
slot_type,slot_type_desc,text,YES,,,,,,65535.0,,,"The slot_type_desc column stores a textual description of each slot type, providing additional details or explanations about what the slot type represents. This optional (nullable) text field can be used in SQL queries to retrieve human-readable descriptions of slot types, making it useful for reporting, user interfaces, or documentation purposes."
slot_type,created,datetime,NO,,,,,,,,,"The 'created' column in the slot_type table stores the timestamp indicating when each slot type record was initially added to the system, using a datetime format. This non-nullable field is useful for auditing purposes and tracking when different slot classifications were established in the system."
slot_type,modified,datetime,NO,,,,,,,,,"The 'modified' column in the slot_type table stores the timestamp of when a slot type record was last updated, using the datetime format. This non-nullable field is essential for tracking the history of changes to slot type definitions and can be used in SQL queries for auditing purposes or filtering records based on their last modification date."
slot_type,staff_id,int,NO,,,,,,,10.0,0.0,"The staff_id column in the slot_type table is a required integer field that identifies the staff member associated with defining or managing specific slot types. When writing queries, this column can be used to filter or join with other staff-related tables to track who is responsible for different slot type configurations."
slow_routing_day,slow_routing_day_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The slow_routing_day_id column serves as the primary key identifier for each record in the slow_routing_day table, uniquely identifying instances of days marked with slow routing or delivery operations. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific slow routing day entries (e.g., WHERE slow_routing_day_id = X)."
slow_routing_day,date,date,NO,,,,,,,,,"The 'date' column in the slow_routing_day table stores the specific calendar date when routing or delivery operations were identified as slow or problematic. When querying this table, use this non-nullable date column to filter or group slow routing incidents by specific dates or date ranges, such as ""WHERE date BETWEEN '2023-01-01' AND '2023-01-31'"" for monthly analysis."
slow_routing_day,created_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The created_by column in the slow_routing_day table is a required integer field that stores the user ID of the person who marked a day as having slow routing operations. When writing queries, this column can be joined with the users table to get information about who flagged specific slow routing days, and since it's indexed (MUL), it's optimized for such join operations."
slow_routing_day,created_at,datetime,NO,,,,,,,,,"The created_at column in the slow_routing_day table stores the exact timestamp when a slow routing day record was created, using a datetime format. This non-nullable field is essential for temporal analysis of when operational issues were identified and can be used in SQL queries for filtering, sorting, or analyzing the chronological pattern of slow routing incidents."
sms_tickets,sms_ticket_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The sms_ticket_id column serves as the primary key for the sms_tickets table, uniquely identifying each SMS ticket record with a non-nullable integer value. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific SMS ticket records (e.g., WHERE sms_ticket_id = X)."
sms_tickets,user_id,int,YES,,,,,,,10.0,0.0,"The user_id column in the sms_tickets table is an integer field that identifies which user is associated with a particular SMS ticket record. This column can be used in WHERE clauses to filter SMS tickets for specific users or in JOIN operations to connect with user-related tables, though its nullable property suggests that some SMS tickets might not be associated with a user."
sms_tickets,created_at,timestamp,NO,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The created_at column in the sms_tickets table records the exact timestamp when each SMS ticket record was initially created, automatically populated with CURRENT_TIMESTAMP. This timestamp field is mandatory (non-nullable) and can be used for tracking message chronology, filtering records by date/time, or analyzing SMS ticket creation patterns over time."
sms_tickets,phone_number,varchar(255),YES,,,,,,255.0,,,"The phone_number column in the sms_tickets table stores recipient phone numbers for SMS ticket messages in varchar format, allowing up to 255 characters. When querying this column, you can use string comparison operations and pattern matching (e.g., LIKE) to filter or search for specific phone numbers, and since it's nullable, remember to handle NULL values appropriately in your queries."
sms_tickets,content,text,YES,,,,,,65535.0,,,"The 'content' column in the sms_tickets table stores the actual text message body of SMS tickets or notifications, allowing for variable-length message content. When querying this column, you can use text-based operations like LIKE, SUBSTRING, or LENGTH to analyze or filter the message content, and since it's nullable, remember to handle potential NULL values appropriately."
spamtrap,e,varchar(255),NO,PRI,,,,,255.0,,,"The 'e' column in the spamtrap table is a primary key field that stores the actual honeypot email address as a variable-length string (up to 255 characters) and cannot contain null values. When writing SQL queries, this column can be used to uniquely identify specific spam trap addresses and is commonly used in WHERE clauses or JOIN conditions when analyzing spam activity patterns."
split_route_reasons,split_route_reason_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The split_route_reason_id column serves as the primary key identifier for each unique reason why a delivery route might be split into segments. When writing SQL queries, use this column to join with other tables that reference specific split reasons or to uniquely identify individual split reason records in the split_route_reasons table."
split_route_reasons,title_en,varchar(255),NO,,,,,,255.0,,,"The title_en column in the split_route_reasons table stores the English-language description or title of each reason why a delivery route might be split into segments. This required (non-nullable) text field, with a maximum length of 255 characters, serves as a human-readable explanation that can be used in reports, user interfaces, or queries to understand why routes were divided."
split_route_reasons,title_fr,varchar(255),NO,,,,,,255.0,,,"The title_fr column in the split_route_reasons table stores the French-language title or description of each route splitting reason, with a maximum length of 255 characters. This required field (non-nullable) provides French-speaking users with standardized explanations for why delivery routes are divided into segments, ensuring proper localization of the application."
sqlmapfile,data,longblob,YES,,,,,,4294967295.0,,,"The 'data' column in the sqlmapfile table stores the actual binary content of SQL map files as a LONGBLOB data type, which can handle large binary objects up to 4GB in size. When querying this column, be aware that it contains raw binary data that may need to be handled appropriately in application code, and since it's nullable, always check for NULL values when processing the results."
stat_holiday,stat_holiday_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The stat_holiday_id column serves as the primary key for the stat_holiday table, uniquely identifying each statutory holiday record in the system. This auto-incrementing integer field is required (non-nullable) and should be referenced when joining to related tables or filtering specific holiday records in queries."
stat_holiday,holiday_date,date,NO,UNI,,,,,,,,"The holiday_date column in the stat_holiday table stores the calendar date when a statutory holiday occurs, using a standard date format. As a unique, non-nullable field, it serves as a distinct identifier for each holiday record and is essential for querying specific holiday entries and calculating holiday pay in conjunction with the manual_hours table."
stat_holiday,name_fr,varchar(255),NO,,,,,,255.0,,,The name_fr column in the stat_holiday table stores the French language name of statutory holidays as a required text field with a maximum length of 255 characters. This column is essential for providing French language support in bilingual systems and should be used when displaying holiday names to French-speaking users or generating French language reports.
stat_holiday,name_en,varchar(255),NO,,,,,,255.0,,,"The name_en column in the stat_holiday table stores the English name or title of each statutory holiday (e.g., ""Christmas Day"", ""New Year's Day"") as a required text field with a maximum length of 255 characters. This column is essential for identifying and displaying holiday names in English throughout the payroll and time tracking system."
stat_holiday,created_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The created_by column in the stat_holiday table is a required integer field that stores the user ID of the employee who created the statutory holiday record. This column has a foreign key relationship (indicated by MUL) to the users table, enabling queries to join and retrieve information about who created each holiday entry, which is particularly useful for audit trails and accountability tracking."
stat_holiday,created_date,datetime,NO,,,,,,,,,"The created_date column in the stat_holiday table records the exact timestamp when a statutory holiday record was initially created in the system. This non-nullable datetime field is essential for audit tracking and can be used in SQL queries to filter or sort holiday records by their creation date, particularly useful when analyzing holiday entry patterns or generating time-based reports."
stat_holiday,applied_date,datetime,YES,,,,,,,,,"The applied_date column in the stat_holiday table records the timestamp when a statutory holiday record was officially applied or put into effect in the system. This datetime field is optional (nullable) and can be used in queries to filter or analyze when holiday records were implemented, particularly useful when tracking the chronological application of holiday policies or auditing holiday-related changes."
stat_holiday,applied_by,int,YES,MUL,,,users,user_id,,10.0,0.0,"The `applied_by` column in the stat_holiday table is a foreign key that references the users table, storing the ID of the user who applied or activated the statutory holiday record. This column is used to maintain an audit trail of holiday record management and can be joined with the users table to retrieve information about who processed the holiday entry, though it can be null in cases where the holiday hasn't been applied yet."
stat_holiday,reverted_date,datetime,YES,,,,,,,,,The reverted_date column in the stat_holiday table records the timestamp when a statutory holiday entry was canceled or reversed in the system. This optional datetime field helps track the history of holiday record modifications and is particularly useful when auditing changes or calculating corrected holiday pay in the payroll system.
stat_holiday,reverted_by,int,YES,MUL,,,users,user_id,,10.0,0.0,"The `reverted_by` column in the stat_holiday table stores the user ID of the employee who canceled or reversed a statutory holiday entry, linking to the users table as a foreign key. This column can be null if the holiday entry has never been reverted, and it's commonly used in queries to track accountability and audit changes to holiday records."
stat_holiday,office_holiday_date,date,YES,,,,,,,,,"The office_holiday_date column in the stat_holiday table stores the calendar date when a statutory holiday is observed at the office, which may differ from the actual holiday date. This nullable date field is useful when writing queries to determine holiday pay eligibility or when filtering time records for specific office holiday periods."
states,state_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The state_id column serves as the primary key in the states table, uniquely identifying each state or province record with a non-nullable integer value. This column should be used in JOIN operations when linking state information to other tables, and it's commonly referenced as a foreign key in related tables that need to associate records with specific states."
states,country_id,int,NO,,,,,,,10.0,0.0,"The country_id column in the states table is a required integer field that establishes a relationship with a countries table, identifying which country each state or province belongs to. This column is commonly used in JOIN operations to connect state data with country information, and should be included in queries where you need to filter or group states by their associated countries."
states,state_name,varchar(45),NO,,,,,,45.0,,,"The state_name column in the states table stores the full, official name of each state or province (e.g., ""California"", ""Ontario"") as a required text field with a maximum length of 45 characters. When writing SQL queries, this column can be used for exact name matching or pattern matching (using LIKE or regular expressions) to identify or filter specific states, and it's guaranteed to have a value since it's marked as non-nullable."
stats_page_requested,id,bigint,NO,PRI,auto_increment,,,,,19.0,0.0,"The ""id"" column serves as the primary key in the stats_page_requested table, uniquely identifying each page request record using a large integer (bigint) value. This non-nullable identifier is essential for referencing specific page request entries and can be used in JOIN operations or WHERE clauses when analyzing website traffic patterns."
stats_page_requested,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the stats_page_requested table records the exact timestamp when each page request was made, automatically populated with CURRENT_TIMESTAMP when the record is created. This timestamp field is mandatory (non-nullable) and can be used for temporal analysis of website traffic patterns, such as filtering requests within specific time periods or aggregating traffic data by different time intervals (hourly, daily, etc.)."
stats_page_requested,url,varchar(500),NO,,,,,,500.0,,,"The `url` column in the `stats_page_requested` table stores the full web address (up to 500 characters) of the requested page, and it is a required field that cannot be null. When querying this column, you can use string operations to analyze page access patterns, such as using LIKE operators to find requests to specific sections of the website (e.g., `WHERE url LIKE '%/blog/%'`) or extracting specific URL components."
stats_page_requested,memory_used,float,NO,,,0,,,,12.0,,"The memory_used column in the stats_page_requested table stores the amount of memory (likely in megabytes or bytes) consumed during each page request as a floating-point number. This non-nullable metric can be used in SQL queries to analyze memory consumption patterns across page requests, such as finding pages with high memory usage or calculating average memory consumption over time."
stats_page_requested,loading_time,float,NO,,,0,,,,12.0,,"The loading_time column in the stats_page_requested table stores the time (in seconds) it takes for a webpage to load completely, represented as a floating-point number. This non-nullable metric is essential for monitoring page performance and can be used in SQL queries to analyze response times, identify slow-loading pages, or calculate average load times across different pages or time periods."
stats_page_requested,ip,varchar(40),NO,,,,,,40.0,,,"The 'ip' column in the stats_page_requested table stores the IP address of the client/visitor who made the page request, stored as a string up to 40 characters long. This column is required (non-nullable) and can be used in SQL queries to analyze traffic patterns by IP address or to identify the geographic origin of requests."
stats_page_requested,user_id,int,YES,MUL,,,,,,10.0,0.0,"The user_id column in the stats_page_requested table is an integer field that identifies which user made each page request, allowing for user-specific traffic analysis and behavior tracking. This column is indexed (MUL) to optimize queries that filter or join based on user_id, and it can contain NULL values for anonymous or unauthenticated page requests."
stats_page_requested,request_body,text,YES,,,,,,65535.0,,,"The request_body column in the stats_page_requested table stores the raw HTTP request body content sent by clients when accessing web pages, which can include form data, JSON payloads, or other request parameters. When writing SQL queries, this text field can be used to analyze the content of page requests or filter for specific types of request payloads, though be aware it can contain NULL values if no request body was present in the original HTTP request."
stats_page_requested,query_string,text,YES,,,,,,65535.0,,,"The query_string column in the stats_page_requested table stores the URL parameters that were included in the page request, capturing any additional data passed through the URL after the '?' character. When writing SQL queries, this text field can be used to analyze specific URL parameters or filter page requests based on query string patterns, though be aware it can be NULL if no parameters were present in the request."
stats_page_requested,cookies,longblob,YES,,,,,,4294967295.0,,,"The 'cookies' column in the stats_page_requested table stores cookie data associated with each page request as a longblob, allowing for storage of large binary cookie information. This column can be used to analyze user session data and tracking information, though care should be taken when querying due to its potentially large size and binary format."
storage_units,storage_units_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The storage_units_id column serves as the primary key identifier for each unique storage unit in the storage_units table, using auto-incrementing integer values. This column should be used in WHERE clauses for precise unit lookups and in JOIN operations when relating storage unit data to other tables in the system."
storage_units,warehouse_id,int,NO,,,,,,,10.0,0.0,"The warehouse_id column in the storage_units table is a required integer field that identifies which warehouse facility a storage unit belongs to. This column is commonly used to filter or group storage units by their physical warehouse location, and since it's non-nullable, every storage unit must be associated with a warehouse."
storage_units,name,varchar(100),NO,,,,,,100.0,,,"The 'name' column in the storage_units table stores the unique identifier or descriptive name of each storage unit as a text string up to 100 characters long. This required field (non-nullable) is commonly used to reference specific storage units in queries and can contain values like ""Unit A-101"" or ""Storage Space 234"", making it useful for searching and identifying individual storage spaces within the facility."
storage_units,temperature,float,NO,,,0,,,,12.0,,"The 'temperature' column in the storage_units table stores the current or maintained temperature of each storage unit as a floating-point number, likely in degrees Celsius or Fahrenheit. This non-nullable field is essential for monitoring climate-controlled storage spaces and can be used in queries to filter or identify units based on their temperature requirements."
storage_units,status,int,NO,,,1,,,,10.0,0.0,"The 'status' column in the storage_units table is a required integer field that represents the current state or availability condition of a storage unit. When writing queries, this column can be used to filter storage units based on their operational status (e.g., available, occupied, under maintenance), where different integer values likely correspond to specific status conditions."
stories,story_id,int,NO,PRI,,,,,,10.0,0.0,"The story_id column serves as the primary key in the stories table, uniquely identifying each story record with a non-null integer value. When writing SQL queries, use this column for precise record selection (e.g., WHERE story_id = X) or when joining with related tables that reference specific stories."
stories,date,date,YES,,,,,,,,,"The `date` column in the `stories` table stores the publication date of each story in a standard date format (YYYY-MM-DD). When querying this column, you can use date comparison operators and date functions to filter or analyze stories by their publication dates, and since it's nullable, be sure to handle NULL values appropriately in your queries."
stories,image_url,varchar(255),YES,,,,,,255.0,,,"The image_url column in the stories table stores optional URL references (up to 255 characters) to images associated with each story. When writing queries, this column can be used to retrieve or filter stories based on whether they have associated images (IS NOT NULL) or lack images (IS NULL), or to fetch specific stories whose images are hosted at particular URLs."
stories,text_fr,varchar(600),YES,,,,,,600.0,,,"The text_fr column in the stories table stores French-language versions of story content, with text limited to 600 characters. When querying this column, keep in mind that it can contain NULL values, which may require appropriate NULL handling in your queries (using IS NULL or IS NOT NULL conditions when filtering)."
stories,text_en,varchar(600),YES,,,,,,600.0,,,"The text_en column in the stories table stores the English-language text content of stories with a maximum length of 600 characters, and it can contain NULL values. When querying this column, you can use string operations and text matching functions to search or filter story content, though you should account for potential NULL values in your queries."
stories,warehouse_id,int,NO,,,1,,,,10.0,0.0,"The warehouse_id column in the stories table is a required integer field that appears to serve as an internal identifier for tracking where story content is stored or managed. When querying this table, you can use warehouse_id to filter or group stories based on their storage location, though since it's marked as non-nullable, you should always expect a valid integer value in this field."
submissions_logs,submissions_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The submissions_log_id is the primary key column that uniquely identifies each record in the submissions_logs table, which tracks the history of product submission activities. When writing SQL queries, use this column to join with related tables or to filter specific log entries, as it serves as the main identifier for each submission log entry in the audit trail."
submissions_logs,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the submissions_logs table is a required foreign key that references the specific product being tracked through the submission process. This column enables queries to join submission log entries with their corresponding product details and is commonly used to filter or group submission history by product, making it essential for tracking the workflow status and changes for individual products."
submissions_logs,reason_of_submission,tinyint,NO,,,,,,,3.0,0.0,"The reason_of_submission column in the submissions_logs table is a required tinyint field that categorizes the purpose or trigger for each product submission entry using predefined numeric codes. When querying this column, use it to filter or group submission records based on their submission reason, which could represent different types of submissions like new product entries, updates, or compliance-related submissions."
submissions_logs,created_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The created_by column in the submissions_logs table is a required integer field that stores the user ID of the person who created each submission log entry, serving as a foreign key reference to the users table. This column is indexed (MUL) to optimize queries that filter or join based on the creating user, making it efficient to track and analyze submission history by specific users."
submissions_logs,created_at,datetime,NO,,,,,,,,,"The created_at column in the submissions_logs table stores the exact timestamp (date and time) when each submission log entry was created, making it essential for tracking the chronological order of events in the product submission process. This non-nullable datetime field can be used in SQL queries to filter submission logs by specific time periods, sort entries chronologically, or analyze submission patterns over time."
submissions_logs,submission_due_date,date,NO,,,,,,,,,"The submission_due_date column in the submissions_logs table stores the deadline date by which a product submission must be completed, represented as a required DATE value. This field is essential for tracking submission timelines and can be used in SQL queries to filter or sort submission records based on their due dates, making it particularly useful for identifying upcoming deadlines or overdue submissions."
submissions_logs,status,tinyint,NO,,,,,,,3.0,0.0,"The 'status' column in the submissions_logs table is a required tinyint field that represents the current state of a product submission within the workflow process. When writing queries, this column can be used to filter or group submission records by their processing status (e.g., pending, approved, rejected), enabling tracking of submission progress and generating status-based reports."
submissions_steps,submissions_step_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The submissions_step_id column serves as the primary key in the submissions_steps table, uniquely identifying each step or stage within a submission workflow process. When writing SQL queries, use this column to join with related tables or to filter specific steps, ensuring each step can be precisely referenced and tracked throughout the submission process."
submissions_steps,submissions_log_id,int,NO,MUL,,,submissions_logs,submissions_log_id,,10.0,0.0,"The submissions_log_id column in the submissions_steps table serves as a foreign key that links each step to its parent submission record in the submissions_logs table. This column is essential for querying and joining submission steps with their corresponding overall submission details, and its non-nullable property ensures that every step must be associated with a valid submission."
submissions_steps,department,tinyint,NO,,,,,,,3.0,0.0,"The 'department' column in the submissions_steps table is a required tinyint field that identifies which department is responsible for or associated with a particular submission step. When writing queries, this column can be used to filter or group submission steps by department, helping to analyze workflow patterns or responsibilities across different organizational units."
submissions_steps,submission_due_date,date,NO,,,,,,,,,"The submission_due_date column in the submissions_steps table stores the deadline date by which a particular submission step must be completed. This mandatory date field helps track and enforce timelines within the submission workflow process, enabling queries to identify upcoming deadlines, overdue steps, or filter steps based on their due dates."
submissions_steps,submission_sent_at,datetime,YES,,,,,,,,,The submission_sent_at column in the submissions_steps table records the specific date and time when a submission step was sent or transmitted within the workflow process. This nullable datetime field helps track the timing of step transitions and can be useful for analyzing processing delays or creating time-based reports about submission progress.
submissions_steps,user_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the submissions_steps table is a foreign key that references the users table, identifying which user is responsible for or associated with a particular submission step. This column can be used in JOIN operations with the users table to retrieve user details related to specific submission steps, and since it's nullable, some steps may not have an assigned user."
subscribers_ltv_logs_2013,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in subscribers_ltv_logs_2013 serves as a unique identifier for each subscriber whose lifetime value metrics were tracked in 2013. When writing SQL queries, this column can be used to join with other subscriber-related tables or to filter/group subscriber-specific LTV data from 2013."
subscribers_ltv_logs_2013,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The iso_week column represents the ISO week number (1-53) within the year 2013, providing a standardized way to track subscriber LTV metrics on a weekly basis. This non-nullable tinyint column can be used for time-based aggregations and trend analysis, with values that align with the international ISO week date system."
subscribers_ltv_logs_2013,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the date when a subscriber first created their subscription in 2013, recorded as a DATE value that cannot be null. This column can be used to analyze subscriber acquisition timing and perform time-based analysis of subscriber behavior, such as grouping subscribers by signup month or calculating how long they've been subscribed since their initial signup date."
subscribers_ltv_logs_2013,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required (non-nullable) tinyint field that indicates the current state of a subscriber's subscription in 2013. When querying this column, use numeric values to filter or group subscribers based on their subscription state, with the specific status codes likely representing states like active, cancelled, or paused (though you should verify the exact status code mappings used in this system)."
subscribers_ltv_logs_2013,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required (non-nullable) tinyint field that categorizes subscribers into different subscription plan types in the 2013 LTV tracking table. When querying this column, use numeric values to filter or group subscribers based on their subscription classification, though you may want to join with a lookup table or use a CASE statement to convert the tinyint values to meaningful subscription type labels."
subscribers_ltv_logs_2013,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2013 stores the calendar date when each subscriber initially registered for the service during 2013. This date field can be used in SQL queries for temporal analysis of subscriber acquisition patterns or to calculate subscription duration, though be aware that null values are permitted in this column."
subscribers_ltv_logs_2013,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2013 is a tinyint field that categorizes how subscribers initially registered or joined the service in 2013. When querying this column, you can use it to filter or group subscribers based on their registration method, though you'll want to refer to business documentation for the specific numeric codes that correspond to different signup types since this uses a tinyint encoding."
subscribers_ltv_logs_2013,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup in 2013, captured as a text string up to 255 characters. When writing queries, this column can be used to analyze which acquisition channels drove the most valuable subscribers, though be aware it may contain NULL values for cases where the referral source wasn't tracked or captured."
subscribers_ltv_logs_2013,most_recent_reactivation_date,date,YES,,,,,,,,,"The most_recent_reactivation_date column stores the latest date when a subscriber reactivated their subscription after a previous cancellation or pause in 2013. This date field is useful for analyzing subscriber retention patterns and can be used in queries to identify subscribers who have returned to the service, with NULL values indicating subscribers who have never reactivated or only had a single continuous subscription."
subscribers_ltv_logs_2013,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's latest reactivation event in 2013. When writing queries, this column can be used to filter or segment subscribers based on how they returned to active status, with NULL values indicating either no reactivation occurred or the information wasn't captured."
subscribers_ltv_logs_2013,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the latest date when a subscriber canceled their subscription in 2013, with NULL values indicating subscribers who haven't canceled. When querying this column, it's useful for analyzing churn patterns and filtering for active versus canceled subscribers during the 2013 period."
subscribers_ltv_logs_2013,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The ""most_recent_cancelation_reason"" column stores the last known reason why a subscriber canceled their subscription in 2013, captured as a text string up to 255 characters. When writing queries, this column can be used to analyze churn patterns or segment subscribers by their cancellation reasons, though be aware that NULL values are possible for subscribers who haven't canceled."
subscribers_ltv_logs_2013,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active retention behavior in 2013, such as renewing their subscription or continuing their membership. This date field can be useful in SQL queries to analyze subscriber engagement patterns, calculate retention periods, or identify the last known activity date for subscribers within the 2013 timeframe."
subscribers_ltv_logs_2013,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores text-based information about subscriber delivery addresses, likely containing JSON or serialized data structures with multiple address details for each subscriber. When querying this column, consider using JSON parsing functions or string manipulation operations if you need to extract specific address components, and be aware that the column can contain NULL values."
subscribers_ltv_logs_2013,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2013 stores text information about how content or services were delivered to subscribers in 2013. When querying this column, you can use string operations to filter or analyze different delivery methods, though be aware that NULL values are possible since this field is optional."
subscribers_ltv_logs_2013,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2013 stores text-based information about subscriber delivery preferences or patterns during 2013. When querying this column, you can use standard text operations (like LIKE, =, or string functions) to filter or analyze delivery-related data, keeping in mind that NULL values are possible since the column is nullable."
subscribers_ltv_logs_2013,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The total_weeks_subscribed column in subscribers_ltv_logs_2013 represents the cumulative number of weeks a subscriber maintained their subscription during 2013. When writing SQL queries, this integer column can be used to analyze subscription duration patterns or filter subscribers based on their length of membership, with NULL values indicating subscribers where the duration couldn't be determined."
subscribers_ltv_logs_2013,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_with_order_shipped` column tracks the cumulative number of weeks where a subscriber had at least one order shipped during 2013. This integer field can be used to analyze subscriber engagement patterns and shipping frequency, making it useful for queries that need to segment customers based on their order activity or calculate average shipping frequencies over time."
subscribers_ltv_logs_2013,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The total_weeks_on_vacation column tracks the cumulative number of weeks a subscriber has put their subscription on pause or vacation hold during 2013. This integer field can be used to analyze subscription pause patterns and their impact on lifetime value calculations, with NULL values indicating either no vacation time taken or missing data. When querying, consider that a value of 0 represents subscribers who maintained active subscriptions without any vacation periods during the year."
subscribers_ltv_logs_2013,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column stores the percentage (as a decimal between 0 and 100) of subscribers who placed orders in a given week during 2013, with precision to two decimal places. When writing queries, this column can be used to analyze subscriber ordering patterns and engagement rates, with NULL values indicating weeks where the take rate couldn't be calculated or wasn't applicable."
subscribers_ltv_logs_2013,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The total_orders_canceled column tracks the cumulative number of canceled orders associated with each subscriber during 2013. This nullable integer field can be used to analyze order cancellation patterns and customer behavior, making it useful for filtering subscribers based on cancellation history or calculating cancellation rates."
subscribers_ltv_logs_2013,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The `total_orders_declined` column in the subscribers_ltv_logs_2013 table tracks the number of failed or rejected order attempts made by each subscriber during 2013. This integer field can be used to analyze payment failures and customer friction points, with NULL values indicating either no declined orders or missing data, and a default value of 0 suggesting successful order processing."
subscribers_ltv_logs_2013,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The total_orders_customized column in subscribers_ltv_logs_2013 tracks the number of orders that included customization or personalization options for each subscriber during 2013. When querying this integer column, you can use it to analyze subscriber behavior related to customized orders, with NULL values indicating subscribers who either haven't placed customized orders or where the data wasn't recorded."
subscribers_ltv_logs_2013,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The total_orders_shipped column in subscribers_ltv_logs_2013 represents the cumulative number of orders that have been successfully shipped to each subscriber during 2013. This integer field can be used to analyze shipping volume per subscriber and can be null if no orders were shipped, making it useful for filtering or aggregating subscriber activity based on their order fulfillment history."
subscribers_ltv_logs_2013,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column stores the percentage (as a decimal between 0 and 100) of a subscriber's orders that included customizations during 2013, with precision to two decimal places. This metric can be used in SQL queries to analyze how frequently subscribers modified their orders, which could be valuable for understanding customer preferences and engagement patterns."
subscribers_ltv_logs_2013,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_orders_refunded` column in the subscribers_ltv_logs_2013 table tracks the cumulative number of refunded orders for each subscriber during 2013. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in queries calculating refund rates or identifying subscribers with high refund frequencies."
subscribers_ltv_logs_2013,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The total_orders_generated column in subscribers_ltv_logs_2013 represents the cumulative number of orders placed by each subscriber during 2013. This integer field can be used to analyze purchasing frequency and customer engagement, with NULL values indicating subscribers who haven't placed any orders, making it useful for filtering and aggregating subscriber order activity during that year."
subscribers_ltv_logs_2013,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column stores the percentage-based commission or take rate earned from orders generated by subscribers in 2013, represented as a decimal value with 2 decimal places (e.g., 15.50 for a 15.5% take rate). When querying this column, you can use it for calculations involving revenue share analysis or filtering subscribers based on their associated take rates, keeping in mind that NULL values are possible and the default value is 0.00."
subscribers_ltv_logs_2013,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber during 2013. This numeric field can contain NULL values and typically represents monetary values, with a default of 0.00, making it useful for financial calculations and revenue analysis in subscriber lifetime value queries."
subscribers_ltv_logs_2013,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (with 2 decimal places) for a subscriber's transactions in 2013, allowing for values up to 9999.99. This column can be used to analyze typical spending patterns and can be NULL if no purchases were made, making it useful for queries that need to segment or analyze subscribers based on their average order value."
subscribers_ltv_logs_2013,coupons_used,text,YES,,,,,,65535.0,,,"The ""coupons_used"" column in the subscribers_ltv_logs_2013 table stores text-based information about promotional coupons that subscribers utilized during 2013. When querying this column, you can expect to find coupon codes or descriptions, and since it's nullable, some subscribers may have null values indicating no coupon usage during that period."
subscribers_ltv_logs_2013,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber in 2013, represented as a decimal number with two decimal places (e.g., 25.50). When querying this column, you can use it for calculations involving discount analysis or to filter subscribers based on their coupon usage value, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2013,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The total_products_ordered column in subscribers_ltv_logs_2013 tracks the cumulative number of products that each subscriber has purchased throughout their relationship with the business in 2013. When querying this column, you can use it to analyze purchasing behavior and segment customers based on order volume, with NULL values indicating subscribers who haven't made any purchases or where the order count is unknown."
subscribers_ltv_logs_2013,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_products_refunded` column in the subscribers_ltv_logs_2013 table tracks the total number of products that were refunded by each subscriber during 2013. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in queries that analyze customer retention and product return behavior."
subscribers_ltv_logs_2013,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage of product purchases that were refunded for each subscriber, represented as a decimal value between 0.00 and 100.00. This metric helps analyze customer satisfaction and product performance by tracking refund patterns, where a higher refund rate might indicate potential issues with product quality or customer expectations."
subscribers_ltv_logs_2013,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,"The total_cs_tickets column represents the total number of customer service tickets submitted by a subscriber during 2013, stored as an integer value that can be null. This metric can be used to analyze customer support engagement patterns and potentially correlate support interactions with lifetime value calculations."
subscribers_ltv_logs_2013,total_ratings,int,YES,,,0,,,,10.0,0.0,"The `total_ratings` column in the subscribers_ltv_logs_2013 table stores the cumulative number of ratings a subscriber has submitted as an integer value, which can be null. This metric helps track subscriber engagement and can be used in SQL queries to analyze user participation patterns or filter/segment subscribers based on their rating activity during 2013."
subscribers_ltv_logs_2013,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating for a subscriber's orders in 2013, using a decimal scale from 0.0 to 5.0 with one decimal place precision. This optional field can be used in SQL queries to analyze customer satisfaction trends or filter subscribers based on their average order ratings, with NULL values indicating subscribers who haven't received any ratings."
subscribers_ltv_logs_2013,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a decimal scale) that subscribers gave for delivery services in 2013, with precision to one decimal place (e.g., 4.5). This optional field can be used in SQL queries to analyze customer satisfaction with delivery performance, such as filtering for subscribers with high ratings (e.g., WHERE average_delivery_rating >= 4.0) or calculating overall delivery satisfaction metrics."
subscribers_ltv_logs_2013,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2013 is a non-nullable datetime field that automatically records the timestamp when each LTV log entry was created. When writing SQL queries, this column can be used for temporal analysis of subscriber value data from 2013, such as filtering records within specific date ranges or analyzing LTV trends over time."
subscribers_ltv_logs_2013,has_received_trial_basket,date,YES,,,,,,,,,"This date column ""has_received_trial_basket"" records when a subscriber received their trial basket of products, with NULL values indicating subscribers who haven't received one. When querying, this column can be used to filter subscribers based on their trial basket receipt date or to analyze the timing of trial basket distributions in 2013."
subscribers_ltv_logs_2013,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that indicates where a subscriber originated from when they first signed up in 2013. When writing queries, this column can be used to analyze subscriber acquisition channels and segment LTV metrics by marketing source, though be aware that it may contain NULL values for cases where the UTM source wasn't captured."
subscribers_ltv_logs_2013,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, capturing the specific marketing campaign that led to their subscription. This varchar field can be used to analyze which marketing campaigns were most effective at acquiring valuable subscribers in 2013, though the nullable property indicates that not all subscribers will have an associated campaign value."
subscribers_ltv_logs_2013,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the last known acquisition channel or referral source through which a subscriber joined the service in 2013, using text values up to 255 characters in length. This optional field (nullable) can be useful in SQL queries to analyze which acquisition channels were most effective for generating high-value subscribers, often used in combination with LTV metrics to evaluate marketing channel performance."
subscribers_ltv_logs_2013,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,"The coupon_category_at_signup column stores an integer value representing the category of coupon (if any) that was used when a subscriber first signed up in 2013. This optional field (as indicated by being nullable) can be useful in analyzing how different types of signup promotions influenced subscriber lifetime value, and can be referenced in WHERE clauses or GROUP BY statements when analyzing promotion effectiveness."
subscribers_ltv_logs_2013,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column in subscribers_ltv_logs_2013 stores the type of device (e.g., mobile, desktop, tablet) that a subscriber used when initially signing up for the service in 2013. When querying this column, you can use string comparison operations to filter or group subscribers based on their signup device, though be aware that NULL values are possible since the field is nullable."
subscribers_ltv_logs_2013,latest_order_shipped,date,YES,,,,,,,,,"The latest_order_shipped column stores the date when a subscriber's most recent order was shipped during 2013, helping track customer engagement through purchase activity. This date field can be useful in SQL queries for analyzing shipping patterns, identifying active customers, or calculating time-based metrics like days since last order, though null values should be handled appropriately as they may indicate subscribers without any shipped orders in 2013."
subscribers_ltv_logs_2013,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The `number_of_times_canceled` column in the subscribers_ltv_logs_2013 table tracks how many times a subscriber has canceled their subscription during 2013, stored as an integer value. This metric can be used in SQL queries to analyze churn patterns or segment subscribers based on their cancellation history, with NULL values indicating that the cancellation count is unknown or not applicable."
subscribers_ltv_logs_2014,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in subscribers_ltv_logs_2014 serves as a unique identifier for each subscriber whose lifetime value metrics were tracked in 2014. This non-nullable integer column can be used to join with other subscriber-related tables and is essential for filtering or grouping LTV metrics by specific users.
subscribers_ltv_logs_2014,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The iso_week column represents the ISO week number (1-53) within the year 2014, providing a standardized way to track subscriber LTV metrics on a weekly basis. This non-nullable tinyint column can be used for time-based aggregations and trend analysis, with values that align with the international ISO week date system."
subscribers_ltv_logs_2014,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the date when a subscriber first created their subscription in 2014, recorded as a DATE value that cannot be null. This column can be used to analyze subscriber acquisition timing and perform time-based analysis of subscriber cohorts, making it particularly useful in WHERE clauses for filtering subscribers based on when they joined or in GROUP BY operations for cohort analysis."
subscribers_ltv_logs_2014,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required (non-nullable) tinyint field that indicates the current state of a subscriber's subscription in 2014. When writing queries, this column can be used to filter or group subscribers based on their subscription state, with different tinyint values representing distinct statuses (e.g., active, cancelled, paused)."
subscribers_ltv_logs_2014,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required (non-nullable) tinyint field that categorizes subscribers into different subscription plan types in the 2014 LTV tracking table. When querying this column, use numeric values to filter or group subscribers based on their subscription classification, though you may want to join with a lookup table or use a CASE statement to convert the tinyint values to meaningful subscription type labels."
subscribers_ltv_logs_2014,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2014 stores the date when each subscriber initially registered for the service during 2014. This date field can be used in SQL queries for temporal analysis of subscriber acquisition patterns and to calculate subscription duration metrics, though be aware that null values are possible."
subscribers_ltv_logs_2014,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2014 is a tinyint field that categorizes how subscribers initially registered or joined the service in 2014. When querying this column, you can use it to filter or group subscribers based on their registration method, though you'll want to refer to business documentation for the specific numeric codes that correspond to different signup types since this uses a tinyint encoding."
subscribers_ltv_logs_2014,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup in 2014, captured as a text string up to 255 characters. This optional field (nullable) can be used in SQL queries to analyze which acquisition channels or campaigns were most effective at bringing in valuable subscribers, making it particularly useful for GROUP BY operations and marketing attribution analysis."
subscribers_ltv_logs_2014,most_recent_reactivation_date,date,YES,,,,,,,,,The most_recent_reactivation_date column stores the latest date when a subscriber reactivated their subscription after a previous cancellation or pause in 2014. This date field is useful for analyzing subscriber retention patterns and can be used in date-based comparisons or filtering to identify subscribers who have returned to the service during specific time periods.
subscribers_ltv_logs_2014,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's latest reactivation in 2014, with NULL values permitted when a subscriber hasn't been reactivated. When writing queries, this column can be used to filter or segment subscribers based on how they returned to active status, making it useful for analyzing which reactivation methods were most common or successful during 2014."
subscribers_ltv_logs_2014,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber last cancelled their subscription in 2014, if applicable. This column can be used to analyze churn patterns or filter for active versus cancelled subscribers, and being nullable indicates that not all subscribers have cancelled (NULL would represent subscribers who remained active)."
subscribers_ltv_logs_2014,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The ""most_recent_cancelation_reason"" column stores the last known reason why a subscriber canceled their subscription in 2014, captured as a text string up to 255 characters. When writing queries, this column can be used to analyze churn patterns and segment subscribers based on their cancellation reasons, though be aware that NULL values are possible for subscribers who haven't canceled."
subscribers_ltv_logs_2014,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active retention behavior in 2014, such as renewing their subscription or continuing their membership. This date field can be useful in SQL queries to analyze subscriber engagement patterns, calculate retention periods, or identify the last known active date for subscribers within the 2014 timeframe."
subscribers_ltv_logs_2014,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores text-based information about subscriber delivery addresses, likely containing JSON or serialized data structures with multiple address details for each subscriber. This optional column (as indicated by being nullable) can be used in queries to analyze shipping patterns or filter subscribers based on their delivery location information from 2014."
subscribers_ltv_logs_2014,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2014 stores text information about how content or services were delivered to subscribers in 2014. When querying this column, you can use string operations to filter or group by different delivery methods, though be aware the field can contain NULL values."
subscribers_ltv_logs_2014,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2014 stores text-based information about subscriber delivery preferences or patterns during 2014. When querying this column, you can use standard text operations (like LIKE, =, or string functions) to filter or analyze delivery-related data, and since it's nullable, remember to handle NULL values appropriately in your conditions."
subscribers_ltv_logs_2014,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The total_weeks_subscribed column in subscribers_ltv_logs_2014 represents the cumulative number of weeks a subscriber maintained their subscription during 2014. When writing SQL queries, this integer column can be used to analyze subscription duration patterns or filter subscribers based on their length of membership, with NULL values indicating subscribers where the duration couldn't be determined."
subscribers_ltv_logs_2014,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_with_order_shipped` column in the subscribers_ltv_logs_2014 table tracks the cumulative number of weeks where a subscriber had at least one order shipped during 2014. This integer field can be useful for analyzing subscriber engagement patterns and shipping frequency, making it valuable for queries that need to segment customers based on their order activity or calculate shipping-related metrics."
subscribers_ltv_logs_2014,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The total_weeks_on_vacation column tracks the cumulative number of weeks a subscriber has put their subscription on pause or vacation hold during 2014. This nullable integer field can be used to analyze subscription pause patterns and their impact on lifetime value calculations, with a default value of 0 indicating no vacation time taken."
subscribers_ltv_logs_2014,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column stores the percentage (as a decimal between 0 and 100) of subscribers who placed orders in a given week during 2014, with precision to two decimal places. This metric can be used to analyze subscriber engagement patterns and purchase frequency, making it valuable for queries that need to measure or compare order participation rates across different subscriber segments or time periods."
subscribers_ltv_logs_2014,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2014 table tracks the cumulative number of canceled orders associated with each subscriber during 2014. This integer field can be used in SQL queries to analyze cancellation patterns or filter subscribers based on their order cancellation history, with NULL values indicating that cancellation data may not be available for some subscribers."
subscribers_ltv_logs_2014,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The `total_orders_declined` column in the subscribers_ltv_logs_2014 table tracks the cumulative number of failed or rejected order attempts by each subscriber during 2014. This integer field can be used to analyze payment failures and customer friction points, with NULL values indicating either no declined orders or missing data, and is commonly used in WHERE clauses or aggregations to identify subscribers with payment issues."
subscribers_ltv_logs_2014,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The total_orders_customized column in subscribers_ltv_logs_2014 tracks the number of orders that included customization or personalization options made by subscribers during 2014. This nullable integer field helps analyze how frequently subscribers chose to customize their orders, which can be useful for understanding customer preferences and measuring the impact of customization options on lifetime value metrics."
subscribers_ltv_logs_2014,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The total_orders_shipped column in subscribers_ltv_logs_2014 represents the cumulative number of orders that have been successfully shipped to each subscriber during 2014. This integer field can be used to analyze shipping volume per subscriber and can be null if no orders were shipped, making it useful for filtering or aggregating subscriber activity based on their order fulfillment history."
subscribers_ltv_logs_2014,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column represents the percentage (stored as a decimal between 0 and 100) of a subscriber's orders that included customizations during 2014. This metric can be used in SQL queries to analyze how frequently subscribers modified their orders, with NULL values indicating insufficient data to calculate a customization rate and a default value of 0.00 representing no customizations."
subscribers_ltv_logs_2014,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_orders_refunded` column in the subscribers_ltv_logs_2014 table tracks the cumulative number of refunded orders for each subscriber during 2014. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in queries that need to identify subscribers with high refund rates or calculate refund-related statistics."
subscribers_ltv_logs_2014,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The total_orders_generated column in subscribers_ltv_logs_2014 represents the cumulative number of orders placed by each subscriber during 2014. This integer field can be used to analyze purchasing frequency and customer engagement, with NULL values indicating subscribers who haven't placed any orders, making it useful for filtering and aggregating subscriber order activity during that year."
subscribers_ltv_logs_2014,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column stores the percentage-based commission or take rate earned from orders generated by subscribers in 2014, represented as a decimal value with 2 decimal places (e.g., 15.50 for a 15.5% take rate). When querying this column, you can use it for calculations involving revenue share analysis or filtering subscribers based on their associated take rates, keeping in mind that NULL values are possible and the default value is 0.00."
subscribers_ltv_logs_2014,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber during 2014. This numeric field can contain NULL values and typically represents monetary values, making it useful for financial calculations and revenue analysis in queries where you need to aggregate or analyze subscriber spending patterns."
subscribers_ltv_logs_2014,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (with 2 decimal places) for a subscriber's transactions in 2014, allowing for values up to 9999.99. This optional field can be used in SQL queries to analyze typical spending patterns or segment customers by their average order value, with NULL values indicating subscribers who haven't made any purchases."
subscribers_ltv_logs_2014,coupons_used,text,YES,,,,,,65535.0,,,"The ""coupons_used"" column in the subscribers_ltv_logs_2014 table stores text-based information about promotional coupons that subscribers utilized during 2014. When querying this column, you can expect to find coupon codes or descriptions, and since it's nullable, some subscribers may have null values indicating no coupon usage during that year."
subscribers_ltv_logs_2014,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber during 2014, represented as a decimal number with two decimal places (e.g., 25.50). When querying this column, you can use it to analyze discount usage patterns or calculate the net revenue impact of coupon redemptions, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2014,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The total_products_ordered column in subscribers_ltv_logs_2014 tracks the cumulative number of products that each subscriber has purchased throughout their relationship with the company in 2014. This integer field can be used to analyze purchasing behavior and customer engagement, with NULL values potentially indicating new subscribers or those who haven't made any purchases yet."
subscribers_ltv_logs_2014,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The total_products_refunded column tracks the number of products that were refunded by each subscriber during 2014, stored as an integer value. This metric is part of the broader lifetime value calculation and can be used in SQL queries to analyze refund patterns or filter subscribers based on their refund history, with NULL values indicating subscribers who either had no refunds or where refund data wasn't recorded."
subscribers_ltv_logs_2014,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage of product purchases that were refunded for each subscriber, represented as a decimal value between 0.00 and 100.00. This metric helps analyze customer satisfaction and product performance by tracking refund patterns, where a higher refund rate might indicate potential issues with product quality or customer expectations."
subscribers_ltv_logs_2014,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,"The total_cs_tickets column represents the cumulative number of customer service tickets submitted by a subscriber during 2014. This integer field can be used to analyze customer support engagement patterns and potentially correlate support interactions with lifetime value metrics, with NULL values indicating either no tickets or missing data."
subscribers_ltv_logs_2014,total_ratings,int,YES,,,0,,,,10.0,0.0,"The `total_ratings` column in the subscribers_ltv_logs_2014 table stores the cumulative number of ratings a subscriber has submitted as an integer value, which can be null. When writing queries, this column can be used to analyze subscriber engagement levels or filter for subscribers based on their rating activity during 2014."
subscribers_ltv_logs_2014,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating for a subscriber's orders in 2014, using a decimal scale from 0.0 to 5.0 with one decimal place precision. This optional field can be used in SQL queries to analyze customer satisfaction trends or filter subscribers based on their average order ratings, with NULL values indicating subscribers who haven't received any ratings."
subscribers_ltv_logs_2014,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a decimal scale) that subscribers gave for delivery services in 2014, with one decimal place precision (e.g., 4.5). This optional field can be used in SQL queries to analyze customer satisfaction with delivery services, such as filtering for subscribers with high ratings (e.g., WHERE average_delivery_rating >= 4.0) or calculating overall delivery performance metrics."
subscribers_ltv_logs_2014,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2014 is a non-nullable datetime field that automatically records the timestamp when each LTV log entry was created. When writing SQL queries, this column can be used for temporal analysis of subscriber value data from 2014, such as filtering records within specific date ranges or analyzing LTV trends over time."
subscribers_ltv_logs_2014,has_received_trial_basket,date,YES,,,,,,,,,"This date column ""has_received_trial_basket"" records when a subscriber received their trial basket of products, with NULL values indicating subscribers who haven't received one. When querying, this column can be used to filter subscribers based on their trial basket receipt date in 2014 or to analyze the timing of trial basket distributions."
subscribers_ltv_logs_2014,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that indicates where a subscriber originated from when they first signed up in 2014. When writing queries, this column can be used to analyze subscriber acquisition channels and segment LTV metrics by marketing source, though be aware that it may contain NULL values for cases where the UTM source wasn't captured."
subscribers_ltv_logs_2014,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, capturing the specific marketing campaign that led to their subscription in 2014. This optional varchar field (up to 255 characters) can be used in SQL queries to analyze which marketing campaigns were most effective at acquiring valuable subscribers, though NULL values should be handled appropriately since not all signups may have associated campaign data."
subscribers_ltv_logs_2014,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the last known acquisition channel or referral source (as a text string) that led to a subscriber's signup in 2014. When writing queries, this column can be used to analyze subscriber acquisition patterns or segment LTV metrics by marketing channel, though be aware that NULL values are possible and should be handled appropriately in your analysis."
subscribers_ltv_logs_2014,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,"The coupon_category_at_signup column stores an integer value representing the category or type of coupon that was used when a subscriber first signed up in 2014. This optional field (as indicated by being nullable) can be useful in analyzing how different coupon categories influenced subscriber acquisition and their subsequent lifetime value, making it valuable for queries that analyze the relationship between initial promotional offers and long-term customer value."
subscribers_ltv_logs_2014,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column in subscribers_ltv_logs_2014 stores the type of device (e.g., mobile, desktop, tablet) that a subscriber used when initially signing up for the service in 2014. When querying this column, you can use string comparison operations to filter or group subscribers based on their signup device, though be aware that the values are nullable and may require NULL handling in your queries."
subscribers_ltv_logs_2014,latest_order_shipped,date,YES,,,,,,,,,"The latest_order_shipped column stores the date when a subscriber's most recent order was shipped during 2014, helping track customer engagement through purchase activity. This date field can be useful in SQL queries for analyzing shipping patterns, identifying active customers, or calculating time-based metrics like days since last order, though null values should be handled appropriately as not all subscribers may have placed orders."
subscribers_ltv_logs_2014,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The number_of_times_canceled column tracks how many times a subscriber has canceled their subscription throughout their history up until 2014. This integer field can be useful in queries analyzing churn patterns or customer retention, where you might want to filter or group subscribers based on their cancellation frequency (e.g., SELECT * FROM subscribers_ltv_logs_2014 WHERE number_of_times_canceled > 2)."
subscribers_ltv_logs_2015,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in subscribers_ltv_logs_2015 serves as a unique identifier for each subscriber whose lifetime value metrics were tracked in 2015. This non-nullable integer column can be used to join with other subscriber-related tables and is essential for filtering or grouping LTV metrics by specific users.
subscribers_ltv_logs_2015,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The iso_week column represents the ISO week number (1-53) within the 2015 calendar year when subscriber LTV metrics were recorded. This non-nullable tinyint field can be used to analyze subscriber value trends on a weekly basis throughout 2015, and is commonly used in WHERE clauses or GROUP BY statements when examining week-over-week patterns."
subscribers_ltv_logs_2015,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the date when a subscriber first created their subscription in 2015, recorded as a DATE value that cannot be null. This column can be used for temporal analysis of subscriber acquisition patterns and is commonly used in WHERE clauses to filter subscribers based on when they joined, or in date-based aggregations to analyze subscriber growth trends."
subscribers_ltv_logs_2015,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required (non-nullable) tinyint field that indicates the current state of a subscriber's subscription in 2015. When querying this column, use numeric values to filter or group subscribers based on their subscription state, with the specific status codes likely documented in the application layer (common values might represent states like active, cancelled, or paused)."
subscribers_ltv_logs_2015,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required (non-nullable) tinyint field that categorizes subscribers into different subscription plan types in the 2015 LTV tracking table. When querying this column, use numeric values to filter or group subscribers based on their subscription classification, though you may want to join with a lookup table or use a CASE statement to convert the tinyint values to meaningful subscription type labels."
subscribers_ltv_logs_2015,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2015 stores the date when each subscriber initially registered for the service, formatted as a standard SQL date. This column can be used for analyzing subscriber acquisition patterns throughout 2015 and calculating subscriber tenure by comparing against other dates, with NULL values indicating cases where the signup date wasn't recorded."
subscribers_ltv_logs_2015,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2015 is a tinyint field that categorizes how subscribers initially registered or joined the service in 2015. When querying this column, you can use numeric values to filter or group subscribers based on their registration method, though you should consult business documentation for the specific meaning of each signup_type value since it uses a tinyint encoding."
subscribers_ltv_logs_2015,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup in 2015, captured as a text string up to 255 characters. When writing queries, this column can be used to analyze which acquisition channels drove the most valuable subscribers, though be aware it may contain NULL values for cases where the referral source wasn't tracked or captured."
subscribers_ltv_logs_2015,most_recent_reactivation_date,date,YES,,,,,,,,,"The most_recent_reactivation_date column stores the latest date when a subscriber reactivated their subscription after a previous cancellation or pause in 2015. This date field is useful for analyzing subscriber retention patterns and can be used in queries to identify subscribers who have returned to the service, with NULL values indicating subscribers who have never reactivated or are on their first subscription term."
subscribers_ltv_logs_2015,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's latest reactivation in 2015, with NULL values permitted when a subscriber hasn't been reactivated. When writing queries, this column can be used to filter or segment subscribers based on how they returned to active status, making it useful for analyzing which reactivation methods were most common or successful during 2015."
subscribers_ltv_logs_2015,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber last canceled their subscription in 2015, if applicable. This column can be used to analyze churn patterns or filter for active versus canceled subscribers, and being nullable indicates that not all subscribers have canceled (NULL would represent subscribers who remained active)."
subscribers_ltv_logs_2015,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The ""most_recent_cancelation_reason"" column stores the last known reason why a subscriber canceled their subscription, captured as a text string up to 255 characters. When writing queries, this column can be used to analyze churn patterns and segment subscribers based on their cancellation reasons, though be aware that NULL values are possible for subscribers who haven't canceled or where the reason wasn't recorded."
subscribers_ltv_logs_2015,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active retention behavior in 2015, such as renewing their subscription or continuing their membership. This date field can be useful in SQL queries to analyze subscriber engagement patterns, calculate retention periods, or identify the last known active date for subscribers within the 2015 timeframe."
subscribers_ltv_logs_2015,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores text-based information about subscriber delivery addresses, likely containing JSON or structured text data with address details for subscribers tracked in 2015. This optional column (as indicated by being nullable) can be used in queries when you need to analyze or filter subscribers based on their delivery location information, though you may need to parse or extract specific address components depending on how the data is structured within the text field."
subscribers_ltv_logs_2015,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2015 stores text information about how content or services were delivered to subscribers in 2015. When querying this column, you can use string operations to filter or group by different delivery methods, though be aware the field can contain NULL values."
subscribers_ltv_logs_2015,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2015 stores text-based information about subscriber delivery preferences or patterns during 2015. When querying this column, you can use standard text operations (like LIKE, =, or string functions) to filter or analyze delivery-related data, and since it's nullable, remember to handle NULL values appropriately in your conditions."
subscribers_ltv_logs_2015,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The total_weeks_subscribed column represents the cumulative number of weeks a customer maintained an active subscription during 2015, stored as an integer value that can be null. This metric is useful for analyzing subscriber retention and engagement patterns, and can be effectively used in aggregations or filtering conditions to segment customers based on their subscription duration (e.g., WHERE total_weeks_subscribed > 26 to find subscribers who stayed for more than half the year)."
subscribers_ltv_logs_2015,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_with_order_shipped` column tracks the cumulative number of weeks where a subscriber had at least one order shipped during 2015. This integer field can be used to analyze subscriber engagement patterns and shipping frequency, making it useful for queries that need to segment customers based on their order activity or calculate average shipping frequencies over time."
subscribers_ltv_logs_2015,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The total_weeks_on_vacation column tracks the cumulative number of weeks a subscriber has put their subscription on pause or vacation mode during 2015. This nullable integer field can be used to analyze subscription pausing patterns and their impact on lifetime value calculations, with a default value of 0 indicating no vacation time taken."
subscribers_ltv_logs_2015,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column stores the percentage (as a decimal between 0 and 100) of subscribers who placed orders in a given week during 2015, with precision to two decimal places. This metric can be used to analyze subscriber engagement patterns and ordering frequency, making it useful in WHERE clauses for filtering subscribers based on activity levels or in aggregate functions to calculate average take rates across different subscriber segments."
subscribers_ltv_logs_2015,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2015 table tracks the cumulative number of canceled orders associated with each subscriber during 2015. This nullable integer field can be used in SQL queries to analyze cancellation patterns or filter subscribers based on their order cancellation history, with a default value of 0 indicating no canceled orders."
subscribers_ltv_logs_2015,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The `total_orders_declined` column in the subscribers_ltv_logs_2015 table tracks the number of failed or rejected order attempts made by each subscriber during 2015. This integer field can be used to analyze payment failures and customer friction points, with NULL values indicating either no declined orders or missing data, and can be particularly useful in queries analyzing subscriber payment behavior or risk patterns."
subscribers_ltv_logs_2015,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The total_orders_customized column in subscribers_ltv_logs_2015 tracks the number of orders that included customization or personalization options made by subscribers during 2015. This nullable integer field helps analyze how frequently subscribers chose to customize their orders, which can be useful for understanding customer preferences and measuring the impact of customization options on lifetime value metrics."
subscribers_ltv_logs_2015,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The total_orders_shipped column in subscribers_ltv_logs_2015 tracks the cumulative number of orders that have been successfully shipped to each subscriber during 2015. This integer field can be used to analyze shipping volume per subscriber and can be null if no orders were shipped, making it useful for filtering or aggregating subscriber activity based on their order fulfillment history."
subscribers_ltv_logs_2015,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column represents the percentage (stored as a decimal between 0 and 100) of a subscriber's orders that included customizations or modifications in 2015. This metric can be used in SQL queries to analyze customer behavior patterns and preference for customization, with NULL values indicating subscribers who haven't placed any orders or where customization data wasn't available."
subscribers_ltv_logs_2015,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The total_orders_refunded column tracks the number of orders that were refunded for each subscriber during 2015, stored as an integer value that can be null. When writing queries, this column can be used to analyze refund patterns or filter subscribers based on their refund history, with null values potentially indicating either no refunds or missing data."
subscribers_ltv_logs_2015,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The total_orders_generated column in subscribers_ltv_logs_2015 represents the cumulative number of orders placed by each subscriber during 2015. This integer field can be used to analyze purchasing frequency and customer engagement, with NULL values indicating subscribers who haven't placed any orders, making it useful for filtering and aggregating subscriber order activity during that year."
subscribers_ltv_logs_2015,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column stores the percentage commission or take rate earned from orders generated by subscribers in 2015, represented as a decimal value with 2 decimal places (e.g., 12.50 for 12.5%). When querying this column, you can use it to analyze revenue sharing metrics or filter subscribers based on their associated take rates, keeping in mind that NULL values are possible and the default value is 0.00."
subscribers_ltv_logs_2015,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber during 2015. This numeric field can contain NULL values and typically represents monetary values, with a default of 0.00, making it useful for financial calculations and revenue analysis in subscriber lifetime value queries."
subscribers_ltv_logs_2015,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (with 2 decimal places) for a subscriber's transactions in 2015, allowing for values up to 9999.99. This optional field (can be NULL) helps analyze typical spending patterns per subscriber and can be used in aggregate functions or filtering conditions to segment customers based on their average order value."
subscribers_ltv_logs_2015,coupons_used,text,YES,,,,,,65535.0,,,"The ""coupons_used"" column in the subscribers_ltv_logs_2015 table stores text-based information about promotional coupons that subscribers have redeemed during 2015. When querying this column, you can use string operations to analyze coupon usage patterns, though be aware that NULL values are possible since the column is nullable."
subscribers_ltv_logs_2015,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber in 2015, represented as a decimal number with two decimal places (e.g., 25.50). When writing queries, this column can be used to analyze discount usage patterns or calculate the net revenue impact of coupon redemptions, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2015,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The total_products_ordered column in subscribers_ltv_logs_2015 tracks the cumulative number of products that each subscriber has purchased throughout their relationship with the business in 2015. When querying this column, you can use it to analyze purchasing behavior and segment customers based on order volume, with NULL values indicating subscribers who haven't made any purchases or where the order count is unknown."
subscribers_ltv_logs_2015,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_products_refunded` column in the subscribers_ltv_logs_2015 table tracks the total number of products that were refunded by each subscriber during 2015. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in queries calculating refund rates or identifying subscribers with high refund activity."
subscribers_ltv_logs_2015,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage of product purchases that were refunded for each subscriber, represented as a decimal between 0.00 and 100.00. This metric helps analyze customer satisfaction and product performance by tracking refund patterns, where a higher rate might indicate potential issues with product quality or customer expectations."
subscribers_ltv_logs_2015,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,The total_cs_tickets column represents the cumulative number of customer service tickets submitted by a subscriber during 2015. This integer field can be used to analyze customer support engagement patterns and potentially correlate support ticket volume with subscriber lifetime value metrics.
subscribers_ltv_logs_2015,total_ratings,int,YES,,,0,,,,10.0,0.0,"The total_ratings column stores the cumulative number of ratings or reviews submitted by a subscriber throughout 2015, represented as an integer value that can be null. This metric can be used to analyze subscriber engagement levels and can be included in aggregations or filtering conditions when querying subscriber activity patterns."
subscribers_ltv_logs_2015,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating for a subscriber's orders in 2015, using a decimal scale from 0.0 to 5.0 with one decimal place precision. This optional field can be used in SQL queries to analyze customer satisfaction trends or filter subscribers based on their average order ratings, with NULL values indicating subscribers who haven't received any ratings."
subscribers_ltv_logs_2015,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a decimal scale) that subscribers gave for delivery services in 2015, with one decimal place precision (e.g., 4.5). This optional field can be used in SQL queries to analyze customer satisfaction with delivery services, such as filtering for subscribers with high ratings (e.g., WHERE average_delivery_rating >= 4.0) or calculating overall delivery performance metrics."
subscribers_ltv_logs_2015,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2015 is a non-nullable datetime field that automatically records the timestamp when each LTV log entry was created. When writing SQL queries, this column can be used for temporal analysis of subscriber value data from 2015, such as filtering records within specific date ranges or analyzing LTV trends over time."
subscribers_ltv_logs_2015,has_received_trial_basket,date,YES,,,,,,,,,"The has_received_trial_basket column records the date when a subscriber received their trial basket in 2015, storing NULL if no trial basket was received. This column can be used to filter subscribers who participated in trial basket promotions or to analyze the timing of trial basket distributions, making it useful for queries that examine the relationship between trial baskets and subscriber lifetime value."
subscribers_ltv_logs_2015,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that indicates where a subscriber originated from when they first signed up in 2015. When writing queries, this column can be used to analyze subscriber acquisition channels and segment LTV metrics by marketing source, though be aware that it may contain NULL values for cases where the UTM source wasn't captured."
subscribers_ltv_logs_2015,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, capturing the specific marketing campaign that led to their subscription. This optional VARCHAR field (up to 255 characters) helps track marketing attribution and can be used in SQL queries to analyze which campaigns drove valuable subscriber acquisitions in 2015, though NULL values should be handled appropriately as they may indicate subscribers who signed up through non-tracked channels."
subscribers_ltv_logs_2015,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the last known acquisition channel or referral source (as a text string) that led to a subscriber's signup in 2015. When writing queries, this column can be used to analyze subscriber acquisition patterns or segment LTV metrics by marketing channel, though be aware that NULL values are possible and should be handled appropriately in your analysis."
subscribers_ltv_logs_2015,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,"The coupon_category_at_signup column stores an integer value representing the category of coupon (if any) that was used when a subscriber first signed up in 2015. This optional field (as indicated by being nullable) can be useful in analyzing how different types of signup promotions influenced subscriber lifetime value, and can be used in GROUP BY clauses or WHERE conditions to segment subscribers based on their initial promotional category."
subscribers_ltv_logs_2015,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column in subscribers_ltv_logs_2015 stores the type of device (e.g., mobile, desktop, tablet) that a subscriber used when initially signing up for the service in 2015. When querying this column, you can use string comparison operations to filter or group subscribers based on their signup device, though be aware that NULL values are possible since the field is nullable."
subscribers_ltv_logs_2015,latest_order_shipped,date,YES,,,,,,,,,"The latest_order_shipped column stores the date when a subscriber's most recent order was shipped during 2015, helping track customer engagement through purchase activity. This nullable date field can be useful in SQL queries for analyzing shipping patterns, identifying active customers, or calculating time-based metrics like days since last order."
subscribers_ltv_logs_2015,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The number_of_times_canceled column tracks how many times a subscriber has canceled their subscription throughout their history up until 2015. This integer field can be useful in queries analyzing churn patterns or customer retention, where you might want to filter or group subscribers based on their cancellation frequency (e.g., SELECT * FROM subscribers_ltv_logs_2015 WHERE number_of_times_canceled > 2)."
subscribers_ltv_logs_2016,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in subscribers_ltv_logs_2016 serves as a unique identifier for each subscriber whose lifetime value metrics were tracked during 2016. When writing SQL queries, this column can be used to join with other subscriber-related tables or to filter/group LTV metrics for specific users, making it a crucial field for analyzing individual subscriber behavior and value."
subscribers_ltv_logs_2016,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The iso_week column represents the ISO week number (1-53) within the 2016 calendar year when subscriber LTV metrics were recorded. This non-nullable tinyint column can be used to analyze subscriber value trends on a weekly basis throughout 2016, and is commonly used in WHERE clauses or GROUP BY statements for time-based analysis."
subscribers_ltv_logs_2016,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the date when a subscriber first created their subscription in 2016, recorded as a DATE value that cannot be null. This column can be used to analyze subscriber acquisition timing and segment subscribers based on when they started their subscriptions, making it particularly useful in queries that track cohort performance or analyze subscription growth patterns over time."
subscribers_ltv_logs_2016,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required (non-nullable) tinyint field that indicates the current state of a subscriber's subscription in the 2016 LTV tracking table. When querying this column, use numeric values to filter or group subscribers based on their subscription state, though you may want to join with or reference documentation for the specific status code meanings since they're stored as tinyints rather than descriptive text."
subscribers_ltv_logs_2016,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required (non-nullable) tinyint field that categorizes subscribers into different subscription plan types. When querying the subscribers_ltv_logs_2016 table, this column can be used to filter or group subscribers based on their subscription classification, helping analyze lifetime value metrics across different subscription categories in 2016."
subscribers_ltv_logs_2016,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2016 stores the calendar date when each subscriber initially registered for the service during 2016. This date field can be used in SQL queries for temporal analysis of subscriber acquisition patterns and to calculate subscription duration metrics, though be aware it may contain NULL values for records where the signup date wasn't captured."
subscribers_ltv_logs_2016,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2016 is a tinyint field that categorizes how subscribers initially registered or joined the service during 2016. When querying this column, you can use numeric values to filter or group subscribers based on their registration method, though you should consult business documentation for the specific meaning of each signup_type value (e.g., WHERE signup_type = 1 or GROUP BY signup_type)."
subscribers_ltv_logs_2016,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup, captured as a text string up to 255 characters in length. This optional field (nullable) helps track which acquisition channels and campaigns are driving valuable subscriber signups, enabling analysis of marketing effectiveness and LTV by referral source."
subscribers_ltv_logs_2016,most_recent_reactivation_date,date,YES,,,,,,,,,The most_recent_reactivation_date column stores the latest date when a subscriber reactivated their subscription after a previous cancellation or pause in 2016. This date field can be used to analyze subscriber reengagement patterns and can be null if the subscriber has never reactivated their subscription.
subscribers_ltv_logs_2016,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's most recent reactivation in 2016, with NULL values permitted when a subscriber has never been reactivated. When writing queries, this column can be used to filter or segment subscribers based on how they returned to active status, making it useful for analyzing which reactivation methods were most common or successful."
subscribers_ltv_logs_2016,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber last cancelled their subscription, if applicable. This date field can be used to analyze churn patterns or filter for active versus cancelled subscribers, though NULL values indicate subscribers who have never cancelled."
subscribers_ltv_logs_2016,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The most_recent_cancelation_reason column stores the last known reason why a subscriber canceled their subscription in 2016, captured as a text string up to 255 characters. This optional field (as indicated by being nullable) can be used in queries to analyze churn patterns and common cancellation reasons, helping to understand why subscribers ended their relationships with the service."
subscribers_ltv_logs_2016,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active retention behavior in 2016, such as renewing their subscription or continuing their membership. This date field can be useful in SQL queries to analyze subscriber engagement patterns, calculate retention periods, or identify the last known activity date for churned customers."
subscribers_ltv_logs_2016,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores text-based information about subscriber delivery addresses, likely containing JSON or serialized data structures with multiple address details for each subscriber. When querying this column, you may need to use JSON parsing functions or string manipulation to extract specific address components, and since it's nullable, always consider handling NULL values in your queries."
subscribers_ltv_logs_2016,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2016 stores text information about how content or services are delivered to subscribers, likely indicating delivery methods or preferences used during 2016. When querying this column, you can use standard text comparison operators (=, LIKE, etc.) to filter or group subscribers based on their delivery characteristics, though be aware the column can contain NULL values."
subscribers_ltv_logs_2016,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2016 stores text-based information about subscriber delivery preferences or patterns during 2016. When querying this column, you can use standard text operations (like LIKE, =, or string functions) to filter or analyze delivery-related data, and since it's nullable, remember to handle NULL values appropriately in your conditions."
subscribers_ltv_logs_2016,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The total_weeks_subscribed column represents the cumulative number of weeks a subscriber has maintained their subscription as of the log entry date in 2016. This integer field can be used to analyze subscription duration patterns and segment customers based on their loyalty length, with NULL values potentially indicating new or incomplete subscriber records."
subscribers_ltv_logs_2016,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The total_weeks_with_order_shipped column tracks the cumulative number of weeks where a subscriber had at least one order shipped during 2016. This integer field can be used to analyze shipping frequency patterns and customer engagement, with NULL values indicating subscribers who may not have received any shipments or where data is unavailable."
subscribers_ltv_logs_2016,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The total_weeks_on_vacation column tracks the cumulative number of weeks a subscriber has put their subscription on pause or vacation hold during 2016. This integer field can be used to analyze subscription pausing patterns and their impact on lifetime value calculations, with NULL values indicating either no vacation time taken or missing data."
subscribers_ltv_logs_2016,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column stores the percentage (as a decimal between 0 and 100) of weeks in which a subscriber placed an order during 2016, with two decimal places of precision. When writing queries, this column can be used to analyze subscriber ordering frequency and engagement patterns, such as filtering for highly active subscribers (e.g., WHERE weekly_order_take_rate > 50.00) or calculating average order participation rates across different customer segments."
subscribers_ltv_logs_2016,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2016 table tracks the cumulative number of canceled orders associated with each subscriber during 2016. This integer field can be used to analyze cancellation patterns and customer behavior, with NULL values indicating either no cancellations or missing data, and it's commonly used in aggregations or filtering conditions to identify subscribers with specific cancellation histories."
subscribers_ltv_logs_2016,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The `total_orders_declined` column in the subscribers_ltv_logs_2016 table tracks the cumulative number of declined or failed order attempts for each subscriber during 2016. This integer field can be used to analyze payment failures and subscriber friction points, with NULL values indicating either no declined orders or missing data."
subscribers_ltv_logs_2016,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The total_orders_customized column tracks the number of orders where a subscriber made customizations to their purchase during 2016. This integer field can be used to analyze customer engagement through order modifications, with NULL values indicating either no customized orders or missing data. When querying, consider using COALESCE or IFNULL functions to handle NULL values appropriately, especially when performing aggregations or comparisons."
subscribers_ltv_logs_2016,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The total_orders_shipped column tracks the cumulative number of successfully delivered orders for each subscriber during 2016. This integer field can be used to analyze shipping volume patterns and customer engagement levels, with NULL values potentially indicating new subscribers or those who haven't made any purchases that were shipped."
subscribers_ltv_logs_2016,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column stores the percentage (as a decimal between 0 and 100) of a subscriber's orders that included customizations during 2016, with precision to two decimal places. This metric can be used to analyze how frequently subscribers modify their orders, and it can be included in aggregate calculations or filtering conditions when analyzing subscriber behavior patterns."
subscribers_ltv_logs_2016,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The total_orders_refunded column tracks the cumulative number of orders that have been refunded for each subscriber during 2016. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in WHERE clauses or aggregations when analyzing subscriber behavior related to refunds."
subscribers_ltv_logs_2016,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The total_orders_generated column tracks the cumulative number of orders placed by each subscriber during 2016, stored as an integer value that can be null. This metric is useful for analyzing subscriber engagement and purchase behavior, and can be used in aggregations or filtering to identify high-value customers based on order frequency."
subscribers_ltv_logs_2016,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column stores the percentage commission or take rate earned from orders generated by subscribers, represented as a decimal value with 2 decimal places (e.g., 15.50 for 15.5%). This metric helps track the revenue share or commission structure for subscriber-generated orders during 2016, with NULL values permitted when the take rate is unknown or not applicable."
subscribers_ltv_logs_2016,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber during 2016. This numeric field can contain NULL values and typically represents monetary values, with a default of 0.00, making it useful for financial calculations and revenue analysis in subscriber lifetime value queries."
subscribers_ltv_logs_2016,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (in decimal format with 2 decimal places) for a subscriber's orders during 2016, allowing for NULL values when data is unavailable. When querying this column, you can use it to analyze typical spending patterns per subscriber or filter/group subscribers based on their average order value, with values represented in the standard currency unit (likely dollars or similar)."
subscribers_ltv_logs_2016,coupons_used,text,YES,,,,,,65535.0,,,"The ""coupons_used"" column stores text-based information about promotional coupons that subscribers have redeemed during 2016, likely containing details like coupon codes or descriptions. When querying this column, you can use string operations and pattern matching (e.g., LIKE, ILIKE) to analyze coupon usage patterns, though be aware that NULL values are possible since the column is nullable."
subscribers_ltv_logs_2016,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber in 2016, represented as a decimal number with two decimal places (e.g., 25.50). When querying this column, you can use it for calculations involving discount analysis or to filter subscribers based on their coupon usage value, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2016,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The total_products_ordered column tracks the cumulative number of products a subscriber has purchased throughout their relationship with the service as of 2016. This integer field can be used to analyze purchasing behavior and segment customers based on order volume, with NULL values potentially indicating new or inactive subscribers who haven't made any purchases."
subscribers_ltv_logs_2016,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The total_products_refunded column tracks the cumulative number of products that have been refunded by each subscriber during 2016. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in WHERE clauses or aggregations when analyzing subscriber return behavior."
subscribers_ltv_logs_2016,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage (as a decimal between 0 and 100) of product purchases that were refunded for each subscriber, with precision to two decimal places. This metric can be used in SQL queries to analyze refund patterns or filter for subscribers with specific refund rates, such as ""WHERE products_refund_rate > 5.00"" to find subscribers with refund rates above 5%."
subscribers_ltv_logs_2016,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,The total_cs_tickets column stores the cumulative count of customer service tickets submitted by each subscriber during 2016. This integer field can be used to analyze customer support engagement patterns and potentially correlate support ticket volume with subscriber lifetime value metrics.
subscribers_ltv_logs_2016,total_ratings,int,YES,,,0,,,,10.0,0.0,"The `total_ratings` column in the subscribers_ltv_logs_2016 table stores the cumulative number of ratings a subscriber has submitted during their lifetime up to the point of measurement in 2016. This integer field can be used to analyze subscriber engagement levels and can be null if a subscriber hasn't provided any ratings, making it useful for filtering or aggregating subscribers based on their rating activity."
subscribers_ltv_logs_2016,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating (on a scale likely from 0.0 to 5.0) for all orders placed by a subscriber during 2016, represented as a decimal number with one decimal place. This metric can be used in SQL queries to analyze customer satisfaction trends or filter subscribers based on their average feedback scores, with NULL values indicating subscribers who haven't received any ratings."
subscribers_ltv_logs_2016,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a decimal scale) that subscribers gave for delivery services during 2016, with one decimal place precision (e.g., 4.5). This optional field can be used in SQL queries to analyze customer satisfaction with delivery services, such as filtering for subscribers with high ratings (e.g., WHERE average_delivery_rating >= 4.0) or calculating overall delivery performance metrics."
subscribers_ltv_logs_2016,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2016 is a non-nullable datetime field that automatically records the timestamp when each LTV metric record was created, using CURRENT_TIMESTAMP as the default value. This column is useful for temporal analysis of subscriber LTV data throughout 2016 and can be used in SQL queries for filtering records by date/time or analyzing trends over specific time periods."
subscribers_ltv_logs_2016,has_received_trial_basket,date,YES,,,,,,,,,"This date column ""has_received_trial_basket"" records when a subscriber received their first trial basket of products, or NULL if they haven't received one. When writing queries, this column can be used to filter subscribers based on whether they've received a trial basket (IS NOT NULL) or to analyze the timing of trial basket distribution during 2016."
subscribers_ltv_logs_2016,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that identifies where a subscriber originated from when they first signed up. This tracking parameter is commonly used in marketing analytics to attribute subscriber acquisition to specific marketing channels or campaigns, making it useful for queries that analyze subscriber acquisition sources and their relationship to lifetime value in 2016."
subscribers_ltv_logs_2016,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, capturing the specific marketing campaign that led to their subscription. This optional varchar field can be used to analyze which marketing campaigns were most effective at acquiring valuable subscribers, and is commonly used in WHERE clauses or GROUP BY statements to segment LTV metrics by acquisition campaign."
subscribers_ltv_logs_2016,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the last known acquisition channel or referral source (as a text string) that led to a subscriber's signup in 2016. When writing queries, this column can be used to analyze subscriber value by acquisition channel or to segment subscribers based on how they originally discovered and joined the service."
subscribers_ltv_logs_2016,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,"The coupon_category_at_signup column stores an integer value representing the category of coupon (if any) that was used when the subscriber initially signed up for the service in 2016. This optional field (as indicated by being nullable) can be useful in analyzing how different types of signup promotions correlate with subscriber lifetime value, and is commonly used in WHERE clauses or GROUP BY statements when analyzing the effectiveness of various coupon categories on subscriber acquisition and value."
subscribers_ltv_logs_2016,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column stores the type of device (e.g., mobile, desktop, tablet) that a subscriber used when initially signing up for the service in 2016. When querying this column, you can use string comparison operations to filter or group subscribers based on their signup device, though be aware that NULL values are possible since the field is nullable."
subscribers_ltv_logs_2016,latest_order_shipped,date,YES,,,,,,,,,"The latest_order_shipped column stores the date when a subscriber's most recent order was shipped during 2016, helping track customer engagement through purchase activity. This date field can be useful in SQL queries for analyzing shipping patterns, identifying active vs inactive subscribers, or calculating time periods between orders."
subscribers_ltv_logs_2016,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The number_of_times_canceled column tracks how many times a subscriber has canceled their subscription throughout 2016, stored as an integer value that can be null. This metric is useful for analyzing churn patterns and customer retention, and can be used in queries to segment subscribers based on their cancellation history or to identify subscribers who have never canceled (where number_of_times_canceled = 0)."
subscribers_ltv_logs_2017,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in subscribers_ltv_logs_2017 serves as a unique identifier for each subscriber whose lifetime value metrics were tracked in 2017. When writing SQL queries, this column can be used to join with other subscriber-related tables or to filter/group LTV metrics for specific users, making it a key field for analyzing individual subscriber behavior and value."
subscribers_ltv_logs_2017,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The iso_week column represents the ISO week number (1-53) within the 2017 calendar year when subscriber LTV metrics were recorded. This non-nullable tinyint column can be used to analyze subscriber value trends on a weekly basis throughout 2017, and is commonly used in WHERE clauses or GROUP BY statements for time-based analysis."
subscribers_ltv_logs_2017,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the date when a subscriber first created their subscription in 2017, recorded as a DATE value that cannot be null. This column can be used to analyze subscriber acquisition timing and segment subscribers based on when they started their subscriptions, making it particularly useful in queries that track cohort performance or analyze subscription growth patterns over time."
subscribers_ltv_logs_2017,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required (non-nullable) tinyint field that indicates the current state of a subscriber's subscription in the 2017 LTV tracking table. When querying this column, use numeric values to filter or group subscribers based on their subscription state, though you may want to join with or reference a lookup table to get the human-readable status descriptions that correspond to each tinyint value."
subscribers_ltv_logs_2017,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required (non-nullable) tinyint field that categorizes subscribers into different subscription plan types. When querying this table, you can use this column to filter or group subscribers based on their subscription classification, with the tinyint values likely mapping to specific plan types (e.g., 1 = basic, 2 = premium, etc.) in the 2017 lifetime value tracking data."
subscribers_ltv_logs_2017,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2017 stores the calendar date when each subscriber initially registered for the service during 2017. This date field can be used in SQL queries to analyze subscriber acquisition patterns or calculate how long customers have been subscribed, though be aware it may contain NULL values for records where the signup date wasn't captured."
subscribers_ltv_logs_2017,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2017 is a tinyint field that categorizes how subscribers initially registered or joined the service during 2017. When querying this column, you can use numeric values to filter or group subscribers based on their acquisition channel or registration method, though you should consult business documentation for the specific meaning of each numeric code since it's an enumerated type."
subscribers_ltv_logs_2017,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup, captured as a text string up to 255 characters in length. This optional field (nullable) helps track which acquisition channels and campaigns are driving valuable subscriber signups, enabling analysis of marketing effectiveness and LTV by referral source."
subscribers_ltv_logs_2017,most_recent_reactivation_date,date,YES,,,,,,,,,"The most_recent_reactivation_date column stores the latest date when a subscriber reactivated their subscription after a previous cancellation or pause in 2017. This date field is useful for analyzing subscriber retention patterns and can be used in queries to identify subscribers who have returned to the service, with NULL values indicating subscribers who have never reactivated."
subscribers_ltv_logs_2017,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's most recent reactivation in 2017, with NULL values permitted when a subscriber has never been reactivated. When writing queries, this column can be used to filter or segment subscribers based on how they returned to active status, making it useful for analyzing reactivation patterns and their impact on lifetime value metrics."
subscribers_ltv_logs_2017,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber last canceled their subscription during 2017, if applicable. This column can be used to analyze churn patterns or filter for active versus canceled subscribers, and being nullable indicates that not all subscribers have canceled (NULL would represent subscribers who have never canceled)."
subscribers_ltv_logs_2017,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The ""most_recent_cancelation_reason"" column stores the latest reported reason why a subscriber canceled their subscription, captured as a text string up to 255 characters. When writing queries, this column can be used to analyze churn patterns and segment subscribers by their cancellation reasons, though be aware it can contain NULL values for subscribers who haven't canceled or where the reason wasn't recorded."
subscribers_ltv_logs_2017,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active engagement or retention behavior in 2017. This date field can be used in SQL queries to analyze subscriber retention patterns or calculate time-based metrics like days since last activity, and being nullable means some subscribers may not have any recorded retention events."
subscribers_ltv_logs_2017,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores text-based delivery address information for subscribers, likely containing JSON or structured text data with multiple address components. This nullable column can be used in queries to analyze shipping patterns or filter subscribers based on their delivery locations, though you may need to parse or extract specific address components if the data is stored in a structured format."
subscribers_ltv_logs_2017,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2017 stores text information about how content or services are delivered to subscribers, likely indicating delivery methods or preferences used during 2017. When querying this column, you can use standard text comparison operators (=, LIKE, etc.) to filter or group subscribers based on their delivery characteristics, though be aware the column can contain NULL values."
subscribers_ltv_logs_2017,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2017 stores text-based information about subscriber delivery preferences or patterns during 2017. When querying this column, you can use standard text operations (like LIKE, =, or string functions) to filter or analyze delivery-related data, and since it's nullable, remember to handle NULL values appropriately in your conditions."
subscribers_ltv_logs_2017,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The total_weeks_subscribed column represents the cumulative number of weeks a subscriber has maintained their subscription as of the log entry date in 2017. This integer field can be used to analyze subscription duration patterns and customer retention, with NULL values potentially indicating new or incomplete subscriber records."
subscribers_ltv_logs_2017,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The total_weeks_with_order_shipped column tracks the cumulative number of weeks where a subscriber had at least one order shipped during 2017. This integer field can be used to analyze shipping frequency patterns and customer engagement, with NULL values indicating subscribers who may not have received any shipments or where data is unavailable."
subscribers_ltv_logs_2017,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The total_weeks_on_vacation column tracks the cumulative number of weeks a subscriber has put their subscription on pause or vacation hold during 2017. This nullable integer field can be used to analyze how subscription pauses impact lifetime value metrics, with 0 indicating no vacation time taken. When querying, consider that NULL values may represent either unknown vacation status or subscribers who haven't yet been evaluated for vacation time."
subscribers_ltv_logs_2017,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column stores the percentage (as a decimal between 0 and 100) of weeks in which a subscriber placed an order during 2017, with two decimal places of precision. When writing queries, this column can be used to analyze subscriber engagement patterns and filter for highly active customers (higher take rates) versus occasional buyers (lower take rates), though null values should be handled appropriately as they may appear in this column."
subscribers_ltv_logs_2017,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2017 table tracks the cumulative number of canceled orders associated with each subscriber during 2017. This integer field can be used to analyze order cancellation patterns and customer behavior, with NULL values indicating either no cancellations or missing data, and it's commonly used in calculations of customer retention metrics and lifetime value analysis."
subscribers_ltv_logs_2017,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The total_orders_declined column tracks the cumulative number of failed or rejected order attempts made by a subscriber during 2017. This integer field can be useful in SQL queries to analyze payment failure patterns or identify subscribers with potential payment issues, and since it's nullable, queries should handle NULL values appropriately when performing calculations or comparisons."
subscribers_ltv_logs_2017,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The total_orders_customized column tracks the number of orders where a subscriber made customizations to their purchase during 2017. This nullable integer field can be used to analyze customer engagement through order modifications, helping identify subscribers who frequently personalize their orders. When querying, consider that null values may indicate either no customized orders or missing data."
subscribers_ltv_logs_2017,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The total_orders_shipped column represents the cumulative number of orders that have been successfully shipped to a subscriber during 2017. This integer field can be used to analyze shipping volume per subscriber and can be null if no orders were shipped, making it useful for filtering or aggregating subscriber activity based on their order fulfillment history."
subscribers_ltv_logs_2017,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column stores the percentage (as a decimal between 0 and 100) of a subscriber's orders that included customizations during 2017, with precision to two decimal places. This metric can be used to analyze how frequently subscribers modify their orders, and it can be included in SQL queries to filter or segment subscribers based on their propensity to customize orders (e.g., WHERE orders_customization_rate > 50.00 would find subscribers who customize more than half their orders)."
subscribers_ltv_logs_2017,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_orders_refunded` column in the subscribers_ltv_logs_2017 table tracks the cumulative number of refunded orders for each subscriber during 2017. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in queries calculating refund rates or identifying subscribers with high refund frequencies."
subscribers_ltv_logs_2017,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The total_orders_generated column in subscribers_ltv_logs_2017 tracks the cumulative number of orders placed by each subscriber during 2017. This integer field can be used to analyze purchasing frequency and customer engagement, making it useful for aggregations (SUM, AVG) and filtering conditions to identify high-value or inactive subscribers."
subscribers_ltv_logs_2017,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column stores the percentage commission or take rate earned from orders generated by subscribers, represented as a decimal value with 2 decimal places (e.g., 15.50 for 15.5%). This metric helps track the revenue share or commission structure for each subscriber's generated orders in 2017, with NULL values permitted when the take rate is unknown or not applicable."
subscribers_ltv_logs_2017,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber during 2017. This numeric field can contain NULL values and typically represents monetary values, making it useful for revenue-based calculations and financial analysis of subscriber behavior."
subscribers_ltv_logs_2017,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (in decimal format with 2 decimal places) for a subscriber's orders during 2017, allowing for NULL values when data is unavailable. When querying this column, you can use it to analyze typical spending patterns per subscriber or filter/group subscribers based on their average order value, with values represented in the standard currency format (e.g., 25.99)."
subscribers_ltv_logs_2017,coupons_used,text,YES,,,,,,65535.0,,,"The ""coupons_used"" column stores text-based information about promotional coupons that subscribers have redeemed during 2017, likely containing coupon codes or descriptions. When querying this column, you can use string operations and pattern matching (e.g., LIKE, ILIKE) to analyze coupon usage patterns, though be aware that NULL values are possible since the column is nullable."
subscribers_ltv_logs_2017,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber in 2017, represented as a decimal number with two decimal places (e.g., 25.50). When querying this column, you can use it to analyze discount usage patterns or calculate the net revenue impact of coupon redemptions, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2017,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The total_products_ordered column tracks the cumulative number of products a subscriber has purchased throughout their relationship with the service as of 2017. This integer field can be used to analyze purchasing behavior and segment customers based on order volume, with NULL values potentially indicating new or inactive subscribers who haven't made any purchases."
subscribers_ltv_logs_2017,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The total_products_refunded column tracks the cumulative number of products that have been refunded by each subscriber during 2017. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in queries that analyze customer retention and product return behavior."
subscribers_ltv_logs_2017,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage (as a decimal between 0 and 100) of product purchases that were refunded for each subscriber, with precision to two decimal places. This metric can be used in SQL queries to analyze refund patterns or filter for subscribers with specific refund rates, such as ""WHERE products_refund_rate > 5.00"" to find subscribers with refund rates above 5%."
subscribers_ltv_logs_2017,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,"The total_cs_tickets column represents the cumulative number of customer service tickets submitted by a subscriber during 2017. This integer field can be used to analyze customer support interaction patterns and potentially correlate support volume with lifetime value metrics, with NULL values indicating either no tickets or missing data."
subscribers_ltv_logs_2017,total_ratings,int,YES,,,0,,,,10.0,0.0,"The `total_ratings` column in the subscribers_ltv_logs_2017 table stores the cumulative number of ratings a subscriber has submitted during their lifetime up to the point of measurement in 2017. This integer field can be used to analyze subscriber engagement levels and can be null if a subscriber hasn't provided any ratings, making it useful for filtering or aggregating subscribers based on their rating activity."
subscribers_ltv_logs_2017,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating (on a scale likely from 0.0 to 5.0) for all orders placed by a subscriber during 2017, represented as a decimal number with one decimal place. This metric can be used in SQL queries to analyze customer satisfaction trends or filter subscribers based on their average feedback scores, with NULL values indicating subscribers who haven't received any ratings."
subscribers_ltv_logs_2017,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a decimal scale) that subscribers gave for delivery services during 2017, with one decimal place precision (e.g., 4.5). This optional field can be used in SQL queries to analyze customer satisfaction with delivery services, such as filtering for subscribers with high ratings (e.g., WHERE average_delivery_rating >= 4.0) or calculating overall delivery performance metrics."
subscribers_ltv_logs_2017,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2017 is a non-nullable datetime field that automatically records the timestamp when each LTV metric record was created, using CURRENT_TIMESTAMP as the default value. This column is useful for temporal analysis of subscriber LTV data throughout 2017 and can be used in SQL queries for filtering records by date/time or analyzing trends over specific time periods."
subscribers_ltv_logs_2017,has_received_trial_basket,date,YES,,,,,,,,,"This date column ""has_received_trial_basket"" records when a subscriber received their first trial basket of products, or NULL if they haven't received one. When writing queries, this column can be used to filter subscribers based on whether they've received a trial basket (IS NOT NULL) or to analyze the timing of trial basket distribution during 2017."
subscribers_ltv_logs_2017,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that identifies where a subscriber originated from when they first signed up. This optional varchar field is commonly used in WHERE clauses or GROUP BY statements to analyze subscriber acquisition channels and their impact on lifetime value metrics."
subscribers_ltv_logs_2017,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, capturing the specific marketing campaign that led to their subscription. This varchar field can be used to analyze which marketing campaigns drove subscriber acquisition and to segment LTV metrics by acquisition source, though the field may be null if UTM parameters weren't present or tracked during signup."
subscribers_ltv_logs_2017,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the last known acquisition channel or referral source (as a text string) that led to a subscriber's signup in 2017. When writing queries, this column can be used to analyze subscriber value by acquisition channel or to segment subscribers based on how they originally discovered and joined the service."
subscribers_ltv_logs_2017,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,"The coupon_category_at_signup column stores an integer value representing the category of coupon (if any) that was used when the subscriber initially signed up for the service in 2017. This optional field (as indicated by being nullable) can be useful in analyzing how different types of signup promotions correlate with subscriber lifetime value, and is commonly used in WHERE clauses or GROUP BY statements when analyzing promotion effectiveness."
subscribers_ltv_logs_2017,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column stores the type of device (e.g., mobile, desktop, tablet) that a subscriber used when initially signing up for the service in 2017. When querying this column, you can use string comparison operations to filter or group subscribers based on their signup device, though be aware that the field may contain NULL values since it's nullable."
subscribers_ltv_logs_2017,latest_order_shipped,date,YES,,,,,,,,,"The `latest_order_shipped` column in the subscribers_ltv_logs_2017 table stores the date when a subscriber's most recent order was shipped during 2017. This date field can be used in SQL queries to analyze shipping patterns, measure time between orders, or identify subscribers with recent activity, though null values are possible if a subscriber hasn't placed any shipped orders in the tracking period."
subscribers_ltv_logs_2017,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The number_of_times_canceled column tracks how many times a subscriber has canceled their subscription throughout 2017, stored as an integer value that can be null. This metric is useful for analyzing churn patterns and customer retention, and can be used in queries to segment subscribers based on their cancellation history or to identify subscribers who have never canceled (where number_of_times_canceled = 0)."
subscribers_ltv_logs_2018,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in subscribers_ltv_logs_2018 serves as a unique identifier for each subscriber whose lifetime value metrics were tracked during 2018. When writing SQL queries, this column can be used to join with other subscriber-related tables or to filter/group LTV metrics for specific users, making it a key field for analyzing individual subscriber behavior and value."
subscribers_ltv_logs_2018,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The iso_week column represents the ISO week number (1-53) within the 2018 calendar year when subscriber LTV metrics were recorded. This column can be used to group and analyze subscriber value trends by week, enabling time-based analysis and reporting of LTV metrics throughout 2018."
subscribers_ltv_logs_2018,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the date when a subscriber first created their subscription, represented in a standard date format. This non-nullable field is essential for analyzing subscriber acquisition timing and calculating the duration of customer relationships, making it particularly useful in queries that need to segment or analyze subscribers based on when they started their subscriptions in 2018."
subscribers_ltv_logs_2018,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required (non-nullable) tinyint field that indicates the current state of a subscriber's subscription in the 2018 LTV tracking table. When querying this column, you can use it to filter or group subscribers based on their subscription state, though you should refer to the application documentation for the specific numeric codes that represent different statuses (e.g., active, cancelled, paused)."
subscribers_ltv_logs_2018,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required (non-nullable) tinyint field that categorizes subscribers into different subscription plan types. When querying this table, you can use this column to filter or group subscribers based on their subscription classification, with the tinyint values likely representing different subscription tiers or categories that were active during 2018."
subscribers_ltv_logs_2018,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2018 stores the calendar date when each subscriber initially registered for the service during 2018. This date field can be used in SQL queries to analyze subscriber acquisition patterns or calculate the duration of subscriptions, though be aware it may contain NULL values for records where the signup date wasn't captured."
subscribers_ltv_logs_2018,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2018 is a tinyint field that categorizes how subscribers initially registered or joined the service during 2018. When querying this column, you can use numeric values to filter or group subscribers based on their registration method, though you should consult business documentation for the specific meaning of each signup_type value since it uses a tinyint encoding."
subscribers_ltv_logs_2018,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup, captured as a text string up to 255 characters in length. This optional field (nullable) helps track which acquisition channels and campaigns are driving valuable subscriber signups, enabling analysis of marketing effectiveness and LTV by referral source."
subscribers_ltv_logs_2018,most_recent_reactivation_date,date,YES,,,,,,,,,"The most_recent_reactivation_date column stores the latest date when a subscriber reactivated their subscription after a previous cancellation or pause in 2018. This date field is useful for analyzing subscriber retention patterns and can be used in queries to identify subscribers who have returned to the service, with NULL values indicating subscribers who have never reactivated."
subscribers_ltv_logs_2018,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's most recent reactivation in 2018, with NULL values permitted when a subscriber has never been reactivated. When writing queries, this column can be used to filter or segment subscribers based on how they returned to active status, making it useful for analyzing reactivation patterns and their impact on lifetime value."
subscribers_ltv_logs_2018,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber last canceled their subscription during 2018, if applicable. This date field can be used to analyze churn patterns or filter for active versus canceled subscribers, though NULL values indicate subscribers who have never canceled their subscription."
subscribers_ltv_logs_2018,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The most_recent_cancelation_reason column stores the last known reason why a subscriber canceled their subscription in 2018, captured as a text string up to 255 characters. This optional field (as indicated by being nullable) can be used in queries to analyze churn patterns and common cancellation reasons, helping to understand why subscribers ended their relationships with the service."
subscribers_ltv_logs_2018,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active retention behavior in 2018, such as renewing their subscription or continuing their membership. This date field can be useful in SQL queries to analyze subscriber engagement patterns, calculate retention periods, or identify the last known activity date for churned customers."
subscribers_ltv_logs_2018,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores text-based delivery address information for subscribers, likely containing JSON or serialized data structures with multiple address components. When querying this column, you may need to parse or extract specific address elements, and since it's nullable, always consider handling NULL values appropriately in your queries."
subscribers_ltv_logs_2018,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2018 stores text information about how content or services are delivered to subscribers, likely indicating delivery methods or preferences used during 2018. When querying this column, you can use standard text comparison operators (=, LIKE, etc.) to filter or group subscribers based on their delivery characteristics, though be aware the column can contain NULL values."
subscribers_ltv_logs_2018,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2018 stores text-based information about subscriber delivery preferences or patterns during 2018. When querying this column, you can use standard text operations (like LIKE, =, or string functions) to filter or analyze delivery-related data, and since it's nullable, remember to handle NULL values appropriately in your queries."
subscribers_ltv_logs_2018,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The total_weeks_subscribed column represents the cumulative number of weeks a subscriber has maintained their subscription as of the log entry date in 2018. This integer field can be used to analyze subscription duration patterns and customer retention, with NULL values potentially indicating new or incomplete subscriber records."
subscribers_ltv_logs_2018,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The total_weeks_with_order_shipped column tracks the cumulative number of weeks where a subscriber had at least one order shipped during 2018. This integer field can be used to analyze shipping frequency patterns and customer engagement, with NULL values potentially indicating subscribers who haven't received any shipments. When querying, this column is useful for segmenting subscribers based on shipping activity and calculating shipping frequency metrics."
subscribers_ltv_logs_2018,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The total_weeks_on_vacation column tracks the cumulative number of weeks a subscriber has put their subscription on pause or vacation hold during 2018. This integer field can be used to analyze subscription pause patterns and their impact on lifetime value calculations, with NULL values indicating either no vacation time taken or missing data."
subscribers_ltv_logs_2018,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column stores the percentage (as a decimal between 0 and 100) of weeks in which a subscriber placed an order during 2018, with two decimal places of precision. When writing queries, this column can be used to analyze subscriber engagement patterns and filter for highly active customers (higher take rates) versus occasional buyers (lower take rates)."
subscribers_ltv_logs_2018,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2018 table tracks the cumulative number of canceled orders associated with each subscriber during 2018. This integer field can be used to analyze order cancellation patterns and customer behavior, with NULL values permitted when cancellation data is unavailable or not applicable."
subscribers_ltv_logs_2018,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The `total_orders_declined` column in the subscribers_ltv_logs_2018 table tracks the cumulative number of failed or rejected order attempts by each subscriber during 2018. This integer field can be used to analyze payment failures and customer friction points, with NULL values indicating either no declined orders or missing data, and is commonly used in WHERE clauses or aggregations to identify subscribers with payment issues."
subscribers_ltv_logs_2018,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The total_orders_customized column tracks the number of orders where a subscriber made customizations to their purchase during 2018. This nullable integer field can be used to analyze customer engagement through order modifications, helping identify subscribers who actively personalize their purchases. When querying, consider that null values may indicate either no customized orders or missing data."
subscribers_ltv_logs_2018,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The total_orders_shipped column tracks the cumulative number of successfully delivered orders for each subscriber throughout 2018. This integer field can be used to analyze shipping volume patterns and customer engagement levels, with NULL values potentially indicating new subscribers or those who haven't made any purchases that required shipping."
subscribers_ltv_logs_2018,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column stores the percentage (as a decimal between 0 and 100) of a subscriber's orders that included customizations during 2018, with precision to two decimal places. This metric can be used to analyze how frequently subscribers modify their orders, which is useful for understanding customer preferences and engagement patterns in queries that analyze purchasing behavior."
subscribers_ltv_logs_2018,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_orders_refunded` column in the subscribers_ltv_logs_2018 table tracks the cumulative number of refunded orders for each subscriber during 2018. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in queries calculating refund rates or identifying subscribers with high refund frequencies."
subscribers_ltv_logs_2018,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The total_orders_generated column in subscribers_ltv_logs_2018 tracks the cumulative number of orders placed by each subscriber throughout 2018. This integer field can be used to analyze purchasing frequency and customer engagement, making it useful for aggregations and filtering queries to identify high-value or inactive subscribers (null values are allowed, defaulting to 0 for new subscribers)."
subscribers_ltv_logs_2018,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column stores the percentage commission or take rate earned from orders generated by subscribers, represented as a decimal value with 2 decimal places (e.g., 15.50 for 15.5%). This metric helps track the revenue share or commission structure for each subscriber's generated orders in 2018, with NULL values permitted when the take rate is not applicable or unknown."
subscribers_ltv_logs_2018,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber during 2018. This numeric field can contain NULL values and typically represents monetary values, making it useful for revenue-based calculations and financial analysis of subscriber behavior."
subscribers_ltv_logs_2018,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (in decimal format with 2 decimal places) for a subscriber's orders, representing their typical spending behavior. This column can be used in SQL queries to analyze customer spending patterns or segment subscribers by their average order value, with NULL values indicating subscribers who haven't made any purchases."
subscribers_ltv_logs_2018,coupons_used,text,YES,,,,,,65535.0,,,"The ""coupons_used"" column stores text-based information about promotional coupons that subscribers have redeemed during 2018, likely in a comma-separated or similar format. When querying this column, consider using string manipulation functions (like SPLIT, REGEXP, etc.) to analyze coupon usage patterns, and remember that the field can contain NULL values if no coupons were used by a subscriber."
subscribers_ltv_logs_2018,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber throughout 2018, represented as a decimal number with two decimal places (e.g., 25.50). When analyzing subscriber behavior and LTV calculations, this column can be used to understand discount usage patterns and their impact on revenue, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2018,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The total_products_ordered column tracks the cumulative number of products a subscriber has purchased throughout their relationship with the service as of 2018. This integer field can be used to analyze purchasing behavior and segment customers based on order volume, with NULL values potentially indicating new or inactive subscribers who haven't made any purchases."
subscribers_ltv_logs_2018,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The total_products_refunded column tracks the cumulative number of products that have been refunded by each subscriber during 2018. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in queries that analyze customer retention and product return behavior."
subscribers_ltv_logs_2018,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage (as a decimal between 0 and 100) of product purchases that were refunded for each subscriber, with precision to two decimal places. This metric helps analyze customer satisfaction and return behavior, where a higher refund rate might indicate product quality issues or customer dissatisfaction, and can be used in SQL queries to filter or analyze subscribers based on their refund patterns (e.g., WHERE products_refund_rate > 5.00 to find subscribers with refund rates above 5%)."
subscribers_ltv_logs_2018,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,The total_cs_tickets column represents the cumulative number of customer service tickets submitted by a subscriber during 2018. This integer field can be used to analyze customer support engagement patterns and potentially correlate support ticket volume with subscriber lifetime value metrics.
subscribers_ltv_logs_2018,total_ratings,int,YES,,,0,,,,10.0,0.0,"The `total_ratings` column in the subscribers_ltv_logs_2018 table stores the cumulative number of ratings a subscriber has submitted throughout their membership as of 2018. This integer field can be used to analyze subscriber engagement levels and can be null if a subscriber hasn't provided any ratings, making it useful for filtering or aggregating subscribers based on their rating activity."
subscribers_ltv_logs_2018,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating (on a scale likely from 0.0 to 5.0) for all orders placed by a subscriber during 2018, represented as a decimal number with one decimal place. This metric can be used in SQL queries to analyze customer satisfaction trends or filter subscribers based on their average feedback scores, with NULL values indicating subscribers who haven't received any ratings."
subscribers_ltv_logs_2018,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a decimal scale) that subscribers gave for delivery services during 2018, with one decimal place precision (e.g., 4.5). This optional field can be used in SQL queries to analyze customer satisfaction with delivery services, such as filtering for subscribers with high ratings (e.g., WHERE average_delivery_rating >= 4.0) or calculating overall delivery performance metrics."
subscribers_ltv_logs_2018,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2018 is a non-nullable datetime field that automatically records the timestamp when each LTV metric entry was created, using CURRENT_TIMESTAMP as the default value. This column is useful for temporal analysis of subscriber LTV data throughout 2018 and can be used in SQL queries for filtering, grouping, or ordering records by their creation date and time."
subscribers_ltv_logs_2018,has_received_trial_basket,date,YES,,,,,,,,,"This date column ""has_received_trial_basket"" records when a subscriber received their first trial basket of products, or NULL if they haven't received one. When writing queries, this column can be used to filter subscribers based on whether they've received a trial basket (IS NOT NULL) or to analyze the timing of trial basket distribution during 2018."
subscribers_ltv_logs_2018,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that identifies where a subscriber originated from when they first signed up. This optional varchar field is commonly used in WHERE clauses or GROUP BY statements to analyze subscriber acquisition channels and their impact on lifetime value metrics during 2018."
subscribers_ltv_logs_2018,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter (a tracking code) that was present when a subscriber initially signed up, helping identify which marketing campaigns led to user acquisition. This optional varchar field can be used in SQL queries to analyze subscriber acquisition sources and measure marketing campaign effectiveness, such as ""SELECT COUNT(*) FROM subscribers_ltv_logs_2018 GROUP BY signup_utm_campaign"" to see subscriber counts by campaign."
subscribers_ltv_logs_2018,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the last known acquisition channel or referral source (as a text string) that led to a subscriber's signup in 2018. When writing queries, this column can be used to analyze subscriber value by acquisition channel or to segment subscribers based on how they originally discovered and joined the service."
subscribers_ltv_logs_2018,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,"The coupon_category_at_signup column stores an integer value representing the category of coupon (if any) that was used when the subscriber initially signed up for the service in 2018. This optional field (as indicated by being nullable) can be useful in analyzing how different types of signup promotions correlate with subscriber lifetime value, and is commonly used in WHERE clauses or GROUP BY statements when analyzing promotion effectiveness."
subscribers_ltv_logs_2018,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column stores the type of device (e.g., mobile, desktop, tablet) that a subscriber used when initially signing up for the service in 2018. When querying this column, you can use string comparison operations to filter or group subscribers based on their signup device, though be aware that the field may contain NULL values since it's nullable."
subscribers_ltv_logs_2018,latest_order_shipped,date,YES,,,,,,,,,"The latest_order_shipped column stores the date when a subscriber's most recent order was shipped during 2018, helping track customer engagement through purchase activity. This date field can be useful in SQL queries for analyzing shipping patterns, identifying active vs inactive subscribers, or calculating time periods between orders."
subscribers_ltv_logs_2018,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The number_of_times_canceled column tracks how many times a subscriber has canceled their subscription throughout 2018, stored as an integer value that can be null. This metric is useful for analyzing churn patterns and customer retention, and can be used in queries to segment subscribers based on their cancellation history or to identify subscribers who have never canceled (where number_of_times_canceled = 0)."
subscribers_ltv_logs_2019,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in subscribers_ltv_logs_2019 serves as a unique identifier for each subscriber whose lifetime value metrics are being tracked. This required integer field can be used to join with other subscriber-related tables and is essential for filtering or grouping LTV metrics for specific users during 2019.
subscribers_ltv_logs_2019,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The iso_week column represents the ISO week number (1-53) within the 2019 calendar year when subscriber LTV metrics were recorded. This column can be used to group and analyze subscriber value trends by week, enabling time-based analysis and reporting of LTV metrics throughout 2019."
subscribers_ltv_logs_2019,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the date when a subscriber first created their subscription, represented in a standard date format. This non-nullable field is essential for analyzing subscriber acquisition timing and calculating the duration of customer relationships, making it particularly useful in queries that need to segment or analyze subscribers based on when they started their subscriptions in 2019."
subscribers_ltv_logs_2019,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required (non-nullable) tinyint field that indicates the current state of a subscriber's subscription in the LTV tracking system during 2019. When querying this column, use integer values to filter or group subscribers based on their subscription state, though you may want to join with or reference documentation for the specific status code meanings since they're stored as tinyint values rather than descriptive text."
subscribers_ltv_logs_2019,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required (non-nullable) tinyint field that categorizes subscribers into different subscription plan types. When querying this table, you can use this column to filter or group subscribers based on their subscription classification, with the tinyint values likely mapping to specific plan types (e.g., 1 = basic, 2 = premium, etc.) in the 2019 lifetime value tracking data."
subscribers_ltv_logs_2019,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2019 stores the calendar date when each subscriber initially registered for the service during 2019. This date field can be used in SQL queries for temporal analysis of subscriber acquisition patterns or to calculate subscription duration, though be aware it may contain NULL values for records where the signup date wasn't captured."
subscribers_ltv_logs_2019,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2019 is a tinyint field that categorizes how subscribers initially registered or joined the service in 2019. When querying this column, you can use numeric values to filter or group subscribers based on their registration method, though you should consult business documentation for the specific meaning of each signup_type value (e.g., 1 might represent email signup, 2 for social media signup, etc.)."
subscribers_ltv_logs_2019,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup, captured as a text string up to 255 characters. When writing queries, this column can be used to analyze subscriber acquisition channels and segment LTV metrics by marketing source, though be aware it may contain NULL values for cases where the referral source wasn't tracked."
subscribers_ltv_logs_2019,most_recent_reactivation_date,date,YES,,,,,,,,,"The most_recent_reactivation_date column stores the latest date when a subscriber reactivated their subscription after a previous cancellation or pause in 2019. This date field is useful for analyzing subscriber retention patterns and can be used in queries to identify subscribers who have returned to the service, with NULL values indicating subscribers who have never reactivated or cancelled their subscription."
subscribers_ltv_logs_2019,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's most recent reactivation in 2019, with NULL values permitted when a subscriber has never been reactivated. When writing queries, this column can be used to filter or segment subscribers based on how they returned to active status, making it useful for analyzing reactivation patterns and their impact on lifetime value."
subscribers_ltv_logs_2019,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber last canceled their subscription, if applicable. This date field can be used to analyze churn patterns or filter for active versus canceled subscribers, with NULL values indicating subscribers who have never canceled their subscription."
subscribers_ltv_logs_2019,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The most_recent_cancelation_reason column stores the last known reason why a subscriber canceled their subscription in 2019, captured as a text string up to 255 characters. This optional field (as indicated by being nullable) can be used in queries to analyze churn patterns and common cancellation reasons, helping to understand why subscribers ended their relationships with the service."
subscribers_ltv_logs_2019,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active retention behavior in 2019, such as renewing their subscription or continuing their membership. This date field can be useful in SQL queries to analyze subscriber engagement patterns, calculate retention periods, or identify the last known activity date for churned customers."
subscribers_ltv_logs_2019,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores text-based information about subscriber delivery addresses, likely containing JSON or structured text data with address details for each subscriber. This optional column (as indicated by being nullable) can be used in queries to analyze shipping patterns or filter subscribers based on their delivery location information."
subscribers_ltv_logs_2019,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2019 stores text information about how content or services are delivered to subscribers, likely indicating delivery methods or preferences used during 2019. When querying this column, you can use standard text comparison operators (=, LIKE, etc.) to filter or group subscribers based on their delivery characteristics, though be aware the column can contain NULL values."
subscribers_ltv_logs_2019,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2019 stores text-based information about subscriber delivery preferences or patterns during 2019. When querying this column, you can use standard text operations (like LIKE, =, or string functions) to filter or analyze delivery-related data, and since it's nullable, remember to handle NULL values appropriately in your conditions."
subscribers_ltv_logs_2019,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The total_weeks_subscribed column represents the cumulative number of weeks a customer has maintained their subscription as of the log entry date in 2019. This integer field can be used to analyze subscription duration patterns and customer retention, with NULL values potentially indicating new or incomplete subscriber records."
subscribers_ltv_logs_2019,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The total_weeks_with_order_shipped column tracks the cumulative number of weeks where a subscriber had at least one order shipped during 2019. This integer field can be used to analyze subscriber engagement patterns and shipping frequency, with NULL values potentially indicating subscribers who haven't received any shipments. When querying, this column is useful for segmenting subscribers based on their shipping activity levels or calculating average shipping frequencies across different customer groups."
subscribers_ltv_logs_2019,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The total_weeks_on_vacation column tracks the cumulative number of weeks a subscriber has put their subscription on pause or vacation hold during 2019. This integer field can be used to analyze subscription pausing patterns and their impact on lifetime value calculations, with NULL values indicating either no vacation time taken or missing data."
subscribers_ltv_logs_2019,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column stores the percentage (as a decimal between 0 and 100) of weeks in which a subscriber placed an order during 2019, with two decimal places of precision. When writing queries, this column can be used to filter or analyze subscriber engagement patterns, such as finding highly active subscribers (e.g., WHERE weekly_order_take_rate > 75.00) or calculating average order frequency across different customer segments."
subscribers_ltv_logs_2019,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2019 table tracks the cumulative number of canceled orders associated with each subscriber during 2019. This integer field can be used to analyze cancellation patterns and customer behavior, with NULL values permitted when cancellation data is unavailable or not applicable."
subscribers_ltv_logs_2019,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The total_orders_declined column tracks the number of failed or declined order attempts made by a subscriber during 2019. This integer field can be used to analyze payment failures and customer friction points, with NULL values potentially indicating new subscribers or those who haven't attempted any orders yet."
subscribers_ltv_logs_2019,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The total_orders_customized column tracks the number of orders where a subscriber made customizations to their purchase during 2019. This integer field can be used to analyze customer engagement through order modifications, with NULL values indicating either no customized orders or missing data. When querying, consider using COALESCE or IFNULL functions to handle NULL values appropriately."
subscribers_ltv_logs_2019,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The total_orders_shipped column represents the cumulative number of orders that have been successfully shipped to a subscriber throughout their relationship with the business up until the point of measurement in 2019. This integer field can be used to analyze shipping volume patterns and customer engagement, with NULL values potentially indicating new subscribers or those who haven't made any purchases yet."
subscribers_ltv_logs_2019,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column represents the percentage (stored as a decimal between 0 and 100) of a subscriber's orders that included customizations or modifications during 2019. This metric can be used in SQL queries to analyze customer behavior patterns and preference for customization, with NULL values indicating subscribers who haven't placed any orders or where customization data isn't available."
subscribers_ltv_logs_2019,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_orders_refunded` column in the subscribers_ltv_logs_2019 table tracks the cumulative number of refunded orders for each subscriber during 2019. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in queries calculating refund rates or identifying subscribers with high refund frequencies."
subscribers_ltv_logs_2019,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The total_orders_generated column in subscribers_ltv_logs_2019 tracks the cumulative number of orders placed by each subscriber throughout 2019. This integer field can be used to analyze purchasing frequency and customer engagement, making it useful for aggregations, filtering, and segmentation queries where you need to identify subscribers based on their order volume."
subscribers_ltv_logs_2019,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The `orders_generated_take_rate` column stores the percentage commission or take rate earned from orders generated by subscribers, represented as a decimal number with 2 decimal places (e.g., 15.50 for 15.5%). This metric helps track the revenue share or commission structure for each subscriber's generated orders in 2019, with NULL values permitted when the take rate is not applicable or unknown."
subscribers_ltv_logs_2019,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber during 2019. This numeric field can contain NULL values and typically represents monetary values, with a default of 0.00, making it useful for financial calculations and revenue analysis in subscriber lifetime value queries."
subscribers_ltv_logs_2019,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (in decimal format with 2 decimal places) for a subscriber's orders, providing insight into typical spending patterns. This column can be used in SQL queries to analyze customer spending behavior, segment customers by average order value, or calculate revenue metrics, with NULL values indicating subscribers who haven't made any purchases."
subscribers_ltv_logs_2019,coupons_used,text,YES,,,,,,65535.0,,,"The ""coupons_used"" column stores a text representation of discount coupons that subscribers have redeemed during 2019, likely in a comma-separated or similar format. When querying this column, consider using string manipulation functions (like SPLIT, REGEXP, or LIKE) to analyze coupon usage patterns, and remember that NULL values are possible since the column is nullable."
subscribers_ltv_logs_2019,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber in 2019, represented as a decimal number with two decimal places (e.g., 25.50). When querying this column, you can use it for calculations involving discount analysis or to filter subscribers based on their coupon usage value, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2019,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The total_products_ordered column tracks the cumulative number of products a subscriber has purchased throughout their relationship with the service as of 2019. This integer field can be used to analyze purchasing behavior and segment customers based on order volume, with NULL values potentially indicating new or inactive subscribers who haven't made any purchases."
subscribers_ltv_logs_2019,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_products_refunded` column in the subscribers_ltv_logs_2019 table tracks the cumulative number of products that have been refunded by each subscriber during 2019. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful in queries that analyze subscriber behavior and retention risks."
subscribers_ltv_logs_2019,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage (as a decimal between 0 and 100) of product purchases that resulted in refunds for each subscriber, with precision to two decimal places. This metric can be used in SQL queries to analyze refund patterns or filter for subscribers with specific refund rates, such as ""WHERE products_refund_rate > 5.00"" to find subscribers with refund rates above 5%."
subscribers_ltv_logs_2019,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,The total_cs_tickets column represents the cumulative number of customer service tickets submitted by a subscriber during 2019. This integer field can be used to analyze customer support engagement patterns and potentially correlate support ticket volume with subscriber lifetime value metrics.
subscribers_ltv_logs_2019,total_ratings,int,YES,,,0,,,,10.0,0.0,"The `total_ratings` column in the subscribers_ltv_logs_2019 table stores the cumulative number of ratings a subscriber has submitted during their lifetime up to the point of measurement in 2019. This integer field can be used to analyze subscriber engagement levels and can be null if a subscriber hasn't provided any ratings, making it useful for filtering or aggregating subscribers based on their rating activity."
subscribers_ltv_logs_2019,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating (on a scale likely from 0.0 to 5.0) for all orders placed by a subscriber during 2019, represented as a decimal number with one decimal place. This metric can be used in SQL queries to analyze customer satisfaction trends or filter subscribers based on their average feedback scores, with NULL values indicating subscribers who haven't received any ratings."
subscribers_ltv_logs_2019,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a decimal scale) that subscribers gave for delivery services during 2019, with one decimal place precision (e.g., 4.5). This optional field can be used in SQL queries to analyze customer satisfaction with delivery services, such as filtering for subscribers with high ratings (e.g., WHERE average_delivery_rating >= 4.0) or calculating overall delivery performance metrics."
subscribers_ltv_logs_2019,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2019 is a non-nullable datetime field that automatically records the timestamp when each LTV log entry is created. This column can be used for temporal analysis and filtering of subscriber LTV data throughout 2019, such as tracking when specific value metrics were recorded or analyzing trends over time periods."
subscribers_ltv_logs_2019,has_received_trial_basket,date,YES,,,,,,,,,"This date column ""has_received_trial_basket"" records when a subscriber received their first trial basket of products, or NULL if they haven't received one. When writing queries, this column can be used to filter subscribers based on trial basket receipt dates or to identify subscribers who have/haven't participated in trial basket programs during 2019."
subscribers_ltv_logs_2019,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that identifies where a subscriber originated from when they first signed up. This optional varchar field is commonly used in WHERE clauses or GROUP BY statements to analyze subscriber acquisition channels and their impact on lifetime value metrics."
subscribers_ltv_logs_2019,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, capturing the specific marketing campaign that led to their subscription. This optional varchar field can be used to analyze which marketing campaigns drove valuable subscriber acquisitions, making it useful for JOIN operations with marketing campaign tables or for grouping and filtering subscribers based on their acquisition source."
subscribers_ltv_logs_2019,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the last known acquisition channel or referral source (like 'organic_search', 'email_campaign', or 'social_media') that led to a subscriber's signup in 2019. This text field can be used in SQL queries to analyze subscriber acquisition patterns and segment users by their entry point, though be aware it can contain NULL values if the signup source wasn't captured."
subscribers_ltv_logs_2019,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,"The coupon_category_at_signup column stores an integer value representing the category of coupon (if any) that was used when the subscriber initially signed up. This optional field (as indicated by being nullable) can be useful in analyzing how different types of signup promotions affect subscriber lifetime value, and can be used in GROUP BY clauses or WHERE conditions to segment subscribers based on their initial promotional category."
subscribers_ltv_logs_2019,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column stores the type of device (e.g., mobile, desktop, tablet) that a subscriber used when initially signing up for the service in 2019. When querying this column, you can use string comparison operations to filter or group subscribers based on their signup device, though be aware that NULL values are possible since the field is nullable."
subscribers_ltv_logs_2019,latest_order_shipped,date,YES,,,,,,,,,"The latest_order_shipped column stores the date when a subscriber's most recent order was shipped during 2019, helping track customer engagement through purchase activity. This date field can be useful in SQL queries for analyzing shipping patterns, identifying active vs inactive subscribers, or calculating time periods between orders."
subscribers_ltv_logs_2019,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The `number_of_times_canceled` column in the subscribers_ltv_logs_2019 table tracks how many times a subscriber has canceled their subscription throughout 2019. This integer field can be used to analyze churn patterns and customer retention, with a default value of 0, and allows NULL values for cases where the cancellation count might not be applicable or known."
subscribers_ltv_logs_2020,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in subscribers_ltv_logs_2020 serves as a unique identifier for each subscriber whose lifetime value metrics were tracked in 2020. This integer column is required (non-nullable) and can be used to join with other subscriber-related tables or to filter/group LTV calculations for specific users.
subscribers_ltv_logs_2020,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The iso_week column represents the ISO week number (1-53) within the year 2020 when specific LTV calculations were performed for subscribers. This column can be used to group or filter subscriber LTV metrics by week, enabling time-based analysis and comparisons of subscriber value throughout the year."
subscribers_ltv_logs_2020,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the date when a subscriber first created their subscription, represented in a standard date format. This non-nullable field is essential for analyzing subscriber cohorts and calculating the duration of customer relationships, making it particularly useful in WHERE clauses for filtering subscribers based on when they joined or in calculations involving subscription age and retention periods."
subscribers_ltv_logs_2020,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required (non-nullable) tinyint field that indicates the current state of a subscriber's subscription using numeric codes. When querying this table, use this column to filter or segment subscribers based on their subscription state (e.g., active, cancelled, paused) during 2020, with the specific status values likely documented in the application code or business logic."
subscribers_ltv_logs_2020,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required (non-nullable) tinyint field that categorizes subscribers into different subscription plan types or tiers. When querying this table, you can use this column to filter or group LTV metrics by subscription category, with the tinyint values likely mapping to specific subscription plans (e.g., 1 = basic, 2 = premium, etc.)."
subscribers_ltv_logs_2020,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2020 stores the date when each subscriber initially registered for the service during or before 2020. This date field can be used to analyze subscriber cohorts, calculate subscription duration, and segment users based on when they joined, making it particularly useful in WHERE clauses for time-based filtering or JOIN operations when analyzing subscriber behavior over time."
subscribers_ltv_logs_2020,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2020 is a tinyint field that categorizes how subscribers initially joined the service in 2020, likely using small numeric codes to represent different registration methods or channels (e.g., 1 for direct, 2 for referral, etc.). When querying this column, you can use numeric comparisons to filter or group subscribers based on their acquisition channel, though you should handle NULL values appropriately since the field is nullable."
subscribers_ltv_logs_2020,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup in 2020, captured as a text string up to 255 characters. This optional field can be used in SQL queries to analyze subscriber lifetime value (LTV) metrics grouped by acquisition channel or to filter for subscribers from specific marketing campaigns."
subscribers_ltv_logs_2020,most_recent_reactivation_date,date,YES,,,,,,,,,"The most_recent_reactivation_date column stores the latest date when a subscriber reactivated their subscription after a previous cancellation or pause in 2020. This date field is useful for analyzing subscriber retention patterns and can be used in SQL queries to identify subscribers who have returned to the service, with NULL values indicating subscribers who have never reactivated or cancelled their subscription."
subscribers_ltv_logs_2020,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's most recent reactivation in 2020, with NULL values permitted when a subscriber has never been reactivated. When writing queries, this column can be used to segment or filter subscribers based on how they returned to active status (e.g., ""WHERE most_recent_reactivation_type = 1"" to analyze subscribers who reactivated through a specific channel or method)."
subscribers_ltv_logs_2020,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber last canceled their subscription during 2020, if applicable. This date field can be used to analyze churn patterns and retention metrics, and since it's nullable, subscribers who never canceled will have NULL values in this column."
subscribers_ltv_logs_2020,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The most_recent_cancelation_reason column stores the last known reason why a subscriber canceled their subscription, captured as a text string up to 255 characters. This column can be used to analyze churn patterns and segment subscribers based on their cancellation motivations, though it may contain NULL values for active subscribers or cases where no reason was provided."
subscribers_ltv_logs_2020,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active retention behavior in 2020, such as renewing their subscription or showing continued engagement. This date field can be used in SQL queries to analyze subscriber retention patterns, calculate churn risk, or segment customers based on their last known active status, making it particularly useful in WHERE clauses for filtering subscribers based on retention timeframes."
subscribers_ltv_logs_2020,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores text-based information about subscriber delivery addresses, likely in a structured format such as JSON or serialized data. This column can be used to analyze shipping patterns or geographical distribution of subscribers, though since it's nullable, some subscriber records may not have associated address data."
subscribers_ltv_logs_2020,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2020 stores text information about how content or services are delivered to subscribers, which could include values like ""digital"", ""physical"", or ""hybrid"". When querying this column, you can use string operations and comparisons to filter or group subscribers based on their delivery preferences, though be aware the column can contain NULL values."
subscribers_ltv_logs_2020,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2020 stores text-based information about subscriber delivery patterns or preferences during 2020. When querying this column, you can use string operations to analyze delivery-related data points, and since it's nullable, remember to handle NULL values appropriately in your queries using IS NULL or IS NOT NULL conditions."
subscribers_ltv_logs_2020,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The total_weeks_subscribed column represents the cumulative number of weeks a subscriber has maintained their subscription as of 2020. This integer field can be used to analyze subscriber longevity and retention patterns, making it useful in queries that segment customers by subscription duration or calculate average subscription length, with NULL values potentially indicating new or incomplete subscriber records."
subscribers_ltv_logs_2020,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_with_order_shipped` column in the subscribers_ltv_logs_2020 table represents the cumulative number of weeks where a subscriber had at least one order shipped during 2020. This integer value can be used to analyze subscriber engagement patterns and shipping frequency, making it useful in queries that need to segment customers based on their order activity or calculate shipping-related metrics."
subscribers_ltv_logs_2020,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_on_vacation` column in the subscribers_ltv_logs_2020 table represents the cumulative number of weeks a subscriber has put their subscription on pause or vacation mode during 2020. This nullable integer field can be used to analyze subscription pausing patterns and their impact on lifetime value calculations, with a default value of 0 indicating no vacation time taken."
subscribers_ltv_logs_2020,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column represents the percentage (as a decimal between 0 and 100) of weeks in which a subscriber placed an order during 2020, stored with 2 decimal places of precision. When writing queries, this column can be used to filter or analyze subscriber ordering frequency patterns, such as finding highly active customers (high take rates) or identifying subscribers who rarely place orders (low take rates)."
subscribers_ltv_logs_2020,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2020 table stores the cumulative count of canceled orders associated with each subscriber during 2020. This integer field can be used to analyze order cancellation patterns and customer behavior, with NULL values permitted when cancellation data is unavailable or not applicable."
subscribers_ltv_logs_2020,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The `total_orders_declined` column in the subscribers_ltv_logs_2020 table stores the cumulative count of declined or failed order attempts for each subscriber during 2020. This integer field can be used to analyze payment failures and customer friction points, with NULL values potentially indicating new subscribers or those who haven't attempted any purchases."
subscribers_ltv_logs_2020,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The total_orders_customized column in subscribers_ltv_logs_2020 represents the number of customized or personalized orders placed by each subscriber during 2020. This optional integer field helps track subscriber engagement through their customized purchase behavior, which can be useful for analyzing customer preferences and personalization trends in LTV calculations."
subscribers_ltv_logs_2020,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The total_orders_shipped column represents the cumulative number of orders that have been successfully shipped to a subscriber throughout their relationship with the business up until the point of measurement in 2020. This integer field can be used to analyze customer purchase behavior and shipping activity, with NULL values potentially indicating new subscribers or those who haven't made any purchases yet."
subscribers_ltv_logs_2020,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column represents the percentage (stored as a decimal between 0 and 100) of a subscriber's orders that included customizations or modifications during 2020. This metric can be used in SQL queries to analyze customer personalization preferences and can be filtered or aggregated to identify subscribers with high or low customization tendencies (e.g., WHERE orders_customization_rate > 50.00 or AVG(orders_customization_rate))."
subscribers_ltv_logs_2020,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_orders_refunded` column in the subscribers_ltv_logs_2020 table stores the total number of orders that were refunded for each subscriber during 2020, represented as an integer value. This metric is useful for analyzing customer satisfaction and revenue impact, where a higher number of refunds might indicate potential issues with product or service quality, and can be used in SQL queries to filter or aggregate subscriber LTV data based on refund behavior."
subscribers_ltv_logs_2020,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The total_orders_generated column in subscribers_ltv_logs_2020 represents the cumulative number of orders placed by each subscriber throughout 2020. This integer field can be used to analyze purchasing frequency and customer engagement patterns, and since it's nullable, queries should handle potential NULL values when performing calculations or comparisons."
subscribers_ltv_logs_2020,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column represents the percentage commission or take rate earned from orders generated by subscribers, stored as a decimal value with 2 decimal places (e.g., 15.50 for 15.5%). This metric can be used in SQL queries to analyze revenue sharing or commission structures, and being nullable means some subscribers may not have associated take rates recorded."
subscribers_ltv_logs_2020,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber during 2020. This numeric field can contain NULL values and represents the monetary value of a subscriber's purchasing activity, making it useful for revenue-based analysis and LTV calculations."
subscribers_ltv_logs_2020,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (in decimal format with 2 decimal places) for a subscriber's transactions during 2020, allowing for values up to 9999.99. This column can be used to analyze typical spending patterns and segment subscribers by their average order value, though it may contain NULL values if a subscriber hasn't made any purchases in the period."
subscribers_ltv_logs_2020,coupons_used,text,YES,,,,,,65535.0,,,"The ""coupons_used"" column in the subscribers_ltv_logs_2020 table stores text-based information about promotional coupons that subscribers have redeemed during their customer lifecycle in 2020. When querying this column, you can use string operations to analyze coupon usage patterns, though be aware that NULL values are possible since not all subscribers may have used coupons."
subscribers_ltv_logs_2020,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber throughout 2020, represented as a decimal number with 2 decimal places (e.g., 25.50). When analyzing subscriber value metrics, this column can be used to understand discount usage patterns and their impact on overall customer lifetime value, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2020,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The total_products_ordered column represents the cumulative count of products that a subscriber has purchased throughout their relationship with the service during 2020. This integer field can be used to analyze purchasing behavior and customer engagement, making it useful in queries that segment customers by order volume or identify high-value customers based on product adoption."
subscribers_ltv_logs_2020,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The total_products_refunded column in subscribers_ltv_logs_2020 tracks the number of products that were refunded by each subscriber during 2020, stored as an integer value. This metric is useful for analyzing customer satisfaction and return behavior as part of the overall lifetime value calculation, where NULL values indicate either no refunds or missing data."
subscribers_ltv_logs_2020,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage (as a decimal between 0 and 100) of product purchases that resulted in refunds for each subscriber during 2020, with precision to two decimal places. This metric can be used in SQL queries to analyze refund patterns or filter for subscribers with specific refund rates, helping identify customer satisfaction trends or potential issues with specific products."
subscribers_ltv_logs_2020,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,"The total_cs_tickets column represents the total number of customer service tickets submitted by a subscriber during 2020, stored as an integer value that can be null. This metric likely serves as an indicator of customer engagement and support needs, which can be useful when analyzing subscriber lifetime value and customer satisfaction patterns."
subscribers_ltv_logs_2020,total_ratings,int,YES,,,0,,,,10.0,0.0,"The `total_ratings` column in the subscribers_ltv_logs_2020 table stores the cumulative number of ratings or reviews submitted by each subscriber throughout 2020. This integer field can be used to analyze user engagement patterns and can be NULL if a subscriber hasn't provided any ratings, making it useful for filtering or aggregating subscriber activity levels in LTV calculations."
subscribers_ltv_logs_2020,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating for a subscriber's orders during 2020, represented as a decimal number with one decimal place (e.g., 4.5). This optional field ranges from 0.0 to 5.0 and can be used in SQL queries to analyze customer satisfaction levels or filter subscribers based on their average order feedback scores."
subscribers_ltv_logs_2020,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a scale from 0.0 to 5.0) that subscribers gave for delivery-related services during 2020, with one decimal place precision. This metric can be used to analyze customer satisfaction with delivery aspects of the service, and since it's nullable, some subscribers may not have provided any delivery ratings during this period."
subscribers_ltv_logs_2020,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2020 is a non-nullable datetime field that automatically records the timestamp when each LTV calculation record was created. When writing SQL queries, this column can be used to filter or analyze LTV data within specific time periods during 2020, and since it's automatically populated with CURRENT_TIMESTAMP, you don't need to explicitly set its value when inserting new records."
subscribers_ltv_logs_2020,has_received_trial_basket,date,YES,,,,,,,,,"This 'has_received_trial_basket' column stores the date when a subscriber received their trial basket, with NULL values indicating subscribers who haven't received one. When writing queries, this column can be used to filter subscribers based on trial basket receipt dates or to analyze the timing of trial basket distributions during 2020."
subscribers_ltv_logs_2020,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that indicates where a subscriber originated from when they first signed up. This optional varchar field is commonly used in marketing attribution queries to analyze which traffic sources generate the highest lifetime value subscribers, and can be joined with other marketing data to evaluate channel performance."
subscribers_ltv_logs_2020,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, helping track which marketing campaigns led to user acquisition. This optional VARCHAR field can be used in SQL queries to analyze subscriber acquisition by marketing campaign source, making it valuable for ROI analysis and campaign performance measurement (e.g., SELECT COUNT(*) FROM subscribers_ltv_logs_2020 GROUP BY signup_utm_campaign)."
subscribers_ltv_logs_2020,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the latest marketing channel or acquisition source through which a subscriber joined the service, such as ""organic_search"", ""paid_social"", or ""email_campaign"". When writing SQL queries, this column can be used to analyze subscriber value and LTV metrics segmented by acquisition channel, though be aware that NULL values are possible and should be handled appropriately."
subscribers_ltv_logs_2020,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,The coupon_category_at_signup column stores an integer value representing the category or type of coupon that was used when a subscriber initially signed up for the service in 2020. This optional field (as indicated by being nullable) can be useful in SQL queries to analyze how different promotional categories impact subscriber lifetime value or to segment subscribers based on their initial acquisition channel.
subscribers_ltv_logs_2020,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column in subscribers_ltv_logs_2020 stores the type of device (e.g., mobile, desktop, tablet) that a subscriber used when initially signing up for the service in 2020. When writing queries, this column can be used to segment and analyze subscriber lifetime value based on their original signup platform, though be aware that NULL values are possible and should be handled appropriately in your analysis."
subscribers_ltv_logs_2020,latest_order_shipped,date,YES,,,,,,,,,"The latest_order_shipped column stores the date when a subscriber's most recent order was shipped during 2020, helping track customer engagement through purchase activity. This date field can be useful in SQL queries for analyzing order recency, identifying active vs inactive customers, or calculating time between orders, though null values may indicate subscribers who haven't made any purchases in the tracked period."
subscribers_ltv_logs_2020,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The `number_of_times_canceled` column in the subscribers_ltv_logs_2020 table tracks how many times a subscriber has canceled their subscription throughout 2020. This nullable integer field can be used to analyze churn patterns and customer retention, where a value of 0 indicates no cancellations and higher values represent multiple cancellation events for the same subscriber."
subscribers_ltv_logs_2021,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the subscribers_ltv_logs_2021 table is a required integer field that uniquely identifies individual subscribers whose lifetime value metrics are being tracked. When writing SQL queries, this column can be used to join with other subscriber-related tables or to filter/group LTV metrics for specific users during the 2021 period."
subscribers_ltv_logs_2021,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The `iso_week` column in the subscribers_ltv_logs_2021 table stores the ISO week number (1-53) representing when each LTV metric was recorded during 2021. When querying subscriber lifetime value data, this column can be used to analyze trends and patterns on a week-by-week basis throughout the year, such as grouping metrics by week or filtering for specific time periods."
subscribers_ltv_logs_2021,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the date when a subscriber first created their subscription, represented in a standard date format. This non-nullable field is essential for analyzing subscriber cohorts and calculating the duration of customer relationships, making it particularly useful in WHERE clauses for filtering subscribers based on when they joined or in date-based aggregations to understand subscription patterns over time."
subscribers_ltv_logs_2021,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required (non-nullable) tinyint field that indicates the current state of a subscriber's subscription using numeric codes. When querying this table, use this column to filter or group subscribers based on their subscription state (e.g., active, cancelled, paused) to analyze LTV metrics across different subscription statuses during 2021."
subscribers_ltv_logs_2021,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required (non-nullable) tinyint field that indicates the category or tier of subscription associated with each subscriber record. When querying this table, you can use this column to filter or group subscribers based on their subscription level, with the tinyint values likely mapping to specific subscription tiers (e.g., 1 for basic, 2 for premium, etc.)."
subscribers_ltv_logs_2021,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2021 stores the date when each subscriber initially registered for the service, formatted as a standard date value. This column can be used for analyzing subscriber cohorts, calculating customer tenure, and tracking acquisition patterns throughout 2021, though it may contain NULL values for cases where the signup date is unknown or not applicable."
subscribers_ltv_logs_2021,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2021 is a tinyint field that categorically identifies how a subscriber initially joined the service, likely using small numeric codes to represent different signup methods or channels (e.g., 1 for web, 2 for mobile app, etc.). When querying this column, you can use it to segment or filter subscriber LTV metrics based on their acquisition channel, though you should account for potential NULL values since the field is nullable."
subscribers_ltv_logs_2021,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup, captured as a text string up to 255 characters in length. This optional field (nullable) helps track which acquisition channels and campaigns are driving valuable subscriber signups, enabling analysis of marketing effectiveness and LTV by referral source."
subscribers_ltv_logs_2021,most_recent_reactivation_date,date,YES,,,,,,,,,"The most_recent_reactivation_date column stores the latest date when a subscriber reactivated their subscription after a previous cancellation or pause in 2021. This date field is useful for analyzing subscriber retention patterns and can be used in SQL queries to identify subscribers who have returned to the service, with NULL values indicating subscribers who have never reactivated or are on their first subscription term."
subscribers_ltv_logs_2021,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's most recent reactivation in 2021, with NULL values permitted when a subscriber has never been reactivated. When writing queries, this column can be used to segment or filter subscribers based on how they returned to active status, making it useful for analyzing reactivation patterns and success rates across different reactivation methods."
subscribers_ltv_logs_2021,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber most recently canceled their subscription during 2021, with NULL values indicating subscribers who have never canceled. When writing queries, this column is useful for analyzing churn patterns and filtering for active versus canceled subscribers, such as finding subscribers who canceled within a specific date range or identifying those who have never canceled (WHERE most_recent_cancelation_date IS NULL)."
subscribers_ltv_logs_2021,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The most_recent_cancelation_reason column stores the last known reason why a subscriber canceled their subscription, captured as a text string up to 255 characters long. This column can be used in SQL queries to analyze churn patterns and segment subscribers based on their cancellation reasons, though it may contain NULL values for subscribers who haven't canceled or where the reason wasn't recorded."
subscribers_ltv_logs_2021,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active retention behavior in 2021, such as renewing their subscription or showing continued engagement. This date field can be useful in SQL queries for analyzing subscriber retention patterns, calculating churn risk, or identifying the recency of customer activity, particularly when combined with other LTV metrics in the table."
subscribers_ltv_logs_2021,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores text-based information about subscribers' delivery addresses, likely in a structured format such as JSON or serialized data. When querying this column, you may need to use text parsing functions or JSON operators (if the data is JSON-formatted) to extract specific address components, and since it's nullable, always consider handling NULL values in your queries."
subscribers_ltv_logs_2021,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2021 stores text information about how content or services are delivered to subscribers, and can be NULL if the delivery type is not specified. When writing SQL queries, this column can be used to filter or group subscribers based on their delivery method preferences, though you should handle NULL values appropriately using IS NULL or IS NOT NULL conditions when necessary."
subscribers_ltv_logs_2021,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2021 stores text-based information about subscriber delivery preferences or delivery-related events during 2021. When writing SQL queries, this nullable text column can be used to filter or analyze delivery patterns and preferences, though you'll need to handle potential NULL values appropriately."
subscribers_ltv_logs_2021,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_subscribed` column in the subscribers_ltv_logs_2021 table represents the cumulative number of weeks a subscriber has maintained their subscription as of the log entry date in 2021. This integer field can be used to analyze subscriber longevity and retention patterns, making it useful in queries that segment customers by subscription duration or calculate retention metrics."
subscribers_ltv_logs_2021,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_with_order_shipped` column in the subscribers_ltv_logs_2021 table represents the cumulative number of weeks where a subscriber had at least one order shipped during 2021. This integer field can be used to analyze subscriber engagement patterns and shipping frequency, making it useful in queries that need to segment customers based on their order activity or calculate shipping-related metrics."
subscribers_ltv_logs_2021,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_on_vacation` column in the subscribers_ltv_logs_2021 table stores the cumulative number of weeks a subscriber has put their subscription on pause or vacation mode during 2021. This integer field can be used to analyze subscription pausing patterns and their impact on lifetime value calculations, with NULL values indicating either no vacation time taken or missing data, and a default value of 0 suggesting no vacation time."
subscribers_ltv_logs_2021,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column represents the percentage of weeks (0-100%) during which a subscriber placed at least one order, stored as a decimal value with 2 decimal places (e.g., 75.50 means the subscriber ordered during 75.50% of weeks). When querying this column, you can use it to filter or analyze subscriber ordering frequency patterns, with NULL values indicating subscribers where the take rate couldn't be calculated."
subscribers_ltv_logs_2021,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2021 table stores the cumulative count of canceled orders associated with each subscriber during 2021. This integer field can be used to analyze order cancellation patterns and customer behavior, with NULL values permitted when cancellation data is unavailable or not applicable."
subscribers_ltv_logs_2021,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The `total_orders_declined` column in the subscribers_ltv_logs_2021 table stores the cumulative count of failed or rejected order attempts made by each subscriber during 2021. This integer field can be used to analyze payment failures and identify subscribers with potential payment issues, though it may contain NULL values where order decline data is not available."
subscribers_ltv_logs_2021,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The `total_orders_customized` column in the subscribers_ltv_logs_2021 table stores the number of customized or personalized orders placed by each subscriber during 2021. This integer field can be used to analyze subscriber purchasing behavior and customization preferences, with NULL values indicating subscribers who haven't placed any customized orders during the tracking period."
subscribers_ltv_logs_2021,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_orders_shipped` column in the subscribers_ltv_logs_2021 table represents the cumulative count of successfully delivered orders for each subscriber during 2021. This integer field can be used to analyze customer purchase behavior and fulfillment metrics, with NULL values indicating subscribers who haven't made any purchases or where shipping data is unavailable."
subscribers_ltv_logs_2021,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column represents the percentage (stored as a decimal between 0.00 and 100.00) of a subscriber's orders that included customizations or modifications during 2021. When querying this column, you can use it to analyze customization behavior patterns or filter for subscribers with specific customization tendencies, keeping in mind that NULL values are possible and the default value is 0.00."
subscribers_ltv_logs_2021,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_orders_refunded` column in the subscribers_ltv_logs_2021 table stores the total number of orders that were refunded for each subscriber during 2021 as an integer value. This metric is useful for analyzing customer satisfaction and refund patterns, and can be used in SQL queries to filter or aggregate subscribers based on their refund history, with NULL values indicating subscribers who may not have any refund data recorded."
subscribers_ltv_logs_2021,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The `total_orders_generated` column in the subscribers_ltv_logs_2021 table stores the cumulative count of orders placed by each subscriber during 2021, represented as an integer value. This metric can be used to analyze subscriber purchasing behavior and engagement, making it useful in SQL queries for segmentation, filtering high-value customers, or calculating average order frequencies."
subscribers_ltv_logs_2021,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column represents the percentage commission or take rate earned from orders generated by subscribers, stored as a decimal value with 2 decimal places (e.g., 15.50 for 15.5%). When querying this column, you can use it for calculations involving revenue shares or to analyze commission structures, keeping in mind that NULL values are possible and the values are expressed as percentages between 0.00 and 100.00."
subscribers_ltv_logs_2021,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber during 2021. This numeric field can contain NULL values and represents the monetary value of a subscriber's purchasing activity, making it useful for revenue analysis, customer segmentation, and LTV calculations."
subscribers_ltv_logs_2021,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (in decimal format with 2 decimal places) for a subscriber's transactions during 2021, allowing for values up to 9999.99. This column can be used in SQL queries to analyze typical spending patterns or segment customers by their average order value, and since it's nullable, queries should handle potential NULL values when performing calculations or comparisons."
subscribers_ltv_logs_2021,coupons_used,text,YES,,,,,,65535.0,,,"The `coupons_used` column in the subscribers_ltv_logs_2021 table stores text-based information about discount coupons that subscribers have redeemed during 2021. When writing SQL queries, this column can be used to analyze coupon usage patterns and their impact on subscriber lifetime value, though you should account for NULL values since the column is nullable."
subscribers_ltv_logs_2021,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber in 2021, represented as a decimal number with 2 decimal places (e.g., 25.50). When writing queries, this column can be used to analyze discount usage patterns or calculate the net revenue impact of coupon redemptions, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2021,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The `total_products_ordered` column in the subscribers_ltv_logs_2021 table stores the cumulative count of products that a subscriber has ordered throughout their relationship with the service in 2021. This integer field can be used to analyze purchasing behavior and customer engagement, making it useful for queries that need to segment customers by order volume or identify high-value customers based on product order history."
subscribers_ltv_logs_2021,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_products_refunded` column in the subscribers_ltv_logs_2021 table stores the cumulative count of products that have been refunded by each subscriber during 2021. When querying this integer column, you can use it to analyze refund patterns or filter for subscribers with specific refund quantities, with NULL values indicating subscribers where refund data may not be available or applicable."
subscribers_ltv_logs_2021,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage (as a decimal between 0 and 100) of product purchases that resulted in refunds for each subscriber during 2021, with precision to two decimal places. This metric can be used in SQL queries to analyze refund patterns and customer satisfaction, where NULL values indicate that refund rate data wasn't available or applicable for certain subscribers."
subscribers_ltv_logs_2021,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,"The `total_cs_tickets` column in the subscribers_ltv_logs_2021 table represents the total number of customer service tickets submitted by a subscriber during 2021. This integer field can be used to analyze customer support engagement patterns and potentially correlate support ticket volume with subscriber lifetime value, with null values indicating either no tickets submitted or missing data."
subscribers_ltv_logs_2021,total_ratings,int,YES,,,0,,,,10.0,0.0,"The `total_ratings` column in the subscribers_ltv_logs_2021 table stores the cumulative number of ratings or reviews submitted by each subscriber during 2021. This integer field can be used to analyze subscriber engagement levels and can be null if a subscriber hasn't provided any ratings, making it useful for filtering or aggregating subscriber activity metrics."
subscribers_ltv_logs_2021,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating (on a scale likely from 0.0 to 5.0) for orders placed by subscribers during 2021, with one decimal place precision. When querying this column, you can use it to filter or analyze subscriber satisfaction levels, though be aware that NULL values are possible and may need to be handled appropriately in aggregations or comparisons."
subscribers_ltv_logs_2021,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a scale likely from 0.0 to 5.0) that subscribers gave for delivery-related services during 2021, with one decimal place precision. This metric can be used in SQL queries to analyze customer satisfaction with delivery services, and being nullable, some subscribers may not have provided ratings."
subscribers_ltv_logs_2021,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2021 is a non-nullable datetime field that automatically records the timestamp when each LTV metric entry was created. When writing SQL queries, this column can be used for temporal analysis of subscriber metrics throughout 2021, such as filtering records within specific date ranges or analyzing trends over time."
subscribers_ltv_logs_2021,has_received_trial_basket,date,YES,,,,,,,,,"The `has_received_trial_basket` column in the subscribers_ltv_logs_2021 table stores the date when a subscriber received their trial basket, with NULL values indicating subscribers who haven't received one. When querying this column, you can use date comparisons and IS NULL checks to analyze trial basket distribution patterns and their potential impact on subscriber lifetime value."
subscribers_ltv_logs_2021,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that indicates where a subscriber originated from when they first signed up. This optional varchar field is commonly used in marketing attribution queries to analyze which acquisition channels drive the highest lifetime value subscribers, and can be joined with other marketing data to evaluate channel performance."
subscribers_ltv_logs_2021,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, helping track which marketing campaigns led to user acquisition. This optional VARCHAR field can be used in SQL queries to analyze subscriber acquisition by marketing campaign source, making it valuable for ROI analysis and campaign performance reporting (e.g., SELECT COUNT(*) FROM subscribers_ltv_logs_2021 GROUP BY signup_utm_campaign)."
subscribers_ltv_logs_2021,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the latest marketing channel or acquisition source through which a subscriber joined the service, such as ""organic_search"", ""paid_social"", or ""referral"". When writing queries, this column can be used to segment and analyze subscriber lifetime value based on acquisition channels, though the NULL values should be handled appropriately since the field is nullable."
subscribers_ltv_logs_2021,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,The coupon_category_at_signup column stores an integer value representing the category or type of coupon that was used when a subscriber initially signed up for the service. This optional field (as indicated by being nullable) can be useful in analyzing how different promotional categories impact subscriber lifetime value and can be used to segment subscribers based on their initial acquisition channel or offer type.
subscribers_ltv_logs_2021,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column in subscribers_ltv_logs_2021 stores the type of device (e.g., mobile, desktop, tablet) that a subscriber used when initially signing up for the service. When querying this varchar column, you can use it to segment or filter subscriber LTV metrics based on their original signup platform, though be aware that it may contain NULL values for cases where the signup device type wasn't captured."
subscribers_ltv_logs_2021,latest_order_shipped,date,YES,,,,,,,,,"The `latest_order_shipped` column in the subscribers_ltv_logs_2021 table stores the date when a subscriber's most recent order was shipped during 2021, helping track fulfillment milestones for customer orders. This date field can be used in SQL queries to analyze shipping patterns, calculate time-based metrics like days between orders, or filter subscribers based on their most recent shipping activity."
subscribers_ltv_logs_2021,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The `number_of_times_canceled` column in the subscribers_ltv_logs_2021 table stores the count of how many times a subscriber has canceled their subscription up to that point in 2021. This integer field can be used to analyze churn patterns and customer retention, with a default value of 0 indicating no cancellations, and NULL values are permitted if the cancellation count is unknown or not applicable."
subscribers_ltv_logs_2022,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the subscribers_ltv_logs_2022 table serves as an identifier that links each LTV record to a specific subscriber. When writing SQL queries, this column can be used to filter or join with other subscriber-related tables to analyze lifetime value metrics for individual users during 2022."
subscribers_ltv_logs_2022,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The iso_week column represents the ISO week number (1-53) within the year 2022 when the LTV metrics were calculated and logged for subscribers. This column can be used to group or filter subscriber LTV data by specific weeks of the year, enabling time-based analysis and trending of subscriber value metrics."
subscribers_ltv_logs_2022,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the date when a subscriber first created their subscription, represented in a standard date format. This non-nullable field is essential for calculating subscriber tenure and analyzing cohort-based LTV metrics, making it useful in queries that need to segment or analyze subscriber behavior based on when they started their subscription."
subscribers_ltv_logs_2022,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required (non-nullable) tinyint field that indicates the current state of a subscriber's subscription using numeric status codes. When querying this column, you can use it to filter or segment subscribers based on their subscription state (e.g., active, cancelled, paused) within the 2022 LTV logging data."
subscribers_ltv_logs_2022,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required (non-nullable) tinyint field that categorizes subscribers into different subscription plan types. When querying this table, you can use this column to filter or group subscribers based on their subscription classification, where each distinct tinyint value represents a specific subscription tier or plan category in the 2022 LTV logging data."
subscribers_ltv_logs_2022,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2022 stores the date when each subscriber initially registered for the service, formatted as a standard date value. This column can be used for analyzing subscriber cohorts, calculating customer tenure, and filtering/grouping LTV metrics based on when users joined the service during 2022."
subscribers_ltv_logs_2022,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2022 is a tinyint field that indicates the method or channel through which a subscriber initially registered, likely using a small set of numeric codes to represent different signup sources (e.g., 1 for web, 2 for mobile app, etc.). When querying this column, you can use numeric comparisons to filter or group subscribers based on their acquisition channel, though you may want to join with a lookup table or use CASE statements to translate the numeric codes into meaningful labels."
subscribers_ltv_logs_2022,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup, captured as a text string up to 255 characters in length. This optional field helps track which acquisition channels and campaigns are driving valuable subscriber signups, enabling analysis of customer lifetime value (LTV) by acquisition source."
subscribers_ltv_logs_2022,most_recent_reactivation_date,date,YES,,,,,,,,,The most_recent_reactivation_date column stores the latest date when a subscriber reactivated their subscription after a previous cancellation or pause in 2022. This date field can be used to analyze subscriber reengagement patterns and can be particularly useful in queries that need to identify or filter subscribers based on their latest return to active status.
subscribers_ltv_logs_2022,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's most recent reactivation in 2022, with NULL values permitted when a subscriber has never been reactivated. When writing queries, this column can be used to filter or segment subscribers based on how they returned to active status, making it useful for analyzing reactivation patterns and their impact on lifetime value metrics."
subscribers_ltv_logs_2022,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber last canceled their subscription, if applicable. This date field can be used to analyze churn patterns or filter for active versus canceled subscribers, with NULL values indicating subscribers who have never canceled their subscription."
subscribers_ltv_logs_2022,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The most_recent_cancelation_reason column stores the last known reason why a subscriber canceled their subscription, captured as a text string up to 255 characters. When writing queries, this column can be used to analyze churn patterns and segment subscribers based on their cancellation reasons, though note that NULL values are possible for subscribers who haven't canceled or where the reason wasn't recorded."
subscribers_ltv_logs_2022,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active retention behavior (such as renewing their subscription or making a repeat purchase) in 2022. This date field can be useful in SQL queries to analyze subscriber engagement patterns or calculate time-based retention metrics, and being nullable indicates that some subscribers may not have any recorded retention activity."
subscribers_ltv_logs_2022,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores JSON-formatted text containing delivery address information for subscribers, likely including multiple addresses if the subscriber has specified different shipping locations. When querying this column, you'll need to use JSON parsing functions to extract specific address components, and since it's nullable, always include NULL handling in your queries."
subscribers_ltv_logs_2022,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2022 stores text information about how content or services are delivered to subscribers, likely including delivery methods or preferences. When querying this column, you can use string operations and pattern matching (e.g., LIKE, ILIKE) to filter or group subscribers based on their delivery characteristics, though be aware the column can contain NULL values."
subscribers_ltv_logs_2022,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2022 stores text-based information about subscriber delivery patterns or preferences during 2022. When querying this column, you can use string operations and pattern matching (like LIKE or regular expressions) to analyze delivery-related data points, though be aware the column can contain NULL values."
subscribers_ltv_logs_2022,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The total_weeks_subscribed column represents the cumulative number of weeks a customer has maintained an active subscription as of the log entry date in 2022. This integer field can be used to analyze subscription duration patterns and segment customers based on their tenure length, with NULL values potentially indicating new or incomplete subscriber records."
subscribers_ltv_logs_2022,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_with_order_shipped` column in the subscribers_ltv_logs_2022 table represents the cumulative number of weeks where a subscriber had at least one order shipped during 2022. This integer field can be used to analyze subscriber engagement patterns and shipping frequency, making it useful for queries that need to segment customers based on their order activity or calculate shipping-related metrics."
subscribers_ltv_logs_2022,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_on_vacation` column in the subscribers_ltv_logs_2022 table stores the cumulative number of weeks a subscriber has put their subscription on pause or vacation hold during 2022. This integer field can be used to analyze subscription interruptions and their impact on lifetime value calculations, with NULL values indicating either no vacation time taken or missing data."
subscribers_ltv_logs_2022,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column stores the percentage (as a decimal between 0 and 100) of weeks in which a subscriber placed at least one order during the measurement period in 2022. When using this column in SQL queries, it can be used to filter or analyze subscriber engagement patterns, such as finding highly active subscribers with take rates above certain thresholds (e.g., WHERE weekly_order_take_rate > 50.00)."
subscribers_ltv_logs_2022,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2022 table stores the cumulative count of canceled orders associated with each subscriber as an integer value. This metric is part of the lifetime value calculation and can be used to analyze subscriber behavior and churn patterns during 2022, with NULL values permitted when the count is unknown or not applicable."
subscribers_ltv_logs_2022,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The `total_orders_declined` column in the subscribers_ltv_logs_2022 table stores the cumulative count of declined or failed order attempts by a subscriber throughout 2022. This integer field can be used to analyze payment failure patterns and subscriber health, with NULL values indicating either no declined orders or missing data, and is commonly used in queries analyzing subscriber payment reliability or churn risk factors."
subscribers_ltv_logs_2022,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The total_orders_customized column represents the number of orders where a subscriber made customizations to their purchase during 2022. This optional integer field can be used to analyze customer engagement through order modifications, with NULL values indicating either no customized orders or missing data. When querying, this column can be particularly useful for segmenting subscribers based on their propensity to personalize orders or for analyzing the relationship between order customization and lifetime value."
subscribers_ltv_logs_2022,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_orders_shipped` column in the subscribers_ltv_logs_2022 table represents the cumulative count of successfully delivered orders for each subscriber during their lifetime up to the point of logging in 2022. This integer field can be used to analyze customer engagement and purchase behavior, making it useful for queries that need to segment or filter subscribers based on their order history, though null values should be handled appropriately since the field is nullable."
subscribers_ltv_logs_2022,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column represents the percentage of a subscriber's orders that included customizations or modifications, stored as a decimal value between 0.00 and 100.00. This metric helps analyze how frequently subscribers customize their orders, which can be useful for understanding customer preferences and engagement patterns in 2022."
subscribers_ltv_logs_2022,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_orders_refunded` column in the subscribers_ltv_logs_2022 table stores the cumulative count of refunded orders associated with each subscriber during 2022. This integer field can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and can be particularly useful when calculating net revenue or customer value metrics."
subscribers_ltv_logs_2022,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The `total_orders_generated` column in the subscribers_ltv_logs_2022 table stores the cumulative count of orders placed by each subscriber throughout their relationship with the business up to the point of the log entry. This integer field can be used to analyze subscriber purchasing behavior and segment customers based on order frequency, making it valuable for queries that need to identify high-volume customers or track order activity patterns over time."
subscribers_ltv_logs_2022,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column stores the percentage commission or take rate earned from orders generated by subscribers, represented as a decimal value (e.g., 15.50 for 15.5%). This metric helps track the revenue share or commission structure for subscriber-generated orders during 2022, with values ranging from 0.00 to 100.00 percent."
subscribers_ltv_logs_2022,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber in 2022. This numeric field can contain NULL values and typically represents the total monetary value of purchases, making it useful for aggregations, revenue analysis, and LTV calculations in queries where you need to analyze subscriber spending patterns."
subscribers_ltv_logs_2022,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (in decimal format with 2 decimal places) for a subscriber's orders, representing their typical spending behavior. This metric can be used in SQL queries to analyze customer spending patterns or segment subscribers by their average order value, with NULL values indicating subscribers who haven't made any purchases yet."
subscribers_ltv_logs_2022,coupons_used,text,YES,,,,,,65535.0,,,"The `coupons_used` column in the subscribers_ltv_logs_2022 table stores text-based information about discount coupons that subscribers have redeemed during their customer lifecycle in 2022. When querying this column, you can use string operations to analyze coupon usage patterns, though be aware that the column can contain NULL values if no coupons were used by a particular subscriber."
subscribers_ltv_logs_2022,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber throughout 2022, represented as a decimal number with 2 decimal places (e.g., 25.50). When querying this column, you can use it to analyze discount usage patterns or calculate net revenue by subtracting it from gross purchase amounts, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2022,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The total_products_ordered column represents the cumulative count of products a subscriber has purchased throughout their relationship with the service up to the point of the log entry in 2022. This integer field can be used to analyze purchasing behavior and segment customers based on order volume, with NULL values potentially indicating new subscribers or those who haven't made any purchases yet."
subscribers_ltv_logs_2022,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_products_refunded` column in the subscribers_ltv_logs_2022 table stores the cumulative count of products that have been refunded by each subscriber during 2022. When writing SQL queries, this integer column can be used to analyze refund patterns or filter for subscribers based on their refund history, with NULL values indicating that refund data may not be available for some subscribers."
subscribers_ltv_logs_2022,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage of product purchases that were refunded for a given subscriber, represented as a decimal between 0 and 100 with 2 decimal places of precision (e.g., 12.34%). This metric helps track refund behavior patterns and can be used in SQL queries to analyze subscriber satisfaction or identify potential issues with specific products or customer segments."
subscribers_ltv_logs_2022,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,"The total_cs_tickets column represents the cumulative count of customer service tickets submitted by a subscriber up to the point of the log entry in 2022. This integer field helps track customer support interaction volume as part of the overall lifetime value calculation, with NULL values permitted when ticket count data is unavailable."
subscribers_ltv_logs_2022,total_ratings,int,YES,,,0,,,,10.0,0.0,"The `total_ratings` column in the subscribers_ltv_logs_2022 table stores the cumulative number of ratings a subscriber has submitted across all content. This integer field can be used to analyze user engagement patterns and can be null if the subscriber hasn't provided any ratings, making it useful for filtering or aggregating subscriber activity levels in LTV-related analyses."
subscribers_ltv_logs_2022,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating (on a scale likely from 0.0 to 5.0) for all orders placed by a subscriber during 2022, represented as a decimal with one decimal place. This metric can be used in SQL queries to analyze customer satisfaction trends or filter subscribers based on their average order ratings, though the NULL values should be handled appropriately since the column is nullable."
subscribers_ltv_logs_2022,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a scale likely from 0.0 to 5.0) that subscribers have given for their delivery experiences, represented as a decimal number with one decimal place. This metric can be used in SQL queries to analyze customer satisfaction with delivery services, and being nullable, some subscribers may not have any delivery ratings yet."
subscribers_ltv_logs_2022,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2022 is a non-nullable datetime field that automatically records the timestamp when each LTV metric record was created, using CURRENT_TIMESTAMP as the default value. When querying subscriber LTV data, this column can be used to track when specific calculations were performed or to analyze trends over time during 2022, making it particularly useful in WHERE clauses for filtering by date ranges or in ORDER BY clauses for chronological sorting."
subscribers_ltv_logs_2022,has_received_trial_basket,date,YES,,,,,,,,,"This column records the date when a subscriber received their trial basket, if applicable, with NULL values indicating subscribers who have not received a trial basket. When writing queries, this column can be used to filter or segment subscribers based on their trial basket status, such as finding subscribers who received trial baskets within specific date ranges or identifying those who haven't received trial baskets (WHERE has_received_trial_basket IS NULL)."
subscribers_ltv_logs_2022,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that indicates where a subscriber originated from when they first signed up. This optional varchar field is commonly used in marketing attribution analysis to understand which acquisition channels drive the highest lifetime value subscribers, and can be used in GROUP BY clauses or WHERE conditions to segment LTV metrics by marketing source."
subscribers_ltv_logs_2022,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, helping track which marketing campaigns led to user acquisition. This optional VARCHAR field can be used in SQL queries to analyze subscriber acquisition sources and measure marketing campaign effectiveness, with NULL values indicating either missing campaign data or direct traffic."
subscribers_ltv_logs_2022,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the latest marketing channel or acquisition source through which a subscriber joined the service, such as ""organic"", ""facebook_ads"", or ""referral"". When writing queries, this column can be used to analyze subscriber lifetime value patterns across different acquisition channels, though note that NULL values are possible if the signup source is unknown."
subscribers_ltv_logs_2022,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,"The coupon_category_at_signup column stores an integer value representing the category or type of coupon that was used when a subscriber first signed up for the service. This optional field (as indicated by being nullable) can be useful in analyzing how different promotional categories impact subscriber lifetime value, and can be used in GROUP BY clauses or WHERE conditions to segment subscribers based on their initial signup incentives."
subscribers_ltv_logs_2022,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column stores the type of device (e.g., 'mobile', 'desktop', 'tablet') that a subscriber used when initially signing up for the service. When writing queries, this nullable VARCHAR field can be used to segment and analyze subscriber lifetime value metrics based on their original signup platform, though null values should be handled appropriately since not all records may have this information."
subscribers_ltv_logs_2022,latest_order_shipped,date,YES,,,,,,,,,"The latest_order_shipped column stores the date when a subscriber's most recent order was shipped as of the time the LTV metrics were calculated in 2022. This date field can be useful for analyzing subscriber engagement patterns and identifying the recency of purchase activity, making it valuable for queries that need to segment customers based on their last order fulfillment date."
subscribers_ltv_logs_2022,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The number_of_times_canceled column tracks how many times a subscriber has canceled their subscription throughout their customer lifecycle as of the log entry date in 2022. This integer field can be used to analyze churn patterns and customer retention, with a value of 0 indicating no cancellations and higher values showing subscribers who have canceled and potentially resubscribed multiple times."
subscribers_ltv_logs_2023,user_id,int,NO,,,,,,,10.0,0.0,The user_id column in subscribers_ltv_logs_2023 serves as a unique identifier for each subscriber whose lifetime value metrics are being tracked. This required integer field can be used to join with other subscriber-related tables and is essential for filtering or grouping LTV metrics by specific users in analytical queries.
subscribers_ltv_logs_2023,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The iso_week column represents the ISO week number (1-53) within 2023 when the LTV metrics were calculated for subscribers. When querying subscriber lifetime value data, this column can be used to analyze trends and patterns on a weekly basis throughout the year, such as ""WHERE iso_week BETWEEN 1 AND 26"" for first-half metrics."
subscribers_ltv_logs_2023,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the date when a subscriber first created their subscription, represented in a standard date format. This non-nullable field is essential for calculating subscriber tenure and analyzing cohort-based LTV metrics, making it a key reference point for any time-based analysis of subscriber value over their lifecycle."
subscribers_ltv_logs_2023,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required (non-nullable) tinyint field that indicates the current state of a subscriber's subscription using numeric codes. When querying this table, use this column to filter or segment subscribers based on their subscription state (e.g., active, cancelled, paused) to analyze LTV metrics across different subscription statuses during 2023."
subscribers_ltv_logs_2023,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required (non-nullable) tinyint field that categorizes subscribers into different subscription plan types within the LTV tracking system. When querying subscriber lifetime value data from subscribers_ltv_logs_2023, this column can be used to filter or group results by subscription category, helping analyze how different subscription types contribute to customer lifetime value metrics."
subscribers_ltv_logs_2023,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2023 stores the date when each subscriber initially registered for the service, allowing for cohort analysis and customer tenure calculations. This date field can be used in SQL queries to analyze subscriber behavior and value patterns based on when customers joined, such as filtering for specific signup periods or calculating the time between signup and other customer lifecycle events."
subscribers_ltv_logs_2023,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2023 is a tinyint field that categorizes how subscribers initially joined the service, likely using small numeric codes to represent different registration methods (e.g., 1 for direct signup, 2 for referral, etc.). When querying this column, you can use numeric comparisons to filter or group subscribers based on their acquisition channel, though you should check documentation for the specific meaning of each numeric code since it's a nullable field."
subscribers_ltv_logs_2023,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup, captured as a text string up to 255 characters. This optional field helps track which acquisition channels and campaigns are generating subscribers with different lifetime value patterns, making it useful for ROI analysis and marketing attribution queries."
subscribers_ltv_logs_2023,most_recent_reactivation_date,date,YES,,,,,,,,,"The most_recent_reactivation_date column records the latest date when a previously churned subscriber resumed their subscription in 2023. This date field is useful for analyzing subscriber reengagement patterns and can be used in SQL queries to identify subscribers who have returned after cancellation, with NULL values indicating subscribers who have never churned and reactivated."
subscribers_ltv_logs_2023,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's most recent reactivation in 2023, with NULL values permitted when a subscriber has never been reactivated. When writing queries, this column can be used to segment or analyze subscribers based on how they returned to active status, making it useful for understanding reactivation patterns and their impact on lifetime value calculations."
subscribers_ltv_logs_2023,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber last canceled their subscription, if applicable. This date field is useful for analyzing churn patterns and can be used in SQL queries to filter or segment subscribers based on their cancellation history, with NULL values indicating subscribers who have never canceled."
subscribers_ltv_logs_2023,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The most_recent_cancelation_reason column stores the last known reason why a subscriber canceled their subscription, captured as a text string up to 255 characters. This nullable field is useful when analyzing churn patterns and can be included in SQL queries to segment subscribers based on their cancellation reasons or to identify common causes of customer attrition during 2023."
subscribers_ltv_logs_2023,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active engagement or retention behavior in 2023, such as renewing their subscription or continuing their service. This date field is useful for analyzing subscriber loyalty patterns and can be used in SQL queries to filter or group subscribers based on their last confirmed retention activity, though it may contain NULL values if retention dates are not yet recorded or applicable."
subscribers_ltv_logs_2023,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores JSON-formatted text containing the subscriber's delivery address information, which can be NULL if no address data is available. When querying this column, use JSON functions to extract specific address components, and consider handling NULL values appropriately since this field is optional in the subscribers' lifetime value tracking system."
subscribers_ltv_logs_2023,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2023 stores text information about how subscription content or services are delivered to customers, which can be used to analyze LTV patterns across different delivery methods. When querying this column, you can use string operations and comparisons to filter or group subscribers based on their delivery preferences, though be aware the column can contain NULL values."
subscribers_ltv_logs_2023,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2023 stores text-based information about subscriber delivery preferences and patterns during 2023. When querying this column, you can use string operations to analyze delivery-related data points, and since it's nullable, remember to handle NULL values appropriately using IS NULL or IS NOT NULL conditions."
subscribers_ltv_logs_2023,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The total_weeks_subscribed column represents the cumulative number of weeks a customer has maintained an active subscription as of the log entry date in 2023. This integer field helps track subscriber longevity and can be used in SQL queries to analyze retention patterns or segment customers based on subscription duration, with NULL values potentially indicating new or incomplete subscriber records."
subscribers_ltv_logs_2023,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_with_order_shipped` column in the subscribers_ltv_logs_2023 table represents the cumulative number of weeks where a subscriber had at least one order successfully shipped during 2023. This integer value helps measure customer engagement frequency and can be used in SQL queries to analyze shipping activity patterns or segment customers based on their order frequency, with NULL values indicating subscribers who may not have had any shipped orders during the tracking period."
subscribers_ltv_logs_2023,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_on_vacation` column in the subscribers_ltv_logs_2023 table stores the cumulative number of weeks a subscriber has put their subscription on pause or vacation hold during 2023. This integer field can be used to analyze subscription interruption patterns and their impact on lifetime value calculations, with NULL values indicating either no vacation time taken or missing data."
subscribers_ltv_logs_2023,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column stores the percentage (as a decimal between 0 and 100) of weeks in which a subscriber placed at least one order during the measurement period in 2023. When using this column in SQL queries, it can be filtered or aggregated to analyze subscriber ordering patterns, with NULL values indicating subscribers where the take rate couldn't be calculated, and values like ""25.50"" representing that a subscriber placed orders in 25.5% of available weeks."
subscribers_ltv_logs_2023,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2023 table stores the cumulative count of canceled orders associated with each subscriber during 2023. This integer field can be used in SQL queries to analyze cancellation patterns and customer behavior, with NULL values permitted when cancellation data is unavailable or not applicable."
subscribers_ltv_logs_2023,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The `total_orders_declined` column in the subscribers_ltv_logs_2023 table stores the cumulative count of declined or failed order attempts by a subscriber throughout 2023. This integer field can be used in SQL queries to analyze payment failure patterns or identify subscribers with high declined order rates, with NULL values indicating no recorded declined orders or missing data."
subscribers_ltv_logs_2023,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The `total_orders_customized` column in the subscribers_ltv_logs_2023 table stores the cumulative count of orders that included customization or personalization options for each subscriber during 2023. This integer field can be used to analyze customer engagement with customization features and can be null if a subscriber hasn't placed any customized orders, making it useful for filtering and aggregating data about personalized purchasing behavior."
subscribers_ltv_logs_2023,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The total_orders_shipped column represents the cumulative count of successfully delivered orders for each subscriber throughout 2023. This integer field can be used to analyze customer engagement and purchase frequency, making it valuable for queries that need to segment customers based on order volume or identify high-activity subscribers."
subscribers_ltv_logs_2023,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column represents the percentage (stored as a decimal between 0.00 and 100.00) of a subscriber's orders that included customizations or modifications during 2023. This metric helps analyze how frequently subscribers personalize their orders, which can be used in SQL queries to segment customers by their customization behavior or calculate the impact of customizations on lifetime value."
subscribers_ltv_logs_2023,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_orders_refunded` column in the subscribers_ltv_logs_2023 table stores the cumulative count of refunded orders associated with each subscriber during 2023. This integer field can be used in SQL queries to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refund history or incomplete data, and can be particularly useful when calculating net customer value by offsetting it against successful orders."
subscribers_ltv_logs_2023,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The total_orders_generated column represents the cumulative number of orders placed by a subscriber throughout their relationship with the business up to the point of the log entry in 2023. This integer field can be used to analyze purchasing frequency and customer engagement, with NULL values potentially indicating new subscribers or those who haven't made any purchases yet."
subscribers_ltv_logs_2023,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column stores the percentage-based commission or take rate earned from orders generated by subscribers, represented as a decimal value (e.g., 15.50 for 15.5%). This metric helps analyze the revenue share or commission structure for subscriber-generated orders during 2023, with values ranging from 0.00 to 100.00 percent and allowing for NULL values when the take rate is not applicable or hasn't been calculated."
subscribers_ltv_logs_2023,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber, allowing for values up to 8 digits before the decimal point. This column can contain NULL values and defaults to 0.00, making it useful for queries that analyze subscriber spending patterns or filter customers based on their total order value during 2023."
subscribers_ltv_logs_2023,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (in decimal format with 2 decimal places) for a subscriber's orders, representing their typical spending pattern per transaction in 2023. This metric can be used in SQL queries to analyze customer spending behaviors and segment subscribers based on their average order value, with NULL values indicating subscribers who haven't made any purchases in the tracking period."
subscribers_ltv_logs_2023,coupons_used,text,YES,,,,,,65535.0,,,"The `coupons_used` column in the subscribers_ltv_logs_2023 table stores text-based information about discount coupons that subscribers have redeemed during their customer lifecycle in 2023. When querying this column, you can use string operations to analyze coupon usage patterns, though be aware that the column accepts NULL values which should be handled appropriately in your queries."
subscribers_ltv_logs_2023,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber throughout 2023, represented as a decimal number with two decimal places (e.g., 25.50). When querying this column, you can use it to analyze discount usage patterns or calculate the net revenue impact of coupon redemptions, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2023,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The total_products_ordered column represents the cumulative count of products a subscriber has purchased throughout their relationship with the business up to the point of the LTV calculation in 2023. This integer field can be used to segment customers by purchase volume or analyze purchasing patterns, with NULL values potentially indicating new subscribers or those who haven't made any purchases yet."
subscribers_ltv_logs_2023,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_products_refunded` column in the subscribers_ltv_logs_2023 table stores the cumulative count of products that have been refunded by each subscriber during 2023. When writing SQL queries, this integer column can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating that refund data may not be available for some subscribers."
subscribers_ltv_logs_2023,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage (as a decimal between 0.00 and 100.00) of product purchases that resulted in refunds for a given subscriber during 2023. When writing SQL queries, this column can be used to analyze refund patterns or filter for subscribers with specific refund rates, with NULL values indicating subscribers where refund rate data isn't available."
subscribers_ltv_logs_2023,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,"The total_cs_tickets column represents the cumulative count of customer service tickets submitted by a subscriber throughout their relationship with the company up to the point of the LTV calculation in 2023. This integer field can be used to analyze support interaction patterns and their correlation with customer lifetime value, with NULL values indicating either no tickets or missing data."
subscribers_ltv_logs_2023,total_ratings,int,YES,,,0,,,,10.0,0.0,"The `total_ratings` column in the subscribers_ltv_logs_2023 table stores the cumulative number of ratings or reviews submitted by a subscriber throughout their engagement with the service in 2023. When querying this integer field, which can be null, it can be used to analyze subscriber engagement levels or to segment customers based on their rating activity, making it valuable for customer engagement analysis and LTV calculations."
subscribers_ltv_logs_2023,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating (on a scale from 0.0 to 5.0) across all orders placed by a subscriber during 2023, represented as a decimal with one decimal place. When querying this column, you can use it to filter or analyze subscriber satisfaction levels, though be aware that NULL values may exist since ratings are optional."
subscribers_ltv_logs_2023,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a scale from 0.0 to 5.0) that subscribers have given for their delivery experiences throughout 2023, with one decimal place precision. This metric can be used in SQL queries to analyze customer satisfaction with delivery services and can be aggregated or filtered to identify trends in delivery performance, though null values should be handled appropriately as ratings may not be available for all subscribers."
subscribers_ltv_logs_2023,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2023 is a non-nullable datetime field that automatically records the timestamp when each LTV metric entry is created, using CURRENT_TIMESTAMP as the default value. When querying subscriber lifetime value data, this column can be used to analyze trends over time or filter records within specific date ranges during 2023."
subscribers_ltv_logs_2023,has_received_trial_basket,date,YES,,,,,,,,,"This 'has_received_trial_basket' column stores the date when a subscriber received their trial basket, with NULL values indicating subscribers who haven't received one yet. When writing queries, this column can be used to filter subscribers based on their trial basket status (IS NOT NULL for those who received one) or to analyze the timing of trial basket distribution throughout 2023."
subscribers_ltv_logs_2023,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that indicates where a subscriber originated from when they first signed up. This optional varchar field is commonly used in marketing attribution queries to analyze which traffic sources generate the highest lifetime value subscribers, and can be joined with other marketing data to evaluate channel performance."
subscribers_ltv_logs_2023,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, helping track which marketing campaigns led to user acquisition. This optional VARCHAR field can be used in SQL queries to analyze subscriber acquisition sources and measure marketing campaign effectiveness, making it particularly valuable for ROI analysis and attribution reporting."
subscribers_ltv_logs_2023,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the latest marketing channel or acquisition source through which a subscriber joined or re-joined the service (e.g., ""organic_search"", ""facebook_ads"", ""referral""). This optional text field helps track where valuable customers are coming from and can be used in SQL queries to analyze customer lifetime value by acquisition channel, though NULL values should be handled appropriately since the field is nullable."
subscribers_ltv_logs_2023,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,"The coupon_category_at_signup column stores an integer value representing the category of discount coupon (if any) that was used when the subscriber first signed up for the service. This optional field (nullable) helps analyze how different types of signup promotions impact customer lifetime value, allowing queries to segment and compare LTV metrics based on initial acquisition incentives."
subscribers_ltv_logs_2023,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column stores the type of device (e.g., 'mobile', 'desktop', 'tablet') that a subscriber used when initially signing up for the service. When writing SQL queries, this column can be used to segment and analyze subscriber lifetime value based on their original signup platform, though be aware that NULL values are possible and should be handled appropriately in your analysis."
subscribers_ltv_logs_2023,latest_order_shipped,date,YES,,,,,,,,,"The `latest_order_shipped` column in the subscribers_ltv_logs_2023 table stores the date when a subscriber's most recent order was shipped, helping track customer engagement recency for LTV calculations. This date field can be used in SQL queries to analyze shipping patterns, calculate time between orders, or segment customers based on their last purchase activity, with NULL values indicating subscribers who haven't made any purchases that required shipping."
subscribers_ltv_logs_2023,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The `number_of_times_canceled` column in the subscribers_ltv_logs_2023 table stores the count of how many times a subscriber has canceled their subscription throughout their customer lifecycle in 2023. This integer field can be used in SQL queries to analyze churn patterns or segment customers based on their cancellation history, with NULL values indicating that the cancellation count is unknown and 0 representing subscribers who have never canceled."
subscribers_ltv_logs_2024,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in subscribers_ltv_logs_2024 serves as a required identifier that links each LTV record to a specific subscriber in the system. When writing SQL queries, this column can be used to join with other subscriber-related tables or to filter/group LTV metrics for specific users, making it a fundamental field for analyzing individual customer value trends throughout 2024."
subscribers_ltv_logs_2024,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The `iso_week` column in the subscribers_ltv_logs_2024 table stores the ISO week number (1-53) for each subscriber LTV record, representing when the metrics were calculated during 2024. When querying this column, you can use it to analyze subscriber value trends by week or group LTV metrics into weekly segments, making it particularly useful for time-based aggregations and trend analysis."
subscribers_ltv_logs_2024,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the initial date when a subscriber first created their subscription, formatted as a date value (YYYY-MM-DD). This non-nullable field is essential for calculating subscriber tenure and analyzing cohort-based LTV metrics, making it a fundamental timestamp for tracking the subscriber's journey from the beginning of their relationship with the service."
subscribers_ltv_logs_2024,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required tinyint field that indicates the current state of a subscriber's subscription using numeric status codes. When querying this table, use this column to filter or segment subscribers based on their subscription state (e.g., active, cancelled, paused) to analyze LTV metrics across different subscription statuses."
subscribers_ltv_logs_2024,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column is a required tinyint field that categorizes subscribers based on their subscription plan type using numeric codes. When querying this table, use this column to filter or group subscribers by their subscription category to analyze LTV metrics across different subscription tiers throughout 2024."
subscribers_ltv_logs_2024,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2024 stores the date when each subscriber initially registered for the service, formatted as a standard date value (YYYY-MM-DD). This column can be used in SQL queries to analyze subscriber cohorts, calculate retention periods, and track how lifetime value metrics evolve based on when customers joined the service."
subscribers_ltv_logs_2024,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2024 is a tinyint field that categorizes how subscribers initially joined the service, likely using small numeric codes to represent different signup methods or channels. When querying this column, you can use it to segment and analyze subscriber lifetime value based on their acquisition source, though be aware that NULL values are possible and should be handled appropriately in your queries."
subscribers_ltv_logs_2024,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup, captured as a text string up to 255 characters. This optional field helps track which acquisition channels and campaigns are driving valuable customer signups, enabling analysis of customer lifetime value (LTV) by marketing source."
subscribers_ltv_logs_2024,most_recent_reactivation_date,date,YES,,,,,,,,,The most_recent_reactivation_date column stores the latest date when a previously churned subscriber resumed their subscription in 2024. This date field is useful for analyzing subscriber retention patterns and can be used in SQL queries to identify reactivated customers or calculate time periods between churns and reactivations.
subscribers_ltv_logs_2024,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column stores a small integer value (tinyint) that indicates the method or type of the subscriber's most recent reactivation event in 2024. When writing queries, this nullable column can be used to segment or analyze subscribers based on how they returned to active status, with different integer values representing distinct reactivation categories or channels."
subscribers_ltv_logs_2024,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber last canceled their subscription, if applicable. This date field is useful for analyzing churn patterns and can be used in SQL queries to filter or segment subscribers based on their cancellation history, with NULL values indicating subscribers who have never canceled."
subscribers_ltv_logs_2024,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The `most_recent_cancelation_reason` column stores the latest reported reason why a subscriber canceled their subscription, captured as a text string up to 255 characters. When writing queries, this column can be used to analyze churn patterns and segment subscribers based on their cancellation feedback, though note that it may contain NULL values for active subscribers or cases where no reason was provided."
subscribers_ltv_logs_2024,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active engagement or retention behavior with the service in 2024. This date field can be used in SQL queries to analyze subscriber retention patterns, calculate churn risk, or measure the time gap between retention events, making it particularly valuable for cohort analysis and retention tracking queries."
subscribers_ltv_logs_2024,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores JSON-formatted text containing delivery address information for subscribers, which can include multiple addresses per subscriber. When querying this column, you'll need to use JSON parsing functions to extract specific address components, and since it's nullable, always include NULL handling in your queries."
subscribers_ltv_logs_2024,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2024 stores text information about how subscription content or services are delivered to customers, which can be used to analyze LTV patterns across different delivery methods. When querying this column, you can use string operations and comparisons to filter or group subscribers based on their delivery preferences, though be aware the column can contain NULL values."
subscribers_ltv_logs_2024,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2024 stores text-based information about subscriber delivery preferences and patterns for LTV calculations. This optional field can be used in SQL queries to analyze delivery-related factors that influence customer lifetime value, and since it's nullable, queries should handle potential NULL values when filtering or aggregating this data."
subscribers_ltv_logs_2024,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_subscribed` column in the subscribers_ltv_logs_2024 table stores the cumulative number of weeks a subscriber has maintained their subscription as an integer value. This metric is useful for analyzing subscriber retention and loyalty patterns, and can be used in SQL queries to segment customers by subscription duration or calculate time-based LTV metrics."
subscribers_ltv_logs_2024,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_with_order_shipped` column in the subscribers_ltv_logs_2024 table represents the cumulative number of weeks where a subscriber has received at least one shipped order. This integer value helps measure customer engagement and purchasing frequency, making it useful in SQL queries for analyzing subscriber activity patterns and loyalty metrics over time."
subscribers_ltv_logs_2024,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_on_vacation` column in the subscribers_ltv_logs_2024 table stores the cumulative number of weeks a subscriber has put their subscription on pause or vacation mode during 2024. This integer field can be used to analyze subscription interruptions and their impact on lifetime value calculations, with NULL values indicating either no vacation time taken or incomplete data, and a default value of 0 for new records."
subscribers_ltv_logs_2024,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column stores the percentage (as a decimal between 0 and 100) of revenue retained by the platform from subscriber orders during a given week, represented with 2 decimal places of precision. When writing queries, this column can be used to analyze platform revenue share trends or filter for specific take rate thresholds, with NULL values indicating weeks where the take rate wasn't calculated or applicable."
subscribers_ltv_logs_2024,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2024 table stores the cumulative count of canceled orders associated with each subscriber as an integer value. This metric is part of the customer lifetime value calculation and can be used in SQL queries to analyze order cancellation patterns or filter subscribers based on their cancellation history, with NULL values indicating that cancellation data may not be available for some records."
subscribers_ltv_logs_2024,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The `total_orders_declined` column in the subscribers_ltv_logs_2024 table stores the cumulative count of declined or failed order attempts associated with each subscriber throughout 2024. This integer field can be used in SQL queries to analyze payment failure patterns or identify subscribers with high decline rates, with NULL values indicating either no declined orders or missing data."
subscribers_ltv_logs_2024,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The `total_orders_customized` column in the subscribers_ltv_logs_2024 table represents the cumulative count of customized or modified orders placed by a subscriber throughout 2024. When querying this nullable integer column, it can be used to analyze customer engagement through personalized purchases, with null values potentially indicating subscribers who haven't placed any customized orders yet."
subscribers_ltv_logs_2024,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_orders_shipped` column in the subscribers_ltv_logs_2024 table represents the cumulative count of successfully delivered orders for each subscriber, serving as a key metric for customer engagement and fulfillment tracking. This nullable integer field can be used in SQL queries to analyze shipping patterns, customer activity levels, and contribute to LTV calculations, with a default value of 0 for new or inactive subscribers."
subscribers_ltv_logs_2024,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column stores the percentage (as a decimal between 0 and 100) of a subscriber's orders that include customizations or modifications, represented with 2 decimal places of precision. This metric helps analyze how frequently subscribers customize their orders, which can be used to understand customer engagement patterns and potential revenue impact from customization options."
subscribers_ltv_logs_2024,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_orders_refunded` column in the subscribers_ltv_logs_2024 table stores the cumulative count of refunded orders associated with each subscriber as an integer value. This metric is important for calculating accurate customer lifetime value (LTV) as it represents negative revenue events, and can be used in SQL queries to analyze refund patterns or adjust revenue calculations, with NULL values indicating subscribers who haven't had any refunded orders."
subscribers_ltv_logs_2024,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The `total_orders_generated` column in the subscribers_ltv_logs_2024 table stores the cumulative count of orders placed by each subscriber as an integer value, which can be null. This metric is a key component of subscriber lifetime value calculations and can be used in SQL queries to analyze purchasing patterns and customer engagement levels throughout 2024."
subscribers_ltv_logs_2024,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column stores the percentage-based commission or take rate earned from orders generated by subscribers, represented as a decimal between 0 and 100 with two decimal places of precision (e.g., 15.50 for a 15.5% take rate). When querying this column, you can use it for calculations involving revenue share analysis or to filter subscribers based on their associated take rate tiers, with NULL values indicating subscribers where the take rate hasn't been determined or isn't applicable."
subscribers_ltv_logs_2024,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber, allowing for values up to 99,999,999.99. This column can contain NULL values and defaults to 0.00, making it useful for queries that analyze subscriber spending patterns or calculate revenue-based metrics across the subscriber base in 2024."
subscribers_ltv_logs_2024,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The `average_basket_price` column in the subscribers_ltv_logs_2024 table stores the mean purchase amount per transaction for each subscriber, represented as a decimal number with up to 4 digits before the decimal point and 2 digits after (e.g., 1234.56). This metric is useful for analyzing typical spending patterns and can be used in SQL queries to segment customers by their average order value or calculate revenue projections, with NULL values indicating subscribers who haven't made any purchases yet."
subscribers_ltv_logs_2024,coupons_used,text,YES,,,,,,65535.0,,,"The `coupons_used` column in the subscribers_ltv_logs_2024 table stores text-based information about discount coupons that subscribers have applied to their purchases throughout 2024. When writing SQL queries, this column can be used to analyze coupon usage patterns and their impact on subscriber lifetime value, though you should account for NULL values since the column is nullable."
subscribers_ltv_logs_2024,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber, represented as a decimal number with up to 10 digits and 2 decimal places (e.g., 123.45). When querying this column, you can use it to analyze discount usage patterns or calculate the net revenue impact of coupon redemptions, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2024,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The `total_products_ordered` column in the subscribers_ltv_logs_2024 table stores the cumulative count of products that a subscriber has purchased, represented as an integer value. This metric is part of the subscriber's lifetime value calculation and can be used in SQL queries to analyze purchasing patterns and customer engagement, with NULL values indicating subscribers who haven't made any purchases yet."
subscribers_ltv_logs_2024,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_products_refunded` column in the subscribers_ltv_logs_2024 table stores the cumulative count of products that have been refunded by each subscriber, represented as an integer value. When querying this column, it can be used to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, and the default starting value being 0."
subscribers_ltv_logs_2024,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage of product purchases that resulted in refunds for a subscriber, represented as a decimal between 0.00 and 100.00. When querying this column, you can use it to analyze refund patterns or filter for subscribers with specific refund rates (e.g., WHERE products_refund_rate > 5.00 to find subscribers with refund rates above 5%)."
subscribers_ltv_logs_2024,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,"The `total_cs_tickets` column in the subscribers_ltv_logs_2024 table stores the cumulative count of customer service tickets submitted by each subscriber as an integer value. This metric can be used in SQL queries to analyze customer support engagement patterns and potentially correlate support interactions with lifetime value calculations, where NULL values indicate subscribers who haven't created any support tickets."
subscribers_ltv_logs_2024,total_ratings,int,YES,,,0,,,,10.0,0.0,"The `total_ratings` column in the subscribers_ltv_logs_2024 table stores the cumulative number of ratings or reviews submitted by a subscriber, represented as an integer value that can be null. This metric helps track user engagement and can be used in SQL queries to analyze subscriber participation levels or filter/segment customers based on their rating activity as part of the broader lifetime value analysis."
subscribers_ltv_logs_2024,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The `average_order_rating` column stores the mean customer satisfaction rating for a subscriber's orders, represented as a decimal number with one decimal place (e.g., 4.5). This metric helps track customer satisfaction as part of the overall lifetime value calculation, with values typically ranging from 0.0 to 5.0, and NULL values indicating no ratings have been received yet."
subscribers_ltv_logs_2024,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores the mean rating (on a scale from 0.0 to 5.0) that subscribers have given for delivery services, with one decimal place precision. This metric can be used in SQL queries to analyze customer satisfaction with delivery services as part of the overall lifetime value calculation, and being nullable, queries should handle potential NULL values when performing aggregations or comparisons."
subscribers_ltv_logs_2024,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2024 is a non-nullable datetime field that automatically records the timestamp when each LTV log entry is created. This column is useful for temporal analysis and can be used in SQL queries to filter or group subscriber value metrics by specific time periods throughout 2024, with values automatically populated using CURRENT_TIMESTAMP when new records are inserted."
subscribers_ltv_logs_2024,has_received_trial_basket,date,YES,,,,,,,,,"This 'has_received_trial_basket' column stores the date when a subscriber received their trial basket, with NULL values indicating subscribers who haven't received one yet. When writing queries, this column can be used to filter subscribers based on their trial basket status or analyze the timing of trial basket distribution, such as ""WHERE has_received_trial_basket IS NOT NULL"" to find all subscribers who have received trial baskets."
subscribers_ltv_logs_2024,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter (e.g., ""google"", ""facebook"", ""email"") that identifies where a subscriber originated from when they first signed up. This optional varchar field is commonly used in SQL queries to analyze subscriber acquisition channels and compare LTV metrics across different marketing sources, helping to evaluate the effectiveness of various acquisition channels in generating valuable customers."
subscribers_ltv_logs_2024,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, capturing the marketing campaign source that led to their subscription. This optional VARCHAR field is useful for analyzing which marketing campaigns drive the highest lifetime value subscribers and can be used in GROUP BY clauses or WHERE conditions to segment LTV metrics by acquisition source."
subscribers_ltv_logs_2024,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column stores the latest marketing channel or acquisition source through which a subscriber joined the service, such as ""organic_search"", ""paid_social"", or ""referral"". When writing queries, this varchar field can be used to segment and analyze subscriber lifetime value based on acquisition channels, though be aware it's nullable and should be handled accordingly with NULL checks when needed for accurate analysis."
subscribers_ltv_logs_2024,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,"The coupon_category_at_signup column stores an integer value representing the category or type of coupon that was used when a subscriber first signed up for the service. This optional field (as indicated by being nullable) helps analyze how different promotional categories impact subscriber lifetime value, making it useful in WHERE clauses or GROUP BY operations when examining the relationship between initial promotional offers and long-term customer value."
subscribers_ltv_logs_2024,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column in subscribers_ltv_logs_2024 stores the type of device (e.g., 'mobile', 'desktop', 'tablet') that a subscriber used when initially signing up for the service. When writing SQL queries, this column can be used to segment and analyze subscriber lifetime value metrics based on acquisition channel, though be aware that it may contain NULL values for cases where the signup device information wasn't captured."
subscribers_ltv_logs_2024,latest_order_shipped,date,YES,,,,,,,,,"The `latest_order_shipped` column in the subscribers_ltv_logs_2024 table stores the date when a subscriber's most recent order was shipped, helping track customer engagement through purchase activity. This date field can be used in SQL queries to analyze shipping patterns, calculate time between orders, or segment customers based on their most recent purchase activity, making it valuable for LTV and retention analysis."
subscribers_ltv_logs_2024,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The `number_of_times_canceled` column in the subscribers_ltv_logs_2024 table stores an integer value representing how many times a subscriber has canceled their subscription throughout their customer lifecycle. This metric is useful for analyzing churn patterns and customer behavior, where a higher number might indicate a less stable customer relationship, and can be used in SQL queries to segment customers based on their cancellation history or to identify patterns in customer retention."
subscribers_ltv_logs_2024,tier_id,tinyint,YES,,,,,,,3.0,0.0,"The tier_id column in subscribers_ltv_logs_2024 represents the subscription tier level assigned to a customer, stored as a small integer value. When querying subscriber LTV data, this column can be used to segment and analyze customer value metrics by subscription tier, though the nullable property indicates that some records may not have an assigned tier."
subscribers_ltv_logs_2025,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in subscribers_ltv_logs_2025 is a non-nullable integer field that serves as a foreign key to identify individual subscribers, enabling joins with other user-related tables. This indexed column (indicated by MUL key type) is essential for querying and analyzing subscriber-specific LTV metrics and historical value changes throughout 2025."
subscribers_ltv_logs_2025,iso_week,tinyint,NO,MUL,,,,,,3.0,0.0,"The `iso_week` column in the subscribers_ltv_logs_2025 table stores the ISO week number (1-53) for each LTV metric entry, enabling time-based analysis and reporting of subscriber value throughout 2025. When writing SQL queries, this column can be used to group or filter LTV metrics by week, making it particularly useful for weekly trend analysis and period-over-period comparisons."
subscribers_ltv_logs_2025,subscription_creation_date,date,NO,,,,,,,,,"The subscription_creation_date column stores the initial date when a subscriber first created their subscription, formatted as a date value (YYYY-MM-DD). This required field is essential for calculating subscription age and analyzing customer acquisition patterns, making it particularly useful in queries that need to segment subscribers by signup cohorts or measure the duration of customer relationships."
subscribers_ltv_logs_2025,subscription_status,tinyint,NO,,,,,,,3.0,0.0,"The subscription_status column is a required tinyint field that indicates the current state of a subscriber's subscription using numeric status codes. When querying this table, use this column to filter or segment subscribers based on their subscription state (e.g., active, cancelled, paused) to analyze lifetime value metrics across different subscription statuses in 2025."
subscribers_ltv_logs_2025,subscription_type,tinyint,NO,,,,,,,3.0,0.0,"The subscription_type column in subscribers_ltv_logs_2025 is a required tinyint field that categorizes subscribers based on their subscription plan or tier. When querying this column, use numeric values to filter or group subscribers by their subscription type, which likely represents different service levels or subscription packages available to customers in 2025."
subscribers_ltv_logs_2025,signup_date,date,YES,,,,,,,,,"The signup_date column in subscribers_ltv_logs_2025 stores the date when a subscriber first registered for the service, recorded in standard date format (YYYY-MM-DD). When writing queries, this column can be used for temporal analysis of customer acquisition patterns and calculating subscription duration, though be aware that NULL values are possible and should be handled appropriately in your queries."
subscribers_ltv_logs_2025,signup_type,tinyint,YES,,,,,,,3.0,0.0,"The signup_type column in subscribers_ltv_logs_2025 is a tinyint field that categorizes how subscribers initially joined the service, likely using small numeric codes to represent different signup methods or channels (e.g., 1 for web, 2 for mobile app, etc.). When querying this column, you can use it to segment and analyze subscriber lifetime value based on their acquisition channel, though be aware the field is nullable and may contain NULL values for records where the signup method wasn't captured."
subscribers_ltv_logs_2025,signup_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The signup_campaign_referral column stores the marketing campaign or referral source that led to a subscriber's initial signup, captured as a text string up to 255 characters in length. This optional field (nullable) helps track which acquisition channels and campaigns are driving valuable customer signups, enabling analysis of customer lifetime value (LTV) by marketing source in 2025."
subscribers_ltv_logs_2025,most_recent_reactivation_date,date,YES,,,,,,,,,"The most_recent_reactivation_date column stores the latest date when a previously churned subscriber reactivated their subscription in 2025. This date field is useful for analyzing subscriber retention patterns and can be used in SQL queries to identify subscribers who have returned after cancellation, with NULL values indicating subscribers who have never churned and reactivated."
subscribers_ltv_logs_2025,most_recent_reactivation_type,tinyint,YES,,,,,,,3.0,0.0,"The most_recent_reactivation_type column in subscribers_ltv_logs_2025 stores a small integer value (tinyint) that indicates the method or type of the subscriber's most recent reactivation to the service. When querying this column, it can be used to analyze patterns in how customers return to the service, though the field may contain NULL values if a subscriber has never been reactivated."
subscribers_ltv_logs_2025,most_recent_cancelation_date,date,YES,,,,,,,,,"The most_recent_cancelation_date column stores the date when a subscriber last canceled their subscription, if applicable, in the subscribers_ltv_logs_2025 table. This nullable date field is useful for analyzing churn patterns and can be used in SQL queries to filter or segment subscribers based on their cancellation history, with NULL values indicating subscribers who have never canceled."
subscribers_ltv_logs_2025,most_recent_cancelation_reason,varchar(255),YES,,,,,,255.0,,,"The most_recent_cancelation_reason column stores the latest reported reason why a subscriber canceled their subscription, captured as a text string up to 255 characters. When writing queries, this column can be used to analyze churn patterns and segment subscribers based on their cancellation reasons, though note that NULL values are possible for active subscribers or cases where no reason was provided."
subscribers_ltv_logs_2025,most_recent_retention_date,date,YES,,,,,,,,,"The most_recent_retention_date column stores the latest date when a subscriber demonstrated active engagement or retention behavior in 2025, such as renewing their subscription or making a repeat purchase. This date field is useful for analyzing customer loyalty patterns and can be used in SQL queries to calculate retention periods, identify at-risk customers, or segment users based on their engagement recency."
subscribers_ltv_logs_2025,delivery_addresses_data,text,YES,,,,,,65535.0,,,"The delivery_addresses_data column stores JSON-formatted text containing delivery address information for subscribers, allowing for multiple addresses per customer to be tracked in 2025. This column can be queried using JSON extraction functions to analyze shipping patterns and delivery preferences, though care should be taken when handling NULL values since the column is nullable."
subscribers_ltv_logs_2025,delivery_type_data,text,YES,,,,,,65535.0,,,"The delivery_type_data column in subscribers_ltv_logs_2025 stores text information about how subscription content or services are delivered to customers, which could include values like 'digital', 'physical', or 'hybrid'. When writing SQL queries, this column can be used to filter or group subscriber LTV metrics based on different delivery methods, helping analyze how delivery types impact customer lifetime value in 2025."
subscribers_ltv_logs_2025,delivery_day_data,text,YES,,,,,,65535.0,,,"The delivery_day_data column in subscribers_ltv_logs_2025 stores text-based information about subscriber delivery preferences and patterns for the year 2025. This optional field (nullable) can be used in SQL queries to analyze delivery-related metrics and customer behavior patterns, helping to understand how delivery schedules impact subscriber lifetime value."
subscribers_ltv_logs_2025,total_weeks_subscribed,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_subscribed` column in the subscribers_ltv_logs_2025 table represents the cumulative number of weeks a customer has maintained an active subscription as of 2025. This integer field can be used to analyze subscription duration patterns and customer retention, making it particularly valuable for queries that need to segment customers by loyalty duration or calculate retention metrics."
subscribers_ltv_logs_2025,total_weeks_with_order_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_with_order_shipped` column in the subscribers_ltv_logs_2025 table represents the cumulative number of weeks where a subscriber has received at least one shipped order during their customer lifetime through 2025. This integer value helps measure customer engagement and purchase frequency, making it useful in SQL queries for analyzing purchasing patterns and customer activity levels (e.g., ""SELECT * FROM subscribers_ltv_logs_2025 WHERE total_weeks_with_order_shipped > 12"" would find subscribers who have received orders in more than 12 different weeks)."
subscribers_ltv_logs_2025,total_weeks_on_vacation,int,YES,,,0,,,,10.0,0.0,"The `total_weeks_on_vacation` column in the subscribers_ltv_logs_2025 table stores the cumulative number of weeks a subscriber has put their subscription on pause or vacation mode during 2025. This integer field can be used to analyze subscription interruption patterns and their impact on lifetime value calculations, with NULL values indicating either no vacation time taken or incomplete data, and a default value of 0 for new records."
subscribers_ltv_logs_2025,weekly_order_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The weekly_order_take_rate column stores the percentage (as a decimal between 0.00 and 100.00) of subscribers who placed at least one order during a given week in 2025. This metric helps analyze subscriber engagement and purchasing frequency, with NULL values indicating weeks where the take rate couldn't be calculated or wasn't applicable for certain subscribers."
subscribers_ltv_logs_2025,total_orders_canceled,int,YES,,,0,,,,10.0,0.0,"The `total_orders_canceled` column in the subscribers_ltv_logs_2025 table stores the cumulative count of canceled orders associated with each subscriber during 2025. This integer field can be used in SQL queries to analyze order cancellation patterns and their impact on customer lifetime value, with NULL values permitted when cancellation data is not available."
subscribers_ltv_logs_2025,total_orders_declined,int,YES,,,0,,,,10.0,0.0,"The `total_orders_declined` column in the subscribers_ltv_logs_2025 table stores the cumulative count of declined or failed order attempts by each subscriber during 2025. This integer field can be used to analyze payment failure patterns and customer friction points, with NULL values indicating either no declined orders or incomplete data, making it valuable for risk assessment and customer experience analysis in SQL queries."
subscribers_ltv_logs_2025,total_orders_customized,int,YES,,,0,,,,10.0,0.0,"The `total_orders_customized` column in the subscribers_ltv_logs_2025 table stores the cumulative count of customized or modified orders placed by each subscriber during 2025. When writing SQL queries, this nullable integer field can be used to analyze customer engagement through their personalized order behavior, and it's particularly useful for segmentation queries or when calculating the correlation between customized orders and overall customer lifetime value."
subscribers_ltv_logs_2025,total_orders_shipped,int,YES,,,0,,,,10.0,0.0,"The `total_orders_shipped` column in the subscribers_ltv_logs_2025 table stores the cumulative count of successfully delivered orders for each subscriber during 2025. This integer field can be used in SQL queries to analyze shipping volumes and customer purchase patterns, with NULL values indicating either new subscribers or those who haven't made any purchases that resulted in shipments."
subscribers_ltv_logs_2025,orders_customization_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_customization_rate column stores the percentage (as a decimal between 0.00 and 100.00) of a subscriber's orders that include customizations or modifications to standard offerings in 2025. This metric helps analyze customer engagement and preference for personalized options, with NULL values indicating either no orders placed or insufficient data to calculate the customization rate."
subscribers_ltv_logs_2025,total_orders_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_orders_refunded` column in the subscribers_ltv_logs_2025 table stores the cumulative count of refunded orders associated with each subscriber during 2025. This integer field can be used in SQL queries to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or missing data, making it valuable for calculating net revenue impact and identifying potential customer retention issues."
subscribers_ltv_logs_2025,total_orders_generated,int,YES,,,0,,,,10.0,0.0,"The `total_orders_generated` column in the subscribers_ltv_logs_2025 table stores the cumulative count of orders placed by each subscriber throughout their relationship with the business up to that point in 2025. This integer field can be used in SQL queries to analyze purchasing frequency and customer engagement patterns, and since it's nullable, queries should handle potential NULL values when performing calculations or comparisons."
subscribers_ltv_logs_2025,orders_generated_take_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The orders_generated_take_rate column stores the percentage (as a decimal between 0 and 100) that represents the platform's commission or ""take rate"" from orders generated by subscribers in 2025. This decimal field, which can be null and defaults to 0.00, is commonly used in revenue-related calculations and can be useful in queries analyzing platform profitability or commission-based metrics."
subscribers_ltv_logs_2025,total_orders_revenue,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_orders_revenue column stores the cumulative revenue (in decimal format with 2 decimal places) generated from all orders placed by a subscriber in 2025, allowing for NULL values when no orders have been placed. This column is essential for calculating customer lifetime value metrics and can be used in aggregate functions (SUM, AVG) to analyze revenue patterns across different subscriber segments."
subscribers_ltv_logs_2025,average_basket_price,"decimal(6,2)",YES,,,0.00,,,,6.0,2.0,"The average_basket_price column stores the mean purchase amount (with 2 decimal places) for a subscriber's transactions in 2025, represented as a decimal value up to 9999.99. This metric helps analyze typical spending patterns per order and can be used in SQL queries to calculate revenue trends or segment customers by spending behavior, with NULL values indicating subscribers who haven't made any purchases."
subscribers_ltv_logs_2025,coupons_used,text,YES,,,,,,65535.0,,,"The `coupons_used` column in the subscribers_ltv_logs_2025 table stores a text representation of discount coupons that subscribers have redeemed during their customer lifecycle in 2025. When writing SQL queries, this column can be used to analyze coupon usage patterns and their impact on subscriber lifetime value, though you should note it's nullable and may contain NULL values for subscribers who haven't used any coupons."
subscribers_ltv_logs_2025,total_coupons_used_value,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The total_coupons_used_value column stores the cumulative monetary value of all coupons redeemed by a subscriber in 2025, represented as a decimal number with two decimal places (e.g., 125.50). When querying this column, you can use it to analyze discount usage patterns or calculate the net revenue impact of coupon redemptions, with NULL values indicating subscribers who haven't used any coupons."
subscribers_ltv_logs_2025,total_products_ordered,int,YES,,,0,,,,10.0,0.0,"The `total_products_ordered` column in the subscribers_ltv_logs_2025 table stores the cumulative count of products that a subscriber has ordered throughout their relationship with the business up to that point in 2025. This integer field can be used in SQL queries to analyze purchasing patterns and segment customers based on order volume, with NULL values indicating subscribers who haven't made any purchases or where the order count is unknown."
subscribers_ltv_logs_2025,total_products_refunded,int,YES,,,0,,,,10.0,0.0,"The `total_products_refunded` column in the subscribers_ltv_logs_2025 table stores the cumulative count of products that a subscriber has returned or refunded during 2025. This integer field can be used in SQL queries to analyze refund patterns and customer satisfaction metrics, with NULL values indicating either no refunds or incomplete data, and can be particularly useful when calculating the net value of a customer's relationship with the business."
subscribers_ltv_logs_2025,products_refund_rate,"decimal(5,2)",YES,,,0.00,,,,5.0,2.0,"The products_refund_rate column stores the percentage (as a decimal between 0.00 and 100.00) of product purchases that resulted in refunds for each subscriber record in 2025. This metric helps analyze customer satisfaction and revenue stability, where a lower refund rate generally indicates better product-market fit and customer satisfaction. The column accepts NULL values and defaults to 0.00, making it useful for both complete and partial refund rate tracking scenarios."
subscribers_ltv_logs_2025,total_cs_tickets,int,YES,,,0,,,,10.0,0.0,"The `total_cs_tickets` column in the subscribers_ltv_logs_2025 table stores the cumulative count of customer service tickets submitted by each subscriber during their lifetime up to 2025. This integer field can be used in SQL queries to analyze customer support engagement patterns and potentially correlate support ticket volume with customer lifetime value, accepting NULL values when ticket data is unavailable."
subscribers_ltv_logs_2025,total_ratings,int,YES,,,0,,,,10.0,0.0,The `total_ratings` column in the subscribers_ltv_logs_2025 table stores the cumulative number of ratings or reviews submitted by a subscriber throughout their engagement with the service in 2025. This nullable integer field can be used in SQL queries to analyze customer engagement levels and correlate rating activity with lifetime value metrics.
subscribers_ltv_logs_2025,average_order_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_order_rating column stores the mean customer satisfaction rating for all orders placed by a subscriber, represented as a decimal number with one decimal place (e.g., 4.5). This optional field ranges from 0.0 to 5.0 and can be used in SQL queries to analyze customer satisfaction trends or filter subscribers based on their average order feedback scores."
subscribers_ltv_logs_2025,average_delivery_rating,"decimal(2,1)",YES,,,0.0,,,,2.0,1.0,"The average_delivery_rating column stores customer satisfaction ratings for delivery services on a decimal scale (likely 0.0 to 5.0) with one decimal place precision. This metric can be used in SQL queries to analyze customer satisfaction trends or filter subscribers based on their delivery experience ratings, with NULL values indicating cases where no rating data is available."
subscribers_ltv_logs_2025,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in subscribers_ltv_logs_2025 is a non-nullable datetime field that automatically records the timestamp when each LTV record is created, using CURRENT_TIMESTAMP as the default value. This column is useful for temporal analysis of subscriber value changes and can be used in SQL queries to filter or group LTV records by their creation date during 2025."
subscribers_ltv_logs_2025,has_received_trial_basket,date,YES,,,,,,,,,"This 'has_received_trial_basket' column stores the date when a subscriber received their trial basket, with NULL values indicating subscribers who haven't received one yet. When writing queries, this column can be used to filter subscribers based on their trial basket status or to calculate time-based metrics related to trial basket distribution (e.g., ""SELECT COUNT(*) WHERE has_received_trial_basket IS NOT NULL"" to count subscribers who have received trial baskets)."
subscribers_ltv_logs_2025,signup_utm_source,varchar(255),YES,,,,,,255.0,,,"The signup_utm_source column stores the UTM source parameter that identifies where a subscriber originally came from when they signed up (e.g., 'google', 'facebook', 'email_campaign'). When writing SQL queries, this column can be used to analyze customer acquisition channels and segment lifetime value metrics by marketing source, though be aware that it may contain NULL values for cases where the UTM source wasn't captured or tracked."
subscribers_ltv_logs_2025,signup_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The signup_utm_campaign column stores the UTM campaign parameter that was present when a subscriber initially signed up, helping track which marketing campaigns led to user acquisition. This optional VARCHAR field can contain up to 255 characters and is commonly used in SQL queries to analyze marketing campaign effectiveness and attribute subscriber value to specific acquisition channels."
subscribers_ltv_logs_2025,most_recent_signup_source,varchar(255),YES,,,,,,255.0,,,"The most_recent_signup_source column in subscribers_ltv_logs_2025 stores the latest marketing channel or referral source through which a subscriber joined the service, such as ""organic_search"", ""paid_social"", or ""email_campaign"". When writing SQL queries, this column can be used to analyze customer acquisition patterns and segment LTV metrics by acquisition channel, though its nullable nature means you should consider handling NULL values in your analysis."
subscribers_ltv_logs_2025,coupon_category_at_signup,int,YES,,,,,,,10.0,0.0,"The coupon_category_at_signup column stores an integer value representing the category of promotional coupon (if any) that was used when a subscriber first signed up for the service in 2025. This optional field (as indicated by being nullable) helps analyze how different types of signup promotions impact subscriber lifetime value, allowing for correlation between initial promotional categories and long-term customer value."
subscribers_ltv_logs_2025,signup_device_type,varchar(255),YES,,,,,,255.0,,,"The signup_device_type column in subscribers_ltv_logs_2025 stores the type of device (e.g., mobile, desktop, tablet) that a subscriber used when initially signing up for the service. When writing SQL queries, this column can be used to segment and analyze subscriber behavior and lifetime value based on their original signup platform, though be aware that it may contain NULL values for records where the signup device information wasn't captured."
subscribers_ltv_logs_2025,latest_order_shipped,date,YES,,,,,,,,,"The `latest_order_shipped` column in the subscribers_ltv_logs_2025 table stores the date when a subscriber's most recent order was shipped during 2025, helping track customer engagement through purchase activity. This date field can be used in SQL queries to analyze order patterns, calculate time between purchases, or identify potentially churning customers based on shipping date gaps, making it valuable for LTV and customer behavior analysis."
subscribers_ltv_logs_2025,number_of_times_canceled,int,YES,,,0,,,,10.0,0.0,"The `number_of_times_canceled` column in the subscribers_ltv_logs_2025 table stores an integer value representing how many times a subscriber has canceled their subscription throughout their customer lifecycle up to 2025. This metric is useful for analyzing churn patterns and customer retention, and can be used in SQL queries to segment customers based on their cancellation history or to identify subscribers with multiple cancellation events."
subscribers_ltv_logs_2025,tier_id,tinyint,YES,,,,,,,3.0,0.0,"The tier_id column in subscribers_ltv_logs_2025 represents the subscription tier level assigned to customers, stored as a small integer value that can be null. When writing queries, this column can be used to segment and analyze customer lifetime value metrics by subscription tier, helping identify patterns and value differences across different membership levels."
subscription_snapshot,s_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The s_id column serves as the primary key in the subscription_snapshot table, uniquely identifying each snapshot record of subscription data. When querying historical subscription data, this column can be used to join with other tables or filter specific snapshot records, though for tracking a single subscription across time, you'll likely need to combine this with other identifying fields since each subscription will have multiple snapshot records."
subscription_snapshot,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the subscription_snapshot table is a required integer field that identifies the specific user associated with each subscription snapshot record. This column can be used to join with user-related tables and filter or group subscription snapshots by user, making it essential for analyzing subscription patterns and history at the user level."
subscription_snapshot,status,varchar(100),NO,MUL,,,,,100.0,,,"The 'status' column in the subscription_snapshot table stores the current state of a subscription at the time the snapshot was taken, using a varchar(100) field that cannot be null. This column is indexed (MUL) to optimize queries filtering or joining on subscription states, and typically contains standardized status values like 'active', 'cancelled', 'suspended', or 'expired' that represent the subscription's lifecycle state at that point in time."
subscription_snapshot,basket_type,varchar(100),NO,,,,,,100.0,,,"The basket_type column in the subscription_snapshot table stores the classification or category of the subscription package as a text value (up to 100 characters). When querying historical subscription data, this column can be used to filter or group snapshots by different subscription package types, making it useful for analyzing trends or patterns across different subscription categories."
subscription_snapshot,basket_value,float,NO,,,,,,,12.0,,"The basket_value column in the subscription_snapshot table stores the monetary value of a subscription at the time the snapshot was taken, represented as a floating-point number. This required field is useful for analyzing subscription pricing trends and revenue metrics over time, making it valuable for financial reporting and historical price analysis."
subscription_snapshot,pup,varchar(255),NO,,,,,,255.0,,,"The 'pup' column in the subscription_snapshot table stores the Product Usage Pattern (PUP) identifier as a string value, representing how customers are utilizing the subscription's features or services at the time of the snapshot. When querying historical subscription data, this column can be used to analyze patterns in product usage behavior and track changes in usage characteristics over time."
subscription_snapshot,begin_date,date,NO,,,,,,,,,"The begin_date column in the subscription_snapshot table represents the start date of the snapshot period for a subscription record. When querying historical subscription data, this column can be used to identify when a particular snapshot was taken and to analyze subscription states at specific points in time, making it essential for temporal analysis and trend tracking."
subscription_snapshot,first_name,varchar(255),NO,,,,,,255.0,,,"The first_name column in the subscription_snapshot table stores the subscriber's given name as a required text field with a maximum length of 255 characters. This column is part of the subscriber's identifying information captured in each snapshot record, allowing for historical tracking of how subscriber names may have changed over time within the subscription system."
subscription_snapshot,last_name,varchar(255),NO,,,,,,255.0,,,"The last_name column in the subscription_snapshot table stores the subscriber's family name or surname as a text string with a maximum length of 255 characters. Since this field is marked as non-nullable, it must always contain a value when querying or inserting data into the subscription_snapshot table, making it a reliable field for filtering or joining operations involving subscriber identification."
subscription_snapshot,city,varchar(255),NO,,,,,,255.0,,,"The 'city' column in the subscription_snapshot table stores the city name associated with each subscription record at the time the snapshot was taken, with a maximum length of 255 characters. This required (non-nullable) field can be used in SQL queries to analyze subscription patterns by geographic location or to filter/group snapshot data based on specific cities."
subscription_snapshot,email,varchar(255),NO,,,,,,255.0,,,"The 'email' column in the subscription_snapshot table stores the email address associated with each subscription record, serving as a key identifier for the subscriber. Since this is a required field (non-nullable) with a maximum length of 255 characters, it should always be included when querying subscription snapshots and can be reliably used for joining with other customer-related tables or filtering subscription data by email address."
subscription_snapshot,payment_method,varchar(100),NO,,,,,,100.0,,,"The payment_method column in the subscription_snapshot table stores the payment method associated with a subscription at the time the snapshot was taken, using a string format up to 100 characters in length. This required field (non-nullable) captures payment types such as credit card, bank transfer, or other payment mechanisms, making it useful for analyzing payment method distributions and trends across subscription snapshots over time."
subscription_snapshot,order_value,varchar(255),NO,,,,,,255.0,,,"The order_value column in the subscription_snapshot table stores the monetary value or price associated with each subscription record as a string, allowing for flexible value representations including currency symbols or special notations. When querying historical subscription data, this column can be used to analyze pricing trends or financial metrics over time, though you may need to cast it to a numeric type for mathematical operations."
subscription_snapshot,coupon,varchar(255),NO,,,,,,255.0,,,"The 'coupon' column in the subscription_snapshot table stores the promotional code or discount identifier associated with a subscription at the time the snapshot was taken. This required (non-nullable) varchar field captures the active coupon's reference code, which is essential for analyzing discount usage patterns and promotional effectiveness across subscription history."
subscription_snapshot,created,datetime,YES,,,,,,,,,"The 'created' column in the subscription_snapshot table stores the timestamp when each subscription snapshot record was created, representing the exact point in time when the subscription data was captured. This datetime field is essential for temporal analysis and can be used to filter or group subscription snapshots by specific time periods, helping track how subscription attributes changed over time."
subscription_snapshot,signupsource,varchar(255),YES,,,,,,255.0,,,"The `signupsource` column in the subscription_snapshot table stores the channel or method through which a subscription was initially created (e.g., 'web', 'mobile_app', 'sales_rep', 'partner_referral'). When querying historical subscription data, this column can be used to analyze conversion rates and subscription patterns across different acquisition channels, though its nullable nature means some records might not have this information."
subscription_snapshot,campaign_referral,varchar(64),YES,,,,,,64.0,,,"The campaign_referral column in the subscription_snapshot table stores the marketing campaign or referral source that originally led to the subscription, with values stored as text strings up to 64 characters in length. This optional field helps track attribution and marketing effectiveness across different subscription states, allowing analysts to analyze which campaigns drive successful long-term subscriptions."
subscription_snapshot,user_agent,varchar(500),YES,,,,,,500.0,,,"The user_agent column in the subscription_snapshot table stores the browser or application identifier string that was used when the subscription snapshot was recorded. This optional field (up to 500 characters) can be useful for analyzing which platforms or devices are being used to manage subscriptions, though it may not be present for all records since it's nullable."
subscription_state_changes,subscription_state_changes_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The subscription_state_changes_id is the primary key column that uniquely identifies each state change event in the subscription lifecycle tracking system. When querying the subscription_state_changes table, this column can be used to join with other tables or filter specific state change records, and since it's non-nullable, you can rely on it always having a value."
subscription_state_changes,subscription_id,int,NO,MUL,,,,,,10.0,0.0,"The subscription_id column in the subscription_state_changes table is a required integer field that references the specific subscription being tracked, and is indexed (MUL) to optimize queries. This column is essential for linking state change events to their corresponding subscriptions and is commonly used in WHERE clauses or JOINs when analyzing subscription lifecycle events."
subscription_state_changes,created_at,timestamp,NO,MUL,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `created_at` column in the subscription_state_changes table records the exact timestamp when a subscription state change was logged, automatically populated with the current timestamp when a record is inserted. This timestamp field is indexed (MUL) to optimize queries that filter or sort by when state changes occurred, and being non-nullable ensures every state change has a documented time of occurrence."
subscription_state_changes,created_by,int,NO,,,,,,,10.0,0.0,"The `created_by` column in the subscription_state_changes table is a required integer field that stores the identifier of the user or system responsible for initiating the subscription state change. When writing queries, this column can be used to track who made specific changes to subscription states and can be joined with a users or systems table to get more details about the change initiator."
subscription_state_changes,old_state,int,YES,MUL,,,,,,10.0,0.0,"The `old_state` column in the subscription_state_changes table stores the previous state/status of a subscription before a change occurred, represented as an integer value. This column is commonly used in WHERE clauses or JOINs (as indicated by the MUL key type) to analyze subscription state transitions or filter for specific types of state changes, and being nullable allows it to accommodate cases where there was no previous state (such as when a subscription is first created)."
subscription_state_changes,new_state,int,NO,MUL,,,,,,10.0,0.0,"The `new_state` column in the subscription_state_changes table stores the integer code representing the state/status that a subscription transitioned to during a state change event. As a non-nullable field with a multiple-column index (MUL), this column is commonly used in WHERE clauses and JOIN conditions to filter or analyze specific subscription states, and it should be referenced against a predefined set of valid state codes (e.g., 1 for active, 2 for cancelled, etc.)."
subscription_state_changes,subscription_type,int,NO,,,0,,,,10.0,0.0,"The subscription_type column is a required integer field that categorizes the type or plan level of the subscription being tracked in the state change record. When writing queries, this column can be used to filter or group subscription state changes by their plan type, helping analyze how different subscription categories transition through various states."
subscription_state_changes,reason_of_cancellation,int,YES,,,,,,,10.0,0.0,"The `reason_of_cancellation` column in the subscription_state_changes table stores an integer code representing why a subscription was cancelled, with NULL values permitted when the state change is not related to a cancellation. This column is particularly useful in queries analyzing cancellation patterns or filtering for specific types of subscription terminations, helping to understand the common reasons why customers end their subscriptions."
subscription_state_changes,note,text,YES,,,,,,65535.0,,,"The `note` column in the subscription_state_changes table stores optional text descriptions or comments explaining why a particular subscription state change occurred. This free-form text field can be used to capture additional context about the transition, such as cancellation reasons, customer feedback, or internal administrative notes, making it valuable for audit and reporting purposes."
subscription_state_changes,coupon,varchar(255),YES,,,,,,255.0,,,"The 'coupon' column in the subscription_state_changes table stores the coupon code (if any) that was applied or affected during a subscription state change event. When querying this column, you can use it to analyze how coupon usage relates to subscription status changes, though be aware that the field may contain NULL values when no coupon was involved in the state change."
subscription_state_changes,mailing_id,int,YES,,,,,,,10.0,0.0,"The `mailing_id` column in the subscription_state_changes table is an optional integer field that can be used to associate a subscription state change with a specific mailing or communication event. When writing queries, this column can be used to track which mailings or communications may have triggered subscription status changes, though its nullable nature means not all state changes will have an associated mailing."
subscription_state_changes,user_agent,varchar(500),YES,,,,,,500.0,,,"The `user_agent` column in the subscription_state_changes table stores the browser or application identifier string that was used when the subscription state change occurred, with a maximum length of 500 characters. This optional field helps track the source of subscription changes and can be useful for debugging, analytics, or identifying patterns in how users interact with the subscription system across different platforms and devices."
subscriptions,subscription_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The subscription_id column serves as the primary key in the subscriptions table, uniquely identifying each subscription record in the system. When writing SQL queries, this column can be used to join with the dropinstance_transfer_users table to retrieve transfer information associated with specific subscriptions, and since it's non-nullable, you can rely on it always having a value."
subscriptions,user_id,int,NO,UNI,,,,,,10.0,0.0,"The user_id column in the subscriptions table is a required integer field that uniquely identifies the user associated with each subscription record. When writing SQL queries, this column can be used to join with user-related tables or to filter/group subscription data by specific users, ensuring a one-to-one relationship between users and their subscriptions."
subscriptions,drop_instance_id,int,NO,MUL,,,,,,10.0,0.0,"The drop_instance_id column in the subscriptions table is a required integer field that links each subscription to a specific drop instance, serving as a foreign key (indicated by the MUL key type). When writing queries, this column can be used to join with the drop instances table or to filter subscriptions based on their associated drop instance, making it essential for tracking which drop instance each subscription belongs to."
subscriptions,basket_id,int,NO,,,,,,,10.0,0.0,"The basket_id column in the subscriptions table is a required integer field that links subscription records to their corresponding shopping basket or order. When writing SQL queries, this column can be used to join or filter subscription records based on their associated basket, helping track the original purchase context of each subscription."
subscriptions,created,datetime,NO,,,,,,,,,"The 'created' column in the subscriptions table stores the timestamp indicating when each subscription record was initially created, using the datetime format. This non-nullable field is essential for tracking the chronological history of subscriptions and can be used in SQL queries for filtering, sorting, or analyzing subscription patterns over time."
subscriptions,active,tinyint,YES,MUL,,0,,,,3.0,0.0,"The 'active' column in the subscriptions table is a boolean flag (stored as tinyint) that indicates whether a subscription is currently active (1) or inactive (0). This column can be used in WHERE clauses to filter for active or inactive subscriptions, and its MUL key type suggests it's commonly used for indexing and joining with related tables."
subscriptions,start_date,date,YES,,,,,,,,,"The start_date column in the subscriptions table stores the date when a subscription begins, using a standard date format. This column can be used in SQL queries to filter or analyze subscriptions based on their commencement date, such as finding active subscriptions within a specific time period or calculating subscription durations."
subscriptions,type,int,NO,MUL,,1,,,,10.0,0.0,"The 'type' column in the subscriptions table is a required integer field that categorizes different subscription types or plans within the service. As indicated by the MUL key type, this column is indexed to optimize queries that filter or join based on subscription types, making it efficient to retrieve or group subscription records by their type."
subscriptions,state,int,NO,,,0,,,,10.0,0.0,"The 'state' column in the subscriptions table is a required integer field that represents the current status of a subscription. When writing SQL queries, this column can be used to filter or group subscriptions based on their state values (e.g., WHERE state = 0 for a specific status), with the value 0 appearing to be a default or significant state in the system."
subscriptions,became_superlufavore_on,date,YES,,,,,,,,,"The became_superlufavore_on column in the subscriptions table stores the date when a user upgraded to a ""superlufavore"" status, which appears to be a premium subscription tier. When querying this column, you can use date comparisons to find subscribers who upgraded on specific dates or within date ranges, and NULL values indicate users who have never been superlufavores."
subscriptions,signup_variation,tinyint,YES,,,,,,,3.0,0.0,"The signup_variation column in the subscriptions table is a tinyint field that indicates different variations or types of signup processes used when the subscription was created. When querying, this column can be used to segment or filter subscriptions based on their signup method, with NULL values indicating either an unspecified or default signup process."
subscriptions,subscriptions_order_prepopulation_method,"enum('Based on purchase history','Based on basket builder')",NO,MUL,,Based on basket builder,,,25.0,,,"The subscriptions_order_prepopulation_method column in the subscriptions table specifies how orders are automatically populated for a subscription, using an enumerated type that can be either 'Based on purchase history' or 'Based on basket builder'. When querying this column, use exact string matching with these two possible values, and note that it's a required field (non-nullable) that's part of a multi-column index (MUL), making it efficient for filtering and joining operations."
subscriptions_audit_per_day,subscriptions_audit_per_day_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The subscriptions_audit_per_day_id is the primary key column that uniquely identifies each daily audit record in the subscriptions_audit_per_day table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific audit entries, as it provides a guaranteed unique reference for each daily snapshot of subscription metrics."
subscriptions_audit_per_day,subscriptions_audit_per_day_date,date,YES,MUL,,,,,,,,"The subscriptions_audit_per_day_date column represents the specific date for which subscription audit metrics were recorded, serving as a temporal reference point in the subscriptions_audit_per_day table. When querying this table, you can use this column to filter or group subscription audit data by date, making it particularly useful for time-based analysis and trend reporting (e.g., SELECT * FROM subscriptions_audit_per_day WHERE subscriptions_audit_per_day_date BETWEEN '2023-01-01' AND '2023-12-31')."
subscriptions_audit_per_day,subscriptions_audit_per_day_subscription_id,int,YES,MUL,,,,,,10.0,0.0,"The subscriptions_audit_per_day_subscription_id column is a foreign key reference to the subscription ID being audited, allowing queries to link daily audit records with specific subscriptions. This indexed integer column can be used in JOIN operations to connect audit data with the main subscriptions table, or in WHERE clauses to filter audit records for particular subscriptions, with NULL values permitted for cases where a subscription reference might not be applicable."
subscriptions_audit_per_day,subscriptions_audit_per_day_active,int,YES,,,,,,,10.0,0.0,"The subscriptions_audit_per_day_active column stores the total count of active subscriptions for a given day, represented as an integer value. This metric can be used in SQL queries to analyze subscription activity trends over time, such as calculating day-over-day changes in active subscriptions or identifying periods of high/low subscription activity."
subscriptions_audit_per_day,subscriptions_audit_per_day_state,int,YES,,,,,,,10.0,0.0,"The subscriptions_audit_per_day_state column is an integer field that represents the state or status of subscription metrics for a given day in the audit tracking system. When writing SQL queries, this column can be used to filter or group daily subscription snapshots based on specific state values, helping to analyze subscription patterns and transitions across different states over time."
subscriptions_changes,subscriptions_change_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The subscriptions_change_id column serves as the primary key in the subscriptions_changes table, uniquely identifying each recorded change or update made to subscription records. When writing SQL queries, use this column to specifically reference or join individual change records, particularly when you need to track or analyze specific modification events in the subscription history."
subscriptions_changes,subscription_id,int,NO,,,,,,,10.0,0.0,The subscription_id column in the subscriptions_changes table is a required integer field that identifies which subscription a particular change or update relates to. This column is essential for tracking the history of modifications made to specific subscriptions and can be used to join with other subscription-related tables to provide a complete view of a subscription's change history.
subscriptions_changes,old_type,int,NO,,,,,,,10.0,0.0,"The `old_type` column in the subscriptions_changes table stores the previous subscription type as an integer value before a change was made, making it essential for tracking how subscription plans have evolved over time. This non-nullable field is commonly used in comparison queries to analyze subscription type transitions and can be joined with a subscription types lookup table to get the descriptive names of the previous plan types."
subscriptions_changes,new_type,int,NO,,,,,,,10.0,0.0,"The ""new_type"" column in the subscriptions_changes table stores the updated subscription plan type as an integer value after a change occurs. This required field is essential for tracking how a subscription's plan type was modified during a change event, making it useful in queries that analyze subscription plan transitions or compare previous and new plan types."
subscriptions_changes,timestamp,datetime,NO,,,,,,,,,"The `timestamp` column in the subscriptions_changes table records the exact date and time when each subscription-related change occurred, serving as a temporal marker for the audit trail. This non-nullable datetime field is essential for chronologically ordering subscription changes and can be used in SQL queries to filter or analyze subscription modifications within specific time periods."
subscriptions_changes,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the subscriptions_changes table is a required integer field that identifies which user the subscription change record belongs to. This column is commonly used to join with user-related tables and filter subscription change history for specific users, making it essential for tracking and analyzing subscription modifications at the individual user level."
subscriptions_logs,subscriptions_logs_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The subscriptions_logs_id column serves as the primary key for the subscriptions_logs table, uniquely identifying each subscription-related event or change record. This non-nullable integer field is essential for referencing specific log entries and should be used in WHERE clauses or JOIN conditions when querying historical subscription activities."
subscriptions_logs,subscriptions_logs_user_id,int,YES,MUL,,,,,,10.0,0.0,"The subscriptions_logs_user_id column in the subscriptions_logs table is an indexed integer field that identifies the user associated with each subscription event or change. This column can be used to filter or join subscription log entries by user, making it useful for queries that need to retrieve subscription history for specific users or analyze user-related subscription patterns."
subscriptions_logs,subscriptions_logs_subscription_id,int,YES,MUL,,,,,,10.0,0.0,"The subscriptions_logs_subscription_id column is a foreign key that references the specific subscription being tracked in the audit log. This integer field helps link each log entry to its corresponding subscription, enabling queries to filter or join subscription-related events and track the history of changes for individual subscriptions."
subscriptions_logs,subscriptions_logs_type,tinyint,YES,,,,,,,3.0,0.0,"The subscriptions_logs_type column in the subscriptions_logs table is a tinyint field that categorizes different types of subscription-related events or changes being logged. When querying this column, use numeric values to filter or group subscription log entries by their event type (e.g., WHERE subscriptions_logs_type = 1 for a specific type of subscription event), helping to analyze or audit specific categories of subscription activities."
subscriptions_logs,subscriptions_logs_active,int,YES,,,,,,,10.0,0.0,"The subscriptions_logs_active column is a binary indicator (stored as an integer) that denotes whether a subscription was active (1) or inactive (0) at the time the log entry was created. When querying historical subscription states, this column can be used to filter or analyze the active status of subscriptions at different points in time within the audit trail."
subscriptions_logs,subscriptions_logs_created_at,datetime,NO,MUL,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The subscriptions_logs_created_at column stores the exact timestamp when each subscription log entry was created, automatically populated with CURRENT_TIMESTAMP. This datetime field is indexed (MUL) and required (not nullable), making it efficient for querying historical subscription events and filtering logs by time periods."
subscriptions_logs,subscriptions_logs_created_by,int,YES,,,,,,,10.0,0.0,"The subscriptions_logs_created_by column stores the user ID (as an integer) of the person or system that created each subscription log entry. This column is useful for tracking who initiated or recorded specific subscription changes or events, and can be used in JOIN operations with a users table to get detailed information about the log creator, or in WHERE clauses to filter logs by specific users."
subscriptions_logs,subscriptions_logs_campaign_referral,varchar(255),YES,,,,,,255.0,,,"The subscriptions_logs_campaign_referral column stores the campaign or referral source identifier (up to 255 characters) that led to the subscription event being logged. This column helps track the marketing campaign, promotional code, or referral channel associated with subscription activities, enabling analysis of which acquisition channels drive subscription changes and events."
subscriptions_logs,subscriptions_logs_utm_source,varchar(255),YES,,,,,,255.0,,,"The subscriptions_logs_utm_source column stores the UTM source parameter that indicates where the subscription traffic originated from (e.g., 'google', 'facebook', 'email_campaign'). When writing queries, this column can be used to analyze subscription patterns and track the effectiveness of different marketing channels, though be aware that it may contain NULL values if the source information wasn't captured."
subscriptions_logs,subscriptions_logs_utm_medium,varchar(255),YES,,,,,,255.0,,,"The subscriptions_logs_utm_medium column stores the marketing medium (such as email, social, cpc, etc.) that was associated with the subscription event being logged. This tracking parameter helps identify which marketing channel or method led to the subscription activity, making it useful in SQL queries that analyze marketing attribution or channel effectiveness for subscription-related events."
subscriptions_logs,subscriptions_logs_utm_campaign,varchar(255),YES,,,,,,255.0,,,"The subscriptions_logs_utm_campaign column stores the UTM campaign parameter associated with subscription-related events and changes, capturing marketing campaign attribution data. This varchar field helps track which marketing campaigns or promotional efforts led to specific subscription activities, making it valuable for analyzing the effectiveness of different marketing initiatives in driving subscription-related actions."
subscriptions_logs,subscriptions_logs_utm_term,varchar(255),YES,,,,,,255.0,,,"The subscriptions_logs_utm_term column stores UTM term parameters associated with subscription-related events, capturing keyword-level tracking data for marketing campaigns that led to subscription activities. This varchar field can be used in SQL queries to analyze which specific keywords or terms drove subscription actions, making it valuable for marketing attribution analysis and campaign performance tracking."
subscriptions_logs,subscriptions_logs_utm_content,varchar(255),YES,,,,,,255.0,,,"The subscriptions_logs_utm_content column stores UTM content tracking parameters associated with subscription-related events and changes, capturing marketing campaign content identifiers that led to the logged subscription activity. This varchar field can be used in SQL queries to analyze which specific marketing content or messages influenced subscription actions, making it valuable for marketing attribution analysis and campaign effectiveness tracking."
subscriptions_logs,subscriptions_logs_email_schedule_id,int,YES,MUL,,,,,,10.0,0.0,"The subscriptions_logs_email_schedule_id column in the subscriptions_logs table is a foreign key that references email schedule configurations associated with subscription events. This column can be used to join with an email scheduling table to retrieve details about automated communications that were triggered during subscription changes or updates, and being nullable means not all subscription log entries necessarily have an associated email schedule."
subsubcategory_availability_stats,subsubcategory_availability_stats_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The subsubcategory_availability_stats_id is the primary key column that uniquely identifies each availability statistics record in the subsubcategory_availability_stats table. When writing SQL queries, use this column for joining to related tables or filtering specific availability records, and note that it cannot contain NULL values."
subsubcategory_availability_stats,delivery_date,date,NO,MUL,,,,,,,,"The delivery_date column in the subsubcategory_availability_stats table represents the specific date for which availability statistics are recorded, and it's indexed (MUL) to optimize queries filtering or joining on this date. This non-nullable date field is commonly used in WHERE clauses to analyze availability trends over time or to join with other date-based tables for comprehensive reporting."
subsubcategory_availability_stats,subsubcategory_id,int,NO,MUL,,,,,,10.0,0.0,"The subsubcategory_id column serves as a foreign key in the subsubcategory_availability_stats table, linking each availability record to a specific subsubcategory classification. When writing SQL queries, this column can be used to join with other tables containing subsubcategory information or to filter/group availability statistics for specific subsubcategories, with the MUL index type supporting efficient query performance on this column."
subsubcategory_availability_stats,created_at,datetime,NO,,,,,,,,,"The created_at column in the subsubcategory_availability_stats table records the exact date and time when each availability statistics record was created, using a datetime format. This non-nullable timestamp field is useful for temporal analysis and can be used in SQL queries to filter or group availability data by specific time periods, such as filtering records created on a particular date (WHERE created_at = '2023-01-01') or analyzing trends over time intervals (GROUP BY DATE(created_at))."
subsubcategory_availability_stats,nb_products_available_lufa,int,NO,,,0,,,,10.0,0.0,"This column ""nb_products_available_lufa"" stores the integer count of products that are currently available through Lufa, serving as a key availability metric. It's a required field (non-nullable) that tracks inventory levels or product availability specifically for the Lufa context within each subsubcategory."
subsubcategory_availability_stats,nb_products_not_available_lufa,int,NO,,,0,,,,10.0,0.0,"This column ""nb_products_not_available_lufa"" stores the count of products that are currently unavailable specifically for Lufa (likely a vendor or platform) within a given subsubcategory. When writing SQL queries, this integer field can be used to filter or aggregate unavailability metrics, with values of 0 indicating full availability and higher values showing the number of products that are out of stock or unavailable."
subsubcategory_availability_stats,nb_products_available_3rdparty,int,NO,,,0,,,,10.0,0.0,"This column ""nb_products_available_3rdparty"" represents the count of products that are currently available through third-party sellers or vendors for a specific subsubcategory. When writing SQL queries, use this integer column to analyze or filter third-party product availability, with values being non-null and defaulting to 0 when no third-party products are available."
subsubcategory_availability_stats,nb_products_not_available_3rdparty,int,NO,,,0,,,,10.0,0.0,"This column ""nb_products_not_available_3rdparty"" represents the count of products that are currently unavailable from third-party sellers within a specific subsubcategory. As a non-nullable integer field with a default value of 0, it can be used in SQL queries to analyze third-party seller stock outages or to compare availability metrics between direct and third-party inventory."
summer_contest_free_participant,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the summer_contest_free_participant table, uniquely identifying each person who registered for free entry into summer contests. When writing queries, use this column for precise participant lookups, joining with related tables, or filtering specific free registrants, as it's guaranteed to be non-null and unique for each record."
summer_contest_free_participant,first_name,varchar(255),NO,,,,,,255.0,,,"The first_name column in the summer_contest_free_participant table stores the given name of each participant who registered for free entry into summer contests, with a maximum length of 255 characters. This required field (non-nullable) should be used in SQL queries when filtering, sorting, or displaying participant first names, such as ""SELECT first_name FROM summer_contest_free_participant WHERE first_name LIKE 'A%'"" to find participants whose first names start with 'A'."
summer_contest_free_participant,last_name,varchar(255),NO,,,,,,255.0,,,"The last_name column in the summer_contest_free_participant table stores the family name of each participant who registered for free entry into summer contests, with a maximum length of 255 characters. This required field (non-nullable) should be included in WHERE clauses or JOIN conditions when querying participant information, and it's commonly used in combination with first_name for full participant identification."
summer_contest_free_participant,email,varchar(255),NO,,,,,,255.0,,,"The email column in the summer_contest_free_participant table stores the contact email address for each participant who registered for free entry into summer contests, with a maximum length of 255 characters. This required field (non-nullable) serves as a primary means of communication with participants and can be used in SQL queries to identify specific registrants or group related entries."
summer_contest_free_participant,phone,varchar(255),NO,,,,,,255.0,,,"The 'phone' column in the summer_contest_free_participant table stores the contact phone number for each participant who registered for free entry, formatted as a text string up to 255 characters. This required field (non-nullable) is essential for organizers to reach participants regarding contest information, and can be used in SQL queries to filter or search for specific participants based on their phone numbers."
summer_contest_free_participant,other_data,text,NO,,,,,,65535.0,,,"The ""other_data"" column in the summer_contest_free_participant table stores additional participant information as free-form text, which could include notes, special requirements, or miscellaneous details about free contest registrants. When querying this column, keep in mind that it contains required (non-nullable) text data that complements the core participant information, and it should be included in INSERT statements or handled with appropriate text-based operations in SELECT queries."
summer_contest_free_participant,entry_date,datetime,NO,,,,,,,,,The entry_date column in the summer_contest_free_participant table records the exact date and time when a participant registered for free entry into a summer contest. This required (non-nullable) datetime field is essential for tracking registration timing and can be used in SQL queries to analyze registration patterns or filter participants based on when they signed up.
summer_contest_free_participant,created_at,datetime,NO,,,,,,,,,"The created_at column in the summer_contest_free_participant table records the exact date and time when a participant's free registration was initially created in the system. This non-nullable datetime field is useful for tracking registration patterns and can be used in SQL queries to filter or sort free contest registrations by their creation timestamp, such as finding all registrations created within a specific date range or analyzing daily registration volumes."
summer_contest_opt_in,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the summer_contest_opt_in table, uniquely identifying each contest opt-in record with a non-nullable integer value. When writing queries, this column can be used for precise record selection or joining with related tables to track specific user participation entries."
summer_contest_opt_in,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the summer_contest_opt_in table is a non-nullable integer field that serves as a foreign key reference to identify individual users who have opted into summer contests. When writing queries, this column can be used to join with other user-related tables or to filter/group contest participants, and since it's indexed (MUL), it's optimized for such operations."
summer_contest_opt_in,shown,tinyint(1),NO,,,,,,,3.0,0.0,"The ""shown"" column is a boolean flag (stored as tinyint(1)) that indicates whether a promotional message or contest invitation has been displayed to the user. When querying this table, use this column with values 0 or 1 to filter users based on whether they've been shown the contest opt-in prompt (e.g., WHERE shown = 1 for users who have seen it)."
summer_contest_opt_in,opted_in,tinyint(1),NO,,,,,,,3.0,0.0,"The `opted_in` column in the `summer_contest_opt_in` table is a boolean flag (stored as tinyint(1)) that indicates whether a user has agreed to participate in summer contests or promotional events, where 1 typically represents opted-in and 0 represents not opted-in. When writing SQL queries, this column can be used in WHERE clauses to filter for users who have either opted in or out of summer contests (e.g., `WHERE opted_in = 1` for participants)."
summer_contest_opt_in,first_seen_at,datetime,NO,,,,,,,,,"The first_seen_at column in the summer_contest_opt_in table records the exact date and time when a user initially opted in to participate in summer contests or promotional events. This non-nullable datetime field can be used to analyze opt-in patterns over time or filter for users who joined during specific time periods, making it valuable for temporal analysis of contest participation trends."
summer_contest_opt_in,opted_in_at,datetime,NO,,,,,,,,,"The `opted_in_at` column in the `summer_contest_opt_in` table stores the exact date and time when a user chose to participate in summer contests or promotional events. When querying this datetime field, you can use it to filter participants based on when they opted in (e.g., finding users who opted in before a certain date) or to sort participants by their opt-in timing."
summer_contest_winners,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the summer_contest_winners table, uniquely identifying each contest winner record with a non-nullable integer value. When querying this table, you can use this column for precise record selection (WHERE id = X) or for joining with any related tables that reference summer contest winners."
summer_contest_winners,type,"enum('free_participant','opt_in')",NO,,,,,,16.0,,,"The 'type' column in the summer_contest_winners table is a required (non-nullable) enumerated field that categorizes winners into two distinct groups: 'free_participant' or 'opt_in'. When querying this column, use exact string matches with these two enum values to filter or group contest winners based on their participation type."
summer_contest_winners,type_id,int,NO,MUL,,,,,,10.0,0.0,"The `type_id` column in the `summer_contest_winners` table is a required integer field that categorizes different types of contest entries or categories, and its MUL key type indicates it's indexed for optimized searching and potential joining with other tables. When querying this table, you can use `type_id` to filter or group contest winners by their category type, such as `WHERE type_id = 1` or `GROUP BY type_id`."
summer_contest_winners,prize,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The 'prize' column in the summer_contest_winners table stores the monetary value of prizes awarded to contest winners, with support for two decimal places and a maximum of 10 total digits (e.g., 12345678.90). Since this column is non-nullable, every contest winner record must have a prize amount specified, making it suitable for calculations and aggregations in queries where you need to analyze prize distributions or total prize money awarded."
summer_contest_winners,transaction_id,int,YES,,,,,,,10.0,0.0,"The transaction_id column in the summer_contest_winners table stores integer values that represent individual transaction records for contest winners. This optional field (as it's nullable) can be used to track or reference specific financial or administrative transactions associated with prize distribution, making it useful for filtering or joining queries when you need to analyze contest-related transactions."
summer_contest_winners,winning_date,date,NO,,,,,,,,,"The winning_date column in the summer_contest_winners table stores the specific date when a participant won their contest, formatted as a standard date value (YYYY-MM-DD). This required field can be used in SQL queries for date-based filtering, sorting, or grouping of contest winners, making it particularly useful for analyzing winning patterns across different time periods or seasons."
summer_contest_winners,created_at,datetime,NO,,,,,,,,,"The created_at column in the summer_contest_winners table stores the timestamp when each contest winner record was initially created in the system, using a datetime format. This non-nullable field is useful for temporal queries and can be used to filter or sort winners by when they were added to the database, such as finding recent winners or analyzing contest winner patterns over time."
supervores_capacity,supervores_capacity_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supervores_capacity_id column serves as the primary key identifier for each unique capacity measurement record in the supervores_capacity table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific capacity measurements for supervores storage units."
supervores_capacity,delivery_day,"enum('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday')",NO,,,,,,9.0,,,"The delivery_day column in the supervores_capacity table specifies the designated day of the week when storage operations or deliveries are scheduled for each supervore unit. This required field accepts only standard weekday names (Sunday through Saturday) as valid values, making it useful for queries that need to analyze or filter capacity metrics by specific days of the week."
supervores_capacity,limit,int,YES,,,,,,,10.0,0.0,"The 'limit' column in the supervores_capacity table represents the maximum storage capacity or threshold value for a supervore unit, stored as an integer value. This column can be used in SQL queries to filter, compare, or analyze storage limitations of supervores, and since it's nullable, some supervores may not have a defined limit value."
supervores_incentive_log,supervores_incentive_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supervores_incentive_log_id is the primary key column that uniquely identifies each incentive-related activity or reward entry in the supervores_incentive_log table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific incentive log entries (e.g., WHERE supervores_incentive_log_id = X)."
supervores_incentive_log,iso_week,tinyint,NO,MUL,,,,,,3.0,0.0,"The `iso_week` column in the supervores_incentive_log table stores the ISO week number (1-53) when an incentive activity or reward was recorded for a supervisor. This column is indexed (MUL) to optimize queries filtering or grouping by week, and being non-nullable ensures every incentive record is associated with a specific week of the year."
supervores_incentive_log,year,int,YES,,,,,,,10.0,0.0,"The 'year' column in the supervores_incentive_log table stores the calendar year (as an integer) when an incentive or reward was awarded to a supervisor/manager. This column can be used for filtering and grouping incentive records by year, making it useful for annual reporting and trend analysis of supervisor rewards."
supervores_incentive_log,user_id,int,NO,MUL,,,,,,10.0,0.0,"The user_id column in the supervores_incentive_log table is a required integer field that serves as a foreign key to identify the specific supervisor or manager who received an incentive or reward. When querying this table, you can join this column with the corresponding user table to access additional supervisor details or group/filter incentive records by supervisor."
supervores_incentive_log,ordered_this_week,tinyint,NO,,,,,,,3.0,0.0,"The `ordered_this_week` column in the supervores_incentive_log table is a boolean-like indicator (stored as a tinyint) that tracks whether a supervisor placed orders during the current week. When querying this column, use values 0 and 1 for filtering (e.g., `WHERE ordered_this_week = 1` to find supervisors who placed orders), and it can be useful for weekly performance tracking or incentive calculations."
supervores_incentive_log,nb_weeks_considered,tinyint,NO,,,,,,,3.0,0.0,"The nb_weeks_considered column represents the number of weeks that were evaluated when determining the incentive or reward for a supervisor. This required numeric field, stored as a tinyint, helps track the time period over which performance or metrics were measured before awarding the incentive, making it useful in queries that need to analyze reward periods or aggregate incentives based on different evaluation durations."
supervores_incentive_log,nb_weeks_with_purchase,tinyint,NO,,,,,,,3.0,0.0,"The nb_weeks_with_purchase column represents the number of weeks during which a supervisor/manager had qualifying purchases or transactions that contributed to their incentive rewards. This non-nullable tinyint column is used to track purchase activity duration, likely serving as a metric to determine incentive eligibility or reward tiers."
supervores_incentive_log,take_rate,tinyint,NO,,,,,,,3.0,0.0,"The `take_rate` column in the supervores_incentive_log table stores the percentage or rate at which supervisors receive their incentive rewards, represented as a small integer value (tinyint). When querying this column, you can use it to filter or analyze the different commission or incentive rates applied to supervisor rewards, with the value likely representing a percentage between 0 and 100."
supervores_incentive_log,pct,tinyint,NO,,,,,,,3.0,0.0,"The 'pct' column in the supervores_incentive_log table stores percentage values (0-100) related to incentive calculations or achievement levels for supervisors. This non-nullable tinyint field can be used in SQL queries to filter, aggregate, or analyze the percentage-based metrics that determine or influence supervisor rewards and incentives."
supervores_incentive_log,amount_spent,float,NO,,,,,,,12.0,,"The amount_spent column in supervores_incentive_log represents the monetary value or cost associated with each incentive or reward given to supervisors/managers. This required (non-nullable) floating-point value can be used in SQL queries to calculate total incentive spending, analyze reward distributions, or track incentive budgets across different time periods or supervisor groups."
supervores_incentive_log,current_earnings,float,NO,,,,,,,12.0,,"The current_earnings column stores the numerical value (as a floating-point number) representing the supervisor's earnings at the time the incentive was logged. This required field can be used in SQL queries to analyze earnings patterns, calculate total incentive amounts, or compare earnings across different supervisors or time periods."
supervores_incentive_log,projected_earnings,float,NO,,,,,,,12.0,,"The projected_earnings column stores the expected or forecasted monetary value (as a floating-point number) of incentives or rewards that a supervisor/manager is anticipated to receive. This required field helps track potential future earnings from incentive programs, enabling organizations to budget and plan for supervisor compensation."
supervores_incentive_log,created_at,timestamp,NO,,,0000-00-00 00:00:00,,,,,,"The created_at column in the supervores_incentive_log table is a non-nullable timestamp field that records the exact date and time when each incentive or reward entry was created in the system. This column is essential for temporal analysis of incentive distributions and can be used in SQL queries to filter, sort, or group incentive records by their creation time, with the timestamp format following the pattern 'YYYY-MM-DD HH:MM:SS'."
supervores_incentive_log,updated_at,timestamp,NO,,,0000-00-00 00:00:00,,,,,,"The updated_at column in the supervores_incentive_log table stores the timestamp of when each incentive record was last modified, using a standard datetime format (YYYY-MM-DD HH:MM:SS). When writing SQL queries, this column can be used to track changes in incentive records over time or filter records based on when they were last updated, with the non-nullable constraint ensuring that every record has a valid timestamp value."
supervores_incentive_log,active,tinyint,YES,,,1,,,,3.0,0.0,"The 'active' column in supervores_incentive_log is a boolean flag (stored as tinyint) that indicates whether an incentive record is currently valid or in effect. When querying for current/valid incentive records, filter for active = 1, while active = 0 typically represents historical or deactivated incentive entries."
supervores_incentive_log,subscription_type,tinyint,YES,,,,,,,3.0,0.0,"The subscription_type column in supervores_incentive_log is a tinyint field that categorizes the type or level of subscription associated with the incentive award. When querying this column, use numeric values to filter or group incentive records by different subscription tiers or plans that supervisors may be enrolled in."
supervores_incentive_log,subscription_status,tinyint,YES,,,,,,,3.0,0.0,"The subscription_status column in supervores_incentive_log is a tinyint field that indicates the current subscription state of the supervisor's incentive program or reward status. When writing queries, this column can be used to filter or group incentive records based on their subscription state, where different numeric values likely represent statuses like active, inactive, pending, or cancelled."
supervores_incentive_log,weeks_allowed_to_skip,tinyint,YES,,,,,,,3.0,0.0,"The `weeks_allowed_to_skip` column in the supervores_incentive_log table represents the number of weeks a supervisor is permitted to skip or defer their incentive-related activities without penalty. When querying this column, you can use it to analyze flexibility in the incentive program or filter for records based on the grace period allowed, with values typically ranging from 0 to a small positive integer due to the tinyint data type."
supplier_additional_warehouses,supplier_additional_warehouse_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_additional_warehouse_id column serves as the primary key for the supplier_additional_warehouses table, uniquely identifying each additional warehouse location associated with suppliers. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific warehouse records, as it provides a reliable, non-null integer reference for each warehouse entry."
supplier_additional_warehouses,supplier_id,int,NO,,,,,,,10.0,0.0,The supplier_id column in the supplier_additional_warehouses table is a required integer field that identifies which supplier owns or operates each additional warehouse location. This column is commonly used to join with the main suppliers table and is essential for queries that need to retrieve or analyze all warehouse locations associated with a specific supplier.
supplier_additional_warehouses,warehouse_address,varchar(500),YES,,,,,,500.0,,,"The warehouse_address column in the supplier_additional_warehouses table stores the complete physical address of a supplier's additional warehouse location as a text string up to 500 characters long. When querying this column, you can use standard string operations (like LIKE, SUBSTRING, etc.) to search or filter warehouse addresses, and since it's nullable, remember to handle potential NULL values appropriately in your queries."
supplier_additional_warehouses,warehouse_state_id,int,YES,,,,,,,10.0,0.0,"The warehouse_state_id column in the supplier_additional_warehouses table is an integer field that references the state or province where each additional supplier warehouse is located. This column can be used in JOIN operations with a state/province lookup table to get the full state name, or in WHERE clauses to filter warehouses by specific states, and its nullable property allows for cases where the state information might not be applicable or available."
supplier_additional_warehouses,warehouse_zip_code,varchar(15),YES,,,,,,15.0,,,"The warehouse_zip_code column in the supplier_additional_warehouses table stores postal codes for suppliers' secondary warehouse locations, accepting up to 15 characters to accommodate various international zip code formats. When querying this column, keep in mind that it can contain NULL values and is useful for filtering or grouping warehouse locations by geographic regions based on postal codes."
supplier_additional_warehouses,warehouse_city_name,varchar(255),YES,,,,,,255.0,,,"The warehouse_city_name column in the supplier_additional_warehouses table stores the city name where each additional supplier warehouse is located, accepting text values up to 255 characters. When writing queries, this column can be used to filter or group supplier warehouses by their city location, though be aware that values may be NULL since this field is optional."
supplier_additional_warehouses,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the supplier_additional_warehouses table automatically records the timestamp when a new warehouse record is added to the system, using CURRENT_TIMESTAMP as the default value. This non-nullable timestamp field is useful for tracking when warehouse locations were first registered in the system and can be used in SQL queries for auditing, filtering records by creation date, or analyzing warehouse location growth over time."
supplier_certifications,supplier_certification_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_certification_id column serves as the primary key in the supplier_certifications table, uniquely identifying each certification type or credential that suppliers can hold. This integer field is non-nullable and is typically referenced by the supplier_certifications_rl table to create relationships between suppliers and their specific certifications."
supplier_certifications,slug,varchar(255),NO,,,,,,255.0,,,"The `slug` column in the supplier_certifications table contains URL-friendly, unique text identifiers for each certification type (e.g., ""iso-9001"", ""haccp-certified""). This column should be used when constructing clean URLs or creating human-readable unique identifiers in queries, and since it's non-nullable, every certification record must have a slug value."
supplier_certifications,name,varchar(255),NO,,,,,,255.0,,,"The 'name' column in the supplier_certifications table stores the official title or designation of each certification type (e.g., ""ISO 9001"", ""Fair Trade Certified"") as a text string up to 255 characters. This required field serves as a primary identifier for different certifications and should be referenced when querying for specific certification types or joining with the supplier_certifications_rl table to find which suppliers hold particular certifications."
supplier_certifications_rl,supplier_certifications_rl_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_certifications_rl_id column serves as the primary key in the supplier_certifications_rl table, uniquely identifying each supplier-certification relationship record. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific supplier-certification relationships."
supplier_certifications_rl,supplier_certification_id,int,NO,MUL,,,supplier_certifications,supplier_certification_id,,10.0,0.0,"The supplier_certification_id column in the supplier_certifications_rl table is a foreign key that references the primary certification details for a supplier. When writing SQL queries, use this column to join with the main certifications table to access specific certification information, or to filter/group suppliers based on their certification types."
supplier_certifications_rl,supplier_id,int,NO,MUL,,,suppliers,supplier_id,,10.0,0.0,"The supplier_id column in the supplier_certifications_rl table is a required foreign key that references the unique identifier of a supplier. When writing SQL queries, use this column to join with the main suppliers table or to filter/group certification records for specific suppliers."
supplier_confirmation_and_shipping_dates,supplier_confirmation_and_shipping_dates_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_confirmation_and_shipping_dates_id column serves as the primary key identifier for each unique supplier confirmation and shipping date record in the supplier_confirmation_and_shipping_dates table. When writing SQL queries, use this column for precise record identification, joining to related tables, or filtering specific confirmation records, as it provides a guaranteed unique reference for each entry in the table."
supplier_confirmation_and_shipping_dates,supplier_id,int,NO,MUL,,,,,,10.0,0.0,The supplier_id column is a required integer field that serves as a foreign key to identify which supplier is associated with each confirmation and shipping record. This column enables queries to join with the suppliers table to access supplier details and is commonly used to filter or group shipping records by specific suppliers.
supplier_confirmation_and_shipping_dates,type,int,NO,,,,,,,10.0,0.0,"The ""type"" column is a required integer field that categorizes the type of confirmation or shipping event being recorded in the supplier_confirmation_and_shipping_dates table. When writing SQL queries, this column can be used to filter or group different kinds of supplier interactions (e.g., initial confirmations, shipping notifications, or delivery updates), though you'll need to reference the application's documentation for the specific integer values and their meanings."
supplier_confirmation_and_shipping_dates,date,date,NO,,,,,,,,,"The 'date' column in the supplier_confirmation_and_shipping_dates table stores the calendar date associated with supplier order confirmations or shipping events. This required (non-nullable) date field can be used in SQL queries to filter, sort, or analyze supplier activities by specific dates or date ranges, making it useful for tracking supplier performance and delivery timelines."
supplier_confirmation_and_shipping_dates,supplier_confirmation_and_shipping_date_pattern_id,int,YES,,,,,,,10.0,0.0,"This column serves as a reference identifier for different patterns or templates of supplier confirmation and shipping date combinations. It can be used to categorize or group similar confirmation and shipping date behaviors, allowing queries to analyze patterns in supplier response and delivery timing."
supplier_confirmation_and_shipping_dates_patterns,supplier_confirmation_and_shipping_date_pattern_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_confirmation_and_shipping_date_pattern_id is the primary key column that uniquely identifies each record in the supplier_confirmation_and_shipping_dates_patterns table. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference specific supplier confirmation and shipping date patterns, typically in WHERE clauses or JOIN conditions."
supplier_confirmation_and_shipping_dates_patterns,supplier_id,int,NO,MUL,,,suppliers,supplier_id,,10.0,0.0,The supplier_id column serves as a foreign key that links each record in the supplier_confirmation_and_shipping_dates_patterns table to a specific supplier in the suppliers table. This integer column is required (non-nullable) and is indexed (MUL) to optimize queries that analyze supplier performance patterns and trends in confirmation and shipping times.
supplier_confirmation_and_shipping_dates_patterns,type,tinyint,NO,,,,,,,3.0,0.0,"The 'type' column in the supplier_confirmation_and_shipping_dates_patterns table is a required tinyint field that categorizes different types of timing patterns or performance metrics being tracked for suppliers. When querying this table, use this column to filter or group supplier performance data by specific pattern types (e.g., WHERE type = 1 for confirmation patterns or type = 2 for shipping patterns)."
supplier_confirmation_and_shipping_dates_patterns,start_date,date,NO,,,,,,,,,"The start_date column represents the beginning date of a time period for which supplier performance metrics are being tracked, and it is a required field (non-nullable). When querying this table, use this column to define time ranges for analyzing supplier confirmation and shipping patterns, often in combination with an end_date to create specific analysis periods."
supplier_confirmation_and_shipping_dates_patterns,end_date,date,NO,,,,,,,,,"The end_date column represents the last date of the period for which supplier confirmation and shipping performance data was analyzed, forming a date range when paired with a corresponding start date. This non-nullable date field is essential for time-based analysis of supplier performance patterns and can be used in SQL queries to filter or group supplier performance data by specific time periods or to identify the most recent performance patterns."
supplier_confirmation_and_shipping_dates_patterns,interval,tinyint,NO,,,,,,,3.0,0.0,"The 'interval' column is a required numeric field that represents a time period or frequency unit used to analyze supplier performance patterns. When writing SQL queries, this column can be used to group or filter supplier confirmation and shipping date data into specific time segments, helping to identify trends and patterns in supplier behavior over different time intervals."
supplier_confirmation_and_shipping_dates_patterns,frequency,tinyint,NO,,,,,,,3.0,0.0,"The 'frequency' column is a required numeric field that indicates how often a particular pattern or trend occurs in supplier confirmation and shipping behavior, stored as a small integer value (0-255). This column helps quantify the regularity or repetition of specific timing patterns, making it useful in SQL queries that analyze supplier performance trends or identify common confirmation and shipping behaviors."
supplier_confirmation_and_shipping_dates_patterns,days,varchar(100),YES,,,,,,100.0,,,"The ""days"" column in the supplier_confirmation_and_shipping_dates_patterns table stores text-based information about time periods or day ranges related to supplier performance patterns, with a maximum length of 100 characters. This column can be used in SQL queries to analyze or filter supplier timing patterns, though its VARCHAR format suggests it may contain descriptive text rather than numerical values, so string comparison operators should be used when querying this field."
supplier_confirmation_and_shipping_dates_patterns,months,varchar(100),YES,,,,,,100.0,,,"The 'months' column in the supplier_confirmation_and_shipping_dates_patterns table stores a text representation of the time period (in months) for which supplier performance patterns are being tracked. When querying this column, it can be used to analyze supplier performance trends over specific monthly periods, such as 'January-March' or 'Q1 2023', helping to identify seasonal patterns or long-term trends in supplier behavior."
supplier_confirmation_and_shipping_dates_patterns,count,tinyint,YES,,,,,,,3.0,0.0,"The ""count"" column in the supplier_confirmation_and_shipping_dates_patterns table represents the frequency or number of occurrences of a specific timing pattern for a supplier. When querying this column, it can be used to analyze how often certain confirmation or shipping patterns occur for each supplier, helping to identify common behaviors or trends in supplier performance."
supplier_contacts,supplier_contact_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_contact_id is the primary key column in the supplier_contacts table, uniquely identifying each supplier contact record with an integer value. This column should be used in WHERE clauses when querying specific contact records or in JOIN conditions when linking to related tables that reference supplier contacts."
supplier_contacts,supplier_id,int,NO,MUL,,,suppliers,supplier_id,,10.0,0.0,"The supplier_id column in the supplier_contacts table is a required foreign key that references the primary key in the suppliers table, establishing which supplier each contact belongs to. This column is frequently used in JOIN operations to retrieve supplier details along with their contact information, and it's indexed (MUL) to optimize these join operations."
supplier_contacts,primary_phone,varchar(100),NO,,,,,,100.0,,,The primary_phone column in the supplier_contacts table stores the main telephone number for supplier representatives in a varchar format that accommodates various phone number formats and international codes. This required field is essential for maintaining reliable communication channels with supplier contacts and should be included in queries where direct contact information is needed.
supplier_contacts,cell_phone,varchar(100),NO,,,,,,100.0,,,The cell_phone column in the supplier_contacts table stores mobile phone numbers for supplier representatives in a varchar format with a maximum length of 100 characters. This required field (non-nullable) should be used in queries when you need to retrieve or filter contact information based on mobile phone numbers of supplier representatives.
supplier_contacts,email,varchar(500),YES,,,,,,500.0,,,"The email column in the supplier_contacts table stores the email addresses of supplier representatives and key personnel as variable-length strings up to 500 characters. Since this column is nullable, it's optional when inserting records, making it suitable for cases where email contact information may not be available or applicable for certain supplier representatives."
supplier_contacts,type,tinyint,NO,,,,,,,3.0,0.0,"The 'type' column in the supplier_contacts table is a required tinyint field that categorizes the different roles or classifications of supplier contacts (e.g., 1 for primary contact, 2 for billing contact, etc.). When querying this column, use numeric values to filter or group contacts by their designated type, which helps in organizing and identifying specific categories of supplier representatives."
supplier_contacts,same_as_main_contact,tinyint,NO,,,0,,,,3.0,0.0,"The `same_as_main_contact` column in the supplier_contacts table is a boolean flag (stored as tinyint) that indicates whether a contact record shares the same contact information as the supplier's primary contact. When writing queries, use this column with values 0 (false) or 1 (true) to filter or identify contacts that are duplicates of the main contact information."
supplier_contacts,name,varchar(500),NO,,,,,,500.0,,,The 'name' column in the supplier_contacts table stores the full name of supplier representatives or key personnel as a required text field with a maximum length of 500 characters. This column is essential for identifying individual contacts within a supplier organization and should be included in queries where you need to display or search for specific supplier representatives.
supplier_delivery_days,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The 'id' column serves as the primary key in the supplier_delivery_days table, uniquely identifying each delivery day record with an integer value. This auto-incrementing identifier is essential for referencing specific delivery day entries and maintaining data integrity within the supplier scheduling system."
supplier_delivery_days,supplier_id,int,NO,MUL,,,suppliers,supplier_id,,10.0,0.0,"The supplier_id column in the supplier_delivery_days table is a required integer field that serves as a foreign key reference to the suppliers table, establishing which supplier each delivery day record belongs to. This column is indexed (MUL) to optimize join operations and queries that filter by supplier, making it efficient to look up delivery schedules for specific suppliers."
supplier_delivery_days,day,tinyint,NO,,,,,,,3.0,0.0,"The 'day' column in the supplier_delivery_days table stores the day of the week (likely as a number 1-7) when a supplier can make deliveries, with non-null values required. When writing SQL queries, this column can be used to filter or group delivery schedules by specific days of the week, often in combination with the supplier_id to analyze or manage delivery patterns for individual suppliers."
supplier_documents,supplier_document_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_document_id column serves as the primary key in the supplier_documents table, uniquely identifying each document or file record associated with suppliers. When writing SQL queries, use this column for precise document lookups, joining with related tables, or filtering specific supplier documents (e.g., WHERE supplier_document_id = X)."
supplier_documents,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the supplier_documents table is a required integer field that identifies which supplier a document belongs to, serving as a link between documents and their corresponding supplier records. This column is essential for filtering and retrieving documents associated with specific suppliers in queries, such as ""SELECT * FROM supplier_documents WHERE supplier_id = 123""."
supplier_documents,type,int,NO,,,,,,,10.0,0.0,"The ""type"" column in the supplier_documents table is a required integer field that categorizes the kind of document being stored, such as contract (1), certification (2), or compliance document (3). This column is essential for filtering and organizing supplier documents by their purpose or classification in queries."
supplier_documents,name,varchar(255),NO,,,,,,255.0,,,"The ""name"" column in the supplier_documents table stores the filename or title of supplier-related documents, with a maximum length of 255 characters. This required field (non-nullable) should be used when searching for specific documents or when displaying document listings, and it typically contains descriptive names like ""Supplier_Contract_2023.pdf"" or ""ISO_Certification.pdf""."
supplier_documents,file_url,varchar(255),NO,,,,,,255.0,,,"The file_url column in the supplier_documents table stores the web-accessible URL or file path where each supplier document can be accessed, with a maximum length of 255 characters. This required field (non-nullable) is commonly used in WHERE clauses to locate specific documents or in SELECT statements when retrieving document locations for display or download purposes."
supplier_documents,folder,varchar(255),NO,,,,,,255.0,,,"The ""folder"" column in the supplier_documents table specifies the organizational directory path where supplier-related files are stored, using a varchar(255) format that cannot be null. This column helps organize and categorize different types of supplier documents (like contracts, certifications, etc.) into logical groupings, making it useful for filtering and organizing documents in queries based on their storage location."
supplier_documents,invoice_from,date,NO,,,0000-00-00,,,,,,"The invoice_from column in the supplier_documents table represents the start date of an invoice period or the date from which a supplier document becomes valid. This required date field helps track the temporal validity of supplier documents and can be used in SQL queries to filter or retrieve documents based on their effective start dates, such as finding all documents valid from a specific date onwards."
supplier_documents,invoice_to,date,NO,,,0000-00-00,,,,,,"The invoice_to column in the supplier_documents table represents the end date or expiration date of a supplier-related document, stored as a DATE type. This mandatory field (non-nullable) helps track when documents like contracts or certifications are valid until, with a default format of YYYY-MM-DD, and can be used in queries to identify expired or soon-to-expire documents."
supplier_documents,uploaded_at,timestamp,NO,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The uploaded_at column in the supplier_documents table records the exact date and time when a supplier document was uploaded to the system, automatically populated with CURRENT_TIMESTAMP when a new record is created. This timestamp field is mandatory (non-nullable) and can be useful for tracking document chronology, filtering documents by upload date, or auditing supplier documentation timelines."
supplier_documents,uploaded_by,int,NO,,,,,,,10.0,0.0,"The `uploaded_by` column in the supplier_documents table is a required integer field that stores the user ID of the person who uploaded each supplier document. When writing queries, this column can be used to track document ownership and filter documents by uploader, typically by joining with a users table to get the uploader's details."
supplier_forecast_order_reception_errors,error_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The error_id column serves as the primary key in the supplier_forecast_order_reception_errors table, uniquely identifying each error record related to supplier forecast order processing. When writing SQL queries, use this column to uniquely reference specific error entries, join with related tables, or filter error records."
supplier_forecast_order_reception_errors,creator_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The creator_id column in the supplier_forecast_order_reception_errors table is a required integer field that references the user who reported or logged the forecast order reception error. When writing SQL queries, this column can be joined with a users or employees table to retrieve information about who documented the error, and since it's indexed (MUL), it's optimized for filtering and joining operations."
supplier_forecast_order_reception_errors,supplier_forecast_orders_id,int,NO,MUL,,,supplier_forecast_orders,supplier_forecast_orders_id,,10.0,0.0,"The supplier_forecast_orders_id column serves as a foreign key that links each error record to its corresponding entry in the supplier_forecast_orders table. When writing SQL queries, use this column to join with the supplier_forecast_orders table to access details about the original forecast order associated with the error, or to filter and group error records by their related forecast orders."
supplier_forecast_order_reception_errors,type,int,YES,,,,,,,10.0,0.0,"The 'type' column in the supplier_forecast_order_reception_errors table is an integer field that categorizes the different kinds of errors or issues encountered during forecast order reception from suppliers. When writing SQL queries, this column can be used to filter or group reception errors by their type, helping to analyze patterns in forecast order processing problems."
supplier_forecast_order_reception_errors,comment,varchar(140),YES,,,,,,140.0,,,"The 'comment' column in the supplier_forecast_order_reception_errors table stores brief text descriptions (up to 140 characters) of errors or issues encountered during forecast order processing. This optional field allows users to provide additional context or explanations about the specific error, making it useful in WHERE clauses for searching error descriptions or in SELECT statements when displaying error details."
supplier_forecast_order_reception_errors,status,int,YES,,,,,,,10.0,0.0,"The 'status' column in the supplier_forecast_order_reception_errors table is an integer field that indicates the current state of a forecast order reception error. When writing SQL queries, this column can be used to filter or group error records based on their processing status, with different integer values representing various states (such as pending, resolved, or in progress)."
supplier_forecast_order_reception_errors,created_at,datetime,YES,,,,,,,,,"The created_at column in the supplier_forecast_order_reception_errors table stores the timestamp when an error or issue was first recorded during the forecast order reception process. This datetime field is useful for temporal analysis of reception errors and can be used in SQL queries to filter, sort, or group errors by their creation time, helping to identify patterns or track error frequency over specific time periods."
supplier_forecast_orders,supplier_forecast_orders_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The supplier_forecast_orders_id is the primary key column that uniquely identifies each forecast order record in the supplier_forecast_orders table. This integer column is non-nullable and should be used in JOIN operations when connecting to related tables or when specifically querying individual forecast orders.
supplier_forecast_orders,warehouse_id,int,NO,,,,,,,10.0,0.0,"The warehouse_id column in the supplier_forecast_orders table is a required integer field that identifies the specific warehouse where forecast orders from suppliers are to be delivered or stored. This column is essential for queries that need to analyze or filter forecast orders by location, and it likely joins with a warehouse reference table to access additional warehouse details."
supplier_forecast_orders,created,datetime,NO,,,,,,,,,"The 'created' column in the supplier_forecast_orders table stores the timestamp when a forecast order record was initially created in the system, using the datetime format. This non-nullable field is essential for tracking the chronological sequence of forecast orders and can be used in SQL queries for temporal analysis, filtering orders by creation date, or identifying orders created within specific time periods."
supplier_forecast_orders,created_by,int,NO,,,1,,,,10.0,0.0,"The created_by column in the supplier_forecast_orders table is a required integer field that stores the user ID of the person who created the forecast order. This column is essential for audit tracking and accountability, allowing the system to identify who initiated each supplier forecast order entry."
supplier_forecast_orders,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The product_id column in the supplier_forecast_orders table is a required integer field that serves as a foreign key reference to identify the specific product being forecasted in a supplier order. When writing queries, this column can be used to join with product-related tables to access detailed product information, and it's commonly used in WHERE clauses or GROUP BY statements to analyze forecast data for specific products."
supplier_forecast_orders,product_weight,int,NO,,,0,,,,10.0,0.0,"The product_weight column in the supplier_forecast_orders table stores the integer weight value of each forecasted product, which is a required field (non-nullable). This column is useful for calculating shipping requirements, logistics planning, and capacity management when dealing with supplier orders, and should be included in queries where weight-based analysis or calculations are needed."
supplier_forecast_orders,status,int,NO,MUL,,0,,,,10.0,0.0,"The 'status' column in the supplier_forecast_orders table is a required integer field that indicates the current state of a forecast order (e.g., pending, confirmed, delivered, cancelled). As a multiple-index column (MUL), it's optimized for querying and filtering forecast orders by their status, making it useful for status-based reporting and workflow management queries."
supplier_forecast_orders,delivery_date,date,YES,MUL,,,,,,,,"The delivery_date column in the supplier_forecast_orders table represents the expected date when a supplier's forecasted order should be delivered. This date field is indexed (MUL) for efficient querying and can be used to filter, sort, or group forecast orders by their anticipated delivery timeframes, making it particularly useful for queries that need to analyze or report on upcoming deliveries or track order timelines."
supplier_forecast_orders,estimate_delivery_time,int,NO,,,0,,,,10.0,0.0,"The estimate_delivery_time column in the supplier_forecast_orders table stores the expected delivery duration as a non-null integer value, representing the estimated time (likely in days or hours) for a supplier to deliver the forecasted order. This mandatory field is crucial for supply chain planning and can be used in SQL queries to filter, sort, or analyze delivery timeframes for supplier orders, such as finding orders with longer delivery estimates or calculating average delivery times per supplier."
supplier_forecast_orders,shipping_type,int,NO,,,0,,,,10.0,0.0,"The shipping_type column in the supplier_forecast_orders table is a required integer field that specifies the method or category of shipping used for forecast orders from suppliers. When writing SQL queries, this column can be used to filter or group orders based on different shipping methods, where each integer value represents a specific shipping type or category (e.g., ground, air, express)."
supplier_forecast_orders,reception_type,tinyint,YES,MUL,,,,,,3.0,0.0,"The reception_type column in supplier_forecast_orders is a tinyint field that categorizes how the forecasted order is expected to be received from the supplier, with different numeric values representing various reception methods or conditions. As a nullable, indexed column (MUL), it can be effectively used in WHERE clauses and JOIN operations to filter or group forecast orders based on their reception characteristics, making it useful for analyzing delivery patterns or generating reports specific to certain reception types."
supplier_forecast_orders,start_selling_on_date,date,YES,MUL,,,,,,,,"The start_selling_on_date column in the supplier_forecast_orders table indicates the planned date when products from a forecasted supplier order can begin being sold or distributed. When writing SQL queries, this date field can be used for filtering or sorting forecast orders based on their selling availability timeline, and since it's nullable, queries should handle potential NULL values appropriately using IS NULL or IS NOT NULL conditions where necessary."
supplier_forecast_orders,auto_cancel_on,date,YES,,,,,,,,,The auto_cancel_on column in the supplier_forecast_orders table stores the date when a forecast order will be automatically canceled if not processed. This date field helps manage order lifecycle automation and can be used in queries to identify orders approaching their auto-cancellation date or to filter out orders based on their cancellation status.
supplier_forecast_orders,price_per_unit,"decimal(10,6)",NO,,,0.000000,,,,10.0,6.0,"The price_per_unit column in the supplier_forecast_orders table stores the unit price of products in forecasted supplier orders with high precision (up to 6 decimal places) and cannot be null. When writing SQL queries, this column can be used for calculating total order values, analyzing price trends, or comparing unit prices across different suppliers, with the default value being 0.000000 if not explicitly specified."
supplier_forecast_orders,retail_price_per_unit,float,NO,,,0,,,,12.0,,"The retail_price_per_unit column in the supplier_forecast_orders table stores the per-unit retail price as a floating-point number, representing the expected selling price of each product unit in the forecast order. This non-nullable field is essential for calculating revenue projections and analyzing pricing strategies for forecasted supplier orders, and should be used in queries where price-based calculations or comparisons are needed."
supplier_forecast_orders,number_of_units_ordered,float,NO,,,0,,,,12.0,,"The number_of_units_ordered column in the supplier_forecast_orders table stores the quantity of products ordered from suppliers as a floating-point number, and it must always have a value (non-nullable). When writing SQL queries, this column can be used to calculate total order quantities, analyze order volumes, or filter orders based on specific quantity thresholds, making it essential for inventory and order management operations."
supplier_forecast_orders,number_of_units_at_reception,float,NO,,,0,,,,12.0,,"The number_of_units_at_reception column in the supplier_forecast_orders table stores the actual quantity of units received from suppliers as a floating-point number, which cannot be null and defaults to 0. This column is essential for comparing expected versus actual received quantities in supplier orders and can be used in SQL queries to analyze reception discrepancies or calculate fulfillment rates."
supplier_forecast_orders,portioning_at_reception,varchar(100),NO,,,,,,100.0,,,"The `portioning_at_reception` column in the supplier_forecast_orders table stores information about how incoming products should be divided or portioned when received from suppliers, using a string value up to 100 characters. This column is mandatory (non-nullable) and helps warehouse staff understand specific portioning instructions or requirements that need to be followed during the reception process of forecasted orders."
supplier_forecast_orders,packaging_instructions_in_basket,int,NO,,,,,,,10.0,0.0,"The packaging_instructions_in_basket column is a required integer field that indicates whether packaging instructions are included in the supplier's forecast order basket (likely using 0/1 or similar numeric flags). When writing SQL queries, this column can be used to filter or group forecast orders based on the presence of packaging instructions, helping to identify orders that require specific packaging handling or documentation."
supplier_forecast_orders,invoice_amount,float,NO,,,0,,,,12.0,,"The invoice_amount column in the supplier_forecast_orders table stores the monetary value (as a floating-point number) associated with each forecast order from suppliers. This required field (non-nullable) represents the total cost of the forecasted order and can be used in financial calculations, reporting, and analysis of supplier order values."
supplier_forecast_orders,paid,int,NO,MUL,,,,,,10.0,0.0,"The 'paid' column in the supplier_forecast_orders table is an integer field that indicates the payment status of forecast orders, where different integer values likely represent various payment states (e.g., 0 for unpaid, 1 for paid, etc.). As a non-nullable field with a MUL (multiple) key type, it's commonly used in WHERE clauses and JOIN operations to filter or group forecast orders based on their payment status."
supplier_forecast_orders,lot_id,int,YES,MUL,,0,,,,10.0,0.0,"The lot_id column in the supplier_forecast_orders table is an integer field that serves as a foreign key (indicated by MUL key type) to link forecast orders with specific production or inventory lots. When writing SQL queries, this column can be used to join with related lot tables or to filter/group forecast orders by their associated lot numbers, though the field is optional as indicated by its nullable property."
supplier_forecast_orders,updated,datetime,NO,,,,,,,,,"The 'updated' column in the supplier_forecast_orders table stores the timestamp of when a forecast order record was last modified, using a datetime format that captures both the date and time of the update. This non-nullable field is essential for tracking the chronological history of changes to forecast orders and can be used in SQL queries for filtering recent changes, auditing modifications, or sorting orders based on their last update time."
supplier_forecast_orders,comments,varchar(255),NO,,,,,,255.0,,,"The 'comments' column in the supplier_forecast_orders table stores mandatory text notes (up to 255 characters) related to each forecast order from suppliers. This field is used to capture important remarks, explanations, or special instructions about the forecast order, providing context that helps in understanding specific requirements or conditions associated with the order."
supplier_forecast_orders,distribution_week,varchar(4),YES,,,W01,,,4.0,,,"The distribution_week column in the supplier_forecast_orders table uses a 'Wxx' format (e.g., 'W01') to indicate the week number when products are expected to be distributed from suppliers. This optional (nullable) varchar(4) field helps in organizing and querying forecast orders based on their weekly distribution schedule, making it useful for filtering and grouping orders by specific weeks of distribution."
supplier_forecast_orders,distribution_year,int,YES,,,0,,,,10.0,0.0,"The distribution_year column in the supplier_forecast_orders table represents the year when the forecasted order is expected to be distributed or delivered. This optional integer field helps in temporal organization and analysis of supplier forecasts, allowing queries to filter or group orders by their planned distribution year."
supplier_forecast_orders,user_id,int,NO,,,,,,,10.0,0.0,"The user_id column in the supplier_forecast_orders table is a required integer field that identifies the user responsible for creating or managing the forecast order. When writing SQL queries, this column can be used to filter or join with user-related tables to track ownership and accountability of supplier forecasts, and since it's non-nullable, you should always ensure a valid user ID is provided when inserting new records."
supplier_forecast_orders,pay_me,tinyint,YES,,,0,,,,3.0,0.0,"The `pay_me` column in the supplier_forecast_orders table is a boolean flag (tinyint) that likely indicates whether a payment is required or pending for a specific forecast order. When writing queries, this column can be used to filter or identify orders that need payment processing, where a value of 1 typically indicates payment is needed and 0 indicates no payment is required."
supplier_forecast_orders,sales_order_id,varchar(30),YES,,,,,,30.0,,,"The sales_order_id column in the supplier_forecast_orders table stores the unique identifier for associated sales orders in a VARCHAR(30) format, allowing for alphanumeric order references. This optional field (nullable) helps link forecast orders to specific sales orders, enabling tracking of which supplier forecasts are connected to particular customer sales transactions."
supplier_forecast_orders,instant_in_out,int,NO,,,0,,,,10.0,0.0,"The `instant_in_out` column in the supplier_forecast_orders table is a required integer field that likely indicates whether a forecast order represents an incoming (supply) or outgoing (distribution) transaction. When writing SQL queries, this column can be used as a binary flag (typically 0 or 1) to filter or group forecast orders based on their directional flow in the supply chain."
supplier_forecast_orders,confirmed,datetime,YES,,,,,,,,,"The 'confirmed' column in the supplier_forecast_orders table stores the date and time when a forecast order was confirmed by the supplier. This datetime field can be used to filter or sort orders based on their confirmation status, with NULL values indicating unconfirmed orders, making it useful for queries that need to track order confirmation timelines or analyze supplier response patterns."
supplier_forecast_orders,reception_timestamp,datetime,YES,,,,,,,,,"The reception_timestamp column in the supplier_forecast_orders table records the date and time when a forecast order was actually received from the supplier, allowing for tracking of actual delivery times against expected schedules. This nullable datetime field is useful for analyzing supplier performance and delivery accuracy, and can be used in queries to calculate delivery delays or filter orders based on their reception status."
supplier_forecast_orders,confirmed_at,datetime,YES,,,,,,,,,"The confirmed_at column in the supplier_forecast_orders table stores the date and time when a forecast order was confirmed by the supplier. This datetime field can be used to filter or sort orders based on their confirmation timing, and since it's nullable, unconfirmed orders will have NULL values in this column."
supplier_forecast_orders,confirmed_by,int,YES,,,,,,,10.0,0.0,"The `confirmed_by` column in the supplier_forecast_orders table stores the user ID (as an integer) of the person who confirmed or validated the forecast order. This optional field (nullable) helps track who approved or verified the order details, enabling accountability and audit tracking in the supplier forecasting process."
supplier_forecast_orders,weight_sample_1,float,YES,,,,,,,12.0,,"The weight_sample_1 column in the supplier_forecast_orders table stores a floating-point value representing one of potentially multiple weight measurements or samples for a forecasted order. This optional field (as indicated by being nullable) can be used in SQL queries to analyze or validate product weights, particularly useful when calculating averages, comparing weight variations, or verifying supplier specifications."
supplier_forecast_orders,weight_sample_2,float,YES,,,,,,,12.0,,"The weight_sample_2 column in the supplier_forecast_orders table stores a floating-point value representing a secondary weight measurement or sample for forecasted supplier orders. When writing SQL queries, this column can be used for weight-based calculations or comparisons, though its nullable nature means you should handle potential NULL values appropriately using COALESCE or IS NULL checks."
supplier_forecast_orders,weight_sample_3,float,YES,,,,,,,12.0,,"The weight_sample_3 column in the supplier_forecast_orders table stores a floating-point value representing the third weight measurement or sample taken for a forecasted order from suppliers. This optional field (as indicated by being nullable) can be used in SQL queries when analyzing weight variations or calculating average weights across multiple samples, particularly useful when precise weight measurements are needed for quality control or shipping calculations."
supplier_forecast_orders,external_temperature,float,YES,,,,,,,12.0,,"The external_temperature column in the supplier_forecast_orders table stores the temperature value (as a floating-point number) associated with a forecast order, which may be relevant for temperature-sensitive products or shipping conditions. This optional field (nullable) can be used in SQL queries to filter or analyze orders based on temperature requirements, particularly useful when querying for temperature-controlled shipments or products with specific temperature constraints."
supplier_forecast_orders,internal_temperature,float,YES,,,,,,,12.0,,"The internal_temperature column in the supplier_forecast_orders table stores the required temperature (in a floating-point format) for products during transportation or storage as part of supplier forecast orders. This column is particularly relevant when querying or filtering orders based on temperature-sensitive products, and being nullable, it may only contain values for products that have specific temperature requirements."
supplier_forecast_orders,gross_weight_received,float,YES,,,,,,,12.0,,"The `gross_weight_received` column in the supplier_forecast_orders table stores the total weight (including packaging) of products actually received from suppliers, represented as a floating-point number. This column can be used in SQL queries to compare actual received weights against expected weights, calculate shipping variances, or aggregate total weight metrics across multiple orders, with NULL values indicating orders where the gross weight hasn't been recorded yet."
supplier_forecast_orders,reception_done_by,int,YES,,,,,,,10.0,0.0,"The reception_done_by column in the supplier_forecast_orders table stores the identifier (ID) of the user or employee who completed the reception of the forecasted order from the supplier. This optional integer field can be used in SQL queries to track who processed or verified the order reception, enabling queries to analyze reception patterns or join with a users/employees table to get detailed information about the receiving personnel."
supplier_forecast_orders,weight_accepted,float,YES,,,,,,,12.0,,"The weight_accepted column in the supplier_forecast_orders table stores the accepted weight value (as a floating-point number) for forecasted supplier orders, which may be null if the weight hasn't been confirmed yet. When writing queries, this column can be used to analyze or filter orders based on their accepted weight measurements, and since it's nullable, always consider using NULL handling functions (like COALESCE or IS NULL) when performing calculations or comparisons."
supplier_forecast_orders,quantity_accepted,int,YES,,,,,,,10.0,0.0,"The quantity_accepted column in the supplier_forecast_orders table represents the number of units that have been approved or confirmed for a forecast order from a supplier. This integer field can be used in SQL queries to track accepted quantities, calculate fulfillment rates, or compare against other quantity fields (like requested or received amounts), and being nullable indicates that some forecast orders might not yet have an accepted quantity defined."
supplier_forecast_orders,reception_comment,varchar(500),YES,,,,,,500.0,,,"The reception_comment column in the supplier_forecast_orders table stores optional text notes (up to 500 characters) related to the reception of forecast orders from suppliers. This free-text field is typically used to document any special observations, issues, or additional information during the order reception process, providing valuable context for order tracking and supplier communication."
supplier_forecast_orders,supplier_comment,varchar(500),YES,,,,,,500.0,,,"The supplier_comment column in the supplier_forecast_orders table stores optional text feedback or notes (up to 500 characters) provided by suppliers regarding their forecast orders. This free-text field can be used to document special instructions, delivery considerations, or any relevant communication from the supplier about the forecasted order, and can be queried using standard VARCHAR string operations in SQL queries."
supplier_forecast_orders,paid_timestamp,datetime,YES,,,,,,,,,"The paid_timestamp column in the supplier_forecast_orders table records the date and time when a forecast order payment was completed. This nullable datetime field can be used to filter or analyze payment timing patterns, track unpaid orders (where paid_timestamp is NULL), or calculate payment processing metrics for supplier forecast orders."
supplier_forecast_orders,invoiced_by,int,YES,,,1,,,,10.0,0.0,"The `invoiced_by` column in the supplier_forecast_orders table is an optional integer field that stores the ID of the user or entity who processed the invoice for the forecast order. This column helps track the accountability and processing history of supplier forecasts, allowing queries to identify who handled the invoicing step of specific orders."
supplier_forecast_orders,reception_photo,varchar(500),YES,,,,,,500.0,,,"The reception_photo column stores file paths or URLs (up to 500 characters) referencing photographs taken during the reception of forecasted supplier orders. This optional field helps document the physical condition and visual verification of received goods, providing visual evidence that can be referenced for quality control or dispute resolution purposes."
supplier_forecast_orders,apply_provincial_tax_purchasing,tinyint,NO,,,0,,,,3.0,0.0,"The apply_provincial_tax_purchasing column is a boolean flag (stored as tinyint) that indicates whether provincial tax should be applied to the purchasing calculations for a supplier forecast order. When querying this column, use it as a filter condition (WHERE apply_provincial_tax_purchasing = 1) to identify orders that require provincial tax consideration in purchasing scenarios."
supplier_forecast_orders,apply_national_tax_purchasing,tinyint,NO,,,0,,,,3.0,0.0,"The apply_national_tax_purchasing column is a boolean flag (stored as tinyint) that indicates whether national tax should be applied to the purchasing calculations for a supplier forecast order. When writing SQL queries, use this column with binary conditions (0 or 1) to filter or identify orders that require national tax consideration in purchasing scenarios."
supplier_forecast_orders,min_expiration_date_required,date,YES,,,,,,,,,"The min_expiration_date_required column in the supplier_forecast_orders table specifies the minimum acceptable expiration date for products in a forecasted supplier order. When writing queries, this date field can be used to filter or validate orders based on product shelf-life requirements, ensuring that received products will meet minimum freshness standards."
supplier_forecast_orders,net_weight_received,float,YES,,,,,,,12.0,,"The net_weight_received column in the supplier_forecast_orders table stores the actual weight (as a floating-point number) of products received from suppliers, allowing for precise tracking of received quantities. This column can be used in SQL queries to compare expected versus actual received weights, calculate weight-based metrics, or analyze discrepancies in supplier deliveries, with NULL values permitted when the weight hasn't been recorded yet."
supplier_forecast_orders,reception_boxes,text,YES,,,,,,65535.0,,,The 'reception_boxes' column in the supplier_forecast_orders table stores text information about the packaging or box configuration used when receiving products from suppliers. This optional field (nullable) can be used in SQL queries to analyze or filter orders based on specific packaging requirements or to track how products are physically received from suppliers.
supplier_forecast_orders,time_before_automated_sfid_cancelation,int,YES,,,0,,,,10.0,0.0,"This column represents the time period (in a relevant unit, likely minutes or hours) before a supplier forecast order is automatically canceled if no SFID (Supplier Forecast ID) is assigned. It helps automate the cleanup of stale or unprocessed forecast orders, with a default value of 0, and can be left empty (NULL) when automatic cancelation is not applicable."
supplier_forecast_orders,lufa_invoice_number,int,YES,MUL,,0,,,,10.0,0.0,"The lufa_invoice_number column in the supplier_forecast_orders table stores integer-based invoice numbers associated with supplier forecast orders, serving as a multiple-index field (MUL) that can be used to join with related invoice tables. When querying this column, keep in mind that it can contain NULL values, making it important to use appropriate NULL handling in WHERE clauses or joins (e.g., using IS NULL or LEFT JOIN operations)."
supplier_forecast_orders,expiry_date,date,YES,,,,,,,,,"The expiry_date column in the supplier_forecast_orders table represents the date when a forecast order becomes invalid or expires. When querying this column, it's useful for filtering active forecasts (where expiry_date is in the future or NULL) versus expired ones, and can be used in date-based comparisons (e.g., WHERE expiry_date > CURRENT_DATE) to manage forecast validity periods."
supplier_forecast_orders,comment_from_merchandiser_about_qty_discrepancy,text,YES,,,,,,65535.0,,,"This text column stores explanatory notes or comments provided by merchandisers specifically regarding quantity discrepancies in supplier forecast orders. It can be used in queries to filter or analyze cases where there are quantity mismatches or to retrieve merchandiser feedback about order quantity issues, making it particularly useful when investigating order discrepancies or auditing quantity-related challenges."
supplier_forecast_orders,prereceived_at,datetime,YES,,,,,,,,,"The `prereceived_at` column in the supplier_forecast_orders table stores the datetime when a forecast order was preliminarily received or pre-registered in the system, before final confirmation. This timestamp can be used in SQL queries to track and analyze the timing of preliminary order receipts, and since it's nullable, queries should handle potential NULL values when filtering or joining based on this field."
supplier_forecast_orders,prereceived_by,int,YES,,,,,,,10.0,0.0,"The `prereceived_by` column in the supplier_forecast_orders table stores the user ID (as an integer) of the person who performed the pre-reception check of the forecasted order. This optional field (nullable) helps track who validated or inspected the order before its actual reception, enabling accountability and tracking of the pre-reception process in the supplier order workflow."
supplier_forecast_orders,cart_label,varchar(50),YES,,,,,,50.0,,,"The cart_label column in the supplier_forecast_orders table stores a text identifier (up to 50 characters) that helps identify or categorize specific forecast orders, likely representing a label or designation for grouping or tracking purposes. This optional field can be used in SQL queries to filter, group, or search for forecast orders based on their assigned cart labels, making it useful for organizing and managing supplier orders in various operational contexts."
supplier_forecast_orders,discrepancy_reviewed_by,int,YES,,,,,,,10.0,0.0,"The discrepancy_reviewed_by column stores the user ID (as an integer) of the person who reviewed any discrepancies in the forecast order, linking to a user reference table. This optional field helps track accountability and audit trails when there are differences between forecasted and actual orders, and can be used in queries to filter or join with user-related tables to see who handled specific order discrepancies."
supplier_forecast_orders,discrepancy_reviewed_at,datetime,YES,,,,,,,,,The discrepancy_reviewed_at column records the timestamp when a discrepancy in a supplier forecast order was last reviewed or audited. This datetime field can be used to track when order inconsistencies were addressed and is particularly useful in queries that need to identify unreviewed discrepancies (WHERE discrepancy_reviewed_at IS NULL) or analyze the timeliness of discrepancy reviews.
supplier_forecast_orders,picked_up,tinyint,NO,,,0,,,,3.0,0.0,"The `picked_up` column in the supplier_forecast_orders table is a boolean flag (stored as tinyint) that indicates whether a forecasted order has been physically collected from the supplier, where 0 typically represents not picked up and 1 represents picked up. This mandatory field (non-nullable) helps track the physical status of forecast orders and can be used in SQL queries to filter or group orders based on their pickup status, such as identifying pending pickups or analyzing completed collections."
supplier_forecast_orders,weight_variance,int,YES,,,,,,,10.0,0.0,"The weight_variance column in the supplier_forecast_orders table stores the numerical difference (in relevant units) between expected and actual product weights for forecasted supplier orders. This integer field helps track weight discrepancies in deliveries, which is useful for quality control and supplier performance monitoring, and can be used in queries to identify orders with significant weight variations."
supplier_forecast_orders,predicted_inventory_on_delivery_date,int,YES,,,,,,,10.0,0.0,"The predicted_inventory_on_delivery_date column represents the estimated quantity of inventory that will be available when the forecasted order arrives from the supplier. This integer value helps in inventory planning by providing a projection of stock levels at the time of delivery, which can be used in SQL queries to analyze future inventory positions or identify potential stockout risks."
supplier_forecast_orders,nb_days_between_2_deliveries,int,YES,,,,,,,10.0,0.0,"The nb_days_between_2_deliveries column represents the expected interval (in days) between consecutive deliveries from a supplier for a given forecast order. When writing SQL queries, this integer field can be used to analyze delivery frequency patterns or calculate the next expected delivery date, though it may contain NULL values if the delivery interval is not specified or applicable."
supplier_forecast_orders,predicted_avg_sales_per_day,int,YES,,,,,,,10.0,0.0,"The predicted_avg_sales_per_day column in the supplier_forecast_orders table stores the estimated daily sales volume for a product as an integer value, helping to inform supplier order quantities and inventory planning. This column can be used in SQL queries to analyze expected demand patterns, calculate optimal order quantities, or compare predicted versus actual sales performance, and being nullable allows for cases where sales predictions may not be available or applicable."
supplier_forecast_orders,last_day_of_sale,date,YES,,,,,,,,,"The `last_day_of_sale` column in the supplier_forecast_orders table stores the final date when a product from a forecasted supplier order is expected to be sold or available for sale. This date field can be used in SQL queries to analyze sales windows, plan inventory management, or filter orders based on their expected end-of-sale periods, and being nullable means some orders might not have a defined end-sale date."
supplier_forecast_orders,reception_cost,float,YES,,,,,,,12.0,,"The reception_cost column in the supplier_forecast_orders table stores the estimated or actual cost associated with receiving and processing the forecasted order from suppliers, represented as a floating-point number. This optional field (nullable) can be used in SQL queries to calculate total reception expenses, analyze cost variations across different suppliers, or compare actual versus estimated reception costs for financial reporting and budget analysis."
supplier_forecast_orders,reception_weight,float,YES,,,,,,,12.0,,"The reception_weight column in the supplier_forecast_orders table stores the actual received weight of products from supplier orders as a floating-point number, allowing for decimal precision in weight measurements. This column can be used in SQL queries to compare expected versus actual received quantities or to calculate weight-based metrics for supplier deliveries, and being nullable indicates that weight information might not be available for all forecast orders."
supplier_forecast_orders,on_sale,tinyint(1),YES,,,0,,,,3.0,0.0,"The `on_sale` column in the supplier_forecast_orders table is a boolean flag (tinyint(1)) that indicates whether the forecasted order items are part of a sale or promotional offering. When writing queries, you can use this column to filter or identify promotional forecast orders (where on_sale = 1) versus regular forecast orders (where on_sale = 0), with NULL values indicating that the sale status is unknown or not applicable."
supplier_forecast_orders,consigne_amount,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The consigne_amount column in the supplier_forecast_orders table stores the fixed decimal value (with 2 decimal places) representing the deposit or returnable container amount associated with a forecast order from suppliers. This required field (non-nullable) tracks monetary values related to packaging or container deposits, defaulting to 0.00 when not specified, and should be used in calculations involving order costs or deposit tracking."
supplier_forecast_orders,storage_format_in_wh,"enum('Any','Pallet','Standard Totes')",YES,,,Any,,,14.0,,,"The storage_format_in_wh column specifies how products from supplier forecast orders should be stored in the warehouse, with three possible options: 'Any', 'Pallet', or 'Standard Totes'. When writing SQL queries, this column can be used to filter or group forecast orders based on their intended storage format, which is particularly useful for warehouse space planning and logistics operations."
supplier_forecast_orders,tote_format_id,int,NO,,,1,,,,10.0,0.0,"The tote_format_id column in the supplier_forecast_orders table is a required integer field that specifies the format or container type used for the forecasted order. This column helps standardize how products are packaged and transported from suppliers, ensuring proper handling and storage requirements are met throughout the order fulfillment process."
supplier_forecast_orders,offsite_inventory,tinyint,YES,,,0,,,,3.0,0.0,"The `offsite_inventory` column in the supplier_forecast_orders table is a boolean-like indicator (using tinyint) that flags whether the forecasted order's inventory is stored at an external/offsite location. When writing queries, you can use this column to filter or segment forecast orders based on their storage location status, where 0 typically indicates on-site storage and 1 indicates offsite storage."
supplier_forecast_orders,moved_offsite,tinyint,YES,,,0,,,,3.0,0.0,"The `moved_offsite` column in the supplier_forecast_orders table is a boolean flag (stored as tinyint) that indicates whether a forecast order has been relocated to an external location or facility. When querying this column, use 1 to filter for orders that have been moved offsite and 0 for orders still at the primary location, making it useful for tracking the physical status of forecast orders in warehouse management scenarios."
supplier_forecast_orders,rpc_received,int,YES,,,,,,,10.0,0.0,"The `rpc_received` column in the supplier_forecast_orders table is an integer field that tracks the actual quantity of products received from suppliers against their forecasted orders. When writing SQL queries, this column can be used to compare planned versus actual received quantities or to identify discrepancies in order fulfillment, with NULL values potentially indicating orders that haven't been received yet."
supplier_forecast_orders,floor,varchar(10),YES,,,B,,,10.0,,,"The 'floor' column in the supplier_forecast_orders table stores the building floor designation (as a varchar up to 10 characters) where the forecasted order should be delivered or processed. This optional field helps in routing and organizing deliveries within multi-level facilities, making it useful in queries that need to filter or group supplier orders by their designated floor location."
supplier_forecast_orders,via_3pl,tinyint,NO,,,0,,,,3.0,0.0,"The via_3pl column is a boolean flag (stored as tinyint) in the supplier_forecast_orders table that indicates whether a forecast order is being handled through a third-party logistics provider (3PL). When writing SQL queries, use this column with values 0 (not via 3PL) or 1 (via 3PL) to filter or segment forecast orders based on their logistics handling method."
supplier_forecast_orders,name_3pl,varchar(150),YES,,,,,,150.0,,,"The name_3pl column in the supplier_forecast_orders table stores the name of the third-party logistics (3PL) provider associated with a forecast order, using a variable-length string up to 150 characters. This optional field (nullable) helps identify which logistics partner is responsible for handling the product delivery and can be used in queries to filter or group forecast orders by their assigned 3PL provider."
supplier_forecast_orders,supplier_lot_id_date,varchar(100),YES,,,,,,100.0,,,"The supplier_lot_id_date column in the supplier_forecast_orders table stores a string identifier (up to 100 characters) that represents the date associated with a supplier's lot identification. This optional field helps track temporal aspects of supplier lot assignments and can be used in queries to filter or group forecast orders based on specific lot date identifiers, particularly useful when analyzing supplier delivery patterns or tracking lot-specific timelines."
supplier_forecast_orders,unit_case_delivered,int,YES,,,,,,,10.0,0.0,"The unit_case_delivered column in the supplier_forecast_orders table stores the actual number of unit cases that were delivered by suppliers for a forecast order. This optional integer field helps track the actual delivery quantities, allowing for comparison against expected quantities and analysis of delivery accuracy, making it useful in queries that need to evaluate supplier performance or reconcile delivered versus forecasted amounts."
supplier_forecast_orders,unit_case_accepted,int,YES,,,,,,,10.0,0.0,"The unit_case_accepted column in the supplier_forecast_orders table stores the number of accepted unit cases for a forecasted supplier order, represented as an integer value. This column helps track the quantity of products that have been approved or confirmed in the forecast, and being nullable, it can accommodate situations where the acceptance quantity hasn't been determined yet."
supplier_forecast_orders,is_certification_visible,int,YES,,,,,,,10.0,0.0,"The `is_certification_visible` column in the supplier_forecast_orders table is a binary flag (stored as an integer) that indicates whether certification information should be displayed for a particular forecast order. This column can be used in WHERE clauses or JOIN conditions when you need to filter or identify orders based on their certification visibility status, with NULL values indicating that the visibility setting hasn't been determined."
supplier_forecast_orders,weight_sample_4,float,YES,,,,,,,12.0,,"The weight_sample_4 column in the supplier_forecast_orders table stores a floating-point value representing one of multiple weight measurements or samples for forecasted supplier orders. When writing SQL queries, this column can be used for weight-based calculations or filtering, though its nullable nature means you should handle NULL values appropriately using COALESCE or IS NULL/IS NOT NULL checks when necessary."
supplier_forecast_orders,weight_sample_5,float,YES,,,,,,,12.0,,"The weight_sample_5 column in the supplier_forecast_orders table stores a floating-point value representing the fifth weight sample measurement for forecasted supplier orders. When writing SQL queries, this column can be used to analyze weight variations or calculate average weights, though its nullable nature means you should handle potential NULL values appropriately in your calculations."
supplier_forecast_orders,weight_sample_6,float,YES,,,,,,,12.0,,"The weight_sample_6 column in the supplier_forecast_orders table stores a floating-point value representing a weight measurement, likely the sixth in a series of weight samples for forecasted supplier orders. When writing SQL queries, this column can be used for numerical calculations or comparisons related to weight analysis, and since it's nullable, remember to handle potential NULL values appropriately using COALESCE or IS NULL checks."
supplier_forecast_orders,weight_sample_7,float,YES,,,,,,,12.0,,"The weight_sample_7 column in the supplier_forecast_orders table stores a floating-point value representing a weight measurement sample, likely the seventh in a series of weight measurements for forecasted supplier orders. When writing SQL queries, this column can be used for weight-based calculations or filtering, though be aware it accepts NULL values which may need to be handled appropriately in aggregate functions or comparisons."
supplier_forecast_orders,weight_sample_8,float,YES,,,,,,,12.0,,"The weight_sample_8 column in the supplier_forecast_orders table stores a floating-point value representing one of multiple weight samples for forecasted supplier orders. When writing SQL queries, this column can be used to analyze weight variations or calculate average weights, though its nullable nature means you should handle NULL values appropriately using COALESCE or IS NULL checks where necessary."
supplier_forecast_orders,weight_sample_9,float,YES,,,,,,,12.0,,"The weight_sample_9 column in the supplier_forecast_orders table stores a floating-point value representing one of multiple weight samples for forecasted supplier orders. When writing SQL queries, this column can be used for weight-based calculations or analysis, though its nullable nature means you should handle potential NULL values appropriately using COALESCE or IS NULL checks."
supplier_forecast_orders,weight_sample_10,float,YES,,,,,,,12.0,,"The weight_sample_10 column in the supplier_forecast_orders table stores the weight measurement (as a floating-point number) for a sample size of 10 units of the forecasted product. This optional field helps in quality control and inventory management by providing a standardized weight reference point for product batches, which can be used to calculate expected total weights or verify product consistency."
supplier_forecast_orders_files,supplier_forecast_orders_file_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_forecast_orders_file_id is the primary key column that uniquely identifies each file record in the supplier_forecast_orders_files table. When writing SQL queries, use this column for joining to related tables, filtering specific file records, or ensuring unique identification of supplier forecast order files."
supplier_forecast_orders_files,supplier_forecast_order_id,int,YES,,,,,,,10.0,0.0,"This column serves as a reference to link files with their corresponding supplier forecast orders, storing the ID of the associated order as an integer value. It can be used in JOIN operations to connect with the main supplier forecast orders table, and since it's nullable, some files may exist without being directly tied to a specific order."
supplier_forecast_orders_files,file_url,varchar(500),NO,,,,,,500.0,,,The file_url column in the supplier_forecast_orders_files table stores the complete URL or file path (up to 500 characters) where the supplier forecast order document or file can be accessed. This required field (non-nullable) is essential for retrieving the actual file content and can be used in SQL queries to locate or validate file locations associated with supplier forecast orders.
supplier_forecast_orders_files,folder,varchar(100),YES,,,,,,100.0,,,"The 'folder' column in the supplier_forecast_orders_files table stores the directory path or folder location (up to 100 characters) where supplier forecast order files are stored. When querying this column, you can use it to filter or group files based on their storage location, and since it's nullable, be sure to handle potential NULL values appropriately in your queries."
supplier_forecast_orders_files,common,tinyint,YES,,,0,,,,3.0,0.0,"The 'common' column in the supplier_forecast_orders_files table is a tinyint flag field that likely indicates whether a file is considered common or standard within the supplier forecasting process. When querying this column, use it as a boolean-like filter (0 or 1) to distinguish between common files and specialized or unique files in the supplier forecast ordering system."
supplier_forecast_orders_images,supplier_forecast_orders_image_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_forecast_orders_image_id column serves as the primary key for the supplier_forecast_orders_images table, uniquely identifying each image record associated with supplier forecast orders. When writing SQL queries, use this column for precise record selection, joining with related tables, or when you need to reference specific images within the system."
supplier_forecast_orders_images,supplier_forecast_order_id,int,YES,,,,,,,10.0,0.0,"The supplier_forecast_order_id column in the supplier_forecast_orders_images table serves as a reference to identify which supplier forecast order an image belongs to. This integer column can be used in WHERE clauses or JOIN conditions to filter or link images to their corresponding forecast orders, though it's worth noting that the column is nullable and doesn't have an explicit foreign key constraint."
supplier_forecast_orders_images,image_url,varchar(500),NO,,,,,,500.0,,,"The image_url column stores the web-accessible URL or file path (up to 500 characters) where the supplier forecast order's image file can be accessed. This required field can be used in SQL queries to retrieve or validate the location of visual documentation associated with supplier forecast orders, and should be included in INSERT statements when adding new image records to the supplier_forecast_orders_images table."
supplier_forecast_orders_images,folder,varchar(100),YES,,,,,,100.0,,,"The 'folder' column in the supplier_forecast_orders_images table is a varchar field that stores the directory path or folder location where supplier forecast order images are stored, with a maximum length of 100 characters. This column can be used in SQL queries to locate or organize image files by their storage location, and being nullable means some image records might not have a specified folder path."
supplier_forecast_orders_images,common,tinyint,YES,,,0,,,,3.0,0.0,"The 'common' column in the supplier_forecast_orders_images table is a boolean-like flag (stored as a tinyint) that likely indicates whether an image is commonly used or standard across multiple forecast orders. When querying, you can filter using this column (e.g., WHERE common = 1) to find frequently used or standard images versus specialized ones."
supplier_images,supplier_image_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_image_id column serves as the primary key in the supplier_images table, uniquely identifying each image record associated with supplier content. When writing SQL queries, use this column for precise record selection, joining with related tables, or filtering specific supplier images (e.g., WHERE supplier_image_id = X)."
supplier_images,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the supplier_images table is a required integer field that identifies which supplier an image belongs to, serving as a link between supplier records and their associated images. This column should be used in JOIN operations with other supplier-related tables and in WHERE clauses when filtering images for specific suppliers."
supplier_images,image_url,varchar(500),NO,,,,,,500.0,,,"The image_url column in the supplier_images table stores the complete URL or file path (up to 500 characters) where each supplier-related image can be accessed, and this field is required for all records. When querying this column, you can use string operations to filter or manipulate the URLs, such as LIKE for pattern matching or string functions to extract specific parts of the image path."
supplier_invoices,supplier_invoice_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_invoice_id column serves as the primary key in the supplier_invoices table, uniquely identifying each invoice record from suppliers and vendors. This non-nullable integer field is essential for joining to related tables and should be referenced when querying specific invoice records or tracking payment transactions in the accounts payable system."
supplier_invoices,supplier_id,int,NO,MUL,,,,,,10.0,0.0,"The supplier_id column in the supplier_invoices table is a required integer field that serves as a foreign key reference to identify which supplier or vendor issued each invoice. When writing queries, this column can be used to join with the suppliers table or to filter/group invoice records by specific suppliers, making it essential for analyzing vendor-specific billing patterns and payment histories."
supplier_invoices,payment_method,int,YES,MUL,,,,,,10.0,0.0,"The payment_method column in the supplier_invoices table is an integer field that references the type of payment used for each supplier invoice transaction (e.g., 1 for credit card, 2 for bank transfer, etc.). When writing queries, this column can be used to filter or group invoices by payment type, and since it's indexed (MUL), it's optimized for these kinds of operations."
supplier_invoices,status,tinyint,NO,MUL,,0,,,,3.0,0.0,"The `status` column in the supplier_invoices table is a required tinyint field that tracks the current state of each invoice using numeric codes (e.g., 0 for pending, 1 for paid, etc.). When writing SQL queries, this column can be used to filter or group invoices by their processing status, and since it's indexed (MUL), it's optimized for these types of operations."
supplier_invoices,supplier_notified,tinyint,NO,,,0,,,,3.0,0.0,"The supplier_notified column in the supplier_invoices table is a required boolean flag (stored as tinyint) that indicates whether the supplier has been notified about the invoice status. When writing queries, use this column with values 0 (not notified) or 1 (notified) to filter or check the notification status of supplier invoices."
supplier_invoices,number_of_sfids,int,NO,,,,,,,10.0,0.0,"The number_of_sfids column in the supplier_invoices table is a required integer field that tracks the quantity of Salesforce IDs (SFIDs) associated with each invoice record. This column helps maintain a count of related Salesforce references or identifiers linked to a particular supplier invoice, which can be useful for cross-referencing and data integration purposes between the accounting system and Salesforce."
supplier_invoices,subtotal_amount,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The subtotal_amount column in the supplier_invoices table represents the pre-tax, pre-discount amount of an invoice from a supplier or vendor, stored as a decimal number with up to 10 digits and 2 decimal places. When writing SQL queries, this column can be used to calculate total invoice amounts, analyze spending patterns, or filter invoices by value ranges, and since it's nullable, queries should handle potential NULL values appropriately."
supplier_invoices,federal_taxes_amount,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The federal_taxes_amount column in the supplier_invoices table stores the federal tax portion of each invoice as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). When querying this column, you can use it for calculations or filtering to analyze federal tax amounts on supplier invoices, and since it's nullable, be sure to handle NULL values appropriately in your calculations or comparisons."
supplier_invoices,provincial_taxes_amount,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The provincial_taxes_amount column in the supplier_invoices table stores the amount of provincial/state-level taxes charged on each supplier invoice, represented as a decimal number with up to 10 digits total and 2 decimal places (e.g., 1234567.89). When querying this column, you can use it for tax-related calculations or filtering, keeping in mind that it may contain NULL values if no provincial tax was applied to a particular invoice."
supplier_invoices,total_amount,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The total_amount column in the supplier_invoices table represents the full monetary value of each invoice from suppliers, stored as a decimal number with up to 10 digits total and 2 decimal places for cents. When writing SQL queries, this column can be used to analyze invoice values, calculate payment summaries, or filter transactions by amount, and since it's nullable, queries should account for possible NULL values when performing calculations or comparisons."
supplier_invoices,created_by,int,NO,,,,,,,10.0,0.0,"The created_by column in the supplier_invoices table is a required integer field that stores the ID of the user who created or entered the invoice record into the system. When writing queries, this column can be used to filter or join with a users table to track which employees processed specific invoices, and since it's non-nullable, you can always expect a valid user ID value."
supplier_invoices,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the supplier_invoices table records the exact date and time when each invoice record was initially created in the system, automatically populated with CURRENT_TIMESTAMP. When writing SQL queries, this timestamp field can be used for filtering invoices by date ranges, analyzing invoice creation patterns, or sorting records chronologically, making it particularly useful for reporting and auditing purposes."
supplier_invoices,updated_by,int,YES,,,,,,,10.0,0.0,"The updated_by column in the supplier_invoices table stores the user ID (as an integer) of the person who last modified the invoice record. This column can be used to track who made changes to invoice entries and can be joined with a users or employees table to get the actual user details, making it useful for audit trails and accountability tracking."
supplier_invoices,updated_at,datetime,YES,,,,,,,,,"The updated_at column in the supplier_invoices table records the timestamp of when an invoice record was last modified, storing this information as a datetime value. This column is useful for tracking the history of invoice changes and can be used in SQL queries to filter or sort invoices based on their last update time, though it can contain NULL values if the last update time wasn't recorded."
supplier_invoices,invoice_date,date,YES,MUL,,,,,,,,"The invoice_date column in the supplier_invoices table represents the date when an invoice was issued by a supplier or vendor. This date field is commonly used for filtering transactions within specific date ranges, tracking payment timelines, and generating accounts payable reports, with a multi-column index (MUL) to optimize date-based queries."
supplier_invoices,total_consigne_amount,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The total_consigne_amount column in the supplier_invoices table represents the total consignment amount for a supplier invoice, stored as a decimal number with up to 10 digits and 2 decimal places. When querying this non-nullable field, you can use it for financial calculations or filtering invoices based on consignment amounts, with a default value of 0.00 if no specific amount is provided."
supplier_invoices,tax_subtotal,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The tax_subtotal column in the supplier_invoices table represents the total tax amount charged on an invoice before any adjustments or final calculations. This decimal field, which can store values up to 10 digits with 2 decimal places, can be used in SQL queries to analyze tax expenses, calculate total invoice amounts (when combined with other subtotals), or generate tax reports for accounting purposes."
supplier_invoices,non_tax_subtotal,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The non_tax_subtotal column in the supplier_invoices table represents the total amount of an invoice before taxes are applied, stored as a decimal number with up to 10 digits and 2 decimal places. When writing SQL queries, this column can be used to analyze raw invoice amounts or calculate tax amounts by comparing it to the final total, and since it's nullable, queries should handle potential NULL values appropriately."
supplier_invoices,tax_gst_only_subtotal,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The tax_gst_only_subtotal column in the supplier_invoices table represents the GST (Goods and Services Tax) portion of the invoice amount, stored as a decimal number with up to 10 digits and 2 decimal places. When querying this column, you can use it to analyze GST tax amounts separately from other tax types or to calculate total tax obligations, with NULL values indicating invoices where GST tax may not be applicable."
supplier_invoices,tax_ca_s_qc_subtotal,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The tax_ca_s_qc_subtotal column in the supplier_invoices table stores the Quebec Sales Tax (QST) subtotal amount for invoices from Canadian suppliers, represented as a decimal number with up to 10 digits and 2 decimal places. When querying this column, you should expect NULL values for non-Canadian invoices or those without applicable Quebec tax, and the default value is 0.00 for records where a tax amount is not specified."
supplier_notifications,supplier_notifications_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The supplier_notifications_id is the primary key column that uniquely identifies each notification record in the supplier_notifications table. This auto-incrementing integer serves as the main identifier for referencing specific supplier notifications and should be used in JOIN operations or WHERE clauses when querying individual notification records.
supplier_notifications,supplier_id,int,NO,,,0,,,,10.0,0.0,The supplier_id column in the supplier_notifications table is a required integer field that identifies which supplier a notification or alert is associated with. This column serves as a crucial link to track all communications with specific suppliers and should be included in queries when filtering or grouping notifications by supplier.
supplier_notifications,notification_type,int,NO,,,1,,,,10.0,0.0,"The notification_type column in the supplier_notifications table is a required integer field that categorizes different types of notifications or alerts sent to suppliers (e.g., 1 for order updates, 2 for payment notifications, etc.). This column is essential for filtering and grouping notifications by their purpose or category in SQL queries, and its non-nullable nature ensures every notification record has a defined type."
supplier_notifications,notification_time,time,NO,,,00:00:00,,,,,,"The notification_time column in the supplier_notifications table stores the specific time of day (in HH:MM:SS format) when a notification was or should be sent to a supplier, independent of the date. This column is mandatory (not nullable) and can be used to filter or analyze notification timing patterns, such as finding all notifications scheduled for specific times of day."
supplier_notifications,every_sunday,int,NO,,,0,,,,10.0,0.0,"The ""every_sunday"" column in the supplier_notifications table is a binary integer flag (0 or 1) that indicates whether a supplier should receive notifications on Sundays. When querying this column, use it as a boolean condition where 1 represents that Sunday notifications are enabled and 0 indicates they are disabled for that supplier."
supplier_notifications,every_monday,int,NO,,,0,,,,10.0,0.0,"The ""every_monday"" column in the supplier_notifications table is a binary flag (stored as an integer) that indicates whether a supplier should receive recurring notifications every Monday. When writing queries, use this column with values 1 (true) or 0 (false) to filter or identify suppliers who have opted into Monday notifications, for example: ""WHERE every_monday = 1"" to find suppliers who receive Monday updates."
supplier_notifications,every_tuesday,int,NO,,,0,,,,10.0,0.0,"The ""every_tuesday"" column in the supplier_notifications table is a binary flag (0 or 1) indicating whether a supplier should receive recurring notifications every Tuesday. When writing SQL queries, use this column to filter or identify suppliers who have opted into Tuesday notifications (WHERE every_tuesday = 1) or to manage weekly notification scheduling logic."
supplier_notifications,every_wednesday,int,NO,,,0,,,,10.0,0.0,"The ""every_wednesday"" column in the supplier_notifications table is a binary flag (stored as an integer) that indicates whether a supplier should receive recurring notifications every Wednesday. When writing queries, use this column with values 1 (true) or 0 (false) to filter or identify suppliers who have opted into Wednesday notifications, such as ""WHERE every_wednesday = 1"" to find all suppliers scheduled for Wednesday communications."
supplier_notifications,every_thursday,int,NO,,,0,,,,10.0,0.0,"The ""every_thursday"" column in the supplier_notifications table is a binary flag (0 or 1) that indicates whether a supplier should receive recurring notifications every Thursday. When querying this column, use it to filter suppliers based on their Thursday notification preferences, where 1 indicates they should receive Thursday notifications and 0 indicates they should not."
supplier_notifications,every_friday,int,NO,,,0,,,,10.0,0.0,"The ""every_friday"" column in the supplier_notifications table is a binary integer flag (0 or 1) that indicates whether a notification should be sent every Friday for a particular supplier. When querying this column, use it as a boolean condition where 1 represents enabled Friday notifications and 0 represents disabled Friday notifications (e.g., WHERE every_friday = 1 to find suppliers who receive Friday notifications)."
supplier_notifications,every_saturday,int,NO,,,0,,,,10.0,0.0,"The ""every_saturday"" column in the supplier_notifications table is a binary flag (stored as an integer) that indicates whether a supplier should receive notifications every Saturday (1) or not (0). This column helps control the weekly notification scheduling preferences for suppliers and can be used in WHERE clauses to filter suppliers who have opted for Saturday notifications."
supplier_notifications,communication_type,int,NO,,,1,,,,10.0,0.0,"The communication_type column in the supplier_notifications table is a required integer field that categorizes the type or method of communication used for supplier notifications (e.g., 1 for email, 2 for SMS, 3 for in-app notification). When querying this table, you can use this column to filter or group notifications by their communication channel, helping to analyze or manage different types of supplier communications."
supplier_notifications,communication_to,varchar(255),NO,,,,,,255.0,,,"The communication_to column in the supplier_notifications table stores the recipient's contact information (such as email address, phone number, or other communication identifier) for supplier notifications, with a maximum length of 255 characters. This required field (non-nullable) is essential for directing notifications to the correct supplier contact point and should be referenced when querying for specific notification recipients or analyzing communication patterns."
supplier_notifications,communication_language,varchar(3),NO,,,fr,,,3.0,,,"The communication_language column in the supplier_notifications table stores the three-letter ISO language code (e.g., 'eng', 'fra', 'esp') indicating the preferred language for communications with each supplier. This required field ensures that notifications and alerts are delivered in the appropriate language for the supplier, and can be used in SQL queries to filter or group notifications by language preference or to join with language-specific content tables."
supplier_notifications,status,int,NO,,,0,,,,10.0,0.0,"The 'status' column in the supplier_notifications table is a required integer field that tracks the current state of each notification (e.g., pending, sent, read, failed). When writing SQL queries, this column can be used to filter notifications by their current status or to update the notification state as it progresses through different stages of delivery and acknowledgment."
supplier_notifications,created_at,datetime,NO,,,,,,,,,"The created_at column in the supplier_notifications table records the exact date and time when each notification or alert was initially created in the system. This non-nullable datetime field is essential for tracking notification chronology and can be used in SQL queries for filtering notifications by date ranges, ordering messages chronologically, or analyzing notification patterns over time."
supplier_notifications,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the supplier_notifications table records the timestamp of when a notification record was last modified, using a datetime format that captures both the date and time of the update. This non-nullable field is essential for tracking the chronological history of notification changes and can be used in SQL queries for filtering recent updates, sorting notifications by modification time, or analyzing notification update patterns over time."
supplier_notifications,updated_by,int,NO,,,0,,,,10.0,0.0,"The `updated_by` column in the supplier_notifications table stores the user ID (as an integer) of the person who last modified the notification record. This mandatory field (non-nullable) helps track who made changes to notification entries, which is essential for audit trails and accountability in supplier communications."
supplier_notifications_logs,supplier_notifications_logs_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_notifications_logs_id is the primary key column that uniquely identifies each notification record in the supplier_notifications_logs table. This auto-incrementing integer column should be used in JOIN operations when linking notification records to other tables, and in WHERE clauses when querying for specific notification entries."
supplier_notifications_logs,supplier_notifications_id,int,NO,,,0,,,,10.0,0.0,"The supplier_notifications_id column is a non-nullable integer field that uniquely identifies each notification record in the supplier_notifications_logs table. When querying supplier notification history, use this column as a reference point to track specific communication instances or join with related tables."
supplier_notifications_logs,status,int,NO,,,0,,,,10.0,0.0,"The 'status' column in the supplier_notifications_logs table is a required integer field that indicates the current state of a notification sent to a supplier (e.g., 0 for pending, 1 for delivered, 2 for failed, etc.). When querying this column, it can be used to filter or group notifications based on their delivery status, making it useful for monitoring notification success rates or identifying failed communications."
supplier_notifications_logs,details,text,YES,,,,,,65535.0,,,"The 'details' column in the supplier_notifications_logs table stores the complete content or message body of notifications sent to suppliers, allowing for storage of lengthy communication text without size restrictions. This text field can be used in SQL queries to search for specific notification content or to analyze communication patterns, and being nullable means some notification records might not include detailed content."
supplier_notifications_logs,created_at,datetime,NO,,,,,,,,,"The created_at column in the supplier_notifications_logs table stores the exact date and time when each supplier notification was generated and logged in the system. This non-nullable datetime field is essential for chronological tracking and can be used in SQL queries to filter, sort, or analyze notification patterns by time periods (e.g., WHERE created_at BETWEEN '2023-01-01' AND '2023-12-31' or ORDER BY created_at DESC)."
supplier_notifications_logs,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the supplier_notifications_logs table stores the timestamp of when a notification record was last modified, using a datetime format. This mandatory field (non-nullable) helps track the chronological history of changes to notification records and is essential for auditing when supplier communications were updated or modified in the system."
supplier_notifications_logs,updated_by,int,NO,,,0,,,,10.0,0.0,"The `updated_by` column in the supplier_notifications_logs table stores the user ID (as an integer) of the person who last modified the notification record, and this field is required (non-nullable). When writing queries, this column can be used to track who made changes to notification records or to filter notifications based on specific users who updated them, often by joining with a users table to get the actual user details."
supplier_pallet_per_delivery,supplier_pallet_per_delivery_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_pallet_per_delivery_id is the primary key column that uniquely identifies each pallet delivery record in the supplier_pallet_per_delivery table. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific delivery records (e.g., WHERE supplier_pallet_per_delivery_id = X)."
supplier_pallet_per_delivery,warehouse_id,int,NO,,,,,,,10.0,0.0,"The warehouse_id column in the supplier_pallet_per_delivery table is a required integer field that identifies which warehouse received the supplier delivery. When writing queries, this column can be used to filter or group pallet receipt data by specific warehouse locations, making it essential for analyzing delivery patterns and warehouse-specific metrics."
supplier_pallet_per_delivery,created,datetime,NO,,,,,,,,,"The 'created' column in the supplier_pallet_per_delivery table stores the exact date and time when a supplier delivery pallet record was created in the system. This non-nullable datetime field is essential for temporal analysis of supplier deliveries and can be used in SQL queries for filtering, sorting, or grouping pallet records by their creation timestamp."
supplier_pallet_per_delivery,created_by,int,NO,,,1,,,,10.0,0.0,"The created_by column in the supplier_pallet_per_delivery table is a required integer field that stores the ID of the user who created the pallet delivery record. When writing SQL queries, this column can be used to filter or join with user-related tables to track who recorded specific supplier pallet deliveries, and since it's non-nullable, you can always expect a valid user ID value."
supplier_pallet_per_delivery,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the supplier_pallet_per_delivery table is a required integer field that identifies the specific supplier associated with each pallet delivery record. When writing queries, this column can be used to filter or group pallet delivery data by supplier, and it's commonly used to join with other supplier-related tables to access additional supplier information."
supplier_pallet_per_delivery,delivery_date,date,YES,MUL,,,,,,,,"The delivery_date column in supplier_pallet_per_delivery stores the date when a supplier delivery was received, using a standard date format. This column is indexed (MUL) to optimize queries filtering or joining on delivery dates, and can be used to analyze delivery patterns over time or group pallet counts by specific date ranges."
supplier_pallet_per_delivery,estimate_delivery_time,int,NO,,,0,,,,10.0,0.0,"The estimate_delivery_time column in the supplier_pallet_per_delivery table stores the expected delivery duration in minutes for each supplier pallet delivery. This required integer field is essential for delivery planning and performance tracking, allowing queries to analyze and compare estimated delivery times across different supplier shipments."
supplier_pallet_per_delivery,shipping_type,int,NO,,,0,,,,10.0,0.0,"The shipping_type column in supplier_pallet_per_delivery is a required integer field that categorizes the method or type of shipping used for supplier deliveries. When writing queries, this column can be used to filter or group pallet deliveries based on different shipping methods, and since it's non-nullable, you can rely on it always having a value."
supplier_pallet_per_delivery,nb_pallets,tinyint,YES,,,,,,,3.0,0.0,"The nb_pallets column stores the quantity of pallets received in a single supplier delivery as a small integer value (0-255). When writing SQL queries, this column can be used to calculate total pallet counts, analyze delivery sizes, or filter deliveries based on pallet quantity, with NULL values indicating deliveries where the pallet count was not recorded."
supplier_pallet_per_delivery,updated_at,datetime,NO,,,,,,,,,"The updated_at column in the supplier_pallet_per_delivery table stores the timestamp of when a pallet delivery record was last modified, using a datetime format. This non-nullable field is essential for tracking the chronological history of delivery record updates and can be used in SQL queries for filtering recent changes, auditing modifications, or analyzing delivery record maintenance patterns."
supplier_pallet_per_delivery,updated_by,int,NO,,,,,,,10.0,0.0,"The updated_by column in the supplier_pallet_per_delivery table stores the user ID (as an integer) of the person who last modified the pallet delivery record. This mandatory field (non-nullable) is commonly used in WHERE clauses or JOINs with user tables to track who made changes to delivery records, and it's essential for audit trails and accountability in supplier delivery management."
supplier_pallet_per_delivery,nb_pallets_received,int,YES,,,,,,,10.0,0.0,"The nb_pallets_received column stores the integer count of pallets that were received in a single supplier delivery. When writing queries, this column can be used to analyze delivery volumes, calculate averages, or aggregate total pallet counts per supplier, with NULL values indicating deliveries where the pallet count was not recorded."
supplier_pallet_per_delivery,nb_totes_received,int,NO,,,0,,,,10.0,0.0,"The nb_totes_received column in the supplier_pallet_per_delivery table stores the integer count of totes received in each supplier delivery, and this value cannot be null. When writing SQL queries, use this column to analyze or filter delivery volumes based on the number of totes, such as finding deliveries with specific tote quantities or calculating average tote counts per supplier."
supplier_pallet_per_delivery,nb_totes_provided,int,NO,,,0,,,,10.0,0.0,"The nb_totes_provided column represents the number of totes (reusable containers) that were provided during a supplier delivery, stored as a non-null integer value. When writing SQL queries, this column can be used to analyze or aggregate the quantity of totes received per delivery, and since it cannot be null, you don't need to handle null cases in your calculations."
supplier_pallet_per_delivery,prereceived_at,datetime,YES,,,,,,,,,"The prereceived_at column in the supplier_pallet_per_delivery table stores the datetime when pallets were initially logged or pre-received in the system before formal receipt processing. When writing SQL queries, this column can be used to analyze timing patterns of supplier deliveries or filter records based on when pallets were preliminarily registered, with NULL values indicating that pre-receiving hasn't occurred yet."
supplier_pallet_per_delivery,prereceived_by,int,YES,,,,,,,10.0,0.0,"The `prereceived_by` column in the supplier_pallet_per_delivery table stores the ID of the employee or user who performed the initial pallet pre-receiving process for a supplier delivery. This optional integer field can be used in SQL queries to filter or join with user/employee tables to track who handled the preliminary receiving of pallets, making it useful for auditing and workflow analysis."
supplier_pallet_per_delivery,truck_temp,float,YES,,,,,,,12.0,,The truck_temp column stores the temperature reading (in a floating-point format) of the delivery truck at the time of pallet receipt. This optional field is particularly useful when querying temperature-sensitive deliveries or analyzing temperature compliance across supplier shipments.
supplier_propositions,supplier_propositions_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,The supplier_propositions_id is the primary key column that uniquely identifies each proposition or offer made by suppliers in the supplier_propositions table. This integer field is non-nullable and should be referenced when joining with related tables or filtering specific supplier propositions.
supplier_propositions,supplier_id,int,NO,,,,,,,10.0,0.0,"The supplier_id column in the supplier_propositions table is a required integer field that identifies which supplier is associated with each proposition or offer. This column serves as a reference to connect proposition details with specific suppliers, making it essential for queries that need to retrieve or analyze offers from particular suppliers."
supplier_propositions,product_name,varchar(255),NO,,,,,,255.0,,,"The product_name column in the supplier_propositions table stores the name or title of the product or service being proposed by the supplier, with a maximum length of 255 characters. This required field (non-nullable) should be used in SQL queries when you need to filter, group, or identify specific product offerings from suppliers, such as ""SELECT * FROM supplier_propositions WHERE product_name LIKE '%software%'"" to find all software-related propositions."
supplier_propositions,quantity,varchar(50),NO,,,,,,50.0,,,"The 'quantity' column in the supplier_propositions table stores the amount or volume of products/services being offered by the supplier, represented as a text string that can accommodate various unit formats (e.g., ""500 units"", ""2000 kg"", ""100 hours""). When querying this column, be aware that since it's stored as varchar rather than a numeric type, numerical comparisons will require appropriate string handling or conversion functions."
supplier_propositions,conditionning,text,YES,,,,,,65535.0,,,"The ""conditionning"" column in the supplier_propositions table stores text descriptions of how suppliers package, prepare, or present their products or services for delivery or implementation. This column can be used in SQL queries to filter or analyze specific packaging requirements or presentation formats offered by suppliers, though its nullable status means some proposition records may not include this information."
supplier_propositions,unit_price,varchar(50),NO,,,,,,50.0,,,"The unit_price column in the supplier_propositions table stores the price per unit offered by suppliers as a text string, allowing for various price formats and currency representations. This column is mandatory (non-nullable) and should be included when querying for supplier pricing information or comparing offers from different suppliers."
supplier_propositions,delivery_date,date,NO,,,,,,,,,The delivery_date column in the supplier_propositions table represents the date when a supplier's proposition or offer was delivered or submitted to the business. This required (non-nullable) date field is essential for tracking the chronological sequence of supplier proposals and can be useful in queries that need to analyze or filter propositions based on their submission timeline.
supplier_propositions,comments,text,YES,,,,,,65535.0,,,"The 'comments' column in the supplier_propositions table stores additional notes, remarks, or explanations about a supplier's proposition in free-text format. When writing SQL queries, this column can be used to search for specific keywords within proposition notes or to retrieve supplementary information about supplier offers, though its nullable nature means some records may not contain comments."
supplier_propositions,created,datetime,NO,,,,,,,,,"The 'created' column in the supplier_propositions table records the exact date and time when each supplier proposition was initially added to the system. When writing SQL queries, this non-nullable datetime field can be used for temporal filtering and sorting of supplier propositions, such as finding recent proposals or analyzing proposition submission patterns over time."
supplier_propositions,state,int,NO,,,0,,,,10.0,0.0,"The 'state' column in the supplier_propositions table is a required integer field that tracks the current status or stage of a supplier's proposition using numeric codes. This column can be used in WHERE clauses to filter propositions based on their current state (e.g., draft, active, expired) and in JOIN conditions when tracking proposition status changes."
supplier_propositions,unit,varchar(10),YES,,,,,,10.0,,,"The ""unit"" column in the supplier_propositions table specifies the measurement unit (e.g., ""kg"", ""lbs"", ""pcs"", ""hrs"") associated with a supplier's proposition or offer. When writing SQL queries, this column can be used to understand the quantitative context of the proposition, particularly when filtering or grouping offers based on specific units of measurement."
supplier_propositions,image_url,varchar(255),YES,,,,,,255.0,,,"The image_url column in the supplier_propositions table stores web-accessible URLs (up to 255 characters) that link to images related to supplier offers or value propositions. This optional field can be used to reference visual content such as product photos, company logos, or promotional materials that suppliers have provided to support their propositions."
supplier_propositions,always_available,tinyint,YES,,,0,,,,3.0,0.0,"The `always_available` column in the supplier_propositions table is a boolean flag (stored as a tinyint) that indicates whether a supplier's proposition or offer is continuously available or has time restrictions. When querying this column, use 1 to filter for propositions that are permanently available and 0 for those that have limited availability, making it useful for finding consistently available supplier offers."
supplier_users,supplier_user_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_user_id column serves as the primary key in the supplier_users junction table, uniquely identifying each user-supplier association with an integer value. When writing SQL queries, this column can be used to join with other tables or as a reference point for filtering specific user-supplier relationships, though it's typically more common to query using the actual user and supplier IDs that this table maps together."
supplier_users,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The user_id column in the supplier_users table is a required integer field that serves as a foreign key reference to identify specific users who are associated with suppliers. When writing SQL queries, this column can be used to join with the users table and filter or group supplier-user relationships, making it essential for queries that need to track which users are connected to which supplier organizations."
supplier_users,supplier_id,int,NO,MUL,,,suppliers,supplier_id,,10.0,0.0,"The supplier_id column in the supplier_users table is a required foreign key that references the ID of a supplier organization, forming one half of the many-to-many relationship between users and suppliers. When writing SQL queries, this column can be used to join with the suppliers table or to filter/group supplier-user associations by specific supplier organizations."
supplier_vacations,supplier_vacation_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_vacation_id column serves as the primary key for the supplier_vacations table, uniquely identifying each vacation record in the system. When writing SQL queries, use this column for precise record selection or when joining with other tables that reference specific vacation periods."
supplier_vacations,supplier_id,int,NO,MUL,,,suppliers,supplier_id,,10.0,0.0,"The supplier_id column in the supplier_vacations table is a required foreign key that references the primary supplier record for whom the vacation period is being recorded. When writing queries, this column can be used to join with the suppliers table to access supplier details or to filter vacation records for specific suppliers."
supplier_vacations,start_date,date,NO,,,,,,,,,"The start_date column in the supplier_vacations table represents the first day of a supplier's vacation or time-off period and is stored as a date value. This required field (non-nullable) is essential for queries that need to determine when supplier vacation periods begin, making it useful for filtering and date range comparisons in SQL queries (e.g., WHERE start_date >= '2023-01-01')."
supplier_vacations,end_date,date,NO,,,,,,,,,The end_date column in the supplier_vacations table stores the last day of a supplier's vacation or time-off period as a date value. This mandatory field (non-nullable) is essential for determining when suppliers will resume their availability and can be used in SQL queries to filter or identify vacation periods that end on specific dates or within certain date ranges.
supplier_vacations,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the supplier_vacations table stores the timestamp when a supplier's vacation record was initially created in the system, automatically populated with the current date and time. When querying supplier vacation data, this column can be used to filter or sort vacation records by their creation date, or to analyze patterns in when vacation records are typically entered into the system."
supplier_vacations,created_by,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `created_by` column in the supplier_vacations table is a required integer field that stores the user ID of the person who created the vacation record, linking to the users table through a foreign key relationship. This column is commonly used in JOIN operations with the users table to retrieve information about who entered the vacation period, and it's frequently included in WHERE clauses when filtering vacation records by their creator."
supplier_vacations,active,tinyint,YES,,,1,,,,3.0,0.0,The 'active' column in the supplier_vacations table is a boolean flag (stored as tinyint) that indicates whether a supplier's vacation period is currently in effect (1) or not (0). This column can be used in WHERE clauses to filter for only current/active vacation periods or to exclude inactive vacation records from queries.
suppliers,supplier_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_id column is the primary key in the suppliers table, serving as a unique identifier for each supplier/vendor in the system. When writing SQL queries, this column should be used for joining with related tables that reference supplier information, and it's guaranteed to have a non-null integer value for every supplier record."
suppliers,name,varchar(255),YES,,,,,,255.0,,,"The 'name' column in the suppliers table stores the business or legal name of each supplier/vendor as a variable-length text string up to 255 characters. When writing SQL queries, this column is commonly used for searching, filtering, or displaying supplier names, and since it's nullable, queries should handle potential NULL values appropriately using IS NULL or IS NOT NULL conditions when necessary."
suppliers,address,varchar(500),YES,,,,,,500.0,,,"The 'address' column in the suppliers table stores the complete physical or mailing address of each supplier/vendor as a text string, allowing up to 500 characters. This optional field (nullable) can be used in SQL queries to filter or retrieve supplier location information, making it valuable for logistics planning, geographical analysis, or generating shipping documentation."
suppliers,city_id,int,NO,,,,,,,10.0,0.0,"The city_id column in the suppliers table is a required integer field that links each supplier to their specific city location, likely referencing a cities or locations table. This column enables geographical grouping and filtering of suppliers, making it useful in queries that need to analyze supplier distribution by location or find suppliers within specific cities."
suppliers,warehouse_id,int,NO,,,1,,,,10.0,0.0,"The warehouse_id column in the suppliers table is a required integer field that identifies which warehouse a supplier is primarily associated with. This column can be used in JOIN operations to connect supplier records with warehouse-specific data, and it's commonly used in queries that need to filter or group suppliers by their assigned warehouse location."
suppliers,state_id,int,NO,,,1,,,,10.0,0.0,"The state_id column in the suppliers table is a required integer field that represents the state or province where the supplier is located, likely referencing a separate states/provinces lookup table. This column is commonly used in queries for filtering suppliers by geographic region or for generating location-based reports and analytics about supplier distribution."
suppliers,zip_code,varchar(15),NO,,,,,,15.0,,,"The zip_code column in the suppliers table stores postal/ZIP codes for supplier addresses, using a varchar(15) format to accommodate various international postal code formats. This required field is essential for accurate supplier location identification and shipping operations, and should be included in queries involving supplier address validation or geographic-based filtering."
suppliers,city_name,varchar(255),NO,,,,,,255.0,,,"The city_name column in the suppliers table stores the city where each supplier is located, using text values up to 255 characters in length. Since this field is marked as non-nullable, every supplier record must have a city specified, making it a required piece of location information that can be used for geographical filtering, reporting, and logistics planning in supplier-related queries."
suppliers,website,varchar(255),NO,,,,,,255.0,,,"The website column in the suppliers table stores the official web address (URL) of each supplier as a text string, with a maximum length of 255 characters. Since this field is marked as NOT NULL, every supplier record must have a website value, making it a mandatory piece of contact information for all suppliers in the system."
suppliers,logo,varchar(500),YES,,,,,,500.0,,,"The 'logo' column in the suppliers table stores the URL or file path (up to 500 characters) that points to the supplier's logo image file. This optional field can be used in queries when you need to retrieve or display supplier branding assets, and it's commonly referenced when generating supplier profiles, reports, or user interfaces that require visual company identification."
suppliers,telephone,varchar(100),YES,,,,,,100.0,,,"The telephone column in the suppliers table stores contact phone numbers for supplier organizations, accepting various phone number formats up to 100 characters in length. Since this field is nullable, it's important to handle potential NULL values when querying, and it can be used in WHERE clauses or JOIN conditions when searching for or filtering suppliers based on their contact information."
suppliers,email,varchar(500),YES,,,,,,500.0,,,"The email column in the suppliers table stores the primary email address for each supplier/vendor, accepting values up to 500 characters in length. Since this field is nullable, it's not mandatory for every supplier record, but when present, it serves as a key communication identifier that can be used for filtering, contacting, or matching supplier records in queries."
suppliers,description,text,YES,,,,,,65535.0,,,"The description column in the suppliers table contains free-form text that provides detailed information about a supplier, such as their specialties, business focus, or notable characteristics. When querying this column, you can use text-based operations (like LIKE, ILIKE, or full-text search functions) to search for suppliers based on specific keywords or descriptions, though be mindful that the column can contain NULL values."
suppliers,status,tinyint,YES,,,0,,,,3.0,0.0,"The 'status' column in the suppliers table is a tinyint field that indicates the current operational state of a supplier (e.g., active, inactive, pending, suspended) using numeric codes. When writing SQL queries, this column can be used to filter suppliers based on their current status, such as finding all active suppliers or excluding inactive ones, making it particularly useful in WHERE clauses and business logic conditions."
suppliers,uniform_reception,tinyint,NO,,,1,,,,3.0,0.0,"The uniform_reception column in the suppliers table is a boolean flag (stored as tinyint) that indicates whether a supplier requires uniform/standardized receiving procedures. This mandatory field (non-nullable) helps warehouse and receiving teams determine if they need to follow specific standardized protocols when accepting deliveries from this supplier, with 1 typically indicating standardized reception is required and 0 indicating standard procedures can be followed."
suppliers,primary,tinyint,YES,,,0,,,,3.0,0.0,"The 'primary' column in the suppliers table is a boolean flag (stored as tinyint) that indicates whether a supplier is considered a primary/preferred vendor in the system. When writing queries, this column can be used to filter or identify main suppliers (where primary = 1) versus secondary or backup suppliers (where primary = 0), which is particularly useful when prioritizing vendor relationships or generating reports on key suppliers."
suppliers,weight,int,YES,,,0,,,,10.0,0.0,"The 'weight' column in the suppliers table is an optional integer field that likely represents a priority or importance score assigned to each supplier. When writing SQL queries, this column can be used for sorting suppliers by their relative importance (ORDER BY weight) or filtering suppliers based on specific weight thresholds (WHERE weight > X), helping to prioritize or segment suppliers in business operations."
suppliers,slug,varchar(255),NO,,,,,,255.0,,,"The `slug` column in the suppliers table contains URL-friendly versions of supplier names, formatted as lowercase alphanumeric strings with hyphens (e.g., ""acme-corporation"" or ""global-supplies-inc""). This column is commonly used in web applications for creating clean, readable URLs for supplier profile pages and can be used in SQL queries to find suppliers using their URL-friendly identifiers rather than numeric IDs."
suppliers,lead_time,varchar(100),YES,,,,,,100.0,,,"The lead_time column in the suppliers table stores the typical or expected time duration (as a text value) between placing an order with a supplier and receiving the goods or services. This information is crucial for supply chain planning and can be used in SQL queries to filter or analyze suppliers based on their delivery timeframes, though since it's stored as varchar(100), any numerical comparisons would require appropriate type conversion. The nullable nature of this field suggests that lead time information might not be available for all suppliers."
suppliers,shipping_and_handling_fees,tinyint,YES,,,0,,,,3.0,0.0,"The shipping_and_handling_fees column in the suppliers table represents a small numeric value (0-255) indicating the standard shipping and handling fees associated with each supplier. This optional field can be used in SQL queries to filter or analyze suppliers based on their handling charges, or to calculate total costs when combined with order values."
suppliers,region_id,int,NO,,,6,,,,10.0,0.0,"The region_id column in the suppliers table is a required integer field that identifies the geographical region where each supplier operates. This column can be used to filter or group suppliers by their regional location, making it useful for queries that need to analyze supplier distribution or perform region-specific operations, and it likely joins to a regions reference table that contains detailed region information."
suppliers,can_create_sfids,int,NO,,,0,,,,10.0,0.0,"The can_create_sfids column is a boolean-like integer flag (0 or 1) in the suppliers table that indicates whether a supplier has permission to generate their own Supplier Facility IDs (SFIDs) in the system. When querying supplier permissions or filtering suppliers based on SFID creation capabilities, use this column with binary conditions (WHERE can_create_sfids = 1 for authorized suppliers or can_create_sfids = 0 for unauthorized suppliers)."
suppliers,can_adjust_qty_for_sell,int,NO,,,0,,,,10.0,0.0,"The can_adjust_qty_for_sell column is a boolean flag (stored as an integer) that indicates whether a supplier has permission to adjust quantities for sale in the system. When writing SQL queries, use this column with 0 (false) or 1 (true) values to filter suppliers based on their quantity adjustment privileges, such as ""WHERE can_adjust_qty_for_sell = 1"" to find suppliers who can modify sale quantities."
suppliers,lock_status,tinyint,YES,,,1,,,,3.0,0.0,"The lock_status column in the suppliers table is a tinyint flag that indicates whether a supplier's record is currently locked for editing or processing (1) or available for modifications (0). This status helps prevent concurrent modifications to supplier data and can be used in WHERE clauses to filter suppliers based on their editing availability, such as ""WHERE lock_status = 0"" to find suppliers whose records can be modified."
suppliers,lock_status_comment,varchar(140),YES,,,,,,140.0,,,"The lock_status_comment column in the suppliers table stores optional explanatory text (up to 140 characters) that provides context or reasoning for a supplier's lock status, such as reasons for account suspension or hold. This free-text field helps administrators and users understand why specific actions were taken regarding a supplier's account status, making it valuable for audit trails and communication purposes."
suppliers,created_by,int,YES,,,1,,,,10.0,0.0,"The created_by column in the suppliers table is an integer field that stores the user ID of the person who initially created the supplier record in the system. This column can be used in SQL queries to track or filter supplier records based on their creator, and since it's nullable, queries should handle potential NULL values when joining or filtering on this field."
suppliers,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The created_at column in the suppliers table automatically records the timestamp when a supplier record is first created in the system, using CURRENT_TIMESTAMP as the default value. This non-nullable timestamp field is useful for tracking supplier onboarding dates and can be used in SQL queries for temporal analysis, such as filtering suppliers by registration period or analyzing supplier growth patterns over time."
suppliers,last_update_by,int,YES,,,1,,,,10.0,0.0,"The last_update_by column in the suppliers table stores the user ID (as an integer) of the person who most recently modified the supplier record. This optional field helps track changes and maintain audit trails by identifying which user made the last update to a supplier's information, making it useful in queries that need to track data modifications or filter suppliers based on who updated them."
suppliers,last_update_at,timestamp,NO,,,0000-00-00 00:00:00,,,,,,"The last_update_at column in the suppliers table is a mandatory timestamp field that records when a supplier's information was last modified, making it useful for tracking data freshness and changes over time. This column can be effectively used in SQL queries for auditing purposes, filtering suppliers based on update recency, or identifying records that need review based on their last modification date."
suppliers,GST,varchar(20),YES,,,,,,20.0,,,"The GST column in the suppliers table stores the Goods and Services Tax (GST) registration number or identifier for each supplier, formatted as a variable-length string up to 20 characters. This optional field (nullable) is commonly used in financial and tax-related queries, particularly when generating invoices or tax reports, and can be used to validate supplier tax compliance or filter suppliers based on their GST registration status."
suppliers,PST,varchar(20),YES,,,,,,20.0,,,"The PST column in the suppliers table stores the Provincial Sales Tax (PST) registration number or identifier for suppliers, particularly relevant for those operating in Canadian provinces that collect PST. When writing SQL queries, this column can be used to filter or identify suppliers based on their PST registration status, though its nullable property indicates that not all suppliers will necessarily have a PST number."
suppliers,terms_conditions_approved_by,int,YES,,,,,,,10.0,0.0,"The terms_conditions_approved_by column in the suppliers table stores the employee ID (as an integer) of the staff member who approved the supplier's terms and conditions. This optional field helps track accountability and compliance in the supplier onboarding process, and can be used to join with an employees table to get details about who authorized the supplier's terms and conditions."
suppliers,terms_conditions_approved_at,datetime,YES,,,,,,,,,"The terms_conditions_approved_at column records the specific date and time when a supplier formally accepted or agreed to the system's terms and conditions. This timestamp can be used in SQL queries to filter suppliers based on their acceptance status (NULL indicating pending acceptance) or to track when suppliers last updated their agreement, making it useful for compliance reporting and supplier onboarding status checks."
suppliers,terms_conditions_approved_ip,varchar(100),YES,,,,,,100.0,,,"This column stores the IP address from which a supplier approved or accepted the system's terms and conditions, providing an audit trail for legal compliance purposes. When writing queries involving supplier agreement verification, you can use this column to track when and from where suppliers gave their consent, though note that the field may be NULL for legacy suppliers or those still pending approval."
suppliers,time_before_automated_sfid_cancelation,int,YES,,,0,,,,10.0,0.0,"This column specifies the number of time units (likely minutes or hours) before a supplier's SFID (Supplier Facility ID) is automatically canceled in the system if certain conditions are not met. When writing queries, this field can be used to identify suppliers at risk of SFID cancellation or to automate cancellation workflows, with NULL values potentially indicating that automatic cancellation is not applicable for those suppliers."
suppliers,pay_name,varchar(500),YES,,,,,,500.0,,,"The pay_name column in the suppliers table stores the payment or legal business name of the supplier, which may differ from their trading name and is specifically used for financial transactions and documentation. This field allows for lengthy business names up to 500 characters and can be left empty (NULL) if not applicable or not yet provided, making it suitable for storing formal company names including legal entities and suffixes (e.g., ""ABC Corporation Pty Ltd"" or ""Smith & Sons Trading Company LLC"")."
suppliers,preferred_payment_type,tinyint,YES,,,,,,,3.0,0.0,"The preferred_payment_type column in the suppliers table is a tinyint field that indicates the supplier's preferred method of receiving payments, likely using a predefined code system (e.g., 1 for direct deposit, 2 for check, etc.). When writing queries, this column can be used to filter or group suppliers based on their payment preferences, though the field is optional as indicated by its nullable status."
suppliers,warehouse_address,varchar(500),YES,,,,,,500.0,,,"The warehouse_address column in the suppliers table stores the physical location address of a supplier's warehouse or distribution center as a text string up to 500 characters long. This optional field (nullable) can be used in queries to filter or retrieve suppliers based on their warehouse locations, which is particularly useful for logistics planning and geographical analysis of the supplier network."
suppliers,warehouse_state_id,int,YES,,,,,,,10.0,0.0,"The warehouse_state_id column in the suppliers table is a nullable integer field that identifies the state/province where a supplier's warehouse is located, likely referencing a separate states/provinces lookup table. This column helps in geographical organization and filtering of suppliers based on their warehouse locations, which is useful for logistics planning and regional supplier analysis."
suppliers,warehouse_zip_code,varchar(15),YES,,,,,,15.0,,,"The warehouse_zip_code column in the suppliers table stores the postal/ZIP code of the supplier's warehouse location using a variable-length string format that accommodates up to 15 characters. This optional field (as indicated by being nullable) can be used in queries to filter or group suppliers by geographic location, particularly useful for logistics planning or regional analysis of supplier distribution."
suppliers,warehouse_city_name,varchar(255),YES,,,,,,255.0,,,"The warehouse_city_name column in the suppliers table stores the name of the city where a supplier's warehouse or primary distribution facility is located, using text values up to 255 characters in length. Since this field is nullable, it can be left empty for suppliers without a specific warehouse location, making it useful in queries that need to filter or group suppliers based on their geographical warehouse presence."
suppliers,pickup_order,tinyint,NO,,,0,,,,3.0,0.0,"The pickup_order column in the suppliers table is a required boolean flag (tinyint) that indicates whether a supplier allows pickup orders (1) or not (0). This field is essential for filtering and identifying suppliers that support self-pickup options, making it useful in queries that need to match supplier capabilities with order fulfillment requirements."
suppliers,restricted_to_lufa,int,NO,,,0,,,,10.0,0.0,"The restricted_to_lufa column is a binary flag (stored as an integer) in the suppliers table that indicates whether a supplier is exclusively restricted to working with Lufa. When writing queries, use this column with values 0 (not restricted) or 1 (restricted to Lufa) to filter suppliers based on their exclusivity status, such as ""WHERE restricted_to_lufa = 1"" to find Lufa-exclusive suppliers."
suppliers,default_shipping_method,int,YES,,,,,,,10.0,0.0,"The default_shipping_method column in the suppliers table stores an integer value representing the preferred or standard shipping method associated with each supplier. This optional field helps streamline order processing by automatically suggesting the supplier's usual shipping preference, and it can be referenced when creating new purchase orders or managing deliveries from the supplier."
suppliers,default_arrival_time,int,NO,,,1,,,,10.0,0.0,"The default_arrival_time column in the suppliers table represents the standard time (likely in minutes from midnight or a specific reference point) when deliveries from a supplier typically arrive at the facility. This required integer field helps in scheduling and logistics planning, allowing the system to automatically set expected delivery windows and coordinate receiving operations based on each supplier's usual arrival pattern."
suppliers,purchasing_automation_status,smallint,YES,,,0,,,,5.0,0.0,"The purchasing_automation_status column in the suppliers table indicates the level or state of automation enabled for purchasing processes with each supplier, stored as a small integer value. This field helps determine how purchase orders and related transactions are handled automatically within the system, where different status values likely represent varying degrees of automation (e.g., fully automated, semi-automated, or manual processing)."
suppliers,purchasing_automation_autonomy_level,smallint,YES,,,0,,,,5.0,0.0,"The purchasing_automation_autonomy_level column in the suppliers table indicates the degree of automated purchasing allowed for each supplier, stored as a small integer value. This setting helps determine how much manual oversight is required for purchase orders with this supplier, where higher values typically represent greater automation privileges and lower values indicate more manual control requirements."
suppliers,address_lat,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The address_lat column in the suppliers table stores the latitude coordinate of a supplier's physical location using a decimal format with 8 decimal places of precision. This geographical data point can be used in SQL queries for location-based filtering, distance calculations, or mapping functionalities, and can be left NULL if the precise coordinates are not available or not required for a particular supplier."
suppliers,address_lng,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The address_lng column in the suppliers table stores the longitudinal coordinate of a supplier's physical location using decimal degrees, with precision up to 8 decimal places. This geographical data point can be used in spatial queries to calculate distances, determine delivery routes, or find suppliers within specific geographical regions, and is typically paired with address_lat (latitude) for complete location mapping."
suppliers,wh_lat,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The wh_lat column in the suppliers table stores the warehouse latitude coordinates of a supplier's location using a decimal format with 8 decimal places of precision. This geographical data point can be used in SQL queries for location-based searches, distance calculations, or mapping functionalities, particularly when paired with longitude coordinates to pinpoint exact supplier warehouse locations."
suppliers,wh_lng,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The wh_lng column in the suppliers table stores the longitude coordinate of the supplier's warehouse or primary business location as a decimal number with 8 decimal places of precision. This geographical data point can be used in spatial queries to calculate distances, determine delivery routes, or find nearby suppliers, and is typically paired with a corresponding latitude coordinate for complete location mapping."
suppliers,netsuite_vendor_id,int,YES,,,,,,,10.0,0.0,"The netsuite_vendor_id column in the suppliers table stores the unique identifier that corresponds to the vendor's record in NetSuite, an external ERP system. This optional integer field enables cross-referencing between the internal supplier database and NetSuite's vendor records, making it useful for queries that need to sync or validate data between the two systems."
suppliers,netsuite_customer_id,int,YES,,,,,,,10.0,0.0,"The netsuite_customer_id column in the suppliers table stores the unique identifier that corresponds to the supplier's account in NetSuite, an external ERP system. This optional integer field enables cross-referencing between the internal supplier records and their corresponding NetSuite customer accounts, which is particularly useful when writing queries that need to sync or validate data between the two systems."
suppliers,rpc_handling_billing,tinyint,NO,,,0,,,,3.0,0.0,"The rpc_handling_billing column in the suppliers table is a required boolean/flag field (tinyint) that indicates whether a supplier handles RPC (Reusable Plastic Container) billing. This field helps in identifying suppliers who manage their own RPC billing processes versus those who don't, which is crucial for accurate billing and container management workflows."
suppliers,rpc_handling_fee,"float(7,4) unsigned",NO,,,0.0000,,,,7.0,4.0,"The rpc_handling_fee column in the suppliers table stores the standardized handling fee rate (as a decimal number with up to 4 decimal places) that applies to returnable packaging containers (RPC) for each supplier. This non-nullable field, which defaults to 0.0000, is used to calculate additional charges associated with the handling and processing of returnable packaging materials in supplier transactions. When querying this column, you can use it for fee calculations or filtering suppliers based on their RPC handling rates, keeping in mind that the values are always positive due to the unsigned constraint."
suppliers,rpc_consignment_billing,tinyint,NO,,,0,,,,3.0,0.0,"The rpc_consignment_billing column in the suppliers table is a required boolean/flag field (tinyint) that indicates whether a supplier uses consignment billing for RPC (Reusable Plastic Container) transactions. When writing queries, this column can be used to filter or segment suppliers based on their RPC consignment billing status, where 0 typically indicates disabled/no and 1 indicates enabled/yes."
suppliers,rpc_consignment_fee,"float(7,4) unsigned",NO,,,0.0000,,,,7.0,4.0,"The rpc_consignment_fee column in the suppliers table stores the percentage-based fee (as a decimal between 0 and 999.9999) that applies to consignment transactions with this supplier. This non-nullable field defaults to 0.0000 and is used to calculate consignment-related costs or revenue sharing arrangements between the organization and the supplier, making it essential for financial calculations and supplier payment processing."
suppliers,via_3pl,tinyint,NO,,,0,,,,3.0,0.0,"The via_3pl column in the suppliers table is a boolean flag (stored as a tinyint) that indicates whether a supplier operates through a third-party logistics provider (3PL). When writing queries, use this column with values 0 (supplier handles their own logistics) or 1 (supplier uses 3PL services) to filter or segment suppliers based on their logistics arrangement."
suppliers,name_3pl,varchar(250),YES,,,,,,250.0,,,"The name_3pl column in the suppliers table stores the name of the third-party logistics (3PL) provider associated with a supplier, if applicable. This optional field (as indicated by being nullable) can be used in queries to filter or identify suppliers based on their 3PL partnerships, and is particularly useful when analyzing supplier logistics arrangements or generating reports about third-party shipping relationships."
suppliersLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The l_id column serves as the primary key in the suppliersLang table, uniquely identifying each language-specific supplier record. This non-nullable integer column is essential for maintaining data integrity and establishing relationships when querying multilingual supplier information."
suppliersLang,supplier_id,int,NO,MUL,,,suppliers,supplier_id,,10.0,0.0,"The supplier_id column in the suppliersLang table serves as a foreign key that links to the primary supplier record in the main suppliers table. This column is essential for joining language-specific supplier details with their corresponding base supplier information, and since it's non-nullable, every localized supplier record must be associated with a valid supplier."
suppliersLang,lang_id,varchar(10),NO,MUL,,,,,10.0,,,"The lang_id column in the suppliersLang table stores language codes (e.g., 'en', 'es', 'fr') to identify the language of supplier translations, using a varchar(10) format. This column is part of a composite key (indicated by MUL) and is required (non-nullable), typically used in WHERE clauses or JOINs to filter or retrieve supplier information in specific languages."
suppliersLang,l_name,varchar(255),NO,,,,,,255.0,,,"The l_name column in the suppliersLang table stores the localized (translated) name of a supplier in different languages, with a maximum length of 255 characters. This required field is essential for multilingual applications that need to display supplier names in various languages, and it should be used in conjunction with a language identifier to retrieve the appropriate translation for a specific locale."
suppliersLang,l_description,text,YES,,,,,,65535.0,,,"The l_description column in the suppliersLang table stores localized, text-based descriptions of suppliers in different languages, allowing for detailed supplier information to be maintained in multiple languages. When querying this column, you can join it with the main suppliers table using supplier_id and filter by the desired language code to retrieve language-specific supplier descriptions."
suppliersLang,l_slug,varchar(255),NO,,,,,,255.0,,,"The l_slug column in the suppliersLang table stores language identifiers (like 'en', 'es', 'fr') as text strings, indicating which language version each supplier record represents. This column is required (non-nullable) and should be used in WHERE clauses or JOINs when filtering supplier information for specific language versions, such as ""WHERE l_slug = 'en'"" to retrieve English-language supplier details."
suppliers_certifications,supplier_certification_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The supplier_certification_id column serves as the primary key in the suppliers_certifications table, uniquely identifying each certification record associated with a supplier. This non-nullable integer field should be used in JOIN operations when linking certification details to other supplier-related tables and is essential for tracking individual certification entries."
suppliers_certifications,supplier_id,int,NO,,,,,,,10.0,0.0,The supplier_id column in the suppliers_certifications table serves as a reference to uniquely identify which supplier each certification record belongs to. This required integer field enables joining certification data with other supplier-related tables and is essential for querying or filtering certification records for specific vendors.
suppliers_certifications,certification_id,int,NO,,,,,,,10.0,0.0,The certification_id column serves as a unique identifier for each certification record in the suppliers_certifications table. This integer field is required (non-nullable) and should be referenced when joining with related tables or filtering specific certification records.
suppliers_certifications,status,int,YES,,,1,,,,10.0,0.0,"The 'status' column in the suppliers_certifications table is an integer field that indicates the current state of a supplier's certification or compliance document, likely using predefined status codes (e.g., 1 for active, 0 for inactive). When querying this column, it can be used to filter for specific certification states or to verify if suppliers' certifications are currently valid."
suppliers_certifications,file_url,varchar(255),NO,,,,,,255.0,,,"The file_url column in the suppliers_certifications table stores the web-accessible URL or file path where the actual certification document can be accessed, with a maximum length of 255 characters. This required field (non-nullable) can be used in SQL queries to retrieve or validate document locations, and is commonly used in JOIN operations when needing to access the underlying certification documentation for supplier compliance verification."
suppliers_certifications,expiration_date,date,YES,,,,,,,,,"The expiration_date column in the suppliers_certifications table stores the date when a supplier's specific certification or compliance document becomes invalid or needs renewal. This column is commonly used in date comparison queries to identify expired or soon-to-expire certifications, making it useful for filtering with WHERE clauses (e.g., WHERE expiration_date < CURRENT_DATE for expired certifications) or in reporting queries that track certification status."
suppliers_rpc,suppliers_rpc_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The suppliers_rpc_id column serves as the primary key for the suppliers_rpc table, uniquely identifying each RPC configuration record associated with suppliers. When writing SQL queries, use this column for precise record identification, joining with related tables, or filtering specific RPC configurations, such as ""WHERE suppliers_rpc_id = [value]""."
suppliers_rpc,supplier_id,int,NO,MUL,,,suppliers,supplier_id,,10.0,0.0,"The supplier_id column in the suppliers_rpc table serves as a foreign key that links to the primary supplier record in the suppliers table, ensuring each RPC configuration is associated with a specific supplier. This non-nullable integer field is indexed (MUL) to optimize join operations and lookups when querying supplier-specific RPC settings."
suppliers_rpc,tote_format_id,int,NO,,,,,,,10.0,0.0,"The tote_format_id column in the suppliers_rpc table is a required integer field that specifies the format or configuration of totes used in the supplier's RPC system. When writing queries, this column can be used to filter or group RPC configurations based on specific tote format requirements, and since it's non-nullable, you should always include a value when inserting new records."
suppliers_rpc,rpc_in_ordered,int,NO,,,0,,,,10.0,0.0,"The column `rpc_in_ordered` in the `suppliers_rpc` table indicates whether the Remote Procedure Calls (RPC) for a supplier are processed in a sequential order. This column is of type integer (presumably indicated as ""in/t"" due to a typo, and should be ""int"") and cannot contain null values, ensuring that every record specifies if ordering is enforced or not. This column can be used in SQL queries to filter or sort suppliers based on their RPC processing order requirements."
suppliers_rpc,rpc_in_accepted,int,NO,,,0,,,,10.0,0.0,"The `rpc_in_accepted` column in the `suppliers_rpc` table is an integer column that indicates whether incoming RPC (Remote Procedure Call) requests are accepted for a specific supplier. This column cannot contain null values. In SQL queries, this column can be used to filter or update the RPC acceptance status for suppliers. For example, you might check which suppliers accept incoming RPCs by querying suppliers where `rpc_in_accepted` is set to 1."
suppliers_rpc,rpc_out,int,NO,,,0,,,,10.0,0.0,"The `rpc_out` column in the `suppliers_rpc` table is an integer field that specifies the configuration or setting related to the output of Remote Procedure Calls (RPCs) for each supplier. Since this column is marked as non-nullable, every record in the `suppliers_rpc` table must have a valid integer value for `rpc_out`. This column can be used in SQL queries to filter, sort, or perform calculations related to the RPC output settings for suppliers, ensuring that any data manipulation or retrieval operation concerning RPC outputs is accurately directed by the values stored in `rpc_out`."
suppliers_rpc,date,date,YES,MUL,,,,,,,,"The `date` column in the `suppliers_rpc` table is of data type `date` and can store the specific date associated with RPC configurations and settings for a supplier. This column is nullable, meaning it can hold null values if the date is not specified. It is indexed (as indicated by the key type 'MUL'), which allows for more efficient queries involving this column, particularly useful for filtering or sorting records based on the date of RPC configuration changes or implementations. When constructing SQL queries, this column can be used to retrieve or manipulate records based on specific dates, enhancing the ability to track changes over time or coordinate updates according to the schedule."
suppliers_shipment_comments,comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `comment_id` column in the `suppliers_shipment_comments` table is an integer-type field that uniquely identifies each record in the table. As it is marked as a primary key (PRI) and is not nullable, each comment must have a unique `comment_id` that cannot be null. This column is essential for uniquely referencing and managing individual comments in SQL queries, ensuring data integrity and facilitating efficient data retrieval and modification related to supplier shipment feedback."
suppliers_shipment_comments,sfo_orders_id,int,NO,,,,,,,10.0,0.0,"The column `sfo_orders_id` in the `suppliers_shipment_comments` table is an integer type and cannot contain null values, indicating that it is essential for every record in this table. Although not currently a key in any relational schema, this column likely represents a unique identifier or reference to specific orders, potentially linking comments to particular supplier shipments. When constructing SQL queries, use `sfo_orders_id` to filter or associate comments with specific shipment orders, enhancing the ability to track and analyze feedback or communication related to supplier deliveries."
suppliers_shipment_comments,comment,varchar(500),YES,,,,,,500.0,,,"The `comment` column in the `suppliers_shipment_comments` table is used to store textual feedback or notes related to supplier shipments and deliveries, with each entry allowing up to 500 characters. As a `varchar(500)` field that supports null values, it can be utilized in SQL queries to insert, update, or analyze shipment-related comments, providing flexibility in managing optional detailed descriptions or observations without requiring a link to other tables. This column is essential for maintaining a record of communications and feedback in the context of supplier interactions."
suppliers_shipment_comments,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `suppliers_shipment_comments` table is an integer data type and cannot contain null values. This column is used to identify the user who made the comment or note regarding a supplier shipment or delivery. When constructing SQL queries, this column can be used to filter or join comments based on specific users, although it is not a key in the table and does not have direct relationships with other tables as of now."
suppliers_shipment_comments,delivery_date,date,NO,,,,,,,,,"The `delivery_date` column in the `suppliers_shipment_comments` table is a date type field that records the specific date associated with a supplier's shipment or delivery comment. This column is mandatory (non-nullable), ensuring that every comment recorded in the table is linked to a specific date. In SQL queries, this column can be used to filter, sort, or group comments based on the date of the shipment or delivery, facilitating temporal analysis of supplier feedback and communication."
suppliers_shipment_comments,created_at,timestamp,NO,,,,,,,,,"The `created_at` column in the `suppliers_shipment_comments` table is of type `timestamp` and cannot be null. This column records the exact date and time when each comment or note was added to the system, providing a chronological history of feedback and communication about supplier shipments and deliveries. In SQL queries, this column can be used to filter, sort, or group records based on when they were created, enabling analysis of comments over specific time periods."
support_issue_comments,support_issue_comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `support_issue_comment_id` column in the `support_issue_comments` table serves as the primary key, uniquely identifying each comment made by support staff on customer support issues. This integer column is non-nullable, ensuring that every comment record has a unique identifier. Use this column in SQL queries to specifically target, reference, or differentiate individual comments, particularly when joining with other tables like `support_issues` or `users` to gather detailed context about the support interactions."
support_issue_comments,support_issue_id,int,NO,MUL,,,support_issues,support_issue_id,,10.0,0.0,"The `support_issue_id` column in the `support_issue_comments` table is an integer field that serves as a foreign key linking each comment to a specific support issue in the `support_issues` table. This column is not nullable, ensuring that every comment is associated with a support issue. It is used in SQL queries to join the `support_issue_comments` table with the `support_issues` table to retrieve or analyze comments related to specific support issues."
support_issue_comments,staff_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `staff_id` column in the `support_issue_comments` table is an integer-type field that identifies the support staff member who made a comment or update on a customer support issue. This column is not nullable, indicating that every comment must be associated with a staff member. It is also marked as a multiple key (`MUL`), suggesting it can be used to join this table with the `users` table to retrieve more information about the staff member, such as their name or contact details. This column is crucial for tracking which staff member is responsible for specific comments and actions within the customer support process."
support_issue_comments,body,text,YES,,,,,,65535.0,,,"The `body` column in the `support_issue_comments` table stores the textual content of comments made by support staff regarding customer support issues. This column can hold variable-length text and is nullable, meaning that a comment entry can be made without any text content. In SQL queries, this column is used to retrieve, filter, or update the descriptive information provided by staff in their communications about specific support issues."
support_issue_comments,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `created_at` column in the `support_issue_comments` table is of type `timestamp` and records the date and time when each comment was added by a support staff member. This column automatically captures the current timestamp when a new record is inserted, as indicated by the `CURRENT_TIMESTAMP` default setting. Since the column is not nullable, every entry in the `support_issue_comments` table must have a timestamp, ensuring that the timing of each comment is always recorded and can be used in SQL queries to sort or filter comments based on when they were made."
support_issue_types,support_issue_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `support_issue_type_id` in the `support_issue_types` table is an integer column that serves as the primary key, uniquely identifying each record of standardized issue categories for customer support tickets. It is not nullable, ensuring that every record has a valid identifier. This column is essential for linking and retrieving specific issue types in SQL queries when categorizing or analyzing support tickets in related tables."
support_issue_types,name,varchar(255),YES,,,,,,255.0,,,"The `name` column in the `support_issue_types` table is a varchar(255) field that can store textual descriptions of various issue categories for customer support tickets. This column can be used in SQL queries to filter, sort, or group customer support tickets by their categorized issue types. Since it is nullable, SQL queries should account for the possibility of null values, which might represent uncategorized or unspecified issues."
support_issue_typesLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column in the `support_issue_typesLang` table is an integer type primary key that uniquely identifies each record. This column is essential for distinguishing between different localized entries of support issue types and categories, ensuring that each translation or version is uniquely accessible. Since it is set as a primary key and is not nullable, every entry in the table must have a unique `l_id` value, which cannot be left blank. This column is crucial for performing SQL operations that involve joining or referencing specific localized entries in queries."
support_issue_typesLang,support_issue_type_id,int,NO,,,,,,,10.0,0.0,"The column `support_issue_type_id` in the `support_issue_typesLang` table is an integer type identifier used to link translated support issue types to their corresponding entries in another table that lists all possible support issues. This column is non-nullable, meaning every record in the `support_issue_typesLang` table must have a valid `support_issue_type_id` value, ensuring that each translation is always associated with a specific support issue type. This column is essential for SQL queries intended to retrieve or manage localized information about support issues, allowing for joins with other tables to gather comprehensive details about support issues across different languages."
support_issue_typesLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the `support_issue_typesLang` table is used to specify the language of the support issue types and categories. This column, of type `varchar(10)`, must always have a value (non-nullable) and identifies the language version of each entry, enabling the system to retrieve and display support issue information in the appropriate language. This is crucial for systems that need to handle support queries in multiple languages, ensuring that users see data in their preferred language."
support_issue_typesLang,l_name,varchar(128),NO,,,,,,128.0,,,"The `l_name` column in the `support_issue_typesLang` table contains the localized or translated names of support issue types and categories, stored as a non-nullable varchar(128) data type. This column is essential for retrieving and displaying support issue classifications in the user's preferred language, ensuring that the support system is accessible and understandable to users of different linguistic backgrounds. In SQL queries, this column can be used to filter or join data based on specific localized issue types, enhancing the systemâs ability to categorize and manage support tickets effectively in multiple languages."
support_issues,support_issue_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `support_issue_id` column in the `support_issues` table is an integer-type primary key that uniquely identifies each customer support ticket. This column is not nullable, ensuring that every ticket must have a unique identifier. In SQL queries, `support_issue_id` can be used to join the `support_issues` table with other related tables like `support_issue_comments` or to retrieve, update, or delete specific records based on the ticket's unique ID."
support_issues,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `user_id` column in the `support_issues` table is an integer that uniquely identifies users associated with each support ticket. It is a non-nullable field, meaning every ticket must be linked to a user. As a key with the type 'MUL', it suggests that `user_id` acts as a foreign key referencing the `users` table, thus enabling joins to fetch user-related information. This column is crucial for queries aiming to analyze or retrieve support tickets based on specific users or to understand user-specific support trends."
support_issues,support_issue_type_id,int,NO,,,,,,,10.0,0.0,"The `support_issue_type_id` column in the `support_issues` table is an integer that categorizes the type of support issue reported. This column is not nullable, meaning every record in the table must have a valid issue type ID. This ID can be used in SQL queries to join with other tables that define these types, filter reports by issue type, or aggregate data to analyze the frequency of different types of support issues."
support_issues,priority,int,YES,,,,,,,10.0,0.0,"The `priority` column in the `support_issues` table represents the urgency or importance level of a customer support ticket, stored as an integer. This column can be used in SQL queries to sort or filter tickets based on their priority, facilitating prioritized handling of issues. Since it is nullable, SQL queries should account for the possibility of missing priority values in some records."
support_issues,due_date,date,YES,,,,,,,,,"The `due_date` column in the `support_issues` table is of data type `date` and can contain null values. This column is used to store the expected resolution date for each customer support ticket. In SQL queries, `due_date` can be used to filter or sort tickets based on their scheduled resolution timeline, helping in managing and prioritizing support issues effectively."
support_issues,resolved,tinyint,YES,,,0,,,,3.0,0.0,"The `resolved` column in the `support_issues` table is a `tinyint` data type that indicates whether a support ticket has been resolved (1) or not (0). This column can be nullable, meaning that there may be instances where the resolution status is unknown or not yet determined. In SQL queries, this column can be used to filter or update records based on their resolution status, aiding in the management and analysis of support tickets."
support_issues,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `created_at` column in the `support_issues` table is used to record the timestamp when a customer support ticket is created. This column is of the data type `timestamp` and automatically captures the current timestamp (`CURRENT_TIMESTAMP`) when a new ticket is entered into the database. Since the `created_at` column is not nullable, every record in the `support_issues` table must have a timestamp indicating when it was created, ensuring that the timing of each support issue is tracked without fail. This information can be crucial for generating reports, analyzing response times, and monitoring the efficiency of the support team."
support_issues,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the `support_issues` table is an integer field that can optionally store the identifier of the user who created the support ticket. This column allows SQL queries to associate each ticket with the user responsible for its creation, which can be useful for tracking, reporting, or analyzing tickets based on who initiated them. Since it is nullable, some tickets might not have an associated creator, which should be considered when performing data analysis or generating reports."
support_issues,resolved_at,datetime,YES,,,,,,,,,"The `resolved_at` column in the `support_issues` table is used to store the datetime when a customer support ticket is resolved. This column is of type datetime and can be nullable, indicating that it is optional and may not be filled until the ticket is actually resolved. In SQL queries, this column can be used to filter or analyze tickets based on their resolution time, for instance, to find tickets resolved within a specific time frame or to calculate the average resolution time for tickets."
survey,survey_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `survey_id` column in the `survey` table serves as a primary key, meaning it uniquely identifies each record in the table. This integer column is non-nullable, ensuring that every survey record has a unique identifier. The `survey_id` is used to link the `survey` table with the `survey_question_categories` table, facilitating the organization of surveys into different categories or sections by referencing this ID in SQL queries."
survey,title,varchar(255),NO,,,,,,255.0,,,"The `title` column in the `survey` table is used to store the title of each survey as a string of text up to 255 characters long. This column is essential for identifying and differentiating surveys and cannot contain null values, ensuring every survey has a title. In SQL queries, the `title` column can be used to select, filter, or sort survey data based on the survey's title, enhancing the ability to organize and retrieve survey information efficiently."
survey,description,text,YES,,,,,,65535.0,,,"The `description` column in the `survey` table contains textual descriptions of individual surveys. This column, which can accept NULL values, provides additional context or details about the survey's purpose or content. In SQL queries, the `description` field can be used to retrieve, filter, or update the explanatory text associated with specific surveys, enhancing the ability to manage or categorize surveys based on their content description."
survey,year,int,NO,,,,,,,10.0,0.0,"The `year` column in the `survey` table is of data type integer and is used to store the year in which each survey was created or pertains to. Since it is not nullable, every record in the `survey` table must include a valid year. This column can be used in SQL queries to filter or analyze surveys based on the year, facilitating temporal comparisons and trend analysis across different surveys."
survey,start_date,date,NO,,,,,,,,,"The `start_date` column in the `survey` table holds the date when each survey commenced, stored in a date format. This column is essential for filtering and sorting surveys based on their initiation dates in SQL queries. Since it is not nullable, every survey in the database must have a defined start date, ensuring complete temporal data for analysis or reporting purposes."
survey,expiry_date,date,NO,,,,,,,,,"The `expiry_date` column in the `survey` table represents the date on which a survey is no longer active or valid. As a non-nullable date field, every entry in this table must have a specific expiry date assigned. This column can be used in SQL queries to filter out surveys that are past their expiry date, ensuring that only current and upcoming surveys are considered in any data analysis or operational processes involving survey data."
survey,created_at,timestamp,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `created_at` column in the `survey` table is of type `timestamp` and records the date and time when each survey was created. This column is set to automatically capture the current timestamp when a new survey record is inserted, due to the `CURRENT_TIMESTAMP` default value. In SQL queries, this column can be used to filter, sort, or group survey records based on their creation times, enabling analyses such as finding surveys created within a specific timeframe or tracking survey creation trends over time."
survey,updated_at,timestamp,YES,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `survey` table is of type `timestamp` and records the date and time when a survey record was last updated. This column is set to automatically capture the current timestamp whenever a survey record is modified. In SQL queries, this column can be used to track changes, filter, or sort surveys based on their latest update times."
survey_answers,survey_answer_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `survey_answer_id` column in the `survey_answers` table is an integer column that serves as the primary key. This column uniquely identifies each record in the table, ensuring that each response from the surveys or questionnaires can be distinctly referenced. As a non-nullable primary key, every record must have a unique `survey_answer_id`, which is essential for linking responses to specific questions and respondents, and for performing efficient searches, joins, and data integrity checks in SQL queries."
survey_answers,survey_question_id,int,NO,MUL,,,,,,10.0,0.0,"The `survey_question_id` column in the `survey_answers` table is an integer that acts as a foreign key linking each survey answer to its corresponding question. This column is not nullable, indicating that every record in the `survey_answers` table must have a valid `survey_question_id` associated with it. The 'MUL' key type suggests that this column is indexed and can be used efficiently in SQL queries to join the `survey_answers` table with other tables that contain detailed information about the survey questions, enhancing query performance and facilitating complex data analysis across multiple tables."
survey_answers,user_id,int,NO,MUL,,,,,,10.0,0.0,"The `user_id` column in the `survey_answers` table is an integer field that uniquely identifies each respondent. This column is not nullable, indicating that every record in the table must have a `user_id` value associated with it. Since it is marked with a key type of MUL (multiple), this column can be used in SQL queries to join with other tables that contain a `user_id` field, enabling analysis of responses by individual users."
survey_answers,rating,tinyint,NO,,,0,,,,3.0,0.0,"The `rating` column in the `survey_answers` table is used to store numerical ratings from survey or questionnaire responses, represented as a `tinyint` data type, which allows for small integer values. This column is not nullable, indicating that every record in the `survey_answers` table must include a rating value. You can use this column in SQL queries to analyze or aggregate ratings data, such as calculating average ratings for specific questions or filtering responses based on rating values."
survey_answers,comment,text,YES,,,,,,65535.0,,,"The `comment` column in the `survey_answers` table is of type `text` and can store optional textual data, as indicated by its nullable property. This column is typically used to capture any additional remarks or open-ended responses provided by respondents in a survey. In SQL queries, this column can be utilized to extract, filter, or analyze these textual comments to gain further insights into respondent feedback or to perform qualitative analysis of survey data."
survey_answers,created,date,NO,,,,,,,,,"The `created` column in the `survey_answers` table represents the date when each survey response was recorded. As a non-nullable date type field, it ensures that every record in the table has a specific date associated with it, indicating when the response was submitted. This column can be used in SQL queries to filter, sort, or group responses based on the date they were created, which is useful for analyzing trends over time or for reporting purposes within specific time frames."
survey_answers,order_id,int,NO,,,,,,,10.0,0.0,"The `order_id` column in the `survey_answers` table is an integer data type that is used to uniquely identify the sequence or position of responses within a survey or questionnaire. This column is not nullable, meaning every record in the table must have an `order_id` value. In SQL queries, this column can be used to order the results, ensure data integrity, or join with other tables that reference the `order_id` to analyze the response sequence."
survey_answers,processed,tinyint,YES,,,0,,,,3.0,0.0,"The `processed` column in the `survey_answers` table, which is of type `tinyint` and can be nullable, is utilized to indicate whether a survey response has been processed or not. In SQL queries, this column can be used to filter or update records based on their processing status. For instance, setting the value to 1 could represent that the response has been processed, while a value of 0 indicates pending processing."
survey_answers,sent_email,tinyint(1),NO,,,0,,,,3.0,0.0,"The `sent_email` column in the `survey_answers` table is a `tinyint(1)` data type used to indicate whether an email has been sent to the respondent regarding their survey submission. The value `0` represents that no email has been sent, while a value of `1` would indicate that an email has been sent. This column is not nullable, meaning every record in the table must have a value for `sent_email`, ensuring that the email status for each survey response is always recorded."
survey_categories,survey_category_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `survey_category_id` column in the `survey_categories` table is an integer that uniquely identifies each category or topic used to classify survey questions and responses. As a primary key (PRI), it ensures that each category is unique and not null. This column is essential for SQL queries that need to link survey data with specific categories, enabling efficient organization, retrieval, and analysis of survey information based on category."
survey_categories,name,varchar(500),NO,,,,,,500.0,,,"The `name` column in the `survey_categories` table is used to store the textual descriptions of categories or topics that classify survey questions and responses. This varchar(500) column is essential for organizing survey data into meaningful groups, which facilitates efficient querying and analysis. Since it is not nullable, every record in the `survey_categories` table must include a category name, ensuring that all survey items are categorized."
survey_categories,created,date,NO,,,,,,,,,"The `created` column in the `survey_categories` table represents the date when each category or topic was established. This column is of the data type `date` and cannot contain null values, indicating that every category must have a defined creation date. In SQL queries, this column can be used to filter or sort categories based on when they were created, which is useful for analyzing the evolution of survey topics over time or for maintaining chronological records of category additions."
survey_categories,staff_id,int,NO,,,,,,,10.0,0.0,"The `staff_id` column in the `survey_categories` table is of type integer and cannot contain null values. This column likely serves as a reference to a `staff` table, indicating which staff member is responsible for managing or categorizing the survey topics. In SQL queries, `staff_id` can be used to join the `survey_categories` table with the `staff` table to retrieve or analyze information about the staff members associated with specific survey categories."
survey_categoriesLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column in the `survey_categoriesLang` table is an integer type primary key that uniquely identifies each record. This column is crucial for linking and managing different language-specific translations and content for survey categories, ensuring that each entry remains unique and non-replicable. As it is not nullable, every record in the table must have a valid `l_id` value, which is essential for maintaining data integrity and facilitating efficient data retrieval and manipulation in SQL queries related to multilingual survey systems."
survey_categoriesLang,survey_category_id,int,YES,,,,,,,10.0,0.0,"The `survey_category_id` column in the `survey_categoriesLang` table is an integer data type and can be nullable. It is used to associate translations and localized content with specific survey categories. This column can be utilized in SQL queries to join with other tables that contain survey category details, allowing for the retrieval of language-specific information for each category."
survey_categoriesLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the `survey_categoriesLang` table is used to specify the language of the translation stored in each record. It is a non-nullable `varchar(10)` field, indicating that each entry must have a language identifier of up to 10 characters. This column is crucial for filtering and retrieving content based on specific languages, making it essential for supporting multilingual survey categories in SQL queries."
survey_categoriesLang,l_name,varchar(500),NO,,,,,,500.0,,,"The `l_name` column in the `survey_categoriesLang` table is used to store the localized names of survey categories as a string with a maximum length of 500 characters. This column is essential for supporting multiple languages in survey systems, ensuring that category names can be accurately displayed in the user's preferred language. Since the column is not nullable, every record must include a localized name, indicating that each survey category must have a translation provided in the database."
survey_question_categories,survey_id,int,NO,PRI,,,survey,survey_id,,10.0,0.0,"The `survey_id` column in the `survey_question_categories` table is an integer column that serves as a primary key and cannot contain null values. It uniquely identifies each survey and is crucial for linking survey questions to their specific survey instance. When constructing SQL queries, this column should be used to join with other tables that contain survey-related data, ensuring that questions are accurately matched to the correct survey."
survey_question_categories,category_id,int,NO,PRI,,,question_categories,id,,10.0,0.0,"The `category_id` column in the `survey_question_categories` table is an integer field that serves as a primary key, uniquely identifying each category of survey questions. This column is essential for SQL queries that involve joining or referencing categories to organize, filter, or aggregate survey questions based on their category. Since it is non-nullable, every record in the table must have a valid `category_id`, ensuring data integrity and the effective categorization of survey questions."
survey_questions,survey_question_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `survey_question_id` column in the `survey_questions` table is an integer-based primary key that uniquely identifies each survey question stored in the table. This column is not nullable, ensuring that every record in the table must have a unique identifier. In SQL queries, this column is used to specifically select, update, or delete survey question records, and it can also be used to join with other tables that reference the `survey_question_id` to pull related data across the system."
survey_questions,survey_category_id,int,NO,,,,,,,10.0,0.0,"The `survey_category_id` column in the `survey_questions` table is an integer that links each survey question to a specific category, indicating the grouping or thematic classification of the question. This column is not nullable, ensuring that every question stored in the table is assigned a category. In SQL queries, this column can be used to filter or join questions based on their categories, facilitating targeted analyses or operations on grouped data."
survey_questions,name,varchar(500),NO,,,,,,500.0,,,"The `name` column in the `survey_questions` table holds the textual content of the survey questions, stored as a string with a maximum length of 500 characters. Being a non-nullable column, it must always contain a value for each record, ensuring that every survey question has a descriptive name. This column can be used in SQL queries to select, filter, or sort survey questions based on their textual content, facilitating operations like searching for specific questions or categorizing them in reports."
survey_questions,created,date,NO,,,,,,,,,"The `created` column in the `survey_questions` table holds the date when each survey question was added to the database. This column is of the data type `date` and cannot contain null values, indicating that every record must have a creation date specified. In SQL queries, this column can be used to filter, sort, or group questions based on when they were created, aiding in temporal analysis or management of the survey questions."
survey_questions,staff_id,int,NO,,,,,,,10.0,0.0,"The `staff_id` column in the `survey_questions` table is an integer data type that identifies the staff member responsible for creating or managing the survey question. This column is not nullable, indicating that every record in the table must have a `staff_id` associated with it. In SQL queries, this column can be used to join the `survey_questions` table with other tables that contain staff-related information, enabling analysis or management of questions based on staff involvement."
survey_questions,display_rating,tinyint,YES,,,1,,,,3.0,0.0,"The `display_rating` column in the `survey_questions` table is a tinyint type that can optionally store integer values, typically used to indicate a specific display or formatting preference for survey questions. This column can be used in SQL queries to filter or sort questions based on their display ratings, allowing for customization of how questions appear in different forms or questionnaires. For instance, selecting questions with a certain display rating could help in tailoring the presentation of questions to specific audiences or formats."
survey_questionsLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column in the `survey_questionsLang` table is an integer type primary key that uniquely identifies each record within the table. This column is essential for distinguishing between different language-specific versions of survey questions. As it is non-nullable and marked as a primary key, every entry in the table must have a unique `l_id`. This column can be used in SQL queries to join the `survey_questionsLang` table with other tables that reference `l_id`, facilitating operations like fetching, updating, or deleting specific language versions of survey questions."
survey_questionsLang,survey_question_id,int,YES,,,,,,,10.0,0.0,"The `survey_question_id` column in the `survey_questionsLang` table is an integer field that can be used to link language-specific question entries to their corresponding general survey questions. Although it is nullable, meaning entries might exist without a direct connection to a question in the main `survey_questions` table, it typically serves as a foreign key. This column is crucial for SQL queries aiming to retrieve or manage multilingual content of survey questions, ensuring that the correct translations are associated with the appropriate survey questions."
survey_questionsLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the `survey_questionsLang` table is used to specify the language of the survey question text stored in each record. It is a non-nullable varchar field of up to 10 characters, indicating that each record must have an associated language identifier, such as 'EN' for English or 'ES' for Spanish. This column is essential for filtering or joining data based on language in SQL queries, ensuring that users can retrieve the correct language version of survey questions."
survey_questionsLang,l_name,varchar(500),NO,,,,,,500.0,,,"The `l_name` column in the `survey_questionsLang` table stores the language-specific names or titles of survey questions, typically providing translations based on the language context. This column is a VARCHAR type with a maximum length of 500 characters and cannot be NULL, indicating that every record must include a language-specific name for the question. When constructing SQL queries, use this column to retrieve or match the translated question names for surveys presented in different languages, ensuring that the query specifies the appropriate language context where necessary."
survey_responses,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `id` column in the `survey_responses` table is used as a primary key, meaning it uniquely identifies each record in the table. This column is of integer data type and cannot contain null values. In SQL queries, the `id` column can be used to specifically select, update, or delete individual survey response records based on their unique identifier."
survey_responses,user_id,int,NO,MUL,,,,,,10.0,0.0,"The `user_id` column in the `survey_responses` table is an integer field that uniquely identifies each participant of the survey. It is a non-nullable field, meaning every survey response must be associated with a user ID. As it is marked with a key type of 'MUL', this column is likely part of a foreign key relationship, indicating that it can be used to join the `survey_responses` table with other tables that contain user-specific information, enhancing the ability to perform detailed data analysis across multiple tables."
survey_responses,question_id,int,NO,MUL,,,,,,10.0,0.0,"The `question_id` column in the `survey_responses` table is an integer field that links each survey response to a specific question. This column is not nullable, ensuring that every response recorded in the table is associated with a question. As it is marked with the key type 'MUL', it indicates that the column is part of a non-unique index, which can be used to efficiently retrieve all responses related to a particular question, facilitating queries that analyze or aggregate responses by question."
survey_responses,survey_id,int,NO,MUL,,,,,,10.0,0.0,"The `survey_id` column in the `survey_responses` table is an integer data type that serves as a foreign key linking to a specific survey's identifier. This column is not nullable, meaning every record in the `survey_responses` table must have a valid `survey_id` associated with it. In SQL queries, this column can be used to join the `survey_responses` table with other tables that contain survey details, facilitating analysis of responses by survey or aggregation of data at the survey level."
survey_responses,response_text,text,YES,,,,,,65535.0,,,"The `response_text` column in the `survey_responses` table contains the textual feedback or answers provided by participants in a survey or questionnaire. As a text data type and nullable column, it can store lengthy strings of text and may also accept null values if a response was not provided. This column is useful in SQL queries for analyzing or summarizing participant responses, filtering specific answers, or integrating responses with other data."
survey_responses,created_at,timestamp,YES,,,,,,,,,"The `created_at` column in the `survey_responses` table is of the data type `timestamp` and it may contain null values. This column is used to record the date and time when each survey response was submitted. In SQL queries, the `created_at` column can be utilized to filter, sort, or group survey responses based on the time they were created, which is useful for analyzing responses over specific time periods or understanding response trends."
table_path,table_path_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `table_path_id` in the `table_path` table serves as the primary key and is used to uniquely identify each record in the table. As a non-nullable integer, this column must contain a unique value for each entry, ensuring that each file path and its metadata can be distinctly referenced. In SQL queries, this column is crucial for operations like joining this table with others, retrieving specific file path records, or maintaining data integrity through various CRUD operations."
table_path,order,int,NO,,,,,,,10.0,0.0,"The `order` column in the `table_path` is of type `int` and is non-nullable, meaning it must always contain an integer value and cannot be left empty. This column can be used in SQL queries to specify or sort the sequence or priority of file system paths stored in the table. Since it does not have a specified key type or extra information, it likely serves a general purpose in organizing or retrieving path data based on a numerical order."
table_path,x_pos,int,NO,,,,,,,10.0,0.0,"The `x_pos` column in the `table_path` table is an integer data type and is not nullable, indicating that it is mandatory for each record to have a value for this column. This column likely represents a positional or ordering attribute related to file paths stored in the table. In SQL queries, `x_pos` can be used to sort, filter, or perform calculations where the position or sequence of file paths is relevant."
table_path,y_pos,int,YES,,,,,,,10.0,0.0,"The `y_pos` column in the `table_path` table is of type integer and can contain null values. This column does not serve as a primary or foreign key. In SQL queries, `y_pos` could be used to store and query numerical data that might represent a positional or ordering value related to the file system paths, although its specific purpose isn't defined in the provided details."
task,task_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_id` column in the `task` table is an integer-type primary key that uniquely identifies each task within the system. This column is not nullable, ensuring that every task record has a unique identifier. It is crucial for linking the `task` table with other task-specific tables through foreign key relationships, facilitating queries that join data across related tasks and their attributes, and for maintaining the integrity of task hierarchies and dependencies within the system."
task,task_type_defaults_id,int,NO,MUL,,,task_type_defaults,task_type_id,,10.0,0.0,"The `task_type_defaults_id` column in the `task` table is an integer that serves as a foreign key, linking each task to a set of default settings or attributes specific to the type of task being performed. This column is essential for distinguishing between different types of tasks and applying the appropriate default configurations or parameters. Since it is non-nullable and marked with a key type of MUL (indicating it is part of a non-unique index or a foreign key), it must always have a valid value that corresponds to an existing record in another table, ensuring that every task has associated default settings. This column should be included in SQL queries when you need to filter, join, or manage tasks based on their default configurations."
task,status,"enum('Ready','Not ready','In progress','Done','Canceled')",NO,MUL,,,,,11.0,,,"The `status` column in the `task` table is used to represent the current state of a task within the system. It is a non-nullable enumerated type column that can take one of the following values: 'Ready', 'Not ready', 'In progress', 'Done', or 'Canceled'. This column is essential for managing and querying tasks based on their completion status, which facilitates tracking and workflow management across various tasks and related processes in the system. Queries involving this column can filter or update tasks according to their lifecycle stage, supporting efficient task management and operational workflows."
task,task_url_data,text,NO,,,,,,65535.0,,,"The `task_url_data` column in the `task` table stores text data that likely contains URLs or web links associated with specific tasks. Given its non-nullable nature, every task record in the table must include a valid URL in this column. This column can be used in SQL queries to retrieve or manipulate the URL data related to tasks, which may be essential for integrating web-based resources or interfaces with the task management system."
task,due_date,datetime,NO,MUL,,,,,,,,"The `due_date` column in the `task` table is of the `datetime` data type and is used to store the deadlines for tasks. It is a mandatory field (non-nullable), ensuring every task has a specified due date. This column can be used in SQL queries to filter, sort, or join tasks based on their due dates, facilitating the management of task timelines and the scheduling of related activities across various workstations and processes. As it is indexed (Key Type: MUL), querying based on `due_date` can be more efficient, especially for operations involving range searches or sorting."
task,created_at,datetime,NO,,,,,,,,,"The `created_at` column in the `task` table records the datetime when each task entry was initially created. This column is essential for tracking the chronological order of tasks and analyzing the timing of task creation for performance metrics and auditing purposes. Since the column is non-nullable, every record in the `task` table must have a timestamp, ensuring that no task is entered without a creation date."
task,created_by,int,NO,,,,,,,10.0,0.0,"The `created_by` column in the `task` table is an integer data type that indicates the user ID of the person who created the task. This column is non-nullable, meaning every record in the `task` table must have a valid user ID associated with it. This column can be used in SQL queries to join with user tables to fetch details about the user who initiated the task or to filter tasks based on the creator."
task,assigned_to,int,NO,MUL,,,,,,10.0,0.0,"The `assigned_to` column in the `task` table is an integer data type that references the identifier of the user or entity responsible for executing a specific task. This column is non-nullable, meaning every task must have an assigned responsible party, and it is marked with a key type of 'MUL', indicating that it may be part of a foreign key or is indexed for joining with other tables. In SQL queries, use this column to join the `task` table with user or employee tables to retrieve or manage information about who is assigned to each task, ensuring efficient task allocation and tracking within the system."
task,started_at,datetime,NO,MUL,,,,,,,,"The `started_at` column in the `task` table records the datetime at which each task was initiated, ensuring a precise timestamp for the start of the task. This column is essential for tracking the chronological order of tasks and their durations, as it is non-nullable and indexed (indicated by Key Type: MUL), allowing for efficient querying and sorting of tasks based on their start times. It is particularly useful for generating reports on task timelines and for scheduling and monitoring tasks across various workstations and processes."
task,finished_at,datetime,NO,MUL,,,,,,,,"The `finished_at` column in the `task` table is used to store the datetime when a task was completed. It is a non-nullable field, ensuring that every record in the table has a completion timestamp. This column can be used in SQL queries to filter or sort tasks based on their completion times, which is useful for generating reports, tracking task durations, or monitoring workflow efficiencies. The `MUL` key type indicates that this column is indexed, likely as part of a composite index, which optimizes queries involving this column, especially those that join the `task` table with other related tables using the `task_id`."
task,training,tinyint(1),NO,,,0,,,,3.0,0.0,"The `training` column in the `task` table is a tinyint(1) datatype used to indicate whether a task is a training task (1) or not (0). This column is non-nullable, meaning every task must explicitly have a training status defined. In SQL queries, this column can be used to filter or differentiate tasks based on their training status, helping in analyses or operations specific to training-related tasks within the system."
task_comment,task_comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_comment_id` column in the `task_comment` table is an integer-type primary key that uniquely identifies each comment or feedback entry associated with tasks. This column is not nullable, ensuring that every comment recorded in the database has a unique identifier. In SQL queries, this column is crucial for uniquely selecting, updating, or deleting specific comment entries in the `task_comment` table."
task_comment,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_comment` table is an integer type foreign key that connects each comment to a specific task in the `task` table. This column is not nullable, ensuring that every comment is associated with a task. In SQL queries, use the `task_id` to join the `task_comment` table with the `task` table to retrieve or manipulate comments related to specific tasks."
task_comment,comment,text,NO,,,,,,65535.0,,,"The `comment` column in the `task_comment` table is used to store textual feedback or remarks related to specific tasks. Since this column is of type `text` and is not nullable, every record in the `task_comment` table must include a comment. This column can be utilized in SQL queries to retrieve, filter, or manipulate the textual feedback associated with tasks, often joined with the `task` table via the `task_id` to provide context or detailed views of task-related discussions."
task_comment,created_at,datetime,NO,,,,,,,,,"The `created_at` column in the `task_comment` table records the date and time when each comment or feedback was created, using the datetime data type. This column is not nullable, ensuring that a timestamp is always recorded for each comment. In SQL queries, this column can be used to filter, sort, or group comments based on the time they were added, which is useful for tracking the chronological order of feedback on tasks."
task_comment,created_by,int,NO,,,,,,,10.0,0.0,"The `created_by` column in the `task_comment` table is an integer type column that indicates the user ID of the person who created the comment. This column is non-nullable, meaning every comment must have an associated user ID. It is used in SQL queries to identify or filter comments based on who created them, and can be joined with a user table to retrieve more information about the comment creator."
task_condensing_lots,task_condensing_lots_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_condensing_lots_id` column in the `task_condensing_lots` table serves as the primary key, uniquely identifying each record of a condensing task where multiple inventory lots are merged into a single location. This integer column is not nullable, ensuring that every record has a unique identifier. Use this column in SQL queries to specifically target, reference, or join records when managing or analyzing the consolidation processes of inventory within the database."
task_condensing_lots,task_type_condensing_id,int,NO,MUL,,,task_type_condensing,task_type_condensing_id,,10.0,0.0,"The `task_type_condensing_id` column in the `task_condensing_lots` table is an integer that serves as a foreign key linking to the `task_type_condensing` table. This column is essential for identifying the specific type of condensing task associated with each record in the `task_condensing_lots` table. Since it is not nullable and marked with a key type of MUL, it must always contain a valid integer value that corresponds to an existing record in the `task_type_condensing` table, facilitating joins in SQL queries to gather detailed information about the condensing task types."
task_condensing_lots,lot_id,int,NO,MUL,,,inventory,lot_id,,10.0,0.0,"The `lot_id` column in the `task_condensing_lots` table is an integer that uniquely identifies inventory lots involved in condensing tasks. This column is non-nullable and marked with a key type of MUL, indicating it is part of a non-unique index, usually used for joining this table with other tables such as `inventory` to track which lots are being consolidated into new locations. In SQL queries, `lot_id` can be used to filter, join, or aggregate data to analyze the consolidation process of inventory lots."
task_condensing_lots,created_at,datetime,NO,,,,,,,,,"The `created_at` column in the `task_condensing_lots` table records the datetime when each condensing task entry was created. This column is essential for tracking the timing of inventory consolidation processes and cannot be null, ensuring that every record has a timestamp. In SQL queries, this column can be used to filter, sort, or group records based on when the condensing tasks were initiated."
task_condensing_lots,finished_at,datetime,YES,,,,,,,,,"The `finished_at` column in the `task_condensing_lots` table records the datetime when a condensing task was completed, where multiple inventory lots were consolidated into a single location. This column, which is nullable, indicates that not all condensing tasks might have a completion time recorded. In SQL queries, this column can be used to filter or sort condensing tasks based on their completion times, allowing for temporal analysis of inventory consolidation activities."
task_condensing_lots,new_location_header_id,int,YES,MUL,,,location_header,location_header_id,,10.0,0.0,"The `new_location_header_id` column in the `task_condensing_lots` table is an integer field that references the `location_header` table, connecting each condensing task to a new inventory location where multiple lots are consolidated. This column can be used in SQL queries to join the `task_condensing_lots` table with the `location_header` table to retrieve or update information about the destination location of consolidated inventory lots. Since it is marked as nullable, SQL queries should account for potential null values, indicating tasks where a new location hasn't been assigned yet."
task_details,task_details_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_details_id` column in the `task_details` table is an integer column that uniquely identifies each task or activity record. As a primary key, it cannot contain null values and is used to uniquely distinguish each row in the table. This column is essential for writing SQL queries that target specific tasks, join task data with other related tables, or maintain the integrity of the database through relationships."
task_details,task_id,int,NO,,,,,,,10.0,0.0,"The `task_id` column in the `task_details` table is an integer data type and cannot contain null values, indicating that it is likely a primary key used to uniquely identify each task or activity recorded in the table. In SQL queries, `task_id` can be used to select, update, or delete specific tasks based on their unique identifier, or to join the `task_details` table with other related tables that reference `task_id` as a foreign key."
task_details,product_id,int,NO,,,,,,,10.0,0.0,"The `product_id` column in the `task_details` table is used to associate each task with a specific product by storing an integer that references the product's unique identifier. This column is crucial for SQL queries that need to retrieve or manipulate task information related to specific products. Since the column is not nullable, every task in the `task_details` table must be linked to a product, ensuring that there are no tasks without a corresponding product association."
task_details,lot_id,int,YES,,,,,,,10.0,0.0,"The `lot_id` column in the `task_details` table is an integer field that can optionally link a task to a specific lot, assuming 'lot' refers to a grouping or batch of tasks or items within the system. Since this column is nullable, not all tasks may be associated with a lot. In SQL queries, this column can be used to filter or join tasks based on their lot association, allowing for operations that group or differentiate tasks according to the lot they belong to."
task_details,inv_type_need,int,YES,,,,,,,10.0,0.0,"The column `inv_type_need` in the `task_details` table is an integer data type and can be nullable, indicating that it is optional and may not be filled for every task. This column likely represents a specific inventory type requirement associated with a task, such as a quantity or category identifier for resources needed to complete the task. In SQL queries, `inv_type_need` can be used to filter, join, or aggregate tasks based on their inventory requirements, making it useful for managing resource allocation or analyzing task dependencies on inventory types."
task_details,status_code,int,YES,,,0,,,,10.0,0.0,"The `status_code` column in the `task_details` table is an integer field that can be used to represent the current status of a task or activity within the system. Since it is nullable, SQL queries can check for tasks with undefined status codes by looking for NULL values in this column. This column can be utilized in SQL queries to filter, sort, or group tasks based on their status, facilitating the management and tracking of task progress within the system."
task_details,pick_sq_code,varchar(10),YES,,,,,,10.0,,,"The `pick_sq_code` column in the `task_details` table is a VARCHAR(10) field that can optionally contain a sequence code associated with each task or activity. This column can be used in SQL queries to filter, sort, or join tasks based on their specific sequence codes, allowing for more detailed analysis or reporting on task sequences within the system. Since it is nullable, SQL queries should account for potential NULL values when performing operations involving this column."
task_details,task_login_seq,varchar(10),YES,,,,,,10.0,,,"The `task_login_seq` column in the `task_details` table is a varchar(10) field that can store a sequence or identifier related to logins, potentially used to track or reference login sessions associated with specific tasks. As it is nullable, not all task records may have an associated `task_login_seq`. This column can be used in SQL queries to filter, join, or sort tasks based on their login sequence, aiding in tasks analysis particularly related to user sessions or authentication events."
task_details,start_date,datetime,YES,,,,,,,,,"The `start_date` column in the `task_details` table is of data type `datetime` and can contain null values, indicating that some tasks may not have a defined start date. This column is used in SQL queries to filter, sort, or perform calculations based on when tasks are scheduled to begin. For instance, you can use `start_date` to retrieve all tasks starting on a specific date or to calculate the duration of a task by comparing `start_date` with the `end_date` column if available."
task_details,finish_date,datetime,YES,,,,,,,,,"The `finish_date` column in the `task_details` table is used to store the datetime at which a task or activity is completed or expected to be completed. Since this column is of type `datetime` and is nullable, it can hold date and time values but may also be empty if the finish date is not yet determined. In SQL queries, this column can be used to filter, sort, or perform calculations related to the completion times of tasks."
task_details,created,datetime,NO,,,,,,,,,"The `created` column in the `task_details` table is of the `datetime` data type and records the exact date and time when each task or activity was initially created. Since this column does not allow null values (`Nullable: NO`), every record in the `task_details` table must have a timestamp in the `created` column. This column can be used in SQL queries to filter, sort, or group tasks based on their creation times, enabling analysis of tasks over specific periods or timelines."
task_details,modified,datetime,NO,,,,,,,,,"The `modified` column in the `task_details` table is of the `datetime` data type and is used to store the date and time when a task was last updated. This column is not nullable, indicating that every task must have a modification date and time recorded. In SQL queries, this column can be used to filter, sort, or retrieve tasks based on their last modification date, which is crucial for tracking changes or updates to tasks within the system."
task_details,staff_id,int,NO,,,,,,,10.0,0.0,"The `staff_id` column in the `task_details` table is used to associate each task with a specific staff member responsible for or related to the task. This column is of type `int` and cannot contain null values, indicating that every task must be assigned to a staff member. In SQL queries, the `staff_id` can be used to join the `task_details` table with other tables that contain staff information, enabling detailed reports or insights into task assignments and responsibilities."
task_details,order_id,int,YES,,,,,,,10.0,0.0,"The `order_id` column in the `task_details` table is an integer data type that can optionally be null, indicating that it may be used to associate tasks with specific orders if applicable. In SQL queries, this column can be utilized to filter, join, or sort tasks based on their relationship to orders, facilitating operations like grouping tasks by order or finding tasks without an associated order. This flexibility makes it useful for analyses that require understanding task organization or processing within the context of order management."
task_details,carton_nbr,varchar(10),YES,,,,,,10.0,,,"The `carton_nbr` column in the `task_details` table is a variable character field with a maximum length of 10 characters, used to store the carton number associated with each task. Since this column is nullable, it is optional and may not be filled for all tasks. In SQL queries, this column can be used to filter, join, or sort tasks based on the specific carton numbers, enhancing the ability to track or group tasks by carton-related criteria."
task_details,carton_seq_nbr,int,YES,,,,,,,10.0,0.0,"The `carton_seq_nbr` column in the `task_details` table is an integer data type that can hold sequence numbers associated with cartons related to specific tasks or activities. Since this column is nullable, it may not have a sequence number for every task. This column can be used in SQL queries to filter or sort tasks based on their associated carton sequence numbers, or to join with other tables that track carton-specific information."
task_group,task_group_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_group_id` column in the `task_group` table is an integer column that uniquely identifies each group of tasks. As a primary key (PRI), it ensures that each task group can be distinctly recognized and it cannot contain null values (Nullable: NO). This column is crucial for SQL queries that involve joining the `task_group` table with other related tables to retrieve or manipulate task group data based on their unique identifiers."
task_group,task_type_id,int,NO,,,,,,,10.0,0.0,"The `task_type_id` column in the `task_group` table is an integer column that categorizes each task group based on the type of tasks it contains. This column is not nullable, indicating that every task group must be associated with a specific task type. In SQL queries, `task_type_id` can be used to join the `task_group` table with other tables that define or describe these task types, enabling more detailed analysis and reporting on different categories of task groups."
task_group,task_group_name,varchar(255),NO,,,,,,255.0,,,"The `task_group_name` column in the `task_group` table is used to store the name of each task group as a string of up to 255 characters. Since this column is not nullable, every task group must have a unique name that describes or identifies the collection of tasks. This column can be used in SQL queries to select, update, or group task groups based on their names, facilitating easy access and manipulation of task-related data grouped by these names."
task_group,created,datetime,NO,,,,,,,,,"The `created` column in the `task_group` table records the datetime when each task group was created. As a non-nullable `datetime` type, every entry in this table must have a valid datetime value indicating when it was established. This column can be used in SQL queries to filter or sort task groups based on their creation date, helping in analyzing the timeline of task group initiations or for maintenance scheduling."
task_group,modified,datetime,NO,,,,,,,,,"The `modified` column in the `task_group` table holds the date and time when a task group was last updated, using the `datetime` data type. This column is non-nullable, indicating that a timestamp must always be recorded whenever a task group is created or modified. In SQL queries, this column can be used to track changes, filter, or sort task groups based on the last modification date and time."
task_group,staff_id,int,NO,,,,,,,10.0,0.0,"The `staff_id` column in the `task_group` table is an integer field that associates each task group with a specific staff member responsible for overseeing or managing the grouped tasks. This column is not nullable, indicating that every task group must be linked to a staff member. In SQL queries, the `staff_id` can be used to join the `task_group` table with other tables that contain staff information, enabling queries that filter, sort, or aggregate task groups based on staff-related criteria."
task_header,task_header_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_header_id` column in the `task_header` table is an integer-based primary key that uniquely identifies each record within the table. This column is not nullable, ensuring that every task or activity in the system has a unique identifier. It is essential for linking with detail or related records in potential child tables, serving as a foreign key in SQL queries to establish relationships and retrieve comprehensive task information."
task_header,warehouse_id,int,NO,,,,,,,10.0,0.0,"The `warehouse_id` column in the `task_header` table is an integer type field that identifies the warehouse associated with each task or activity. It is a mandatory field (not nullable), indicating that every task must be linked to a specific warehouse. This column can be used in SQL queries to join the `task_header` table with other tables that contain warehouse-related information, enabling comprehensive data analysis and reporting on tasks by warehouse."
task_header,task_type_id,int,NO,,,,,,,10.0,0.0,"The `task_type_id` column in the `task_header` table is an integer field that categorizes tasks or activities into different types. As a non-nullable column, it must always have a value, indicating that every task recorded in this table is required to have an associated type. This column can be used in SQL queries to filter, join, or aggregate tasks based on their type, facilitating analysis or operations specific to certain categories of tasks."
task_header,task_name,varchar(255),NO,,,,,,255.0,,,"The `task_name` column in the `task_header` table is used to store the name of each task or activity as a string of up to 255 characters. Since this column is not nullable, every record in the `task_header` table must include a task name. This column can be used in SQL queries to select, filter, or join data based on specific task names, ensuring that all related task metadata and status information can be easily accessed and manipulated."
task_header,default_task_priority,int,NO,,,,,,,10.0,0.0,"The `default_task_priority` column in the `task_header` table is an integer column that stores the priority level of a task or activity, with non-nullable values indicating that every task must have a priority assigned. This column is crucial for sorting, filtering, or prioritizing tasks in SQL queries. For example, you might use this column to order tasks by priority or to select tasks with a specific priority level, enhancing the management and retrieval of task data based on their urgency or importance."
task_header,current_task_priority,int,YES,,,,,,,10.0,0.0,"The `current_task_priority` column in the `task_header` table is an integer type that can optionally be null, indicating the priority level of tasks or activities recorded in the system. This column can be utilized in SQL queries to sort, filter, or conditionally select tasks based on their priority, enhancing the management and retrieval of task-related data. Its design suggests it could be used in future enhancements to define relationships with other tables that detail specific task attributes or logs."
task_header,expected_duration,int,YES,,,0,,,,10.0,0.0,"The `expected_duration` column in the `task_header` table is of type integer and can store the anticipated duration of tasks or activities, measured in a unit consistent across the system (e.g., minutes or hours). This column is nullable, indicating that the expected duration might not be specified for all tasks. In SQL queries, this column can be used to filter, sort, or perform calculations to manage or analyze task timelines and efficiencies within the system."
task_header,actual_duration,int,YES,,,0,,,,10.0,0.0,"The `actual_duration` column in the `task_header` table is of type integer and can store the actual duration of tasks or activities, measured in a specific unit (likely minutes or hours). This column is nullable, indicating that the actual duration might not always be available or applicable for every task record. In SQL queries, this column can be used to calculate, filter, or report on the actual time spent on tasks, which can be crucial for performance analysis, billing, or scheduling purposes."
task_header,early_start_date,datetime,YES,,,,,,,,,"The `early_start_date` column in the `task_header` table is of data type `datetime` and is nullable, meaning it can store date and time values indicating when a task can earliest begin, but it may also contain null values if the start date is unspecified. This column can be used in SQL queries to filter, sort, or perform date calculations to manage and schedule tasks based on their earliest possible start times. For instance, it can be used to retrieve tasks that are set to start on or before a specific date or to calculate the duration until a task can commence if the early start date is provided."
task_header,latest_start_date,datetime,YES,,,,,,,,,"The `latest_start_date` column in the `task_header` table is of data type `datetime` and can store null values, indicating that not every task may have a defined latest start date. This column is used to specify the latest possible start time for a task or activity, helping in scheduling and time management within the system. You can use this column in SQL queries to filter, sort, or manage tasks based on their scheduling constraints, particularly useful when planning or adjusting timelines."
task_header,latest_completed_date,datetime,YES,,,,,,,,,"The `latest_completed_date` column in the `task_header` table stores the datetime indicating when a task was last completed. This column, which allows null values, can be used in SQL queries to filter, sort, or report on the completion status and timing of tasks. For example, it can help identify tasks that have been completed within a specific timeframe or determine which tasks are overdue based on their expected completion dates compared to the `latest_completed_date`."
task_header,begin_area,varchar(10),YES,,,,,,10.0,,,"The `begin_area` column in the `task_header` table is a VARCHAR(10) field that can store a text identifier up to 10 characters long, indicating the initial area or location associated with a task or activity. This column is optional as it is nullable, meaning that not every task record is required to have a beginning area specified. In SQL queries, `begin_area` can be used to filter or join tasks based on their starting locations, enhancing the specificity of task-related data retrievals or reports."
task_header,begin_zone,varchar(10),YES,,,,,,10.0,,,"The `begin_zone` column in the `task_header` table is a VARCHAR(10) field that can optionally store a zone identifier for where a task or activity starts. Since it is nullable, not all records are required to have a `begin_zone` value. This column can be used in SQL queries to filter or sort tasks based on their starting zones, which is useful for analyzing task distribution geographically or organizing tasks by location within the system."
task_header,begin_aisle,varchar(10),YES,,,,,,10.0,,,"The `begin_aisle` column in the `task_header` table is a VARCHAR(10) field that can optionally store the starting aisle information for a task or activity. It can be used in SQL queries to filter or sort tasks based on their starting locations within a facility. Since it is nullable, SQL queries should account for the possibility of null values in this column, which indicates that the starting aisle for some tasks might not be specified."
task_header,end_area,varchar(10),YES,,,,,,10.0,,,"The `end_area` column in the `task_header` table is a variable character field (varchar) with a maximum length of 10 characters, which can store optional data (nullable) about the geographical or logical endpoint of a task or activity. This column does not function as a key and is primarily used to categorize or filter tasks based on their designated end areas in SQL queries, potentially assisting in the analysis of task distribution or completion zones within the system."
task_header,end_zone,varchar(10),YES,,,,,,10.0,,,"The `end_zone` column in the `task_header` table is a variable character field with a maximum length of 10 characters and can store optional data (nullable). This column is intended to capture specific zone or area information where a task or activity concludes. In SQL queries, `end_zone` can be used to filter, sort, or join tasks based on their ending locations, which is useful for generating reports or analyses concerning task distribution and completion across different zones."
task_header,end_aisle,varchar(10),YES,,,,,,10.0,,,"The column `end_aisle` in the `task_header` table is a VARCHAR(10) field that can store a string of up to 10 characters and can accept NULL values. This column likely represents a specific location or identifier related to the end point of a task within an aisle, useful for queries needing spatial or location-based filtering within tasks. It can be used in SQL queries to select, filter, or join task records based on their ending aisle locations, enhancing the management or analysis of tasks based on spatial distribution within a facility or area."
task_header,status_code,int,YES,,,0,,,,10.0,0.0,"The `status_code` column in the `task_header` table represents the current status of tasks or activities using integer values. It is optional (nullable) and can be used in SQL queries to filter, sort, or join tasks based on their status. For instance, you might use `WHERE status_code = 1` to find all tasks in a particular state, or join with another table that maps these codes to descriptive status labels."
task_header,created,datetime,NO,,,,,,,,,"The `created` column in the `task_header` table holds the datetime data indicating when each task or activity was initially created. This column is not nullable, ensuring that every task recorded in the table has a creation timestamp. In SQL queries, this column can be used to filter, sort, or group tasks based on their creation times, which is crucial for time-based analyses and operational tracking."
task_header,modified,datetime,NO,,,,,,,,,"The `modified` column in the `task_header` table records the datetime when a task or activity was last updated. This column, which cannot contain null values, is essential for tracking changes to task metadata and status over time. In SQL queries, the `modified` column can be used to filter, sort, or join data based on when tasks were last modified, facilitating efficient data management and retrieval in relation to task timelines."
task_header,release_time,datetime,YES,,,,,,,,,"The `release_time` column in the `task_header` table, which is of data type `datetime` and allows null values, stores the date and time when a task or activity is scheduled to be released or become active. In SQL queries, this column can be used to filter or sort tasks based on their scheduled release times. For example, it can help retrieve tasks that are due to start on a specific date or within a certain time range, aiding in time-based task management and scheduling."
task_header,staff_id,int,NO,,,,,,,10.0,0.0,"The `staff_id` column in the `task_header` table is an integer field that is essential for identifying the staff member associated with each task or activity recorded in the table. Since it is not nullable, every record in the `task_header` table must have a valid `staff_id` value, ensuring that all tasks are linked to a specific staff member. This column can be used in SQL queries to join the `task_header` table with other staff-related tables to retrieve or manage task assignments and responsibilities effectively."
task_header,product_id,int,YES,,,,,,,10.0,0.0,"The `product_id` column in the `task_header` table is of type integer and can store nullable values, indicating that not all tasks may be associated with a product. This column can be used in SQL queries to filter, join, or aggregate tasks based on their associated product. For example, you could use it to join with a `product` table to fetch additional product details for each task, or to filter tasks that are related to a specific product."
task_help_log,log,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `log` column in the `task_help_log` table is an integer type and serves as the primary key, meaning it uniquely identifies each record of user support interactions within the system. Since it is not nullable, every record in the table must have a unique `log` value. This column should be used in SQL queries to specifically target, retrieve, or reference individual instances of help requests or support interactions logged in the system."
task_help_log,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `task_help_log` table is of data type `datetime` and can store null values. This column records the date and time when each help request or support interaction was logged in the system. When constructing SQL queries, use this column to filter or sort records based on when the support interactions occurred, which can be useful for generating reports on user assistance activities over specific periods."
task_help_log,task_id,int unsigned,YES,,,,,,,10.0,0.0,"The `task_id` column in the `task_help_log` table is used to reference the specific tasks associated with help requests or support interactions logged in the system. This column, being an integer and unsigned, ensures that only non-negative values are stored, indicating the IDs of tasks from a related tasks table. Since the column is nullable, it allows for entries where the task ID might not be available or applicable. In SQL queries, this column can be used to join the `task_help_log` table with other task-related tables to retrieve detailed information about the tasks for which help was requested or provided."
task_help_log,remaining,int,YES,,,,,,,10.0,0.0,"The `remaining` column in the `task_help_log` table, which is of data type integer and can be nullable, represents the number of tasks or items left to address or complete after a support interaction. In SQL queries, this column can be used to analyze or report on the efficiency of support provided, by assessing how many tasks were still pending after each help request. This can help in understanding the workload or the effectiveness of the support system in resolving user issues."
task_help_log,percentile_value,int,YES,,,,,,,10.0,0.0,"The `percentile_value` column in the `task_help_log` table is an integer type that can optionally be null. It is designed to store numerical values that likely represent the percentile rankings of either the urgency or complexity of the help requested or received by users. In SQL queries, this column can be used to filter or analyze the support interactions based on these percentile rankings, allowing for assessments of which tasks are consistently requiring more complex or urgent help."
task_help_log,average,int,NO,,,,,,,10.0,0.0,"The `average` column in the `task_help_log` table is an integer data type and cannot contain null values. It likely represents a quantifiable measure related to the support interactions, such as an average rating of assistance effectiveness or the average time taken to resolve issues. This column can be used in SQL queries to analyze the overall performance of the help provided, calculate average metrics for reporting, or identify trends in user satisfaction or support efficiency over time."
task_logging,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `id` column in the `task_logging` table is an integer type field that serves as the primary key, uniquely identifying each record in the table. This column is not nullable, indicating that every record must have a unique identifier. In SQL queries, the `id` column is used to reference specific task logs, and it is essential for joining the `task_logging` table with other tables that relate to task hierarchies and types, using primary and child task type IDs."
task_logging,primary_task_type_id,int,NO,MUL,,,task_type_defaults,task_type_id,,10.0,0.0,"The `primary_task_type_id` column in the `task_logging` table is an integer that serves as a foreign key linking to the `task_type_defaults` table. This column is crucial for identifying the primary type of each task and managing hierarchical relationships between tasks. It is not nullable, ensuring that every record in the `task_logging` table must have a valid primary task type associated with it, and its key type 'MUL' indicates that it is part of a non-unique index, allowing efficient querying and joining operations based on this column."
task_logging,child_task_type_id,int,NO,MUL,,,task_type_defaults,task_type_id,,10.0,0.0,"The `child_task_type_id` column in the `task_logging` table is an integer that identifies the type of child tasks in a hierarchical task relationship. This column is non-nullable, ensuring that every record in the `task_logging` table must have a valid child task type ID. It is indexed (indicated by Key Type: MUL), which means it is optimized for join operations with the `task_type_defaults` table to retrieve or manage details related to child task types, enhancing query performance when filtering or sorting by this column."
task_logging,status,"enum('active','inactive')",NO,,,,,,8.0,,,"The `status` column in the `task_logging` table is used to indicate the current operational state of a task, with possible values being 'active' or 'inactive'. This column is essential in SQL queries when filtering tasks based on their activity status, ensuring that operations such as updates, deletions, or analyses are performed on tasks in the desired state. Since the column is not nullable, every task record in the `task_logging` table must have a specified status of either 'active' or 'inactive'."
task_parent_child,task_parent_child_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `task_parent_child_id` in the `task_parent_child` table serves as the primary key, uniquely identifying each record in this table that represents a link in the hierarchical structure of tasks. This integer column is not nullable, ensuring that every record has a unique identifier. In SQL queries, this column is essential for operations like joining this table with itself or others to trace or manipulate the hierarchical relationships between tasks, ensuring data integrity and facilitating the management of complex task dependencies."
task_parent_child,parent_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `parent_id` column in the `task_parent_child` table is used to establish hierarchical relationships between tasks by identifying the parent task for each child task entry. This column is of type integer and cannot be null, ensuring that every record in the table must specify a parent task. As it is marked with a key type of MUL (indicating it can be part of a non-unique index), it facilitates efficient querying and joining of data to trace task dependencies and hierarchies in SQL queries."
task_parent_child,child_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `child_id` column in the `task_parent_child` table is an integer that references the ID of a child task in a hierarchical task structure. It is used to establish and query the many-to-many relationships between tasks, specifically identifying which tasks are the children in these relationships. This column is not nullable, ensuring that every record in the `task_parent_child` table must specify a child task, and it is indexed (denoted by Key Type: MUL) to optimize queries involving child tasks."
task_speed_week,task_speed_week_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `task_speed_week_id` in the `task_speed_week` table is an integer type primary key that uniquely identifies each record of weekly speed metrics and performance data for various tasks. This column is not nullable, ensuring that every record has a unique identifier. It is used to link entries in this table to corresponding records in other tables, particularly when joining with the `task_type_defaults` table via the `task_type_defaults_id` to access standard task configurations and benchmarks."
task_speed_week,speed,float,NO,,,,,,,12.0,,"The `speed` column in the `task_speed_week` table stores numerical data of type float, representing the speed metrics for various tasks performed weekly. This column is not nullable, indicating that every record in the table must have a speed value. In SQL queries, the `speed` column can be used to calculate, filter, or compare the performance speeds of tasks against benchmarks from the `task_type_defaults` table, to which it is related through the `task_type_defaults_id`."
task_speed_week,date,date,NO,,,,,,,,,"The `date` column in the `task_speed_week` table is of type `date` and is used to store the specific week when the speed metrics and performance data were recorded for various tasks. This column is not nullable, ensuring that every record in the table has an associated date. In SQL queries, this column can be used to filter or group data by specific weeks, allowing for time-based analysis of task performance and speed metrics."
task_speed_week,task_type_defaults_id,int,NO,MUL,,,task_type_defaults,task_type_id,,10.0,0.0,"The `task_type_defaults_id` column in the `task_speed_week` table is an integer type column that serves as a foreign key linking to the `task_type_defaults` table. This column is crucial for SQL queries that need to join or reference data about standard task configurations and benchmarks associated with different task types. Since it is marked as non-nullable (Nullable: NO) and a multiple key (Key Type: MUL), it ensures that each record in `task_speed_week` must have a valid, existing reference in the `task_type_defaults` table, and multiple records in `task_speed_week` can reference the same entry in `task_type_defaults`."
task_stats,task_stats_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_stats_id` column in the `task_stats` table serves as the primary key for the table, uniquely identifying each record of task statistics and performance metrics. As an integer data type that cannot be null, this column is crucial for indexing and efficiently retrieving specific entries related to individual tasks completed by users. When writing SQL queries, use `task_stats_id` to uniquely reference or join rows within the `task_stats` table or when linking with other related tables in the database."
task_stats,employee_daily_stats_id,int,YES,MUL,,,employee_daily_stats,employee_daily_stats_id,,10.0,0.0,"The `employee_daily_stats_id` column in the `task_stats` table is an integer that serves as a foreign key, potentially linking each task's statistics to a corresponding record in another table that tracks daily statistics for employees. This column can be nullable, indicating that not all tasks in the `task_stats` table might be associated with an entry in the daily employee statistics. In SQL queries, this column can be used to join the `task_stats` table with the employee daily statistics table to analyze or retrieve comprehensive performance metrics for employees on a daily basis."
task_stats,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_stats` table is an integer that uniquely identifies each task associated with user performance metrics. It is a non-nullable column, ensuring that every record in the `task_stats` table must have a task ID associated with it. As a column with a key type of MUL, `task_id` can be used to join this table with other tables that contain a `task_id` column, facilitating queries that need to aggregate or compare task-specific data across different dimensions such as time, user, or other task characteristics."
task_stats,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `user_id` column in the `task_stats` table is an integer type field that uniquely identifies users associated with each task. This column is essential for SQL queries that need to filter or aggregate task performance metrics based on specific users. Since it is marked as non-nullable (NO) and has a key type of MUL (indicating it's part of a non-unique index or a foreign key), it can be used to join the `task_stats` table with other tables that contain user-specific information, enhancing the ability to perform comprehensive analyses on user-based performance metrics."
task_stats,duration,int,YES,,,,,,,10.0,0.0,"The `duration` column in the `task_stats` table represents the time taken to complete a task, measured in integer units (likely minutes or seconds). This column can be used in SQL queries to analyze the efficiency of task completion across different users or to aggregate performance metrics over time. Since it is nullable, SQL queries should account for possible NULL values, which indicate that the duration for some tasks might not be recorded."
task_stats,fluff,int,YES,,,,,,,10.0,0.0,"The `fluff` column in the `task_stats` table, which is of integer data type and can accept null values, appears to store numerical data related to individual tasks performed by users. Although the specific purpose of `fluff` is not detailed, it is likely used to hold optional or auxiliary numerical values that complement the primary statistics and performance metrics of tasks. In SQL queries, this column can be used to filter, sort, or perform calculations that enhance insights into task performance, especially when the exact role of the column in context to task performance is clarified."
task_stats,speed,float,YES,,,,,,,12.0,,"The `speed` column in the `task_stats` table represents a float value indicating the rate at which a task was completed by a user. This column can be used in SQL queries to analyze the efficiency or performance of users in completing tasks. It allows for calculations such as average speed, maximum speed, or trends in speed over time, which can be useful in assessing productivity and operational efficiency."
task_stats,action_count,int,YES,,,,,,,10.0,0.0,"The `action_count` column in the `task_stats` table represents the number of actions performed in a specific task by a user. It is an integer data type and can be nullable, indicating that there might be tasks where the action count has not been recorded or is not applicable. In SQL queries, this column can be used to analyze user activity, calculate total or average actions per task, or identify tasks with specific action counts."
task_stats,bonus_recieved,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The `bonus_received` column in the `task_stats` table represents the monetary bonus amount that users received for completing specific tasks, with a precision of 10 digits and 2 decimal places. This column can be used in SQL queries to calculate the total or average bonuses received, filter tasks based on the bonus amount, or join with other tables to analyze correlations between bonuses and other performance metrics. Since it is nullable, SQL queries should handle cases where the bonus amount might be missing."
task_stats,bonus_deducted,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The `bonus_deducted` column in the `task_stats` table represents the monetary amount deducted from a user's bonus due to specific task performance metrics. This decimal field can be null, indicating no deduction was made for that task. In SQL queries, this column can be used to calculate the adjusted bonus for users by summing or averaging the deductions over a specified period or set of tasks."
task_stats,error_count,int,YES,,,0,,,,10.0,0.0,"The `error_count` column in the `task_stats` table represents the number of errors associated with individual tasks performed by users. As an integer data type that allows null values, this column can be used in SQL queries to analyze or summarize the performance and accuracy of users by task. For example, it can help in identifying tasks with high error rates, calculating average errors per task, or filtering tasks that meet certain error criteria."
task_stats,date_finished_at,date,YES,,,,,,,,,"The `date_finished_at` column in the `task_stats` table records the date on which individual tasks were completed. This column, which can contain null values, allows SQL queries to filter or sort tasks based on their completion dates. It is useful for generating reports on daily or periodic task completion rates and analyzing task performance trends over time."
task_type,task_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_id` column in the `task_type` table is an integer-based primary key that uniquely identifies each category of tasks within the system. As a non-nullable field, it must contain a value for each record, ensuring that every task type can be distinctly referenced. This column is essential for joining the `task_type` table with other tables in SQL queries to retrieve or organize tasks by their specific classifications, thereby enabling efficient data management and integrity across the database."
task_type,task_name,varchar(255),NO,,,,,,255.0,,,"The `task_name` column in the `task_type` table is used to store the name or description of different task categories within the system. This column is of type `varchar(255)`, allowing it to hold a string of up to 255 characters, and it cannot contain null values, ensuring that every task type has a name. When constructing SQL queries, this column can be referenced to retrieve or set the names of task categories, join with other tables to aggregate data based on task types, or filter results by specific task names."
task_type,task_desc,text,YES,,,,,,65535.0,,,"The `task_desc` column in the `task_type` table contains textual descriptions of various task categories used within the system. As a nullable text field, it can store optional, descriptive details about each task type, which can be used in SQL queries to filter or display task classifications. This column can be particularly useful for generating reports, categorizing tasks, or enhancing user interfaces by providing more context about the tasks managed in the system."
task_type,default_task_priority,varchar(10),NO,,,,,,10.0,,,"The `default_task_priority` column in the `task_type` table specifies the standard priority level for each type of task, using a string format up to 10 characters long. This column is essential for categorizing tasks by their urgency or importance when queried, ensuring that all tasks of a particular type have a consistent priority setting. As it is non-nullable, every task type must have a default priority assigned, which can be used in SQL queries to filter, sort, or manage tasks based on their priority level."
task_type,created,datetime,NO,,,,,,,,,"The `created` column in the `task_type` table records the date and time when each task type was initially created, using the datetime data type. This column is non-nullable, meaning that a valid datetime value must be provided when new records are added to the table. This information can be used in SQL queries to filter or sort task types based on their creation date and time."
task_type,modified,datetime,NO,,,,,,,,,"The `modified` column in the `task_type` table records the date and time when a task type record was last updated. This column is of the `datetime` data type and cannot contain null values, ensuring that there is always a timestamp for when each task type was last modified. In SQL queries, this column can be used to track changes, sort or filter task types based on the modification date, or verify the recency of the data in the task classification system."
task_type,staff_id,int,NO,,,,,,,10.0,0.0,"The `staff_id` column in the `task_type` table is an integer type field that is used to associate specific staff members with different task types or categories. Since this column is not nullable, every record in the `task_type` table must have a `staff_id` value, indicating that each task type must be linked to a staff member. In SQL queries, this column can be used to filter or join task types based on the staff member responsible or associated with them."
task_type_cleaning,task_type_cleaning_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_cleaning_id` column in the `task_type_cleaning` table is an integer column that serves as the primary key, uniquely identifying each record in the table. This column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, this column is used to link each cleaning-specific task configuration to its corresponding task in the `task` table via the `task_id`, allowing for the retrieval and manipulation of data specific to cleaning tasks."
task_type_cleaning,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_cleaning` table is an integer data type that serves as a foreign key linking to the `task` table. This column is crucial for joining the `task_type_cleaning` table with the `task` table to retrieve or manipulate data specific to cleaning tasks. The `task_id` column is not nullable, ensuring that every record in the `task_type_cleaning` table must be associated with a corresponding entry in the `task` table, thereby maintaining referential integrity within the database."
task_type_cleaning,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_cleaning` table is an integer data type that serves as a foreign key linking to the `task` table. This column is crucial for joining the `task_type_cleaning` table with the `task` table to retrieve or manipulate data specific to cleaning tasks. The `task_id` column is not nullable, ensuring that every record in the `task_type_cleaning` table must be associated with a corresponding entry in the `task` table, thereby maintaining referential integrity within the database."
task_type_cleaning,status,int,NO,,,,,,,10.0,0.0,"The `status` column in the `task_type_cleaning` table is an integer field that indicates the current state of a cleaning-specific task. This column is non-nullable, meaning every record in the table must have a status value assigned. In SQL queries, this column can be used to filter, sort, or join data based on the status of cleaning tasks, ensuring that operations or analyses are performed on tasks in specific states."
task_type_cleaning,updated_at,datetime,NO,,,,,,,,,"The `updated_at` column in the `task_type_cleaning` table is of the `datetime` data type and is used to record the timestamp of the most recent update made to a record. This column cannot contain null values, ensuring that there is always a valid datetime entry for each record update. In SQL queries, this column is typically utilized to track changes over time, filter or sort records based on the last update time, or to audit modifications in cleaning-specific task configurations."
task_type_condensing,task_type_condensing_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_condensing_id` column in the `task_type_condensing` table serves as the primary key, uniquely identifying each record of different condensing tasks within a manufacturing or processing system. This integer column is non-nullable, ensuring that every record must have a unique identifier. In SQL queries, this column is used to link (join) the `task_type_condensing` table with other related tables such as `task_condensing_lots`, `location_header`, and `task` tables, facilitating the retrieval, update, or correlation of task-specific data across the system."
task_type_condensing,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_condensing` table is an integer data type and serves as a foreign key (indicated by Key Type: MUL), linking to the primary key of the `task` table. This column is essential for SQL queries that need to correlate specific condensing tasks with their general task records. Since the column is not nullable, every record in the `task_type_condensing` table must have a corresponding `task_id`, ensuring that each entry is directly associated with a unique task in the `task` table."
task_type_condensing,location_header_id,int,YES,MUL,,,location_header,location_header_id,,10.0,0.0,"The `location_header_id` column in the `task_type_condensing` table is an integer field that can optionally contain NULL values. It serves as a foreign key linking to the `location_header` table, which contains details about physical locations. In SQL queries, this column can be used to join the `task_type_condensing` table with the `location_header` table to retrieve or analyze information about where specific condensing tasks are performed, enhancing the ability to track and manage tasks by their physical operation points."
task_type_condensing,photo,varchar(255),YES,,,,,,255.0,,,"The `photo` column in the `task_type_condensing` table is of type `varchar(255)` and can store text up to 255 characters, typically used to hold a path or URL to an image file related to a specific condensing task in a manufacturing or processing system. Since this column is nullable, it is optional and may not contain data for every record. When constructing SQL queries, this column can be used to retrieve or link visual representations of condensing tasks, enhancing the understanding or presentation of task-specific data in applications or reports."
task_type_condensing,manual_gen,tinyint(1),YES,,,,,,,3.0,0.0,"The `manual_gen` column in the `task_type_condensing` table is used to indicate whether a condensing task is manually generated, with a `tinyint(1)` data type where `1` typically represents true (manual) and `0` represents false (automatic). This column can be included in SQL queries to filter or analyze tasks based on whether they are manually initiated or automated. Being nullable, it allows for tasks where the manual or automatic generation status might not be specified."
task_type_defaults,task_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_id` column in the `task_type_defaults` table is an integer column that serves as the primary key, meaning it uniquely identifies each record in the table. This column is crucial for linking the default settings and configurations of different task types to other related tables, such as employee statistics, training records, task logging, and role assignments. Since it is not nullable, every record in the `task_type_defaults` table must have a valid `task_type_id` value, ensuring data integrity and enabling efficient SQL queries that join this table with others based on the `task_type_id`."
task_type_defaults,name_fr,varchar(255),NO,,,,,,255.0,,,"The `name_fr` column in the `task_type_defaults` table is a VARCHAR(255) type field that stores the French names of various default settings and configurations for different types of tasks. This column is not nullable, meaning every record in the table must include a French name for the task type. This field can be used in SQL queries to retrieve or match the French descriptions of task types when displaying or analyzing task settings and configurations in a French-language context."
task_type_defaults,name_en,varchar(255),NO,,,,,,255.0,,,"The `name_en` column in the `task_type_defaults` table is used to store the English name of each task type. This column is of type `varchar(255)` and cannot contain null values, ensuring that every task type has a designated English name. In SQL queries, `name_en` can be used to retrieve or match specific task types by their English names, facilitating easy identification and management of task settings and configurations across the system."
task_type_defaults,max_allowed_time_in_minutes,int,NO,,,,,,,10.0,0.0,"The `max_allowed_time_in_minutes` column in the `task_type_defaults` table specifies the maximum duration, in minutes, allowed for a task of a specific type. This integer column is not nullable, ensuring that every task type has a defined time limit. When constructing SQL queries, use this column to enforce or validate time constraints on tasks, or to join with other task-related tables to analyze or manage task durations across different types of tasks."
task_type_defaults,start_url,varchar(255),NO,,,,,,255.0,,,"The `start_url` column in the `task_type_defaults` table is a non-nullable VARCHAR(255) field that stores the URL used as the starting point for different types of tasks within the system. This URL is essential for directing users to the appropriate web-based resources or interfaces at the beginning of a task. In SQL queries, the `start_url` can be used to retrieve or set the initial web page associated with each task type, ensuring that users begin their tasks with the correct resources."
task_type_defaults,can_be_created_by_human,tinyint(1),NO,,,,,,,3.0,0.0,"The `can_be_created_by_human` column in the `task_type_defaults` table is a boolean-like field (represented as `tinyint(1)`) that indicates whether a task of a particular type can be initiated by a human user. This column is non-nullable, meaning every task type must explicitly specify whether it can be human-initiated (`1` for true, `0` for false). This field is crucial for SQL queries that need to filter or determine task types that are eligible for human creation in the system's workflow or UI logic."
task_type_defaults,can_be_put_on_hold,tinyint(1),NO,,,,,,,3.0,0.0,"The column `can_be_put_on_hold` in the `task_type_defaults` table is a boolean-like field represented by a `tinyint(1)` data type, where the values typically are 0 (false) or 1 (true). It indicates whether tasks of a particular type can be paused or put on hold. This column is essential for SQL queries that need to determine the ability to suspend specific task types, ensuring that task management systems adhere to predefined rules and configurations. Queries referencing this column can help in filtering, conditionally processing, or setting up task flows based on whether tasks can be put on hold."
task_type_defaults,can_assigned_by_human,tinyint(1),NO,,,,,,,3.0,0.0,"The column `can_assigned_by_human` in the `task_type_defaults` table is a boolean-like field represented as a `tinyint(1)`, where a value of `1` indicates that a task can be assigned by a human, and a value of `0` suggests it cannot. This column is essential for SQL queries that need to determine whether task types in the system can involve human intervention for assignment. Since this column is not nullable, every task type in the table must explicitly specify whether or not it supports human-based assignment, ensuring that SQL queries can reliably use this column to filter or join task types based on this attribute."
task_type_defaults,can_be_reopened,tinyint(1),NO,,,,,,,3.0,0.0,"The `can_be_reopened` column in the `task_type_defaults` table is used to indicate whether tasks of a certain type can be reopened after they have been closed. This column stores values as `tinyint(1)`, where typically `1` means the task can be reopened and `0` means it cannot. This field is essential for determining the behavior of task handling and management within the system and is non-nullable, ensuring that every task type must explicitly specify whether it can be reopened."
task_type_defaults,description_fr,text,YES,,,,,,65535.0,,,"The `description_fr` column in the `task_type_defaults` table stores textual descriptions of the default settings and configurations for various task types, specifically in French. This column can be used in SQL queries to retrieve or update the French language descriptions associated with different task types. Given that it's nullable, SQL queries should handle cases where the description might be absent (NULL) for some task types."
task_type_defaults,description_en,text,YES,,,,,,65535.0,,,"The `description_en` column in the `task_type_defaults` table stores textual descriptions of default settings and configurations for different types of tasks, written in English. It can be used in SQL queries to retrieve or update the English descriptions of task settings, aiding in clarifying the purpose and parameters of tasks for users and administrators. This column is nullable, meaning it can hold NULL values if a description is not provided or applicable."
task_type_defaults,has_training,tinyint(1),NO,,,0,,,,3.0,0.0,"The `has_training` column in the `task_type_defaults` table is used to indicate whether a specific type of task requires training. It is a non-nullable `tinyint(1)` field, where a value of `1` means training is required, and `0` means no training is necessary. This column is crucial for SQL queries that need to filter or determine task types based on their training requirements within the system."
task_type_defaults,training_expiration,int,YES,,,,,,,10.0,0.0,"The `training_expiration` column in the `task_type_defaults` table specifies the duration (in days) after which the training associated with a particular task type is considered expired. This column can be used in SQL queries to calculate the validity of training for employees, determining when retraining might be necessary based on the task type. Since it is nullable, SQL queries should account for possible NULL values, which indicate that the training does not expire."
task_type_defaults,min_start_time,time,YES,,,,,,,,,"The `min_start_time` column in the `task_type_defaults` table specifies the earliest possible start time for tasks of different types. This time data type column can be used in SQL queries to set or compare the minimum start time when scheduling or configuring tasks within the system. Since it is nullable, SQL queries should account for possible NULL values which indicate that no specific start time is set for some task types."
task_type_defaults,in_progress_limit,int,YES,,,,,,,10.0,0.0,"The `in_progress_limit` column in the `task_type_defaults` table specifies the maximum number of tasks of a particular type that can be marked as ""in progress"" at any given time. This integer column, which can accept null values, is used to enforce constraints or limits on the number of simultaneous tasks to ensure efficient task management within the system. SQL queries can reference this column to check or set limits when updating or creating task records, thereby helping maintain optimal workflow and prevent task overload."
task_type_general_dc,task_type_general_dc_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `task_type_general_dc_id` in the `task_type_general_dc` table serves as the primary key and uniquely identifies each record in this table. It is an integer (`int`) and cannot be null (`Nullable: NO`), ensuring that every entry in the table has a unique identifier. This column is essential for establishing relationships with other tables, such as linking specific task types to their corresponding entries in the `task` table via `task_id`, and should be used in SQL queries when you need to reference or manipulate data specific to individual task types in the context of digital content tasks."
task_type_general_dc,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_general_dc` table is an integer type field that uniquely identifies tasks related to digital content. It is a non-nullable column, indicating that every record in this table must have a `task_id` value. This column is marked with a key type of MUL, suggesting it is part of a foreign key relationship, likely linking to a corresponding `task_id` in the `task` table, thereby establishing a connection between task types and specific tasks. This column is essential for SQL queries that aim to join or retrieve task-related information across the `task_type_general_dc` and `task` tables."
task_type_general_dc,type,"enum('QA Learning â Regular','Portioning â Regular','Facilities â Regular','Reception â Regular','Loading','Reception â Projects','QA Learning â Projects','Other','Packing â Regular','Cleaning â Regular','Liquidation','Facilities/Cleaning â Projects','Packing â Projects','Portioning â Projects')",YES,,,,,,30.0,,,"The column `type` in the table `task_type_general_dc` is an enumerated data type that categorizes different types of digital content tasks, such as 'QA Learning â Regular', 'Portioning â Regular', 'Facilities â Regular', and several others. This column can be used in SQL queries to filter or group task data based on specific task types. Since it is nullable, SQL queries should account for the possibility of NULL values, which indicate that the task type has not been specified."
task_type_general_dc,description,text,YES,,,,,,65535.0,,,"The `description` column in the `task_type_general_dc` table holds text data that provides a detailed explanation or classification of the task types related to digital content tasks. This column can be used in SQL queries to filter or sort task types based on their descriptions, facilitating more specific searches or reports on task classifications. Since the column is nullable, SQL queries should account for the possibility of null values when performing operations that involve the `description` column."
task_type_general_dc,tablet_id,varchar(25),YES,,,,,,25.0,,,"The `tablet_id` column in the `task_type_general_dc` table is a VARCHAR(25) field that can contain alphanumeric identifiers up to 25 characters long. Although it is marked as nullable, meaning it can accept NULL values, its purpose is typically to store a unique identifier for a tablet device associated with a task. This column can be used in SQL queries to filter or join data based on specific tablet devices involved in the completion of digital content tasks."
task_type_general_dc,comment,text,YES,,,,,,65535.0,,,"The `comment` column in the `task_type_general_dc` table is used to store textual remarks or notes related to task types for digital content tasks. Since this column is of type text and is nullable, it can contain arbitrary textual data or be left empty. This column can be utilized in SQL queries to provide additional context or explanations about the task type, which can be helpful for reporting or auditing purposes."
task_type_general_dc,closed_by,int,YES,MUL,,,users,user_id,,10.0,0.0,"The `closed_by` column in the `task_type_general_dc` table is an integer type that can optionally be null and is used to reference the `users` table, indicating which user closed or completed a task. This column is part of a foreign key relationship (indicated by the key type 'MUL' for multiple key usage), allowing SQL queries to join this table with the `users` table to retrieve details about the user who completed the task. Such queries can provide insights into task management and user activity within the system."
task_type_general_dc,expected_task_time,int,NO,,,,,,,10.0,0.0,"The `expected_task_time` column in the `task_type_general_dc` table is of type integer and is not nullable, indicating that it must always have a value. This column specifies the anticipated time required to complete a task, measured in units consistent with your system's standards (such as minutes or seconds). In SQL queries, you can use this column to estimate workload, schedule task assignments, and analyze task efficiency by comparing expected times with actual completion times from related tables."
task_type_inventory_adjustment,task_type_inventory_adjustment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_inventory_adjustment_id` column in the `task_type_inventory_adjustment` table is an integer-based primary key that uniquely identifies each inventory adjustment task within the system. This column is essential for linking and querying specific adjustment tasks to corresponding inventory lots and movements, facilitating accurate tracking and management of inventory adjustments. Since it is non-nullable and serves as a primary key, each record must have a unique `task_type_inventory_adjustment_id`, ensuring data integrity and enabling efficient retrieval and association of task-related data in SQL queries."
task_type_inventory_adjustment,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_inventory_adjustment` table is an integer identifier for inventory adjustment tasks. It is a non-nullable field, indicating that every record in this table must have a `task_id` associated with it. As it is marked with a key type of MUL, this column can be used to join this table with other tables in the database that contain a `task_id`, facilitating the analysis and tracking of inventory adjustments linked to specific tasks."
task_type_inventory_adjustment,lot_id,int,YES,MUL,,,inventory,lot_id,,10.0,0.0,"The `lot_id` column in the `task_type_inventory_adjustment` table is an integer that optionally links each inventory adjustment task to a specific inventory lot. As it is marked with a key type of MUL, indicating it is part of a non-unique index, this column can be used in SQL queries to join with other tables that contain a `lot_id` column, facilitating the analysis of tasks associated with particular inventory lots. This relationship is crucial for tracking how specific inventory lots are adjusted and managed within the system."
task_type_inventory_adjustment,inventory_activity_id,int,YES,MUL,,,inventory_activity,inventory_activity_id,,10.0,0.0,"The `inventory_activity_id` column in the `task_type_inventory_adjustment` table is an integer field that can optionally contain a value (nullable). It is marked with a key type of `MUL`, indicating that it is indexed and may be involved in establishing a relationship with another table, likely referencing an `activity_id` in an inventory activity table. This column is used in SQL queries to link inventory adjustment tasks to specific inventory activities, facilitating the tracking of how inventory adjustments relate to particular inventory movements or activities within the system. Queries involving this column can help analyze or manage the adjustments made to the inventory, ensuring accurate task and inventory alignment."
task_type_inventorycheck,task_type_inventorycheck_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_inventorycheck_id` column in the `task_type_inventorycheck` table is an integer column that serves as the primary key. This column uniquely identifies each inventory check task recorded in the table. It is essential for SQL queries that aim to retrieve, update, or delete specific inventory check tasks, and it is used to establish relationships with other tables that track detailed actions related to these tasks. As it is not nullable and is a primary key, every record in the table must have a unique `task_type_inventorycheck_id`."
task_type_inventorycheck,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_inventorycheck` table is an integer type identifier used to uniquely reference inventory check tasks. As a non-nullable field with a key type of MUL (indicating it is part of a composite key or indexed multiple times), it is essential for linking and retrieving specific task records within SQL queries. This column facilitates the integration of task-related data across various associated tables, ensuring efficient management and tracking of inventory activities."
task_type_inventorycheck,lot_id,int,NO,MUL,,,inventory,lot_id,,10.0,0.0,"The `lot_id` column in the `task_type_inventorycheck` table is an integer type field that is crucial for linking inventory check tasks to specific inventory lots. It is a non-nullable column, ensuring that every record in this table must be associated with an inventory lot, signifying a mandatory relationship. As indicated by the key type 'MUL', this column can be used in SQL queries to join the `task_type_inventorycheck` table with other tables that track detailed inventory lot information, facilitating comprehensive queries about inventory tasks related to specific lots."
task_type_inventorycheck,status,tinyint,NO,MUL,,,,,,3.0,0.0,"The `status` column in the `task_type_inventorycheck` table is used to represent the current state of an inventory check task, using a `tinyint` data type. This column is not nullable, ensuring that every task must have a status defined. It is indexed (as indicated by the Key Type 'MUL'), allowing for efficient querying and sorting of tasks based on their status. This setup is crucial for managing workflow and tracking the progress of inventory check tasks within the system."
task_type_inventorycheck,empty_inventory,tinyint(1),NO,,,0,,,,3.0,0.0,"The `empty_inventory` column in the `task_type_inventorycheck` table is a boolean field represented as a `tinyint(1)`, where a value of `0` indicates that the inventory is not empty. This column is essential for SQL queries that need to identify tasks related to checking or managing empty inventory slots. It is not nullable, ensuring that every record in the table must explicitly state whether the inventory is empty or not, thus providing critical information for inventory management and task allocation processes."
task_type_inventorycheck,update_date,date,YES,,,,,,,,,"The `update_date` column in the `task_type_inventorycheck` table records the date when an inventory check task was last updated. This column, which can contain null values, is useful in SQL queries for tracking changes over time, analyzing the timeliness of task updates, and ensuring that inventory management actions are up-to-date. It can be used to filter, sort, or group inventory tasks based on when they were last modified."
task_type_inventorycheck,update_time,time,YES,,,,,,,,,"The column `update_time` in the `task_type_inventorycheck` table records the time when an inventory check task was last updated. This time field, which is nullable, indicates that not all tasks may have an update recorded. In SQL queries, this column can be used to filter or sort inventory check tasks based on the most recent updates, aiding in the management and tracking of various inventory-related actions effectively."
task_type_inventorycheck,created_date,datetime,YES,,,,,,,,,"The `created_date` column in the `task_type_inventorycheck` table is of type `datetime` and it may contain null values. This column records the date and time when each inventory check task was created. In SQL queries, `created_date` can be used to filter or sort inventory check tasks based on when they were initiated, which is useful for generating reports on task timelines or for operational auditing purposes."
task_type_inventorycheck,created_by,int,NO,MUL,,2,users,user_id,,10.0,0.0,"The `created_by` column in the `task_type_inventorycheck` table is an integer column that references the user ID of the person who created each inventory check task. This column is non-nullable, ensuring that every task must have an associated creator, and it is indexed (indicated by the Key Type 'MUL'), which allows for efficient querying and joining with user data tables based on who created the task. This setup is crucial for tracking accountability and managing permissions related to task handling in inventory management systems."
task_type_inventorycheck,blocked_by,int,YES,MUL,,,users,user_id,,10.0,0.0,"The column `blocked_by` in the `task_type_inventorycheck` table is an integer field that can optionally contain a value (nullable). This column is used to reference the ID of a user who has blocked a particular inventory check task, indicating that the task is temporarily on hold or restricted. The `MUL` key type suggests that this column is indexed and likely has a foreign key relationship with a user table, facilitating efficient queries to identify which user has blocked a task and to join user data for detailed reporting or task management."
task_type_inventorycheck,blocked_date,datetime,YES,,,,,,,,,"The `blocked_date` column in the `task_type_inventorycheck` table represents the date and time when a specific inventory check task was blocked, using the datetime data type. This column is nullable, indicating that not all tasks might have a blocking date. In SQL queries, this column can be used to filter or analyze inventory tasks based on their blocked status, such as identifying tasks that were delayed or temporarily halted, which can be crucial for managing workflow and task prioritization in inventory management."
task_type_inventorycheck,reason_id,"enum('Not found','Recount','Needs cleaning','Bad quality','Horrible quality','Expiration','Liquidation','Verify Portioning','Low quantity','Empty lot verification')",YES,,,,,,22.0,,,"The `reason_id` column in the `task_type_inventorycheck` table is an enumerated type that specifies the reason for an inventory check task. This column can hold values such as 'Not found', 'Recount', 'Needs cleaning', and several others, each representing a specific issue or action required in the inventory management process. Since it is nullable, it is optional to specify a reason for every task. This column can be used in SQL queries to filter or analyze inventory tasks based on their reasons, aiding in detailed reporting and operational insights."
task_type_inventorycheck,put_away_history_id,int,YES,MUL,,,put_away_history,put_away_history_id,,10.0,0.0,"The `put_away_history_id` column in the `task_type_inventorycheck` table is an integer field that can optionally link to a corresponding record in a put-away history table, facilitating the tracking of how specific inventory items were stored after being received. Given its designation as a 'MUL' key type, this column is indexed and can be used in SQL queries to efficiently join the `task_type_inventorycheck` table with the put-away history table, enhancing the ability to analyze or report on inventory storage patterns as part of inventory management tasks. This linkage is particularly useful for understanding the storage aspects of inventory check tasks, which can include actions like cleaning, discounting, and expiration tracking."
task_type_inventorycheck,uncountable,tinyint(1),YES,,,,,,,3.0,0.0,"The column `uncountable` in the `task_type_inventorycheck` table is a `tinyint(1)` type, indicating it likely represents a boolean value where `0` means false and `1` means true. This column specifies whether a particular inventory check task involves items that are not countable. When constructing SQL queries, use this column to filter or determine tasks that involve handling of uncountable items, such as bulk materials or fluids, which might require different procedures or checks compared to countable inventory items."
task_type_inventorycheck,old_expiration,datetime,YES,,,,,,,,,"The column `old_expiration` in the `task_type_inventorycheck` table is used to store datetime values that indicate the previous expiration dates of items before any updates or actions were applied during inventory checks. This column can be nullable, meaning not all records will necessarily have a previous expiration date. In SQL queries, this column can be used to filter or sort inventory check tasks based on the old expiration dates, or to compare changes in expiration dates over time for reporting or tracking purposes."
task_type_inventorycheck,new_expiration,datetime,YES,,,,,,,,,"The `new_expiration` column in the `task_type_inventorycheck` table holds datetime values indicating the updated expiration dates for inventory items following a check task. This column is optional (nullable) and can be used in SQL queries to filter, update, or report on inventory items whose expiration dates have been reassessed and potentially extended or shortened. It is particularly useful in queries related to inventory expiration tracking and can be joined with user and inventory lot data to provide comprehensive insights into inventory management and actions taken."
task_type_inventorycheck,comment,text,YES,,,,,,65535.0,,,"The `comment` column in the `task_type_inventorycheck` table is used to store textual remarks or notes related to inventory check tasks. As it is a text data type and nullable, it can accommodate optional, free-form descriptions of any length, providing additional context or specific details about the tasks, such as reasons for certain actions or exceptions noted during the task execution. This column can be utilized in SQL queries to filter, display, or update these task-specific comments, enhancing the understanding and management of inventory check processes."
task_type_inventorycheck,check_location,tinyint(1),NO,,,0,,,,3.0,0.0,"The `check_location` column in the `task_type_inventorycheck` table is used to indicate whether a specific inventory check task involves a location check, represented as a boolean value (0 or 1). This column is critical for SQL queries that need to filter or analyze tasks based on whether they include checking the location of items in the inventory. Since this column is not nullable and defaults to 0, it ensures that every record specifies whether a location check is involved, facilitating accurate reporting and task management related to inventory locations."
task_type_inventorycheck,isPortioned_value_when_ttic_created,tinyint,NO,,,1,,,,3.0,0.0,"The column `isPortioned_value_when_ttic_created` in the `task_type_inventorycheck` table is used to store a boolean value (represented as a tinyint, where typically 0 means false and 1 means true) indicating whether the inventory item was portioned at the time the inventory check task was created. This column is crucial for queries that need to filter or analyze tasks based on the portioning status of items at the task creation time. Since the column is non-nullable, every record in the table will have a definitive portioned status, ensuring reliable data for reporting and decision-making processes related to inventory management."
task_type_inventorycheck,location_header_id_value_when_ttic_created,int,NO,,,0,,,,10.0,0.0,"The column `location_header_id_value_when_ttic_created` in the `task_type_inventorycheck` table is an integer that represents the unique identifier of a location header at the time when a task for inventory check is created. This non-nullable column ensures that each task is explicitly linked to a specific location, capturing the state of the location at the time of task creation. This column is crucial for SQL queries that need to track or analyze inventory check tasks based on their original location, facilitating accurate historical data analysis and operational tracking."
task_type_inventorycheck,remaining_qty_in_lot_when_ttic_created,int,NO,,,0,,,,10.0,0.0,"The column `remaining_qty_in_lot_when_ttic_created` in the `task_type_inventorycheck` table is an integer that records the quantity of items remaining in an inventory lot at the time when an inventory check task is created. This column is crucial for tracking how inventory levels change over time in relation to specific tasks like cleaning, discounting, and relocation. It is non-nullable, ensuring that every task record must have a defined quantity value, thus maintaining data integrity and allowing for accurate inventory assessments."
task_type_inventorycheck,system_generated,tinyint(1),YES,,,0,,,,3.0,0.0,"The `system_generated` column in the `task_type_inventorycheck` table is a `tinyint(1)` type and can contain null values. This column is used to indicate whether a task in the inventory check process is created automatically by the system (1) or manually by a user (0). In SQL queries, this column can be used to filter and analyze tasks based on their origin (system-generated vs. user-generated), aiding in the assessment of automated processes versus manual interventions in inventory management."
task_type_inventorycheck,recount_percent,int,YES,,,,,,,10.0,0.0,"The `recount_percent` column in the `task_type_inventorycheck` table is an integer field that can be used to store the percentage of inventory items that need to be recounted during an inventory check task. This column is nullable, meaning that it can hold null values if the recount percentage is not specified for a particular task. In SQL queries, this column can be used to filter or specify tasks based on the required extent of recounting, allowing for targeted queries related to the efficiency and accuracy of inventory audits."
task_type_inventorycheck_lot_verification,task_type_inventorycheck_lot_verification_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `task_type_inventorycheck_lot_verification_id` in the `task_type_inventorycheck_lot_verification` table is an integer-based primary key that uniquely identifies each record. This column is not nullable, ensuring that every record in the table must have a unique identifier. It is essential for SQL queries that need to select, update, or delete specific records in the table, as it provides a unique reference to each row related to the verification of inventory lots during inventory check tasks."
task_type_inventorycheck_lot_verification,task_type_inventorycheck_id,int,NO,MUL,,,task_type_inventorycheck,task_type_inventorycheck_id,,10.0,0.0,"The column `task_type_inventorycheck_id` in the `task_type_inventorycheck_lot_verification` table is an integer field that is crucial for linking lot verification records to specific inventory check tasks. As a non-nullable field with a key type of MUL (indicating it's part of a multiple-key or non-unique index), it ensures that each record in this table is associated with a valid inventory check task. This column should be used in SQL queries to join with other tables that track detailed task information, enabling comprehensive analysis and reporting on inventory verification activities."
task_type_inventorycheck_lot_verification,lot_id,int,NO,MUL,,,inventory,lot_id,,10.0,0.0,"The `lot_id` column in the `task_type_inventorycheck_lot_verification` table is an integer field that uniquely identifies inventory lots. This column is essential for linking each lot verification record to a specific lot in the inventory. It is a non-nullable field, indicating that every record in the table must have a `lot_id` associated with it. The `MUL` key type suggests that `lot_id` acts as a foreign key, potentially linking to a primary key in another table that stores detailed information about each lot. In SQL queries, this column can be used to join the `task_type_inventorycheck_lot_verification` table with other tables that contain lot-specific data, enabling comprehensive analyses and reports on lot verification activities."
task_type_inventorycheck_lot_verification,inventory_activity_id,int,YES,MUL,,,inventory_activity,inventory_activity_id,,10.0,0.0,"The column `inventory_activity_id` in the table `task_type_inventorycheck_lot_verification` is an integer that optionally links to an inventory activity. This column is used in SQL queries to associate specific lot verification records with corresponding inventory activities. As its key type is marked as 'MUL', it suggests that this column is indexed and can be involved in joining operations with other tables that contain an `inventory_activity_id`, facilitating efficient queries on inventory activities related to lot verifications during inventory checks."
task_type_it,task_type_it_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_it_id` column in the `task_type_it` table is an integer column that serves as the primary key, uniquely identifying each record of IT-related task types. This column is essential for SQL queries when you need to reference or manipulate specific IT task type records. It is also used to establish and enforce a foreign key relationship with the `task_id` in the task table, linking each IT task type to its corresponding general tasks."
task_type_it,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_it` table is an integer data type that serves as a foreign key linking to the `task` table. This column is crucial for associating specific IT-related task types with their general task descriptions and attributes found in the `task` table. Since the `task_id` column is non-nullable and marked as a multiple key (MUL), it ensures that each entry in the `task_type_it` table must have a corresponding valid `task_id` from the `task` table, facilitating the organization and retrieval of task-specific data in SQL queries."
task_type_it,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_it` table is an integer data type that serves as a foreign key linking to the `task` table. This column is crucial for associating specific IT-related task types with their general task descriptions and attributes found in the `task` table. Since the `task_id` column is non-nullable and marked as a multiple key (MUL), it ensures that each entry in the `task_type_it` table must have a corresponding valid `task_id` from the `task` table, facilitating the organization and retrieval of task-specific data in SQL queries."
task_type_it,status,int,NO,,,,,,,10.0,0.0,"The `status` column in the `task_type_it` table is an integer data type that indicates the current status of IT-related tasks. This column is not nullable, meaning every record in the table must have a status value specified. In SQL queries, the `status` column can be used to filter, sort, or group IT tasks based on their current status to efficiently manage and report on task progress and states."
task_type_it,updated_at,datetime,NO,,,,,,,,,"The `updated_at` column in the `task_type_it` table records the datetime when an entry was last updated. This column is essential for tracking changes to the records of IT-related tasks. Since it is not nullable, every record must have a timestamp indicating when it was last modified, which is crucial for maintaining data integrity and enabling efficient data synchronization or auditing processes. Use this column in SQL queries to filter, sort, or verify the recency of task type updates in IT-related operations."
task_type_label_printing,task_type_label_printing_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_label_printing_id` column in the `task_type_label_printing` table serves as the primary key, uniquely identifying each record of label printing tasks and their configurations. This integer column cannot contain null values, ensuring that every record has a unique identifier. In SQL queries, this column is crucial for joining with other related tables such as the `task` table and the `users` table to fetch comprehensive details about who initiated the printing tasks and the specifics of these tasks."
task_type_label_printing,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `user_id` column in the `task_type_label_printing` table is an integer field that references the `users` table, indicating which user initiated or managed a label printing task. Since it is a non-nullable field with a key type of MUL (indicating it may be part of a non-unique index or a foreign key), this column is essential for linking label printing tasks to specific users. In SQL queries, `user_id` can be used to join the `task_type_label_printing` table with the `users` table to retrieve user-related information for each printing task."
task_type_label_printing,task_id,int,YES,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_label_printing` table is an integer data type that serves as a foreign key linking to the `task` table. It can contain null values, indicating that some label printing tasks may not be associated with an entry in the `task` table. This column is used in SQL queries to join the `task_type_label_printing` table with the `task` table, allowing for the retrieval of comprehensive task details related to specific label printing activities."
task_type_label_printing,created_at,timestamp,NO,,,,,,,,,"The `created_at` column in the `task_type_label_printing` table is a timestamp data type that records the exact date and time when a label printing task was created. This column is non-nullable, ensuring that every record in the table has a timestamp indicating when the task was initiated. In SQL queries, this column can be used to filter, sort, or group label printing tasks based on their creation times, facilitating time-based analysis and reporting."
task_type_label_printing,num_printed,int,YES,,,,,,,10.0,0.0,"The `num_printed` column in the `task_type_label_printing` table represents the number of labels that were successfully printed for a specific label printing task. This integer column can be used in SQL queries to calculate statistics such as the total number of labels printed in a given period or to identify tasks with a high number of prints. Since it is nullable, queries should account for the possibility of null values, which might indicate tasks where printing did not occur or was not recorded."
task_type_loadbasket,task_type_loadbasket_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_loadbasket_id` column in the `task_type_loadbasket` table is an integer-based primary key that uniquely identifies each record in the table. This column is essential for SQL queries that need to select, update, or delete specific records within the table. Additionally, as a primary key, it ensures that each record is unique and not nullable, thus it cannot contain any duplicate or null values. This column can be used in JOIN operations to link this table with other tables in the database that share a relationship through this key."
task_type_loadbasket,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_loadbasket` table is an integer type column that serves as a foreign key linking to the `task` table. It is crucial for identifying and associating specific tasks with their corresponding load basket routing configurations. This column cannot contain null values and is indexed, suggesting it is optimized for search operations and can be used effectively in SQL queries to join or filter data based on task-specific routing information."
task_type_loadbasket,lbri_id,int,YES,MUL,,,load_basket_route_info,route_info_id,,10.0,0.0,"The `lbri_id` column in the `task_type_loadbasket` table is an integer column that can contain null values and is indexed with a multiple key (MUL) type, indicating it likely serves as a foreign key linking to another table's primary key, possibly the load basket routing information table. This column is used in SQL queries to join or filter data based on specific routing configurations associated with different task types. Queries utilizing this column can retrieve or manipulate task routing details by referencing the appropriate load basket route identifiers."
task_type_loadbasket,sequence,int,NO,,,,,,,10.0,0.0,"The `sequence` column in the `task_type_loadbasket` table is an integer that likely represents the order in which tasks are to be executed within a specific load basket route. This column is non-nullable, indicating that a sequence must be defined for each entry, ensuring that every task within a route has a specific position or order. This column can be used in SQL queries to sort or filter tasks based on their execution order within their respective routing configurations."
task_type_loadbasket,status,int,NO,,,,,,,10.0,0.0,"The `status` column in the `task_type_loadbasket` table is an integer data type and cannot contain null values. This column is used to represent the state or condition of the mapping between task types and load basket routes. In SQL queries, the `status` column can be used to filter, sort, or join data based on the operational status of the task-route linkage, ensuring that only relevant routing configurations are considered in the data manipulation or retrieval process."
task_type_loadbasket,updated_at,datetime,NO,,,,,,,,,"The `updated_at` column in the `task_type_loadbasket` table records the datetime when an entry was last updated. This non-nullable column ensures that each record always has a timestamp indicating the most recent modification. It can be used in SQL queries to track changes, sort or filter records based on the last update time, and maintain data integrity by showing when task type and load basket routing associations were altered."
task_type_loadbasket,start_basket,int,NO,,,,,,,10.0,0.0,"The `start_basket` column in the `task_type_loadbasket` table is an integer type and is not nullable, indicating that it must always contain a value. This column likely serves as a foreign key linking to another table that contains specific load basket details, identifying the starting point or initial configuration for a load basket associated with a particular task type. In SQL queries, you would use this column to join the `task_type_loadbasket` table with another table that details start basket configurations, enabling the retrieval or manipulation of routing information based on task types."
task_type_loadbasket,end_basket,int,NO,,,,,,,10.0,0.0,"The `end_basket` column in the `task_type_loadbasket` table is an integer that represents the final destination or endpoint basket in the routing configurations for different task types. This column is not nullable, indicating that every record in the table must have a valid `end_basket` value associated with it. The `end_basket` serves as a critical component in SQL queries when determining or analyzing the end points of load basket routes for specific tasks."
task_type_loadbasket,extra_baskets,varchar(100),YES,,,,,,100.0,,,"The `extra_baskets` column in the `task_type_loadbasket` table is a VARCHAR(100) field that can optionally store additional textual information about baskets associated with a specific task type's routing configuration. This column can be included in SQL queries to retrieve, filter, or update details related to supplementary baskets that may be required for certain task types. Given its nullable nature, SQL queries should handle cases where this column may not have a value."
task_type_portioning,task_type_portioning_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_portioning_id` column in the `task_type_portioning` table serves as the primary key, uniquely identifying each record of portioning tasks associated with products. Since it is an integer and non-nullable, every entry in the table must have a unique `task_type_portioning_id`. This column is essential for linking and referencing specific portioning tasks in SQL queries, ensuring data integrity and facilitating joins with other tables related to product portioning operations."
task_type_portioning,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_portioning` table is an integer field used to uniquely identify each portioning task associated with a product. It is a mandatory field (not nullable) and is indexed (MUL key type), which supports efficient querying and joining operations with other tables that reference `task_id`. This column is crucial for linking each task to specific portioning requirements and operations in SQL queries, facilitating data retrieval and manipulation related to product portioning tasks."
task_type_portioning,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The `product_id` column in the `task_type_portioning` table is an integer field that uniquely identifies products associated with specific portioning tasks. As a non-nullable field with a key type of MUL (indicating it's part of a non-unique index or a foreign key), it is essential for linking each portioning task to its corresponding product details. This column should be used in SQL queries to join the `task_type_portioning` table with other product-related tables to fetch or manipulate data concerning portioning operations for specific products."
task_type_portioning,quantity_needed,int,NO,,,,,,,10.0,0.0,"The `quantity_needed` column in the `task_type_portioning` table is an integer field that specifies the amount of product required to complete a portioning task. This column is essential for accurately determining the volume of products needed for specific tasks, ensuring that portioning operations are aligned with supplier forecasts and product specifications. It is not nullable, indicating that a value must always be provided for this column in every record to maintain data integrity and operational efficiency in the portioning process."
task_type_portioning,quantity_portioned,int,YES,,,,,,,10.0,0.0,"The column `quantity_portioned` in the `task_type_portioning` table represents the integer value of the quantity of a product that has been allocated for portioning based on supplier forecast orders and specific tasks. As this column is nullable, it can contain null values, indicating situations where the portioning quantity might not be specified or determined yet. This column can be used in SQL queries to calculate, filter, or report the total or specific quantities portioned in product portioning operations, aiding in inventory and production planning."
task_type_portioning,started_at,datetime,YES,,,,,,,,,"The `started_at` column in the `task_type_portioning` table records the datetime when a portioning task was initiated. This column, which can accept null values, is useful in SQL queries for tracking and analyzing the start times of various portioning tasks related to products. By querying this column, users can gain insights into the timing and scheduling of portioning operations, facilitating better planning and coordination of tasks."
task_type_portioning,finished_at,datetime,YES,,,,,,,,,"The `finished_at` column in the `task_type_portioning` table records the datetime when a portioning task for a product was completed. As a nullable datetime data type, this column can store null values, indicating that some tasks might not yet be completed. This column is useful in SQL queries when you need to filter or analyze tasks based on their completion times, such as finding all tasks finished within a specific date range or determining which tasks are still ongoing."
task_type_portioning,supplier_forecast_orders_id,int,YES,MUL,,,supplier_forecast_orders,supplier_forecast_orders_id,,10.0,0.0,"The column `supplier_forecast_orders_id` in the `task_type_portioning` table is an integer type that can optionally contain null values. It serves as a foreign key linking to the `supplier_forecast_orders` table, indicating the specific forecast order associated with each portioning task. This column is essential for SQL queries that need to join or filter data based on the relationship between portioning tasks and their corresponding supplier forecasts, facilitating targeted data retrieval and management of product portioning operations."
task_type_portioning,expected_portion_speed,float,NO,,,0,,,,12.0,,"The `expected_portion_speed` column in the `task_type_portioning` table stores the anticipated speed at which products are portioned, expressed as a float. This column is crucial for managing the efficiency and planning of portioning tasks, as it quantifies the expected rate of portioning per product. Since it is not nullable, every record in the table must have a value for `expected_portion_speed`, ensuring that all portioning tasks have a defined performance expectation."
task_type_portioning,products_manipulation_needed,tinyint,YES,,,,,,,3.0,0.0,"The `products_manipulation_needed` column in the `task_type_portioning` table is a `tinyint` data type used to indicate whether manipulation of a product is required for portioning tasks. This column can hold values where `1` represents that manipulation is needed and `0` indicates no manipulation is required. When constructing SQL queries, this column can be used to filter or identify tasks that involve product manipulation, thereby helping in planning and executing specific portioning requirements linked to supplier forecast orders and tasks."
task_type_portioning,lot_id,int,YES,MUL,,,,,,10.0,0.0,"The `lot_id` column in the `task_type_portioning` table is an integer field that can optionally contain a value (nullable) and is used to establish a non-unique relationship (indicated by the key type 'MUL' for multiple) with another table, likely referencing lots. In SQL queries, this column can be used to join the `task_type_portioning` table with other tables that track lot-specific information, enabling the analysis or management of portioning tasks based on specific lot identities. This facilitates the correlation of portioning tasks with particular batches or groups of products as defined by the lot ID."
task_type_portioning_location_details,task_type_portioning_location_detail_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `task_type_portioning_location_detail_id` in the `task_type_portioning_location_details` table serves as the primary key, uniquely identifying each record in the table. This integer column is not nullable, ensuring that every record has a unique identifier. When constructing SQL queries, use this column to specifically target, reference, or join records based on unique location-specific configurations linked to the `task_type_portioning` table via the `task_type_portioning_id`."
task_type_portioning_location_details,task_type_portioning_id,int,NO,MUL,,,task_type_portioning,task_type_portioning_id,,10.0,0.0,"The `task_type_portioning_id` column in the `task_type_portioning_location_details` table is an integer field that serves as a foreign key linking to the `task_type_portioning` table. This column is crucial for SQL queries that need to retrieve or manipulate location-specific configuration data associated with different task types. Since it is a non-nullable field with a key type of MUL (indicating it may be part of a composite key or indexed), it ensures every record in `task_type_portioning_location_details` must have a valid, corresponding entry in `task_type_portioning`, thus maintaining referential integrity and enabling efficient joins."
task_type_portioning_location_details,lot_id,int,NO,,,,,,,10.0,0.0,"The `lot_id` column in the `task_type_portioning_location_details` table is an integer field used to uniquely identify different lots within the context of task type portioning configurations at specific locations. Since this column is not nullable, every record in this table must have a `lot_id` value specified, ensuring that all entries are linked to a specific lot. This column can be used in SQL queries to filter or join data based on specific lot identifiers, facilitating targeted data retrieval or manipulation within the scope of location-specific task settings."
task_type_portioning_location_details,quantity_portioned,int,YES,,,0,,,,10.0,0.0,"The `quantity_portioned` column in the `task_type_portioning_location_details` table is of type integer and can store null values. This column is used to specify the number of portions allocated for a task type at a specific location. In SQL queries, this column can be referenced to determine or set the portion quantities associated with various task types and locations, facilitating location-specific task management and configuration."
task_type_portioning_location_details,status,tinyint,YES,,,0,,,,3.0,0.0,"The `status` column in the `task_type_portioning_location_details` table is a `tinyint` data type that indicates the current status of a location-specific task type portioning configuration. This column can be used in SQL queries to filter, sort, or update the status of task configurations based on their operational or functional state. Since it is nullable, SQL queries should account for potential null values which might represent undefined or unassigned statuses."
task_type_portioning_location_details,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `task_type_portioning_location_details` table holds datetime values indicating when each record was created. This column is optional, as indicated by its nullable status, meaning that some records may not have a creation timestamp. In SQL queries, this column can be used to filter or sort records based on the date and time they were added to the database, allowing for temporal analysis of data entries related to location-specific task type configurations."
task_type_prepbasket,task_type_prepbasket_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_prepbasket_id` column in the `task_type_prepbasket` table serves as the primary key, uniquely identifying each record in the table. This integer column is not nullable, ensuring that every record has a unique identifier. In SQL queries, this column is crucial for joining the `task_type_prepbasket` table with other related tables such as `task_type_prepbasket_weight`, `task_type_qualitycheck`, and potentially others like the `task` and `users` tables to gather comprehensive details about basket preparation tasks and their assignments."
task_type_prepbasket,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_prepbasket` table is an integer that uniquely identifies each basket-specific task. As a non-nullable field with a key type of MUL (indicating it's part of a non-unique index, likely a foreign key), it is essential for linking each task in this table to corresponding entries in the `task` table, which contains the basic task information. This column is used in SQL queries to join the `task_type_prepbasket` table with other related tables, such as the `users` table for user assignments, and to ensure data integrity and relational consistency across the database."
task_type_prepbasket,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_prepbasket` table is an integer that uniquely identifies each basket-specific task. As a non-nullable field with a key type of MUL (indicating it's part of a non-unique index, likely a foreign key), it is essential for linking each task in this table to corresponding entries in the `task` table, which contains the basic task information. This column is used in SQL queries to join the `task_type_prepbasket` table with other related tables, such as the `users` table for user assignments, and to ensure data integrity and relational consistency across the database."
task_type_prepbasket,order_id,int,NO,MUL,,,,,,10.0,0.0,"The `order_id` column in the `task_type_prepbasket` table is an integer field that is crucial for linking preparation basket tasks to specific orders. It is a non-nullable column, ensuring that every task record must be associated with an order. As a key with the type 'MUL', it suggests that `order_id` can be used to join this table with other tables that contain an `order_id`, facilitating queries that combine task data with order details, such as which tasks are assigned to which orders, and ensuring data integrity across related tables."
task_type_prepbasket,product_id,int,NO,,,,,,,10.0,0.0,"The `product_id` column in the `task_type_prepbasket` table is an integer field that uniquely identifies a product associated with a preparation basket task. This column is essential for linking tasks to specific products and cannot contain null values, ensuring that every task in the table is always associated with a product. In SQL queries, this column can be used to join the `task_type_prepbasket` table with other tables that contain product-related information, facilitating comprehensive data analysis and reporting on tasks per product."
task_type_prepbasket,quantity,int,NO,,,,,,,10.0,0.0,"The `quantity` column in the `task_type_prepbasket` table is an integer field that specifies the number of items or units involved in a particular preparation basket task. This column is not nullable, meaning every task record must have a quantity specified. In SQL queries, this column can be used to calculate the total quantities across tasks, filter tasks based on quantity thresholds, or join with other tables like `task_type_prepbasket_weight` or `task_type_qualitycheck` to analyze detailed task metrics based on the quantity of items handled."
task_type_prepbasket,quantity_put,int,NO,,,0,,,,10.0,0.0,"The column `quantity_put` in the `task_type_prepbasket` table is an integer type that indicates the quantity of items placed in a preparation basket for a specific task. This column is non-nullable, meaning every record in the table must have a value for `quantity_put`. In SQL queries, this column can be used to calculate the total number of items processed, assess productivity, or verify task completion by comparing it against planned quantities."
task_type_prepbasket,position_on_cart,int,NO,,,,,,,10.0,0.0,"The `position_on_cart` column in the `task_type_prepbasket` table is an integer field that specifies the location or order of a task within a preparation basket on a cart. This column is crucial for organizing tasks in a sequence, ensuring that each task is carried out in the designated order. As it is a non-nullable integer, every record in the table must have a valid `position_on_cart` value, which can be used in SQL queries to sort or filter tasks based on their physical arrangement in the cart."
task_type_prepbasket,box_number,int,NO,,,,,,,10.0,0.0,"The `box_number` column in the `task_type_prepbasket` table is an integer field that uniquely identifies a specific preparation basket within the context of tracking tasks. This column is crucial for associating each task with a particular basket, ensuring that tasks are correctly assigned and managed. It is not nullable, indicating that every record in the `task_type_prepbasket` table must have a `box_number` value to ensure data integrity and proper task assignment to baskets."
task_type_prepbasket,status,int,NO,MUL,,,,,,10.0,0.0,"The `status` column in the `task_type_prepbasket` table is an integer data type that represents the current state of a preparation basket task. It is a mandatory field (`Nullable: NO`) which means every record in this table must have a status value. As it has a key type of `MUL`, this suggests that the `status` column may be used in joining this table with other tables or is indexed for improving query performance, especially in filtering and sorting operations based on the task status. This column is crucial for tracking the progress and lifecycle of preparation basket tasks within the system."
task_type_prepbasket,updated_at,datetime,NO,MUL,,,,,,,,"The `updated_at` column in the `task_type_prepbasket` table records the datetime when a preparation basket task record was last updated. This non-nullable column ensures that each task's modification timestamp is tracked consistently, providing an essential data point for monitoring updates and changes. In SQL queries, this column can be used to filter or sort tasks based on the last update time, crucial for generating reports or auditing task management processes."
task_type_prepbasket,reserved_by,int,YES,MUL,,,users,user_id,,10.0,0.0,"The `reserved_by` column in the `task_type_prepbasket` table is an integer field that can optionally store the ID of a user who has reserved a specific preparation basket task. This column is a foreign key (indicated by the key type 'MUL' for multiple key usage) that references the `users` table, allowing SQL queries to join these tables to retrieve details about the user who reserved the task. Since the column is nullable, it is possible for some tasks to not be reserved by any user, which should be considered when performing data retrieval or analysis involving task reservations."
task_type_prepbasket,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `task_type_prepbasket` table stores the datetime when each preparation basket task was created. This column, which allows NULL values, can be used in SQL queries to filter or sort tasks based on their creation time. For instance, analysts can retrieve tasks created within a specific time frame or understand task distribution over time."
task_type_prepbasket_weight,task_type_prepbasket_weight_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `task_type_prepbasket_weight_id` in the `task_type_prepbasket_weight` table serves as the primary key for uniquely identifying each record of weight-related configurations associated with preparation basket tasks. This integer column is not nullable, ensuring that every record must have a unique identifier. It is used in SQL queries to join with related tables like `task_type_prepbasket` and `task_type_qualitycheck_weight` to access or manipulate specific weight settings for quality control and task management."
task_type_prepbasket_weight,task_type_prepbasket_id,int,NO,MUL,,,task_type_prepbasket,task_type_prepbasket_id,,10.0,0.0,"The column `task_type_prepbasket_id` in the `task_type_prepbasket_weight` table serves as a foreign key that links to the `task_type_prepbasket` table, establishing a relationship between weight configurations and specific preparation basket task types. This integer column is not nullable, indicating that every record in the `task_type_prepbasket_weight` table must have a corresponding valid ID from the `task_type_prepbasket` table. This column is crucial for SQL queries that need to join or filter data based on specific prep basket tasks and their associated weight configurations."
task_type_prepbasket_weight,weight,int,YES,,,0,,,,10.0,0.0,"The column named 'weight' in the table 'task_type_prepbasket_weight' is of type integer and can contain null values. This column is used to specify the weight configurations for various preparation basket task types. In SQL queries, this column can be used to set, update, or query the weight parameters associated with different prep basket tasks, which are crucial for both operational settings and quality control measures."
task_type_prepbasket_weight,synced,tinyint,NO,,,0,,,,3.0,0.0,"The `synced` column in the `task_type_prepbasket_weight` table is a `tinyint` type and cannot be null. It is used to indicate whether the weight configurations for preparation basket task types have been synchronized with an external system or another part of the application, where a value of 0 typically represents 'not synced'. This column is crucial for ensuring that the data across systems or components remains consistent and up-to-date, and it should be checked or updated in SQL queries related to data synchronization status."
task_type_prepbasket_weight,unfound,int,YES,,,0,,,,10.0,0.0,"The `unfound` column in the `task_type_prepbasket_weight` table is an integer type that can optionally contain null values. It is used to store data related to the number of items that could not be found during preparation basket tasks. This column can be included in SQL queries to analyze or report on the efficiency and issues encountered in locating items specified in prep basket task types, aiding in adjustments to weight configurations or operational processes."
task_type_prepbaskethelper,task_type_prepbaskethelper_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_prepbaskethelper_id` column in the `task_type_prepbaskethelper` table serves as the primary key, uniquely identifying each record. This integer column is crucial for distinguishing different relationships between tasks in a basket workflow system, where one task assists or is dependent on another for preparation. It is non-nullable, ensuring that every record must have a unique identifier, which is essential for accurately linking and managing task dependencies in SQL queries."
task_type_prepbaskethelper,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_prepbaskethelper` table is used to identify a specific task that is being supported or prepared for by another task within a basket workflow system. This column is of integer data type and cannot contain null values, indicating that every record must have an associated task. As it is marked with a key type of MUL (multiple), this column can be involved in joining operations with other tables, typically to fetch details about the task or to check dependencies with other tasks. Queries involving this column can be used to trace task dependencies and ensure that all prerequisite tasks are identified and managed correctly."
task_type_prepbaskethelper,helping_task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `helping_task_id` column in the `task_type_prepbaskethelper` table is an integer column that identifies a task which assists or supports another task in a basket workflow system. This column is not nullable, indicating that every record in the table must have a valid `helping_task_id`. It is marked with a key type of MUL, suggesting that it may be involved in a non-unique index or a foreign key relationship, allowing SQL queries to efficiently join and retrieve data based on the supporting task relationships."
task_type_prepbaskethelper,found_at,datetime,YES,,,,,,,,,"The `found_at` column in the `task_type_prepbaskethelper` table records the datetime when a relationship between two tasks was established in a basket workflow system. This column is used to track when a helping task was identified as supporting another task, which is crucial for analyzing the timing and sequencing of task dependencies. Since it is nullable, not all records may have a timestamp, indicating that the exact time of relationship establishment was not recorded in some instances."
task_type_prepcart,task_type_prepcart_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_prepcart_id` column in the `task_type_prepcart` table serves as the primary key, uniquely identifying each record within the table. This integer column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, this column can be used to reference specific associations between task types and shopping carts, providing a reliable way to fetch, update, or delete records based on their unique ID."
task_type_prepcart,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_prepcart` table is an integer type column that serves as a foreign key linking each record to a specific task in another table. This column is non-nullable, meaning every record in the `task_type_prepcart` table must have a corresponding task ID. It is marked with a key type of MUL, indicating that it can be involved in multiple join conditions and may not be unique, allowing multiple shopping carts to be associated with the same task. In SQL queries, this column can be used to join the `task_type_prepcart` table with other tables that contain detailed task information, enabling comprehensive data retrieval about task assignments to different shopping carts."
task_type_prepcart,cart_id,int,NO,MUL,,,cart,cart_id,,10.0,0.0,"The `cart_id` column in the `task_type_prepcart` table is an integer type column that plays a crucial role in linking specific shopping carts to task types within a preparation context. This column is a non-nullable foreign key (indicated by Key Type: MUL, suggesting it's indexed with potentially non-unique values), ensuring that every record in the `task_type_prepcart` table must be associated with a valid `cart_id` from a related table, typically a `carts` table. In SQL queries, `cart_id` can be used to join the `task_type_prepcart` table with other tables that contain cart details, enabling comprehensive data retrieval about tasks assigned to specific carts."
task_type_prepcart,status,tinyint,NO,,,,,,,3.0,0.0,"The `status` column in the `task_type_prepcart` table represents the current state of the association between a task and a shopping cart, using a `tinyint` data type. Since the column is not nullable, every record must have a status value, indicating that it is essential for defining the state of each task-cart relationship. In SQL queries, this column can be used to filter, sort, or join records based on the status of the task and cart associations, providing insights into the workflow or progress within the preparation context."
task_type_prepcart,started_at,datetime,NO,,,,,,,,,"The `started_at` column in the `task_type_prepcart` table records the datetime when a task associated with a shopping cart was initiated. This non-nullable datetime field ensures that every record in the table has a specific timestamp indicating when the task began. In SQL queries, use this column to filter or sort tasks based on their start times, or to calculate durations and time-based metrics for tasks linked to shopping carts."
task_type_prepcart,finished_at,datetime,YES,,,,,,,,,"The `finished_at` column in the `task_type_prepcart` table records the datetime when a specific task associated with a shopping cart was completed. Being a nullable datetime type, it allows for the possibility that the task may not yet be finished, in which case the entry would be null. This column can be used in SQL queries to filter or analyze tasks based on their completion status and timing, such as finding all tasks completed within a certain date range or identifying tasks that are still ongoing."
task_type_quality_portioning,task_type_quality_portioning,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `task_type_quality_portioning` in the `task_type_quality_portioning` table serves as the primary key, uniquely identifying each record in the table. This integer column is non-nullable, ensuring every record must have a distinct value. In SQL queries, this column can be used to join this table with other related tables in the database, particularly to link tasks and their corresponding quality assurance (QA) tasks based on specific task IDs, enhancing the management and tracking of quality control workflows."
task_type_quality_portioning,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_quality_portioning` table is an integer that uniquely identifies a task from the `task` table that is being subjected to a quality assurance process. This column is non-nullable, indicating that every record in the `task_type_quality_portioning` table must be associated with a task. Since it is marked with a key type of 'MUL,' `task_id` can be used in SQL queries to join this table with the `task` table, allowing the retrieval or manipulation of data related to specific tasks and their corresponding QA tasks."
task_type_quality_portioning,task_id_to_qa,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id_to_qa` column in the `task_type_quality_portioning` table is an integer column that references the `task_id` of a task designated for quality assurance (QA) purposes. This column is crucial for establishing a link between a task and its corresponding QA task, facilitating the tracking of QA workflows in SQL queries. Since it is marked as non-nullable and has a key type of MUL, it must always have a valid integer value and can be used to join with other tables that contain related task IDs, enhancing relational database operations."
task_type_quality_portioning,portions_before,int,NO,,,,,,,10.0,0.0,"The column `portions_before` in the table `task_type_quality_portioning` is an integer type that indicates the number of portions or segments completed before a quality assurance (QA) task can commence. This column is crucial for ensuring that a specific amount of work is done on the original task before it is checked by the QA task. In SQL queries, this column can be used to filter or set conditions to determine when a QA task should be triggered based on the completion of the required portions of the original task."
task_type_quality_portioning,portions_after,int,YES,,,,,,,10.0,0.0,"The column `portions_after` in the `task_type_quality_portioning` table is an integer type that can hold null values. It is used to indicate the number of task portions completed after a quality assurance (QA) task is performed. This column helps in tracking the progress of tasks within quality control workflows, allowing SQL queries to assess and analyze the effectiveness and timing of QA tasks relative to the main task execution."
task_type_quality_portioning,employee_id_being_qa,int,NO,,,,,,,10.0,0.0,"The `employee_id_being_qa` column in the `task_type_quality_portioning` table is an integer that identifies the employee responsible for performing the quality assurance (QA) on a task. This column is not nullable, indicating that every record must have a valid employee ID associated with it. In SQL queries, this column can be used to join with an employee table to retrieve details about the QA employee or to filter tasks based on which employee performed the QA."
task_type_quality_portioning,employee_finish_time_before,datetime,NO,,,,,,,,,"The column `employee_finish_time_before` in the `task_type_quality_portioning` table is a datetime type that records the timestamp by which an employee is expected to complete a task before it is handed off for quality assurance. This column is crucial for managing deadlines and ensuring timely progress in quality control workflows. Since it is not nullable, every record in the table must have a valid datetime value indicating the deadline for task completion. This column can be used in SQL queries to filter or sort tasks based on their completion deadlines, helping to prioritize or identify overdue tasks in the quality assurance process."
task_type_quality_portioning,employee_finish_time_after,datetime,YES,,,,,,,,,"The column `employee_finish_time_after` in the `task_type_quality_portioning` table records the datetime at which an employee completed a task that is subject to quality assurance. This datetime information can be used in SQL queries to filter or sort tasks based on when they were finished, enabling analysis of task completion timelines or synchronization of quality assurance checks. Since it is nullable, SQL queries should account for possible NULL values which indicate that the finish time for a task has not been recorded."
task_type_quality_portioning,action_taken,"enum('Closed','Reset','Edited')",YES,,,,,,6.0,,,"The `action_taken` column in the `task_type_quality_portioning` table is an enumerated type that records the status of actions applied during quality assurance processes. It can hold the values 'Closed', 'Reset', or 'Edited', each representing a different state of resolution or modification of a QA task linked to an original task. This column is useful in SQL queries to filter or analyze the outcomes of quality assurance actions on tasks, allowing for a detailed tracking of the QA workflow and its impacts on task management."
task_type_quality_portioning,comment,text,YES,,,,,,65535.0,,,"The `comment` column in the `task_type_quality_portioning` table is used to store optional textual remarks or notes related to the quality assurance relationship between tasks. This column, which can contain NULL values, allows users to add descriptive or explanatory information regarding how one task serves as a quality check for another. In SQL queries, this column can be used to retrieve, filter, or update these comments to provide context or additional details about the quality assurance process between specific tasks."
task_type_qualitycheck,task_type_qualitycheck_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_qualitycheck_id` column in the `task_type_qualitycheck` table serves as the primary key, uniquely identifying each record of quality check data associated with task types in preparation basket operations. As a non-nullable integer, this column ensures that every record has a unique identifier, which is crucial for linking and referencing specific quality check records in SQL queries. This column is essential for joining the `task_type_qualitycheck` table with other related tables in the database to gather comprehensive details on task quality and associated issues."
task_type_qualitycheck,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_qualitycheck` table is an integer field that serves as a foreign key, linking quality check records to specific tasks in the main task table. This column is essential for SQL queries that join the `task_type_qualitycheck` table with the main task table to retrieve or analyze quality-related data for each task. Since it is not nullable and marked with a key type of MUL, it indicates that multiple records in the `task_type_qualitycheck` table can reference the same task, and every record must have a valid `task_id` value."
task_type_qualitycheck,task_type_prepbasket_id,int,NO,MUL,,,task_type_prepbasket,task_type_prepbasket_id,,10.0,0.0,"The `task_type_prepbasket_id` column in the `task_type_qualitycheck` table is an integer identifier used to link quality check records specifically to preparation basket operations. As a non-nullable column with a key type of MUL (indicating it is part of a multiple-key index), it is essential for joining this table with other related tables to consolidate or analyze quality-related data across tasks. This column ensures that each record in the `task_type_qualitycheck` table can be directly associated with a specific preparation basket, facilitating targeted queries and reports on the quality of these operations."
task_type_qualitycheck,status,tinyint,NO,,,,,,,3.0,0.0,"The `status` column in the `task_type_qualitycheck` table is a non-nullable `tinyint` type, used to represent the status of a quality check for preparation basket operations. This column is crucial in SQL queries when filtering or updating records based on their quality check status, ensuring that each task's quality assurance level is accurately tracked and managed. The integer values in this column likely correspond to predefined status codes that indicate various stages or outcomes of the quality checks."
task_type_qualitycheck,count,smallint,YES,,,,,,,5.0,0.0,"The `count` column in the `task_type_qualitycheck` table is of data type `smallint` and can store a numerical value that represents the quantity of a specific element or occurrence within the quality check process of preparation basket operations. This column is nullable, meaning it can accept null values, which could indicate instances where a count is not applicable or not recorded. In SQL queries, this column can be used to aggregate or analyze the frequency and quantity of issues or elements checked during the quality control phase, helping in generating reports or insights about the effectiveness and thoroughness of the quality checks performed."
task_type_qualitycheck,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `task_type_qualitycheck` table records the datetime when each quality check record was created. This column can be used in SQL queries to filter or sort quality check records based on the time they were entered into the system. Since it is nullable, SQL queries should account for the possibility of null values in this column."
task_type_qualitycheck,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `task_type_qualitycheck` table records the date and time when a quality check record was last updated. This datetime column can be used in SQL queries to track changes over time, filter records based on specific update periods, or sort the quality check records by the most recent updates. Since it is nullable, SQL queries should account for possible NULL values which indicate that some records might not have been updated since their initial creation."
task_type_qualitycheck,original_count,int,YES,,,,,,,10.0,0.0,"The `original_count` column in the `task_type_qualitycheck` table represents an integer value that likely indicates the initial count or quantity of items or issues identified during the quality check of preparation basket operations. This column can be used in SQL queries to filter, summarize, or analyze the initial conditions of tasks before any processing or corrections are applied. Since it is nullable, SQL queries should account for possible NULL values which might indicate records where the initial count was not recorded or is not applicable."
task_type_qualitycheck_issue,task_type_qualitycheck_issue_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_qualitycheck_issue_id` column in the `task_type_qualitycheck_issue` table serves as the primary key, uniquely identifying each record of a quality control issue. This integer column is non-nullable, ensuring that every issue recorded in the table has a unique identifier. In SQL queries, this column is used to specifically target, reference, or join records within the table to other related tables in the database, facilitating the tracking and analysis of quality issues across inventory lots and quality check instances."
task_type_qualitycheck_issue,task_type_qualitycheck_id,int,NO,MUL,,,task_type_qualitycheck,task_type_qualitycheck_id,,10.0,0.0,"The `task_type_qualitycheck_id` column in the `task_type_qualitycheck_issue` table is an integer that uniquely identifies a quality check task associated with a specific quality control issue. This column is crucial for linking each recorded issue to its corresponding quality check task, facilitating the traceability of issues within the inventory lots. As it is a non-nullable field with a key type of MUL (indicating it's part of a composite key or indexed with other fields), it ensures that each issue must be associated with a valid quality check task, and it can be efficiently used in SQL queries to join and filter data across related tables, enhancing data integrity and query performance."
task_type_qualitycheck_issue,reason,int,NO,,,,,,,10.0,0.0,"The `reason` column in the `task_type_qualitycheck_issue` table is used to store integer values that uniquely identify the specific reasons for quality control issues detected during the quality check tasks. This column is not nullable, indicating that every record in the table must have a reason specified for the quality issue. This data can be used in SQL queries to analyze, report, or correlate specific issues with inventory lots and quality check instances, thus facilitating targeted improvements in quality control processes."
task_type_qualitycheck_issue,created_date,datetime,NO,,,,,,,,,"The `created_date` column in the `task_type_qualitycheck_issue` table records the date and time when a quality control issue was identified and logged. This datetime field is essential for tracking the exact moment of issue detection, ensuring that each entry is timestamped for historical accuracy and future audits. Since this column is not nullable, it must be provided in every SQL insert operation into this table, guaranteeing that no record exists without a precise time of issue identification."
task_type_qualitycheck_issue,lot_id,int,NO,MUL,,,inventory,lot_id,,10.0,0.0,"The `lot_id` column in the `task_type_qualitycheck_issue` table is an integer type column that serves as a foreign key linking quality control issues to specific inventory lots. This column cannot contain null values, indicating that every quality control issue recorded must be associated with a specific lot. In SQL queries, use this column to join with other tables that contain detailed lot information or to filter results to show issues related to particular inventory lots."
task_type_qualitycheck_issue,comment,text,YES,,,,,,65535.0,,,"The `comment` column in the `task_type_qualitycheck_issue` table is used to store textual descriptions or remarks related to specific quality control issues identified during quality checks. This column can include details like the nature of the defect, suggestions for resolution, or any other relevant observations. Since it is a text data type and nullable, SQL queries can use this column to filter, search, or display descriptive information about quality issues, but it may contain null values if no comment was provided."
task_type_qualitycheck_weight,task_type_qualitycheck_weight_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `task_type_qualitycheck_weight_id` in the `task_type_qualitycheck_weight` table is an integer-based primary key that uniquely identifies each record within the table. This column is critical for ensuring the uniqueness of each row and is non-nullable, meaning every record must have a unique identifier. It is used in SQL queries to perform operations such as joining this table with others like `task_type_qualitycheck` and `task_type_prepbasket_weight` to manage and retrieve data regarding the weighted relationships between different task types."
task_type_qualitycheck_weight,task_type_qualitycheck_id,int,NO,MUL,,,task_type_qualitycheck,task_type_qualitycheck_id,,10.0,0.0,"The column `task_type_qualitycheck_id` in the `task_type_qualitycheck_weight` table is an integer type that serves as a foreign key linking to the `task_type_qualitycheck` table. It is not nullable, meaning every record in the `task_type_qualitycheck_weight` table must have a valid `task_type_qualitycheck_id` value. This column is essential for forming SQL queries that join or filter data based on specific quality check tasks, ensuring that each weight entry is correctly associated with its corresponding quality check task."
task_type_qualitycheck_weight,task_type_prepbasket_weight_id,int,NO,MUL,,,task_type_prepbasket_weight,task_type_prepbasket_weight_id,,10.0,0.0,"The column `task_type_prepbasket_weight_id` in the `task_type_qualitycheck_weight` table is an integer identifier used to link each quality check task to a specific prep basket task, based on their weight relationship. This column is a foreign key that references the `task_type_prepbasket_weight` table, ensuring that each entry in `task_type_qualitycheck_weight` is associated with a valid prep basket task. It is essential for constructing SQL queries that need to analyze or manipulate the weighted relationships between different task types, as it helps in joining and filtering data across these related tables."
task_type_qualitycheck_weight,status,tinyint,NO,,,,,,,3.0,0.0,"The `status` column in the `task_type_qualitycheck_weight` table is a non-nullable `tinyint` type used to represent the current status of the weight relationship between quality check tasks and prep basket tasks. This column is crucial for SQL queries that need to filter or update records based on their operational status within the system. The integer values in this column likely correspond to predefined status codes, which should be documented in the system's schema or related documentation for accurate reference and usage in SQL queries."
task_type_qualitycheck_weight,original_weight,smallint,YES,,,,,,,5.0,0.0,"The `original_weight` column in the `task_type_qualitycheck_weight` table is a smallint data type that can store integer values to represent the weight of a relationship between a quality check task and a prep basket task. Since it is nullable, it can accept null values, indicating that the weight may not be mandatory for all task relationships. This column can be used in SQL queries to assess or modify the weight values associated with different task pairings, helping to prioritize or balance the tasks based on their importance or requirements."
task_type_qualitycheck_weight,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `task_type_qualitycheck_weight` table stores the datetime indicating when a record was added to the database. This column is nullable, meaning it can store `NULL` values, which indicates that the timestamp of record creation might not always be recorded. In SQL queries, this column can be used to filter or sort records based on the date and time they were created, which is useful for tracking changes or updates over time."
task_type_qualitycheck_weight,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `task_type_qualitycheck_weight` table records the datetime when an entry was last updated. As a datetime type and nullable column, it can be used in SQL queries to track changes or determine the recency of the data. This column is useful for maintaining the integrity of data in scenarios where the weight relationships between quality check tasks and prep basket tasks are frequently adjusted."
task_type_reception,task_type_reception_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_reception_id` column in the `task_type_reception` table serves as the primary key, uniquely identifying each record of reception-specific task type configurations and settings. This integer column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, this column is used to specifically target, retrieve, or manipulate data related to reception task configurations, and it can also be used to join with other tables that reference this primary key, such as the `task` table via the `task_id` relationship."
task_type_reception,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_reception` table is an integer field used to link reception-specific configurations to their corresponding tasks in the `task` table. It is a non-nullable column, ensuring that every record in the `task_type_reception` table must have an associated task. This column serves as a foreign key (indicated by the key type 'MUL'), which facilitates joins between the `task_type_reception` table and other tables that contain task-related information, enhancing the capability to query across multiple aspects of tasks and their reception-specific settings."
task_type_reception,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_reception` table is an integer field used to link reception-specific configurations to their corresponding tasks in the `task` table. It is a non-nullable column, ensuring that every record in the `task_type_reception` table must have an associated task. This column serves as a foreign key (indicated by the key type 'MUL'), which facilitates joins between the `task_type_reception` table and other tables that contain task-related information, enhancing the capability to query across multiple aspects of tasks and their reception-specific settings."
task_type_reception,sfid_id,int,NO,,,,,,,10.0,0.0,"The `sfid_id` column in the `task_type_reception` table is an integer field that is essential for linking specific Salesforce-related configurations with reception tasks. As it is non-nullable, every record in the `task_type_reception` table must have a valid `sfid_id` value. This column can be used in SQL queries to join the `task_type_reception` table with other tables that contain corresponding Salesforce identifiers, facilitating the integration and management of reception tasks with Salesforce data."
task_type_reception,status,int,NO,,,,,,,10.0,0.0,"The `status` column in the `task_type_reception` table is an integer data type that indicates the current status of reception-specific task configurations. This column is non-nullable, meaning every record in the table must have a status value assigned. You can use the `status` column in SQL queries to filter, sort, or join data based on the operational status of reception tasks, ensuring that queries can specifically target tasks based on their active or inactive states within the reception process."
task_type_reception,updated_at,datetime,NO,,,,,,,,,"The `updated_at` column in the `task_type_reception` table is of the `datetime` data type and is not nullable, indicating that it must always have a timestamp value. This column records the date and time when an entry in the table was last updated. In SQL queries, you can use the `updated_at` column to track changes, filter, or sort records based on when they were last modified, ensuring that you are working with the most recent configurations for reception-specific task types."
task_type_role,task_type_role_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_role_id` column in the `task_type_role` table is an integer-based primary key that uniquely identifies each role associated with different task types within the system. This column is not nullable, ensuring that every record in the table has a unique identifier. It can be used in SQL queries to join with other tables, particularly with `task_type_defaults` using the `task_type_defaults_id`, to retrieve or manage settings and permissions specific to each task type role."
task_type_role,task_type_defaults_id,int,NO,MUL,,,task_type_defaults,task_type_id,,10.0,0.0,"The `task_type_defaults_id` column in the `task_type_role` table is an integer field that serves as a foreign key linking to the `task_type_defaults` table. This column is crucial for SQL queries involving the retrieval or manipulation of default settings and permissions specific to each role associated with different task types. It is not nullable, ensuring that every record in the `task_type_role` table must have a corresponding entry in the `task_type_defaults` table, thus maintaining data integrity across related tables. Queries involving this column typically use JOIN operations to fetch or update the associated default settings for each task type role."
task_type_role,role,varchar(255),NO,,,,,,255.0,,,"The `role` column in the `task_type_role` table is a VARCHAR(255) type, which means it stores text strings up to 255 characters that represent different roles associated with task types. This column is non-nullable, indicating that every record in the table must have a role specified. In SQL queries, this column can be used to filter, join, or categorize data based on the role associated with each task type, ensuring that tasks are matched with the appropriate role definitions and permissions set in the system."
task_type_role_employee_priority,task_type_role_employee_priority_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_role_employee_priority_id` column in the `task_type_role_employee_priority` table serves as the primary key, uniquely identifying each record. This integer column is crucial for distinguishing between different mappings of task types, employee roles, and their associated priorities. It should be used in SQL queries to reference specific entries efficiently, ensuring accurate joins, updates, or deletions based on unique mappings."
task_type_role_employee_priority,employee_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `employee_id` column in the `task_type_role_employee_priority` table is used to uniquely identify employees associated with different task types and their respective priority levels. This column, which is of integer data type and cannot contain null values, serves as a foreign key linking to the primary key of an employees table. In SQL queries, you can use the `employee_id` to join this table with the employees table to fetch or manipulate information about how tasks are assigned to specific employees based on their roles and priority levels."
task_type_role_employee_priority,task_type_defaults_id,int,NO,MUL,,,task_type_defaults,task_type_id,,10.0,0.0,"The `task_type_defaults_id` column in the `task_type_role_employee_priority` table is an integer field that serves as a foreign key linking to the `task_type_defaults` table. This column is critical for associating a specific task type and its default settings with employee roles and priority levels. It cannot contain null values, ensuring that every record in the `task_type_role_employee_priority` table must be linked to an entry in the `task_type_defaults` table, thus maintaining data integrity and facilitating the customization of task assignments per employee."
task_type_role_employee_priority,priority,int,NO,,,0,,,,10.0,0.0,"The `priority` column in the `task_type_role_employee_priority` table is an integer that specifies the priority level of employees for handling different task types. This column is non-nullable, meaning every record in the table must have a priority value assigned. The priority value is used in SQL queries to determine the order or precedence in which employees should be assigned tasks based on the type of task, facilitating efficient task management and assignment within an organization."
task_type_spot_check,task_type_spot_check_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_spot_check_id` column in the `task_type_spot_check` table serves as the primary key, uniquely identifying each record of spot check tasks related to quality control inspections. This integer column is not nullable, ensuring that every record must have a unique identifier. It is used to join the `task_type_spot_check` table with other related tables such as `additional_lots_found` and `task_type_spot_check_lots` to facilitate complex queries involving detailed inspection tasks and associated lot data."
task_type_spot_check,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_spot_check` table is an integer field used to uniquely identify and link each spot check task to corresponding records in the `task` table. As a non-nullable field with a key type of MUL (indicating it is part of a foreign key), `task_id` serves as a critical element in establishing relationships between tables. This column should be used in SQL queries when you need to join the `task_type_spot_check` table with the `task` table or filter results based on specific task identifiers."
task_type_spot_check,location_header_id,int,NO,,,,,,,10.0,0.0,"The `location_header_id` column in the `task_type_spot_check` table is an integer that identifies a specific location associated with each spot check task. This column is crucial for joining the `task_type_spot_check` table with other tables that contain location-specific data, enhancing the ability to analyze and report on quality control inspections based on location. Since this column is not nullable, every record in the `task_type_spot_check` table must have a valid `location_header_id`, ensuring that all spot check tasks are linked to a specific location."
task_type_spot_check,url,varchar(255),NO,,,,,,255.0,,,"The `url` column in the `task_type_spot_check` table is a VARCHAR(255) field that must always contain a value (as indicated by Nullable: NO). This column is used to store a web address or link associated with each spot check task, providing direct access to relevant digital resources, documents, or external systems related to the quality control inspection. In SQL queries, this column can be used to retrieve, filter, or display the URL for each task, enhancing the ability to quickly access supplementary information directly linked to specific inspection tasks."
task_type_spot_check,manual_gen,tinyint(1),NO,,,,,,,3.0,0.0,"The `manual_gen` column in the `task_type_spot_check` table is used to indicate whether a spot check task was generated manually. It is a non-nullable tinyint(1) data type, which typically represents a boolean value where `0` means false (not manually generated) and `1` means true (manually generated). This column is essential for distinguishing between automatically generated tasks and those input by a user, allowing for tailored queries that can segregate or specifically analyze manually initiated quality control inspections."
task_type_spot_check_lots,task_type_spot_check_lots_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_spot_check_lots_id` column in the `task_type_spot_check_lots` table serves as the primary key, uniquely identifying each record in the table. This column is integral for SQL queries when needing to specifically reference or manipulate a unique lot within the context of spot check tasks. It is a non-nullable integer, ensuring that every record must have a unique identifier, which is crucial for maintaining data integrity and establishing relationships with other tables like `task_type_spot_check` through foreign keys."
task_type_spot_check_lots,task_type_spot_check_id,int,NO,MUL,,,task_type_spot_check,task_type_spot_check_id,,10.0,0.0,"The `task_type_spot_check_id` column in the `task_type_spot_check_lots` table is an integer-type field that serves as a foreign key linking to the `task_type_spot_check` table. This column is crucial for SQL queries that need to identify and join lot details with their respective spot check task types. It is non-nullable, ensuring every record in the `task_type_spot_check_lots` table is associated with a specific spot check task, thereby facilitating accurate tracking and reporting on lot-specific spot check tasks."
task_type_spot_check_lots,lot_id,int,NO,,,,,,,10.0,0.0,"The `lot_id` column in the `task_type_spot_check_lots` table is an integer field that uniquely identifies lots associated with specific spot check tasks. This column is not nullable, indicating that every record in the table must have a lot ID value, ensuring that all entries are linked to a specific lot. In SQL queries, this column can be used to join with other tables that contain lot details, or to filter and retrieve records pertaining to specific lots within the context of spot check tasks."
task_type_spot_check_lots,quantity_in_system_at_time,int,NO,,,,,,,10.0,0.0,"The `quantity_in_system_at_time` column in the `task_type_spot_check_lots` table represents the integer count of items or units within a specific lot at the time the spot check task was recorded. This column is crucial for SQL queries that aim to analyze or verify the accuracy and consistency of inventory data during spot checks. Since the column is not nullable, every record in the table must have a valid integer value, ensuring that all spot check tasks have a complete dataset for the quantity being audited."
task_type_spot_check_lots,quantity_reported_by_employee,int,YES,,,,,,,10.0,0.0,"The column `quantity_reported_by_employee` in the `task_type_spot_check_lots` table is an integer type that can optionally store the quantity of items reported by an employee during a spot check task. This column may contain null values if the quantity is not reported. In SQL queries, this column can be used to retrieve or analyze the quantities reported by employees for different lots in various spot check tasks, allowing for assessments of accuracy or performance in reporting."
task_type_spot_check_lots,lot_found,tinyint(1),NO,,,,,,,3.0,0.0,"The `lot_found` column in the `task_type_spot_check_lots` table is used to indicate whether a lot was found during a spot check task. This column is of type `tinyint(1)`, where typically a value of 1 represents that the lot was found, and 0 indicates it was not. This column is not nullable, ensuring that every record in the table must explicitly state whether the lot was found or not during the spot check. This field is crucial for filtering and analyzing the outcomes of spot check tasks in SQL queries."
task_type_spot_check_lots,labels_printed,int,NO,,,,,,,10.0,0.0,"The `labels_printed` column in the `task_type_spot_check_lots` table is an integer field that records the number of labels printed for each lot in association with a spot check task. This column is not nullable, indicating that a value must always be provided. In SQL queries, this column can be used to track, filter, or update the count of printed labels for specific lots during spot check processes."
task_type_spot_check_lots,photo_name,varchar(255),YES,,,,,,255.0,,,"The `photo_name` column in the `task_type_spot_check_lots` table is used to store the name of a photo as a string, with a maximum length of 255 characters. This column can contain null values, indicating that a photo name might not always be provided for every record. In SQL queries, this column can be used to retrieve or link the visual documentation associated with specific lot spot checks, enhancing the ability to visually reference the status or condition of lots during these checks."
task_type_vehiclearrival,task_type_vehiclearrival_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_type_vehiclearrival_id` column in the `task_type_vehiclearrival` table is an integer-based primary key that uniquely identifies each record of vehicle arrival tasks. This column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, this column is used to uniquely select, update, or delete records in the `task_type_vehiclearrival` table and can be joined with the `task_id` in the main task table to retrieve corresponding task details."
task_type_vehiclearrival,task_id,int,NO,MUL,,,task,task_id,,10.0,0.0,"The `task_id` column in the `task_type_vehiclearrival` table is an integer column that serves as a foreign key linking to the `task_id` in the main task table. This column is essential for identifying and referencing specific vehicle arrival tasks within the system. It is not nullable, ensuring that every record in the `task_type_vehiclearrival` table must be associated with a corresponding entry in the main task table, thus maintaining data integrity and enabling effective relational database management. Queries involving this column can join the `task_type_vehiclearrival` table with the main task table to retrieve or manipulate detailed information about vehicle arrival tasks."
task_type_vehiclearrival,lbri_id,int,NO,,,,,,,10.0,0.0,"The `lbri_id` column in the `task_type_vehiclearrival` table is an integer column that must always have a value (non-nullable). This column is used to uniquely identify or reference specific records, potentially linking to another table that contains further details related to the broader context of vehicle arrival tasks. When constructing SQL queries involving this table, the `lbri_id` can be used to join with other tables, filter results, or as part of the selection criteria to retrieve specific vehicle arrival task details."
task_user_group,task_user_group_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `task_user_group_id` column in the `task_user_group` table is an integer-based primary key that uniquely identifies each record in the table. This column is essential for distinguishing between different associations of tasks and user groups, ensuring that each combination of task and group is unique and can be referenced independently in SQL queries. Since it is not nullable and serves as a primary key, every entry in the `task_user_group` table must have a unique `task_user_group_id` value, which cannot be null."
task_user_group,task_group_id,int,NO,,,,,,,10.0,0.0,"The `task_group_id` column in the `task_user_group` table is an integer column that uniquely identifies groups associated with tasks. This column is crucial for SQL queries that aim to link or filter tasks based on the user groups they are assigned to. Since it is not nullable, every record in the `task_user_group` table must have a valid `task_group_id`, ensuring that all task entries are associated with a specific user group."
task_user_group,task_user_id,int,NO,,,,,,,10.0,0.0,"The `task_user_id` column in the `task_user_group` table is an integer type field that serves as a unique identifier for each record linking tasks to user groups. This column is essential for SQL queries when you need to specifically identify, update, or delete associations between tasks and user groups, as it ensures each link between a task and a user group is uniquely represented. Since the column is not nullable, every record in the table must have a valid `task_user_id` value, ensuring data integrity and facilitating reliable joins in SQL queries."
task_user_group,created,datetime,NO,,,,,,,,,"The `created` column in the `task_user_group` table records the datetime when an association between a task and a user group was established. This non-nullable column ensures every record has a timestamp indicating when the entry was made. In SQL queries, this column is useful for tracking and filtering records based on the date and time of their creation, aiding in chronological analyses and operational audits of task assignments within user groups."
task_user_group,modified,datetime,NO,,,,,,,,,"The `modified` column in the `task_user_group` table records the date and time when an entry was last updated. This datetime field is essential for tracking changes to the associations between tasks and user groups, ensuring that the system can maintain accurate and timely group-based task assignments and permissions. Since this column is not nullable, every record in the table must have a timestamp indicating when it was last modified. This information can be used in SQL queries to filter or sort records based on the most recent updates."
task_user_group,staff_id,int,NO,,,,,,,10.0,0.0,"The `staff_id` column in the `task_user_group` table is an integer field used to uniquely identify staff members associated with specific tasks and user groups. This column is critical in SQL queries for linking staff members to their respective tasks and groups, ensuring that task assignments and permissions are correctly managed within the system. As a non-nullable field, every record in the `task_user_group` table must include a valid `staff_id` to maintain the integrity of group-based task assignments."
tax_receipts,tax_receipt_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `tax_receipt_id` column in the `tax_receipts` table serves as the primary key, uniquely identifying each record of tax receipts and documentation associated with financial transactions. This integer column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, `tax_receipt_id` can be used to specifically target, retrieve, or manipulate data entries in the `tax_receipts` table, and it can be used to join with other related tables, such as the `users` table via the `user_id`, to gather more detailed information about the account holders associated with each transaction."
tax_receipts,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `user_id` column in the `tax_receipts` table is an integer type that serves as a foreign key linking to the `users` table. This column is crucial for SQL queries that need to associate tax receipts with specific users, ensuring that each receipt can be traced back to an individual account holder. The column is non-nullable, meaning every record in the `tax_receipts` table must have a valid `user_id` value, and it is indexed (indicated by Key Type: MUL) to optimize queries involving joins or searches on this column."
tax_receipts,year,int,NO,MUL,,,,,,10.0,0.0,"The `year` column in the `tax_receipts` table is an integer type column that stores the fiscal year associated with each tax receipt. This column is not nullable, meaning every record in the table must have a year value specified. Since it is marked with a key type of MUL, `year` can be used in joining this table with others on the year column, and it may be indexed for faster querying on this field. This column is essential for organizing and retrieving tax receipt data by specific years, facilitating year-based financial analyses and reporting."
tax_receipts,cash_donated,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The `cash_donated` column in the `tax_receipts` table records the amount of cash donated by users in a decimal format with two decimal places, ensuring precision up to cents. This column is essential in SQL queries for calculating the total or average cash donations, generating reports, or verifying tax deduction claims related to financial transactions. Since the column is not nullable, every record in the `tax_receipts` table must include a value for `cash_donated`, even if it is 0.00, indicating no cash was donated."
tax_receipts,cash_transactions_ids,text,YES,,,,,,65535.0,,,"The `cash_transactions_ids` column in the `tax_receipts` table is a text field that can store identifiers for cash transactions associated with specific tax receipts. Since it is nullable, it may not always have data, indicating that some receipts might not be linked to cash transactions. This column can be used in SQL queries to filter or join data based on specific cash transaction identifiers, helping to trace or analyze financial transactions documented in tax receipts."
tax_receipts,credit_donated,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The `credit_donated` column in the `tax_receipts` table represents the monetary value of credits donated, stored as a decimal number with up to 10 digits and 2 decimal places. This column is not nullable, meaning every record in the `tax_receipts` table must have a value for `credit_donated`. In SQL queries, this column can be used to calculate the total or average credits donated, filter records based on donation amounts, or join with the `users` table using `user_id` to analyze donations by user."
tax_receipts,credit_transactions_ids,text,YES,,,,,,65535.0,,,"The `credit_transactions_ids` column in the `tax_receipts` table stores textual data that likely represents identifiers for credit transactions associated with specific tax receipts. Since this column is nullable, it can contain null values, indicating that not all tax receipts might be linked to credit transactions. In SQL queries, this column can be used to retrieve or manipulate the identifiers of credit transactions related to specific tax receipts, facilitating the tracking and auditing of financial transactions linked to users in the associated `users` table via `user_id`."
tax_receipts,credit_transactions_count,int,NO,,,0,,,,10.0,0.0,"The `credit_transactions_count` column in the `tax_receipts` table is an integer field that records the number of credit transactions associated with a specific tax receipt. This column is not nullable, meaning every record in the `tax_receipts` table must have a valid integer value for `credit_transactions_count`. This column can be used in SQL queries to analyze or summarize the volume of credit transactions per tax receipt, which is useful for financial auditing and user transaction behavior analysis."
tax_receipts,original_first_name,varchar(255),YES,,,,,,255.0,,,"The `original_first_name` column in the `tax_receipts` table stores a variable character string (up to 255 characters) representing the first name as it originally appeared on the tax receipt. This column can be used in SQL queries to filter or match tax receipts based on the first name of the user at the time of the transaction. It is nullable, meaning that some records may not have an entry for `original_first_name`, and it does not serve as a key for the table."
tax_receipts,original_last_name,varchar(255),YES,,,,,,255.0,,,"The `original_last_name` column in the `tax_receipts` table is a VARCHAR(255) field that can store up to 255 characters and is used to record the last name of a user as it was at the time of the transaction. This column can contain null values, indicating that the last name might not always be available for every record. In SQL queries, this column can be used to filter or join data based on the user's last name at the time of the transaction, which can be particularly useful for historical data analysis or for reconciling user information with changes over time."
tax_receipts,original_address,varchar(255),YES,,,,,,255.0,,,"The `original_address` column in the `tax_receipts` table is a varchar field that can store up to 255 characters and is used to record the address associated with the financial transaction for which the tax receipt was issued. This column is optional, as it is nullable, meaning it can contain null values if the address is not provided or unknown. In SQL queries, this column can be used to filter, sort, or join data based on the address information of the transactions, enhancing the ability to analyze or report on transactions by geographical location."
tax_receipts,original_apt,varchar(255),YES,,,,,,255.0,,,"The `original_apt` column in the `tax_receipts` table is a variable character string field that can store up to 255 characters and is used to potentially hold information about the original appointment or transaction details related to a tax receipt. Since it is a nullable column, it is optional and may not be filled for all records. This column can be used in SQL queries to filter or retrieve specific tax receipt records based on the original appointment or transaction details when analyzing financial transactions linked to users in the database."
tax_receipts,entered_first_name,varchar(255),YES,,,,,,255.0,,,The column `entered_first_name` in the `tax_receipts` table is a variable character string field that can store up to 255 characters and is used to record the first name as entered during the transaction. This column is optional (nullable) and can be used in SQL queries to filter or match tax receipt records based on the first name provided by the user at the time of the transaction. It can be particularly useful for generating personalized reports or verifying transaction details against user profiles linked through the `user_id`.
tax_receipts,entered_last_name,varchar(255),YES,,,,,,255.0,,,"The `entered_last_name` column in the `tax_receipts` table is a VARCHAR field that can store up to 255 characters and may contain null values. This column is used to record the last name as entered during the tax receipt generation process, which may be useful for personalizing or verifying the receipt against user data. In SQL queries, this column can be used to filter or join data based on the last name provided in financial transaction records, especially when linking or comparing with user information in related tables."
tax_receipts,entered_address,varchar(255),YES,,,,,,255.0,,,"The `entered_address` column in the `tax_receipts` table is a VARCHAR(255) field that can store up to 255 characters of text data, representing the address entered for a tax receipt related to a financial transaction. This column can contain null values, indicating that the address entry is optional for some records. In SQL queries, this column can be used to filter, sort, or join data based on the address information provided in tax receipts, helping to link or compare transactions by location details."
tax_receipts,entered_apt,varchar(255),YES,,,,,,255.0,,,"The `entered_apt` column in the `tax_receipts` table is a VARCHAR field that can store up to 255 characters and is used to record the apartment number or unit information where the financial transaction occurred or is associated with. This column is optional, as it allows NULL values, meaning not every record in the `tax_receipts` table needs to have an apartment number entered. In SQL queries, this column can be used to filter or display transactions related to specific apartments, enhancing the granularity of financial reporting or user-specific queries."
tax_receipts,downloaded_at,datetime,YES,,,,,,,,,"The `downloaded_at` column in the `tax_receipts` table records the date and time when a tax receipt was downloaded, using the datetime data type. This column is nullable, indicating that not all records necessarily have a download timestamp. In SQL queries, this column can be used to filter or sort tax receipts based on when they were downloaded, or to check whether a receipt has been downloaded at all."
tax_receipts,generated_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `generated_at` column in the `tax_receipts` table is of the datetime data type and records the exact date and time when each tax receipt was created, automatically setting this to the current timestamp at the moment of record insertion. This column is not nullable, ensuring that every tax receipt record in the database has a timestamp indicating when it was generated. In SQL queries, this column can be used to retrieve or sort tax receipts based on the time they were generated, which is useful for time-based analyses or reporting."
tbl_migration,version,varchar(255),NO,PRI,,,,,255.0,,,"The `version` column in the `tbl_migration` table is a primary key and holds a string (up to 255 characters) representing the unique identifier of each database migration. This column is essential in SQL queries to identify, sort, or filter specific schema changes and updates. Since it is non-nullable and serves as a primary key, every entry in the table must have a unique `version` value, ensuring that each database migration is distinctly recorded and retrievable."
tbl_migration,apply_time,int,YES,,,,,,,10.0,0.0,"The `apply_time` column in the `tbl_migration` table is of type `int` and can be nullable. It records the timestamp when a specific database migration was applied, expressed as an integer. This column is useful in SQL queries for tracking when each migration occurred, allowing users to identify the chronological order of schema changes and to determine the state of the database at any given point in time."
team_leaders,team_leader_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `team_leader_id` column in the `team_leaders` table is of type integer and serves as the primary key, uniquely identifying each team leader within the organization. This column cannot contain NULL values, ensuring that every record in the table has a valid identifier. In SQL queries, this column can be used to select, update, or delete specific team leader records based on their unique ID, or to sort and group data related to team leaders."
team_leaders,user_id,int,NO,UNI,,,,,,10.0,0.0,"The `user_id` column in the `team_leaders` table is an integer type that uniquely identifies each team leader within the organization. Since it is marked as non-nullable and has a unique constraint, each entry must have a unique `user_id` that cannot be null. This column is essential for uniquely referencing and managing team leader records in SQL queries, and can be used in SELECT, UPDATE, or DELETE statements to specifically target individual team leader entries."
team_leaders,department_id,int,NO,,,,,,,10.0,0.0,"The `department_id` column in the `team_leaders` table is an integer data type that uniquely identifies the department associated with each team leader. This column is not nullable, meaning every record in the `team_leaders` table must have a valid `department_id` associated with it. This column can be used in SQL queries to filter or join data based on specific department criteria, even though it does not form a direct relational link as a foreign key in this table's context."
team_members,team_member_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `team_member_id` column in the `team_members` table is an integer-type primary key that uniquely identifies each team member within the organization. This column is non-nullable, ensuring that every record in the table must have a unique `team_member_id`. SQL queries can use this column to uniquely select, update, or relate team member records to other data within the database, making it essential for operations that involve individual team member data retrieval or manipulation."
team_members,team_leader_id,int,NO,,,,,,,10.0,0.0,"The `team_leader_id` column in the `team_members` table is an integer field that identifies the team leader associated with each team member. Since this column is non-nullable, every record in the table must have a `team_leader_id` value, indicating that every team member is assigned a team leader. This column can be used in SQL queries to join with the same table or another table that contains detailed information about team leaders, facilitating the analysis of team structures and leadership within the organization."
team_members,user_id,int,NO,UNI,,,,,,10.0,0.0,"The `user_id` column in the `team_members` table is an integer column used to uniquely identify each team member within an organization. It is a non-nullable column, meaning every record in the table must have a `user_id` value, and it functions as a unique key, ensuring that no two team members have the same `user_id`. This column is essential for uniquely referencing and retrieving specific team member records in SQL queries, and it can be used in JOIN operations with other tables that reference the `user_id` to integrate or analyze team member data across the organization."
team_members,department_id,int,NO,,,,,,,10.0,0.0,"The `department_id` column in the `team_members` table is of type integer and is a mandatory field, as indicated by its non-nullable property. This column is used to link each team member to a specific department within the organization. In SQL queries, `department_id` can be used to filter, join, or aggregate team member data based on their department affiliation, enhancing the ability to organize and analyze employee information by departments."
temp_departments,department_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `department_id` column in the `temp_departments` table is an integer type primary key that uniquely identifies each department within the table. This column is crucial for linking the temporary department data to other related tables such as shifts, teams, permissions, roles, and language-specific department details. Since it is marked as non-nullable, every record in the `temp_departments` table must have a unique `department_id` value, ensuring data integrity and enabling effective data retrieval and management through SQL queries."
temp_departments,department_name,varchar(255),NO,,,,,,255.0,,,"The `department_name` column in the `temp_departments` table is used to store the name of each department within an organization. As a `varchar(255)` type, this column can hold department names up to 255 characters and must always contain a value (non-nullable). This column is essential for identifying and distinguishing departments and can be used in SQL queries to join with related tables like shifts, teams, and roles based on departmental data."
temp_departments,weight,int,YES,,,0,,,,10.0,0.0,"The `weight` column in the `temp_departments` table, which is an integer data type and allows null values, is used to assign a relative importance or ranking to departments within an organization's temporary hierarchical structure. This column can be utilized in SQL queries to sort or prioritize department data, especially when aggregating or comparing departments based on their significance or role in organizational processes. The value in the `weight` column can also be used in decision-making processes or reporting to differentiate or highlight departments according to their assigned weight."
temp_departments,bizrule,varchar(255),YES,,,,,,255.0,,,"The `bizrule` column in the `temp_departments` table is of type `varchar(255)` and can store up to 255 characters. This column is optional (nullable) and is used to hold business rules or conditions specific to each department within the organization. In SQL queries, the `bizrule` column can be used to filter, sort, or apply specific conditions to department data during processing or migration to other systems or permanent storage."
temp_departments,role,varchar(255),YES,,,,,,255.0,,,"The `role` column in the `temp_departments` table is used to store variable-length character data (up to 255 characters) that describes the role or function of a department within an organization. Since it is a varchar field and nullable, it can accommodate any textual description up to 255 characters or be left empty if the role information is not available. This column is crucial for understanding the responsibilities or specializations of departments during data staging or integration processes with other tables such as shifts, teams, permissions, and roles, where department functionality might be relevant."
temp_departments,is_active,tinyint,YES,,,1,,,,3.0,0.0,"The `is_active` column in the `temp_departments` table is a `tinyint` data type and can be nullable. This column is used to indicate whether a department is currently active (1) or inactive (0). In SQL queries, you can use this column to filter active or inactive departments, which is particularly useful for managing or analyzing temporary department data in relation to shifts, teams, permissions, roles, and language-specific details."
temp_departments,parent_id,int,YES,,,0,,,,10.0,0.0,"The `parent_id` column in the `temp_departments` table is used to establish hierarchical relationships between departments within an organization. It is an integer type column that can contain null values, indicating that some departments may not have a parent department. This column is crucial for constructing departmental trees or structures by linking each department to its parent department, if any, thereby facilitating queries that involve hierarchical reporting or aggregation based on departmental relationships."
temp_departments,hr_editable,tinyint,YES,,,0,,,,3.0,0.0,"The `hr_editable` column in the `temp_departments` table is a `tinyint` data type that indicates whether the human resources (HR) department can edit the details of a department. A value of 0 in this column suggests that HR does not have the permissions to edit the department information. This column can be used in SQL queries to filter or enforce access controls, ensuring that updates to department data in this temporary staging area are properly managed according to HR editing privileges."
temp_departments,career_position_id,tinyint,YES,,,,,,,3.0,0.0,"The `career_position_id` column in the `temp_departments` table is a tinyint data type, indicating it stores small numerical values, typically representing different career positions within the department hierarchy. This column is nullable, meaning it can accept null values, which could indicate situations where a career position is not yet assigned or is inapplicable. In SQL queries, this column can be used to filter, join, or aggregate data based on specific career positions, aiding in analyses or operations that focus on the organizational structure and staffing within temporary department setups."
temp_departments,display_id,int,YES,,,,,,,10.0,0.0,"The `display_id` column in the `temp_departments` table is an integer-type field that can contain null values. This column is used to represent a unique identifier for department records within the table, primarily for display purposes. It can be used in SQL queries to select, sort, or filter department data based on this identifier, facilitating easier referencing and organization of department information in user interfaces or reports."
temp_departments_lang,department_lang_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `department_lang_id` column in the `temp_departments_lang` table serves as the primary key, uniquely identifying each record of language-specific translations and localized content for department information. This integer column is non-nullable, ensuring that every record must have a unique identifier. In SQL queries, this column is essential for performing operations that require the identification of specific translation entries, such as joining with the `temp_departments` table on the `department_id` to retrieve multilingual department details."
temp_departments_lang,department_id,int,NO,MUL,,,temp_departments,department_id,,10.0,0.0,"The `department_id` column in the `temp_departments_lang` table is an integer type field that serves as a foreign key linking to the `temp_departments` table. This column is essential for associating translations and localized content with the corresponding department. It is not nullable, ensuring that every record in the `temp_departments_lang` table must have a valid `department_id` to maintain referential integrity. Queries involving this column typically retrieve or manage multilingual department data by joining this table with the `temp_departments` based on the `department_id`."
temp_departments_lang,lang_id,varchar(10),YES,,,,,,10.0,,,"The `lang_id` column in the `temp_departments_lang` table is used to specify the language of the translation for department names and descriptions. It is a varchar field of up to 10 characters, allowing entries like 'en', 'fr', etc., to represent different languages. This column can be utilized in SQL queries to filter or join data based on specific languages, thereby supporting queries that fetch department information localized to a user's preferred language."
temp_departments_lang,l_department_name,varchar(255),YES,,,,,,255.0,,,"The column `l_department_name` in the `temp_departments_lang` table is used to store the localized names of departments, supporting multiple languages for department information. This column is a VARCHAR type with a maximum length of 255 characters and can contain null values, indicating that not all department names may be translated in all available languages. In SQL queries, this column can be joined with the `temp_departments` table using the `department_id` to retrieve or manage multilingual department names effectively."
temp_employee_access_code,temp_access_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `temp_access_id` column in the `temp_employee_access_code` table is an integer data type that serves as the primary key, meaning it uniquely identifies each record in the table. This column is essential for SQL queries aimed at retrieving, updating, or deleting specific access code information for temporary or probationary employees. Since it is not nullable, every record must have a unique `temp_access_id` value, ensuring that each temporary access entry can be distinctly and reliably accessed."
temp_employee_access_code,userid,int,NO,,,,,,,10.0,0.0,"The `userid` column in the `temp_employee_access_code` table is an integer data type and cannot contain null values. This column is used to uniquely identify each provisional or temporary employee within the table. When constructing SQL queries, this column should be used to link or reference specific access records to individual temporary employees, ensuring that each query accurately targets or affects the appropriate user entries."
temp_employee_access_code,personal_email,varchar(255),NO,,,,,,255.0,,,"The `personal_email` column in the `temp_employee_access_code` table is used to store the personal email addresses of temporary or probationary employees. This column is of type `varchar(255)`, allowing for email addresses up to 255 characters long, and it is set to be non-nullable, meaning every record must include a personal email address. This column can be used in SQL queries to uniquely identify or communicate with temporary employees, as it holds a key piece of contact information."
temp_employee_access_code,access_code,text,NO,,,,,,65535.0,,,"The `access_code` column in the `temp_employee_access_code` table is used to store text-based authentication codes for temporary or probationary employees. This column is essential for managing access to systems without altering permanent employee records. Since the `access_code` column is non-nullable, every record in the table must have a valid access code, ensuring that each temporary employee has a unique code for system access."
temp_employee_access_code,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `temp_employee_access_code` table is of the `datetime` data type and can store the date and time when each access code record was created. Since this column is nullable, it is optional to provide a value during record insertion. In SQL queries, this column can be used to filter or sort records based on the time of creation, which is useful for tracking when temporary access was granted or for auditing purposes."
temp_employee_access_code,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the `temp_employee_access_code` table is of type integer and can store nullable values. This column is typically used to reference the ID of the user or administrator who created the access code entry. In SQL queries, this column can be used to filter or join data based on who created specific entries, facilitating the management and audit of temporary access credentials issued to probationary employees."
temp_employee_access_code,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `temp_employee_access_code` table is an integer type that can optionally contain a null value. This column is used to store the identifier of the user or system process that last updated a record. In SQL queries, it can be used to track which user or system made changes to the access codes and credentials of temporary or probationary employees, helping maintain an audit trail or for debugging purposes."
temp_employee_access_code,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `temp_employee_access_code` table is of data type `datetime` and can accept NULL values. This column typically records the date and time when an entry in the table was last updated. It is useful in SQL queries for tracking changes, auditing updates, and ensuring the timeliness of the temporary access data provided to probationary employees."
temp_employees,temp_employee_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `temp_employee_id` column in the `temp_employees` table serves as the primary key for the table, uniquely identifying each record of temporary or contract employees within the organization. This integer column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, this column can be used to uniquely select, update, or delete records of temporary employees, and it can also be used to join the `temp_employees` table with other related tables using foreign keys, particularly with the `users` table via the `user_id` field to access more detailed user information."
temp_employees,user_id,int,NO,UNI,,,users,user_id,,10.0,0.0,"The `user_id` column in the `temp_employees` table is an integer field that uniquely identifies each temporary or contract employee within the organization. This column is non-nullable, meaning every record in the `temp_employees` table must have a `user_id` value. It serves as a unique key and is used to link each temporary employee's record to their corresponding user information in the `users` table, enabling SQL queries to retrieve or manage detailed user data associated with each temporary staff member."
temporary_customizable_base_basket_table_helper,temporary_table_helper_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `temporary_table_helper_id` column in the `temporary_customizable_base_basket_table_helper` table is an integer column that serves as the primary key, meaning it uniquely identifies each record within the table. This column is not nullable, indicating that every record must have a unique identifier. In SQL queries, this column can be used to specifically target, reference, or differentiate individual basket configuration records during insertions, updates, or deletions in data processing or migration scenarios."
temporary_customizable_base_basket_table_helper,product_id,int,NO,MUL,,,,,,10.0,0.0,"The `product_id` column in the `temporary_customizable_base_basket_table_helper` table is an integer field used to reference specific products involved in basket configurations. As a non-nullable column with a key type of MUL (indicating it can be part of a non-unique index, typically used for joining tables), it is essential for linking products to specific basket setups during temporary data operations. This column should be included in SQL queries that need to filter, join, or report on product-specific basket configurations in the context of data processing or migration activities."
temporary_customizable_base_basket_table_helper,user_id,int,NO,MUL,,,,,,10.0,0.0,"The `user_id` column in the `temporary_customizable_base_basket_table_helper` table is an integer type field that uniquely identifies users associated with each basket configuration. This column is not nullable, indicating that every record in the table must have a `user_id` value, and it is indexed (as indicated by the key type 'MUL'), which supports efficient query performance when filtering or joining tables based on the `user_id`. This column is crucial for associating basket configurations with specific users during temporary data processing or migration tasks."
temporary_customizable_base_basket_table_helper,delivery_date,date,NO,,,,,,,,,"The `delivery_date` column in the `temporary_customizable_base_basket_table_helper` table is used to store the date on which a basket configuration is intended to be delivered. This column is of the `date` data type and cannot contain NULL values, indicating that a delivery date must be specified for every record in the table. In SQL queries, this column can be used to filter, sort, or perform date-specific calculations on basket configurations during temporary data processing or migration tasks."
temporary_customizable_base_basket_table_helper,order_id,int,NO,,,,,,,10.0,0.0,"The `order_id` column in the `temporary_customizable_base_basket_table_helper` table is an integer-type column that uniquely identifies each order. It is a non-nullable field, meaning that every record in this table must have a valid `order_id` value. This column is essential for SQL queries that need to reference, update, or differentiate individual orders during the processing or migration of basket configurations in temporary data manipulation tasks."
temporary_customizable_base_basket_table_helper,order_details_id,int,NO,,,,,,,10.0,0.0,"The `order_details_id` column in the `temporary_customizable_base_basket_table_helper` table is an integer type field that is essential for linking or referencing specific order details. This column is not nullable, indicating that every record in the table must have a valid integer value for `order_details_id`. In SQL queries, this column can be used to join the temporary table with other tables that contain detailed order information, facilitating operations like data migration or manipulation during the processing of basket configurations."
ticketActionEmailTemplate,ticket_action_email_template_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `ticket_action_email_template_id` in the `ticketActionEmailTemplate` table serves as the primary key and uniquely identifies each record of email template configurations related to ticket actions. As it is an integer and cannot be null, every email template must have a unique identifier. This column is essential for SQL queries when you need to reference or manipulate specific email template configurations for automated communications regarding ticket updates or status changes."
ticketActionEmailTemplate,ticket_action_id,int,NO,,,,,,,10.0,0.0,"The `ticket_action_id` column in the `ticketActionEmailTemplate` table is an integer column that uniquely identifies different ticket-related actions associated with specific email templates. This column is not nullable, indicating that every record in the table must have a valid `ticket_action_id` to associate the email template with a corresponding ticket action. In SQL queries, this column can be used to join with other tables that track ticket actions, allowing for the retrieval or update of email templates based on specific ticket actions."
ticketActionEmailTemplate,ticket_action_value,int,YES,,,,,,,10.0,0.0,"The `ticket_action_value` column in the `ticketActionEmailTemplate` table is an integer type that can optionally be null. This column likely represents different types of ticket-related actions, each associated with a specific value, which can be used to determine the appropriate email template for automated communications. In SQL queries, this column can be used to filter or join data based on specific ticket actions to retrieve or manipulate the corresponding email template details."
ticketActionEmailTemplate,email_reply_template_id,int,NO,,,,,,,10.0,0.0,"The `email_reply_template_id` column in the `ticketActionEmailTemplate` table is an integer column that uniquely identifies each email template configuration related to ticket actions and notifications. As a non-nullable field, every record in the table must have a valid `email_reply_template_id`, which can be used in SQL queries to specifically select, update, or reference the email template configurations for automated communications about ticket updates or status changes. This column is essential for differentiating between various email templates and ensuring the correct template is used for each type of ticket-related notification."
ticketActions,ticket_action_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `ticket_action_id` column in the `ticketActions` table is an integer column that serves as the primary key, uniquely identifying each record of actions and changes made to tickets. This column is not nullable, ensuring that every action recorded in the table has a unique identifier. In SQL queries, use this column to specifically target, reference, or join records based on unique ticket actions."
ticketActions,ticket_action_name,varchar(255),NO,,,,,,255.0,,,"The `ticket_action_name` column in the `ticketActions` table stores a string description of each action performed on tickets, such as ""assigned to user"", ""status changed"", or ""comment added"". This column is crucial for constructing SQL queries that analyze the types of activities occurring in the ticketing system, facilitating reports on ticket handling processes or audits of specific ticket actions. Since the column is non-nullable, every record in the `ticketActions` table must include a valid action name, ensuring complete tracking of all ticket activities."
ticketActions,ticket_action_url,varchar(255),NO,,,,,,255.0,,,"The `ticket_action_url` column in the `ticketActions` table is used to store URLs as strings, with a maximum length of 255 characters, associated with specific actions taken on tickets, such as linking to relevant documents or external resources. This column is non-nullable, meaning every record in the table must include a URL. In SQL queries, this column can be used to retrieve or filter records based on the URL associated with ticket actions, enhancing traceability and access to related online resources."
ticketActionsTaken,ticket_actions_taken_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `ticket_actions_taken_id` column in the `ticketActionsTaken` table functions as a primary key, uniquely identifying each record of actions and interventions performed on support tickets. This integer column is not nullable, ensuring that every record has a unique identifier. In SQL queries, this column can be used to specifically target, reference, or join records based on their unique action or intervention history within the table."
ticketActionsTaken,ticket_action_id,int,NO,,,,,,,10.0,0.0,"The `ticket_action_id` column in the `ticketActionsTaken` table is an integer data type and serves as a unique identifier for each action or intervention recorded on support tickets. This column is not nullable, indicating that every record in the table must have a valid `ticket_action_id`. In SQL queries, this column can be used to uniquely select, update, or reference specific actions taken on tickets within the table."
ticketActionsTaken,ticket_id,int,NO,MUL,,,,,,10.0,0.0,"The `ticket_id` column in the `ticketActionsTaken` table is an integer data type used to link actions and interventions to specific support tickets. This column is not nullable, indicating that every record in the table must have a `ticket_id` associated with it, ensuring that all actions are traceable to a ticket. As it is marked with a key type of MUL, `ticket_id` can be used in SQL queries to join this table with other tables that contain a `ticket_id` column, facilitating complex queries across multiple aspects of ticket handling and auditing."
ticketReasonActions,ticket_reason_action_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `ticket_reason_action_id` in the `ticketReasonActions` table serves as the primary key and is used to uniquely identify each record. This integer column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, this column is essential for performing operations that require specific identification of a record, such as updating or deleting actions associated with particular ticket reasons or retrieving detailed information about mapped actions for reporting and analysis purposes."
ticketReasonActions,ticket_reason_id,int,NO,,,,,,,10.0,0.0,"The `ticket_reason_id` column in the `ticketReasonActions` table is an integer that serves as a reference to specific ticket reasons or categories in a support system. This column is crucial for SQL queries when you need to join this table with others that contain detailed descriptions or records of ticket reasons, ensuring that the correct predefined actions or responses are associated with each ticket reason. Since it is non-nullable, every record in the `ticketReasonActions` table must have a valid `ticket_reason_id` linked to it, ensuring data integrity and the effectiveness of the support system workflows."
ticketReasonActions,ticket_action_id,int,NO,,,,,,,10.0,0.0,"The `ticket_action_id` column in the `ticketReasonActions` table is used to uniquely identify each action associated with a ticket reason in a support system. As an integer data type and non-nullable, this column ensures that every record in the table has a valid, unique identifier for referencing specific actions. In SQL queries, this column can be used to join with other tables that require action details based on ticket reasons, or to retrieve, update, or delete action records in a structured and reliable manner."
ticketReasons,ticket_reason_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `ticket_reason_id` column in the `ticketReasons` table is an integer column used as the primary key, meaning it uniquely identifies each record of predefined ticket creation reasons or categories. This column is not nullable, ensuring that every record in the table must have a valid, unique identifier. In SQL queries, `ticket_reason_id` can be used to join this table with other tables in the database that reference these standardized reasons, facilitating data retrieval and manipulation related to ticket categorization."
ticketReasons,ticket_reason_name,varchar(255),NO,,,,,,255.0,,,"The `ticket_reason_name` column in the `ticketReasons` table is a VARCHAR(255) field that stores the textual descriptions of reasons or categories for creating tickets in a ticketing system. This column is not nullable, meaning every record in the table must have a value for this column, which ensures that every ticket reason is clearly defined. In SQL queries, this column can be used to filter, join, or classify ticket data based on specific reasons, enhancing data retrieval and analysis related to ticket categorization."
tickets,ticket_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `ticket_id` column in the `tickets` table is an integer field that serves as the primary key, uniquely identifying each record in this table. This column is essential for SQL queries when you need to select, update, or delete specific ticket records. Since it is not nullable and uniquely identifies tickets, it is commonly used in JOIN operations to link with other related tables that reference `ticket_id`."
tickets,ticket_reason_id,int,YES,MUL,,,,,,10.0,0.0,"The column `ticket_reason_id` in the `tickets` table is an integer field that can be used to link each ticket to a specific reason for the support request, issue, or booking. This column is nullable, meaning not all tickets might have an associated reason. As indicated by the key type 'MUL', `ticket_reason_id` likely serves as a foreign key that references another table, which could store detailed reasons, facilitating joins in SQL queries to analyze or retrieve comprehensive ticket information based on the reason for the ticket."
tickets,created_at,timestamp,YES,MUL,,0000-00-00 00:00:00,,,,,,"The `created_at` column in the `tickets` table is used to store the timestamp indicating when each ticket was created. This column, which can contain null values, is of the 'timestamp' data type and is indexed (indicated by Key Type: MUL) to facilitate faster querying based on creation times. The default value for this column is '0000-00-00 00:00:00', which represents an undefined or unset timestamp. In SQL queries, this column can be used to filter, sort, or group ticket records by their creation dates."
tickets,updated_at,timestamp,NO,MUL,,0000-00-00 00:00:00,,,,,,"The column `updated_at` in the `tickets` table is used to record the timestamp of the most recent update made to a ticket. This column is essential for tracking changes over time and cannot contain null values, ensuring that every ticket has a recorded update time. Given its data type as a timestamp and its key type marked as MUL (suggesting it's indexed but not unique), this column can be effectively used in SQL queries to sort, filter, or group tickets based on the last modification date."
tickets,reopened_at,timestamp,YES,,,,,,,,,"The `reopened_at` column in the `tickets` table is used to store the timestamp of when a ticket, related to customer support requests or event bookings, was reopened after being previously closed or resolved. This column is of the type `timestamp` and can contain null values, indicating that some tickets may never be reopened. When constructing SQL queries, this column can be used to filter or analyze tickets based on their reopening times, such as finding all tickets that were reopened within a specific date range."
tickets,agent_id,int,YES,MUL,,,,,,10.0,0.0,"The `agent_id` column in the `tickets` table is an integer type that can be used to link each ticket to a specific customer support agent, where each agent is identified by a unique integer ID. This column is nullable, meaning that some tickets might not be assigned to any agent. As it is marked with a key type of MUL, it suggests that the `agent_id` is indexed and can be used in SQL queries to efficiently filter or join tickets based on the agent handling them."
tickets,requestor_id,int,YES,MUL,,,,,,10.0,0.0,"The `requestor_id` column in the `tickets` table is an integer field that can optionally contain a value (nullable), and it is used to reference the identifier of the individual or entity that requested the ticket. Being marked as a 'MUL' key type suggests that this column is indexed but not necessarily unique, facilitating efficient querying and joining operations with other tables that might contain related requestor data. Therefore, in SQL queries, `requestor_id` can be used to filter or join tickets based on who initiated the support request or booking."
tickets,ticket_type,varchar(255),NO,,,,,,255.0,,,"The `ticket_type` column in the `tickets` table is used to categorize the nature of each ticket, such as whether it pertains to customer support requests, technical issues, or event bookings. As a non-nullable varchar field with a maximum length of 255 characters, it must always contain a value that describes the type of ticket. This column is crucial for filtering and analyzing tickets based on their categories in SQL queries, enabling more targeted responses and reports."
tickets,relation_id,varchar(255),YES,,,,,,255.0,,,"The `relation_id` column in the `tickets` table is a varchar field that can store up to 255 characters and is used to hold a reference identifier which may link a ticket to other related entities, such as customer accounts or event details. This column is optional (nullable), meaning not all tickets need to have a `relation_id`. In SQL queries, this column can be used to join the `tickets` table with other tables that share this identifier, facilitating the analysis of related records across different aspects of customer support or event management."
tickets,status,int,NO,MUL,,0,,,,10.0,0.0,"The column named 'status' in the 'tickets' table is an integer (`int`) data type that represents the current state or condition of a ticket within a customer support or event booking system. It is a mandatory field (`Nullable: NO`), meaning every ticket record must have a status value. Additionally, as it is marked with a key type `MUL`, this column may be indexed and can be used in joining this table with other tables in the database to analyze or retrieve ticket information based on their status."
tickets,notes,varchar(255),YES,,,,,,255.0,,,"The `notes` column in the `tickets` table is used to store additional textual information or comments related to each ticket, which can include details not covered by other fields such as specific customer requests, clarifications, or internal comments. This column has a data type of `varchar(255)`, allowing for text entries up to 255 characters and it is nullable, meaning it can accept NULL values if no notes are provided. In SQL queries, this column can be used to filter, update, or display ticket-specific annotations or comments for better understanding or tracking of the ticket's context or history."
tickets,assigned_to_operator_at,timestamp,NO,,,0000-00-00 00:00:00,,,,,,"The column `assigned_to_operator_at` in the `tickets` table is used to store the timestamp indicating when a ticket was assigned to an operator. This non-nullable column ensures that every ticket record has a recorded assignment time, which is crucial for tracking response times and managing workflows. In SQL queries, this column can be used to filter, sort, or calculate durations related to ticket handling by operators."
tickets,requestor_phone_number,varchar(255),NO,,,,,,255.0,,,"The `requestor_phone_number` column in the `tickets` table is used to store the phone number of the individual who requested the ticket, ensuring a means of contact for follow-ups or updates regarding the support request or booking. This column is of type `varchar(255)` and cannot contain null values, indicating that a phone number must be provided for every ticket recorded. In SQL queries, this column can be used to filter, join, or match tickets based on the requestor's phone number."
tickets,SLA_violated,int,NO,,,0,,,,10.0,0.0,"The `SLA_violated` column in the `tickets` table is an integer data type that indicates whether a service level agreement (SLA) has been violated in handling customer support requests, issues, or event bookings. This column is not nullable, meaning every record in the table must have a value for this column, typically set to 0 (indicating no violation) or 1 (indicating a violation). In SQL queries, this column can be used to filter or count tickets that have breached the agreed service levels, allowing for performance analysis and reporting on service compliance."
tickets,subject,text,YES,,,,,,65535.0,,,"The `subject` column in the `tickets` table is used to store a text description that summarizes the main issue or topic of a customer support request, issue, or event booking ticket. As a nullable text field, it can contain any textual content describing the ticket but may also be left empty if no subject is provided. In SQL queries, this column can be used to filter or search for tickets based on specific subjects, sort tickets by subject, or group tickets to analyze common issues or requests by their subjects."
tickets,sla_resolved_in_time,tinyint(1),NO,,,,,,,3.0,0.0,"The column `sla_resolved_in_time` in the `tickets` table is used to indicate whether a ticket was resolved within the time frame specified by a service level agreement (SLA). It is a non-nullable `tinyint(1)` field, typically representing a boolean value where `1` means the ticket was resolved in time and `0` means it was not. This column is crucial for queries analyzing the efficiency and responsiveness of the customer support service, allowing for assessments of compliance with agreed service standards."
tickets,community_representative_group_id,int,YES,,,,,,,10.0,0.0,"The column `community_representative_group_id` in the `tickets` table is an integer type that can contain null values. This column is used to reference the group of community representatives associated with a ticket, which may indicate the team responsible for handling specific types of tickets. In SQL queries, this column can be used to join the `tickets` table with another table that contains details about different community representative groups, facilitating analysis or reports on ticket handling by different groups."
tier_questions,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `id` column in the `tier_questions` table is an integer-type primary key that uniquely identifies each record in the table. This column is essential for ensuring data integrity and cannot contain null values. In SQL queries, it is used to uniquely reference and manage specific associations between questions and their difficulty tiers, facilitating operations like joins, updates, or deletions within the table."
tier_questions,tier_id,int,NO,MUL,,4,tiers,id,,10.0,0.0,"The `tier_id` column in the `tier_questions` table is an integer that links to the `tiers` table, representing different difficulty levels of questions. This column is a non-nullable foreign key (indicated by the key type 'MUL' for multiple entries allowed), which ensures that each entry in `tier_questions` must be associated with a valid `tier_id` from the `tiers` table. In SQL queries, use this column to join the `tier_questions` table with the `tiers` table to categorize or filter questions based on their difficulty tier."
tier_questions,question_id,int,NO,MUL,,,questions,id,,10.0,0.0,"The `question_id` column in the `tier_questions` table is an integer that serves as a foreign key linking to the `questions` table. This column is essential for SQL queries when you need to retrieve or manipulate data related to the difficulty categorization of questions. Since it is not nullable and marked as 'MUL' (indicating it's part of a non-unique key), it ensures that every entry in the `tier_questions` table must have a valid `question_id` that corresponds to an existing question in the `questions` table, facilitating joins between these tables."
tiers,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `id` column in the `tiers` table is an integer-type primary key that uniquely identifies each record in the table. Since it is non-nullable and marked as a primary key, every tier must have a unique `id` value which cannot be left blank. This column is crucial for linking the `tiers` table to the `tier_questions` table, as it is used to establish relationships between tiers and their associated questions, facilitating effective management of tier-specific questions in SQL queries."
tiers,name,varchar(255),NO,,,,,,255.0,,,"The `name` column in the `tiers` table is of type `varchar(255)` and is used to store the unique identifier or label for each tier level or category within the system. Since it is not nullable, every record in the `tiers` table must have a tier name associated with it. This column is crucial for differentiating between tier levels and can be used in SQL queries to join with the `tier_questions` table to fetch tier-specific questions or to filter content and access levels based on tier names."
tiers,l_name,varchar(255),NO,,,,,,255.0,,,"The `l_name` column in the `tiers` table is a VARCHAR(255) field that stores the label or name of each tier level or category. This column is essential for identifying and differentiating between the various tiers within the system. Since the column is not nullable, every record in the `tiers` table must have a unique tier name, ensuring that each tier can be distinctly referenced in SQL queries, particularly when joining with the `tier_questions` table to manage tier-specific questions."
tiers,tooltip,varchar(255),YES,,,,,,255.0,,,"The `tooltip` column in the `tiers` table is a VARCHAR(255) type and can store up to 255 characters of text, which is used to provide additional information or guidance related to each tier level or category. This column is optional, as indicated by its nullable property, meaning it can contain null values if no tooltip is provided for a tier. In SQL queries, this column can be used to retrieve explanatory text that aids users in understanding the purpose or details of each tier, which can be particularly useful in user interfaces or reports where clarity about tier classifications is necessary."
tiers,l_tooltip,varchar(255),YES,,,,,,255.0,,,"The `l_tooltip` column in the `tiers` table is of type varchar(255) and can store up to 255 characters. It is used to provide a brief description or tooltip for each tier, which can help explain the purpose or details of the tier level to users or administrators. This column is optional, as indicated by its nullable property, meaning it can contain null values if no tooltip is provided for certain tier entries. In SQL queries, this column can be used to retrieve or display tooltips alongside tier information, enhancing user understanding or interface interactivity."
timelog_error_status,timelog_error_status_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `timelog_error_status_id` column in the `timelog_error_status` table acts as the primary key and is used to uniquely identify each record within the table. This column stores integers and cannot contain null values, ensuring that every record has a distinct identifier. In SQL queries, this column is crucial for operations like joins, where it can link error statuses to specific time logging operations, or for filtering and sorting operations based on unique error status identifiers."
timelog_error_status,payperiod,varchar(255),YES,,,,,,255.0,,,"The `payperiod` column in the `timelog_error_status` table, which is of type varchar(255) and can contain null values, stores the identification of the pay period associated with each time logging operation's status or error condition. This column can be used in SQL queries to filter or analyze time logging errors or statuses based on specific pay periods, facilitating targeted investigations or reports on time entry issues within distinct payroll intervals."
timelog_error_status,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `timelog_error_status` table is an integer type field that uniquely identifies users associated with time logging operations. This column is non-nullable, indicating that every record in this table must have a `user_id` value specified, ensuring that each error or status logged can be directly linked to a specific user. In SQL queries, `user_id` can be used to join this table with other user-related tables, filter results to specific users, or analyze errors and statuses by user."
timelog_error_status,bi_weekly_status,int,NO,,,0,,,,10.0,0.0,"The `bi_weekly_status` column in the `timelog_error_status` table is an integer data type that indicates the status of time logging operations for bi-weekly periods. Since it is non-nullable, every record in the table must have a valid integer status code. This column can be used in SQL queries to filter, sort, or aggregate data based on the bi-weekly operational status of time logging, ensuring that queries related to error handling and status checks for time entries are accurately addressed."
timelog_error_status,bi_weekly_ack_status,int,NO,,,,,,,10.0,0.0,"The `bi_weekly_ack_status` column in the `timelog_error_status` table is an integer field used to represent the acknowledgment status of bi-weekly time logging operations. Since the column is non-nullable, every record in the table must have a value for this field, indicating that it is essential for tracking the confirmation status of these operations. This column can be used in SQL queries to filter, sort, or aggregate data based on the acknowledgment status of time entries, helping in the analysis and management of time logging errors or statuses."
timelog_error_status,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `timelog_error_status` table is of type `datetime` and can store the date and time when each error status or condition related to time logging operations was recorded. Since this column is nullable, it allows for the possibility that the timestamp of the error recording might not be provided. In SQL queries, this column can be used to filter or sort records based on the time they were logged, which is useful for analyzing trends in errors or issues over time."
timelog_error_status,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the `timelog_error_status` table is an integer data type that can optionally contain a null value. This column is typically used to store the identifier of the user who initiated the time logging operation that resulted in the status or error condition recorded in this table. In SQL queries, the `created_by` column can be used to filter or join data based on which user created a particular log entry, enabling analysis of user-specific issues or patterns in time logging errors."
timelog_error_status,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `timelog_error_status` table records the date and time when the status or error information related to a time logging operation was last updated. This datetime column, which allows null values, can be used in SQL queries to track changes and updates to error statuses over time. For instance, it can help in identifying the most recent errors or in auditing the frequency of updates to the error and status logs."
timelog_error_status,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `timelog_error_status` table holds an integer value that likely references the identifier of a user or system process responsible for the last update made to a record. This column can be used in SQL queries to track or filter changes based on who or what made the update. Being nullable, it allows for situations where an update source might not be identifiable or applicable."
timelog_punch_type,punch_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `punch_type_id` column in the `timelog_punch_type` table is an integer that uniquely identifies each type of time clock punch, such as clock-ins, clock-outs, and breaks. It is a primary key, meaning each value must be unique and cannot be null. This column is crucial for linking and categorizing punch records in associated timekeeping tables through SQL queries, ensuring that each time entry is correctly classified according to the type of punch."
timelog_punch_type,name_en,varchar(255),NO,,,,,,255.0,,,"The `name_en` column in the `timelog_punch_type` table is a VARCHAR(255) type that stores the English descriptions of different time clock punches, such as ""clock-in,"" ""clock-out,"" ""break start,"" and ""break end."" This column is crucial for labeling and categorizing various time entries in associated timekeeping tables. As it is not nullable, every entry in the `timelog_punch_type` table must have a `name_en` value to ensure that each type of time punch is clearly defined and identifiable in the system."
timelog_punch_type,name_fr,varchar(255),NO,,,,,,255.0,,,"The `name_fr` column in the `timelog_punch_type` table stores the French-language descriptions of various time clock punch types, such as ""clock-in,"" ""clock-out,"" ""break start,"" and ""break end."" As a non-nullable VARCHAR field, it ensures that each punch type has a French name, which is essential for systems operating in French-speaking regions. In SQL queries, this column can be used to display or filter punch types based on their French descriptions, facilitating user interactions and reporting in French."
timelog_punch_type,short_name,varchar(255),NO,,,,,,255.0,,,"The `short_name` column in the `timelog_punch_type` table is used to store the abbreviated names of different time clock punch types, such as ""IN"" for clock-in or ""OUT"" for clock-out. This varchar(255) field is mandatory (non-nullable) and provides a concise identifier for each punch type. In SQL queries, this column can be used to join with other timekeeping tables to categorize and analyze time entries based on the type of punch."
timelog_punch_type,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `timelog_punch_type` table is of the data type `datetime` and can hold null values. This column typically records the date and time when each type of time clock punch (e.g., clock-in, clock-out) was created or defined in the system. In SQL queries, you can use this column to filter or sort the punch types based on when they were added to the database, which can be useful for auditing or tracking changes in timekeeping policies."
timelog_punch_type,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `timelog_punch_type` table is of type `datetime` and can contain null values. This column typically stores the timestamp of the last update made to a record in the table. It is useful in SQL queries for tracking when each type of time clock punch (like clock-in or clock-out) was last modified, which can assist in auditing and maintaining the data integrity of the time tracking system."
timelog_report_lock,timelog_report_lock_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `timelog_report_lock_id` column in the `timelog_report_lock` table is an integer column that serves as the primary key. This column uniquely identifies each lock record, ensuring that each timelog report has a distinct lock mechanism in place. It is essential for SQL queries that need to specifically target, modify, or check the status of locks on timelog reports to prevent data inconsistencies and access conflicts during report generation or modification."
timelog_report_lock,payperiod,varchar(255),YES,,,,,,255.0,,,"The `payperiod` column in the `timelog_report_lock` table is used to identify the specific pay period associated with a timelog report lock. As a varchar(255) type, it can store text representing the pay period, such as dates or custom identifiers. Since it is nullable, SQL queries can include conditions to check for NULL if a pay period isn't specified in some lock entries, allowing for flexible query formulation based on whether a timelog report lock is specifically associated with a pay period or not."
timelog_report_lock,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `timelog_report_lock` table records the datetime when a lock was established on a timelog report. This column is useful in SQL queries to determine the specific time a lock was initiated, helping in analyzing the duration of locks and identifying potential bottlenecks in report processing. Since it's nullable, there might be records where the lock initiation time is not set, indicating scenarios where default or immediate locking mechanisms are applied without a timestamp."
timelog_report_lock,created_by,int,YES,,,,,,,10.0,0.0,"The `created_by` column in the `timelog_report_lock` table is an integer field that can optionally store the user ID of the person who initiated the lock on a timelog report. This column is used in SQL queries to identify which user has placed a lock on a report, allowing for tracking of user activity related to report access and modification. This can be particularly useful for audit trails or resolving access conflicts when multiple users attempt to interact with the same report data."
timelog_report_lock,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `timelog_report_lock` table records the datetime when a lock on a timelog report was last updated. This column is useful in SQL queries to determine the most recent modification time of a lock, helping manage and resolve access conflicts by indicating when the lock was last active. Since it is nullable, the absence of a timestamp may indicate that the lock has never been updated after its initial creation."
timelog_report_lock,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `timelog_report_lock` table is used to identify which user last modified the locking mechanism on a timelog report. This column, being of data type integer, likely stores the user ID. It can be used in SQL queries to track or restrict access based on who is currently handling the report, helping to maintain the integrity of the data by preventing concurrent modifications."
timelog_settings,timelog_settings_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `timelog_settings_id` in the `timelog_settings` table is an integer-based primary key that uniquely identifies each record within the table. This column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, this column is crucial for performing operations like joining with other tables that reference `timelog_settings_id`, or for targeting specific configuration settings when updating or deleting entries in the `timelog_settings` table."
timelog_settings,dept_id,int,YES,,,,,,,10.0,0.0,"The `dept_id` column in the `timelog_settings` table is an integer field that can optionally link time logging settings to specific departments within an organization. Since it is nullable, not all settings must be associated with a department. This column can be used in SQL queries to filter or join configuration settings based on departmental criteria, allowing for department-specific configurations in time logging functionalities."
timelog_settings,total_hours,int,YES,,,,,,,10.0,0.0,"The `total_hours` column in the `timelog_settings` table is an integer type that represents the total number of hours related to certain time logging settings or preferences in the system. This column can be included in SQL queries to calculate, summarize, or adjust time logging configurations, such as setting thresholds or limits on time entries. Since it is nullable, SQL queries should account for the possibility of null values, which might indicate unspecified settings."
timelog_settings,st_holiday_type,int,YES,,,0,,,,10.0,0.0,"The column `st_holiday_type` in the `timelog_settings` table is an integer type that can be used to specify different types of holidays in the context of time logging settings. Since it is nullable, it can hold null values, indicating that the type of holiday may not be specified for some settings. This column can be utilized in SQL queries to filter or categorize time logging entries based on holiday types, enhancing the system's ability to handle time records during holidays differently from regular days."
timelog_settings,hour_paid,int,YES,,,0,,,,10.0,0.0,"The `hour_paid` column in the `timelog_settings` table, which is an integer type and can accept null values, represents whether hours logged are eligible for payment. In SQL queries, this column can be used to filter, sort, or determine the settings related to the payment status of logged hours. For instance, you might query this column to differentiate between paid and unpaid time entries as part of the system's time logging configuration."
timelog_settings,vacation_day,int,YES,,,0,,,,10.0,0.0,"The column `vacation_day` in the `timelog_settings` table is an integer type that can optionally store values, as indicated by its nullable attribute. This column is used to specify settings related to vacation days within the time logging functionality of the system. It can be used in SQL queries to adjust or retrieve configuration settings pertaining to how vacation days are handled or recorded in the system."
timelog_settings,sick_day,int,YES,,,0,,,,10.0,0.0,"The ""sick_day"" column in the ""timelog_settings"" table is of type integer and can store null values. This column is likely used to specify settings or preferences related to logging sick days within the time logging functionality of the system. In SQL queries, this column can be used to retrieve or set the number of sick days allowed, adjust sick day settings, or filter records based on sick day configurations."
timelog_settings,is_weekend_entry_sat,int,YES,,,0,,,,10.0,0.0,"The column `is_weekend_entry_sat` in the `timelog_settings` table is an integer type that indicates whether Saturday is considered a weekend day for the purpose of time logging. This column can be used in SQL queries to adjust or filter time logging records based on whether Saturdays are treated as part of the weekend. Since it is nullable, ensure to handle cases where its value might be missing (NULL)."
timelog_settings,is_weekend_entry_sun,int,YES,,,0,,,,10.0,0.0,"The column `is_weekend_entry_sun` in the `timelog_settings` table is an integer type that indicates whether Sunday is considered as part of the weekend for time logging purposes. This column can be used in SQL queries to adjust or filter time logging settings based on whether Sundays are treated as weekend days. Since it is nullable, SQL queries should account for the possibility of NULL values, which might indicate undefined settings for Sunday as a weekend entry."
timelog_settings,is_hour_exceeded,int,YES,,,0,,,,10.0,0.0,"The `is_hour_exceeded` column in the `timelog_settings` table is an integer type that indicates whether a specific time logging setting exceeds a predefined hour limit. This column can be used in SQL queries to filter or modify time logging settings based on whether the hour limit has been exceeded. Since it is nullable, SQL queries should account for potential null values which might represent undefined or inapplicable settings."
timelog_settings,flag_stat_holiday,int,YES,,,0,,,,10.0,0.0,"The `flag_stat_holiday` column in the `timelog_settings` table is of type integer and can contain null values. This column is used to indicate whether a particular setting or preference in the time logging functionality considers statutory holidays (typically represented by a value of 1 for true and 0 for false). You can use this column in SQL queries to filter or modify how time entries are handled during statutory holidays, depending on whether the flag is set or not."
timelog_settings,is_zero_punch,int,YES,,,0,,,,10.0,0.0,"The column `is_zero_punch` in the `timelog_settings` table is an integer type that can contain null values. It is used to determine whether zero time entries (i.e., no time logged) are allowed or recorded in the system's time logging functionality. When forming SQL queries, this column can be checked to apply the appropriate time logging rules, where a value of 0 typically indicates that zero punches are not permitted, and any non-zero value (commonly 1) indicates they are allowed."
timelog_settings,created_at,datetime,NO,,,,,,,,,"The `created_at` column in the `timelog_settings` table records the datetime at which each configuration setting was created. This column is essential for tracking when time logging settings were initially set up or modified, ensuring that changes can be audited or reverted if necessary. Since the column is not nullable, every record in the table must have a timestamp, guaranteeing that the creation time for each setting is always recorded and available for SQL queries that may need to filter or sort by this attribute."
timelog_settings,created_by,int,NO,,,,,,,10.0,0.0,"The `created_by` column in the `timelog_settings` table is an integer (`int`) that represents the user ID of the person who created each configuration setting. Since this column is not nullable, every record in the table must include a valid user ID, indicating that it is crucial for tracking the accountability of configuration changes. This column can be used in SQL queries to filter or join data based on who initially set up or modified the time logging settings, enhancing data management and security audits within the system."
timelog_settings,updated_at,datetime,NO,,,,,,,,,"The `updated_at` column in the `timelog_settings` table is of the `datetime` data type and is used to track the last modification date and time of each record in the table. This column is not nullable, indicating that every record must have a timestamp indicating when it was last updated. In SQL queries, this column can be used to filter, sort, or perform time-based calculations to understand changes in time logging settings over time."
timelog_settings,updated_by,int,NO,,,,,,,10.0,0.0,"The `updated_by` column in the `timelog_settings` table is of type `int` and cannot be null, indicating it likely stores user identifiers for who last updated a setting. In SQL queries, this column can be used to filter or join data based on the user ID responsible for changes, ensuring that user-specific configurations or updates are correctly attributed and managed. This is useful for tracking changes, auditing, or personalizing settings based on the user's modifications."
timelog_settings,auto_punch_out,int,NO,,,0,,,,10.0,0.0,"The `auto_punch_out` column in the `timelog_settings` table is an integer type that indicates whether the automatic punch-out feature is enabled (1) or disabled (0) in the time logging system. This column is not nullable, ensuring that every record in the table must explicitly specify the state of this setting. In SQL queries, this column can be used to control or modify the behavior of the time logging functionality, specifically how the system handles the automatic termination of time entries."
timelog_timecard_check_in,timecard_checkin_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `timecard_checkin_id` column in the `timelog_timecard_check_in` table serves as the primary key, uniquely identifying each record of an employee's check-in. This integer column is not nullable, ensuring that every check-in record must have a unique identifier. In SQL queries, this column can be used to specifically target, retrieve, or manipulate individual check-in records based on their unique ID."
timelog_timecard_check_in,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `timelog_timecard_check_in` table is an integer data type that represents the unique identifier of an employee. This column is not nullable, indicating that every record in the table must have a valid `user_id` associated with it, ensuring that each check-in entry is linked to an employee. In SQL queries, this column can be used to join the `timelog_timecard_check_in` table with other tables that contain employee information, enabling comprehensive analyses and reports on employee attendance and time tracking."
timelog_timecard_check_in,start_date,date,NO,,,,,,,,,"The `start_date` column in the `timelog_timecard_check_in` table holds the date when an employee checked in, and is of the data type `date`. This column is essential for tracking the beginning of an employee's workday and cannot contain null values, indicating that a check-in date must always be recorded for each entry. In SQL queries, this column can be used to filter, sort, or group records based on the check-in dates to analyze attendance, calculate work hours, or monitor punctuality."
timelog_timecard_check_in,end_date,date,NO,,,,,,,,,"The `end_date` column in the `timelog_timecard_check_in` table stores the date on which an employee's check-in period ends. This column is of the data type `date` and cannot contain null values, indicating that every record must have a defined end date. In SQL queries, this column can be used to filter or analyze employee attendance over specific periods by comparing or selecting records based on the end date."
timelog_timecard_check_in,created_at,datetime,NO,,,,,,,,,"The `created_at` column in the `timelog_timecard_check_in` table records the datetime when an employee check-in event was created. This column is of the `datetime` data type and cannot contain null values, ensuring that every record has a timestamp. In SQL queries, this column is used to filter, sort, or perform time-based calculations on employee check-in records."
timelog_transactions,timelogs_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `timelogs_id` column in the `timelog_transactions` table is an integer-type primary key that uniquely identifies each record of time-based transactions or activities. Since it is not nullable, every transaction must have a unique `timelogs_id`. This column is essential for indexing and efficiently retrieving specific transaction records within SQL queries."
timelog_transactions,loggedin_date,datetime,NO,,,,,,,,,"The `loggedin_date` column in the `timelog_transactions` table is of type `datetime` and cannot contain null values, indicating that it is essential to record the exact date and time when a transaction or activity begins. This column is crucial for constructing SQL queries that need to filter, sort, or group transactions based on specific time frames, such as finding all activities logged within a particular date range or determining the most recent transactions."
timelog_transactions,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `timelog_transactions` table is an integer data type and is not nullable, indicating that every record in this table must have a `user_id` associated with it. This column is used to uniquely identify and link users to specific time-based transactions or activities recorded in the table. In SQL queries, `user_id` can be used to filter, join, or aggregate transaction data by specific users, enhancing the ability to analyze user-specific activities and durations."
timelog_transactions,in_time,datetime,YES,,,,,,,,,"The `in_time` column in the `timelog_transactions` table is of the `datetime` data type and can contain null values. This column typically records the starting time of a transaction or activity. In SQL queries, `in_time` can be used to filter, sort, or calculate durations when paired with an end time column, enabling detailed time-based analysis and reporting on activities or transactions logged in the table."
timelog_transactions,out_time,datetime,YES,,,,,,,,,"The `out_time` column in the `timelog_transactions` table represents the timestamp indicating when a particular transaction or activity was concluded. It is of the `datetime` data type, which allows for the storage of both date and time values. Since this column is nullable, it can accommodate records where the end time might not be immediately available or applicable. In SQL queries, this column can be used to filter, sort, or calculate the duration of activities by comparing it with other datetime columns such as an `in_time`."
timelog_transactions,duration,time,YES,,,,,,,,,"The `duration` column in the `timelog_transactions` table is of data type `time` and can contain null values. This column is used to store the length of time that each transaction or activity took. In SQL queries, you can use this column to calculate, aggregate, or filter data based on the duration of activities, such as finding the average duration, summing durations, or selecting transactions that exceed a certain time threshold."
timelog_transactions,punch_type_id,int,NO,,,,,,,10.0,0.0,"The `punch_type_id` column in the `timelog_transactions` table is an integer that categorizes the type of transaction or activity recorded, such as clocking in or out. It is a mandatory field (non-nullable) and should be used in SQL queries to filter or analyze transactions based on the type of activity. This column can be joined with a reference table that defines each type of punch to provide more descriptive details about the activity logged."
timelog_transactions,status,int,NO,,,,,,,10.0,0.0,"The `status` column in the `timelog_transactions` table is of type integer and cannot contain null values. This column is used to indicate the current status of each transaction or activity recorded in the table, likely representing different stages or states of the process. When constructing SQL queries, this column can be used to filter, sort, or group the transactions based on their status, enabling detailed analysis or reporting on the activities' progress or outcomes."
timelog_transactions,is_locked,int,YES,,,0,,,,10.0,0.0,"The `is_locked` column in the `timelog_transactions` table is an integer type that indicates the status of a transaction or activity, where a value of 0 typically represents that the transaction is not locked. This column is nullable, meaning it can hold NULL values, which might indicate an undefined lock status. In SQL queries, this column can be used to filter or update records based on their locked status, such as retrieving only those transactions that are not locked or updating the lock status of specific transactions."
timelog_transactions,error_type,json,YES,,,,,,,,,"The `error_type` column in the `timelog_transactions` table, which is of JSON data type and can be nullable, stores structured data about any errors that might occur during time-based transactions or activities. This column can be used in SQL queries to extract detailed error information for analysis or debugging purposes. You can use JSON-specific functions provided by the SQL database to query or manipulate this data, such as filtering transactions based on specific error types or extracting error details."
timelog_transactions,ack_status,int,YES,,,0,,,,10.0,0.0,"The `ack_status` column in the `timelog_transactions` table is an integer type that can store null values, indicating whether a transaction or activity has been acknowledged, with the status likely represented by different integer values (e.g., 0 for unacknowledged). This column can be used in SQL queries to filter, count, or categorize transactions based on their acknowledgement status, which can be crucial for reports or system monitoring that tracks the progress or completion of activities logged in the table."
timelog_transactions,sign_off_status,int,YES,,,0,,,,10.0,0.0,"The `sign_off_status` column in the `timelog_transactions` table is an integer type that indicates the status of a transaction or activity sign-off, where different integers represent different statuses. Since this column is nullable, it allows for entries where the sign-off status might not be applicable or determined yet. When constructing SQL queries, this column can be used to filter or classify transactions based on their sign-off status, which can be crucial for reports or analyses related to the completion or approval of time-based activities."
timelog_transactions,is_autopopulate,int,YES,,,0,,,,10.0,0.0,"The column `is_autopopulate` in the `timelog_transactions` table is of type integer and can contain null values. This column is used to indicate whether a transaction or activity entry was automatically populated (likely represented by a value of 1) or manually entered (likely represented by a value of 0). In SQL queries, this column can be used to filter or analyze the transactions based on how the data was entered into the system."
timelog_transactions,ab_absence_request_id,int,YES,,,,,,,10.0,0.0,"The column `ab_absence_request_id` in the `timelog_transactions` table is an integer data type and can contain null values. This column likely serves as a reference or foreign key to another table that manages absence requests, although it is not explicitly marked as a key. In SQL queries, this column can be used to join the `timelog_transactions` table with the absence request table to analyze or report on time-based transactions related to specific absence requests."
timelog_transactions,created_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `created_at` column in the `timelog_transactions` table is of type `datetime` and is used to automatically record the timestamp when each transaction or activity entry is created. This column is non-nullable, ensuring that every record in the table has a timestamp, and is set to the current timestamp by default when a new record is inserted. This feature is crucial for tracking the exact time of each logged transaction or activity, facilitating accurate time-based reporting and analysis."
timelog_transactions,created_by,int,YES,,,,,,,10.0,0.0,"The ""created_by"" column in the ""timelog_transactions"" table is an integer data type and can contain null values. This column is used to store the identifier of the user or entity that initiated the transaction or activity recorded in the table. In SQL queries, this column can be used to filter or join data based on who created specific entries, enabling analysis or reporting on user-specific activities."
timelog_transactions,updated_at,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `updated_at` column in the `timelog_transactions` table is of type `datetime` and is used to store the timestamp of when each record was last updated. This column is set to automatically capture the current timestamp (`CURRENT_TIMESTAMP`) whenever a transaction or activity record is updated. Since it is not nullable, every record in the table must have a value for `updated_at`, ensuring that there is always a timestamp available to track when the last modification was made. This feature is particularly useful for maintaining data integrity and for audit purposes in time-based logging systems."
timelog_transactions,updated_by,int,YES,,,,,,,10.0,0.0,"The `updated_by` column in the `timelog_transactions` table is an integer field that can store null values. This column is typically used to reference the identifier of the user or system entity that last updated a record in the table. In SQL queries, this column can be utilized to filter or join data based on who made updates to the transaction records, enhancing the ability to track changes and maintain accountability in time-based logging."
timelog_transactions,ot_duration,time,YES,,,,,,,,,"The `ot_duration` column in the `timelog_transactions` table is used to store the duration of overtime for various transactions or activities, formatted as a time data type. Since this column is nullable, it can accommodate records where overtime duration is not applicable or unknown. In SQL queries, this column can be used to calculate total overtime, analyze overtime patterns, or integrate with other time-tracking data, enhancing reporting and decision-making processes regarding overtime management."
timelog_transactions,prefill_punch_edited,int,YES,,,0,,,,10.0,0.0,"The column `prefill_punch_edited` in the `timelog_transactions` table is an integer type that can contain null values. This column likely indicates whether a time punch (a record of the start or end of a period of work) was edited prior to being finalized, with a typical usage of `0` representing 'false' (no edits) and other integers representing 'true' (edits made). In SQL queries, this column can be used to filter or analyze transactions where prefill punches were modified, aiding in audits or adjustments in time-tracking reports."
timelog_transactions,duration_in_decimal,"decimal(10,2)",YES,,,0.00,,,,10.0,2.0,"The column `duration_in_decimal` in the `timelog_transactions` table is used to store the duration of activities or transactions in a decimal format, where the precision allows for two decimal places. This column can be included in SQL queries to calculate, summarize, or analyze the time spent on various activities, and it is optional as it allows NULL values. For instance, you might use this column to compute total or average durations, or to filter records based on specific duration criteria."
timelog_transactions,is_stat_hours_prefilled,int,YES,,,0,,,,10.0,0.0,"The column `is_stat_hours_prefilled` in the `timelog_transactions` table indicates whether statistical hours related to a transaction or activity have been pre-filled. As an integer data type, it likely uses a binary format where `0` represents 'false' (not pre-filled) and `1` represents 'true' (pre-filled). This column can be used in SQL queries to filter or categorize transactions based on whether their statistical hours are pre-filled, enhancing analysis or reporting on time-based data."
timelog_transactions,is_auto_punch_out_edited,int,YES,,,0,,,,10.0,0.0,"The column `is_auto_punch_out_edited` in the table `timelog_transactions` is an integer type that can be nullable, indicating whether the automatic punch-out time for a transaction or activity has been manually edited. A value of `0` typically suggests no edits were made. This column can be used in SQL queries to filter or analyze records based on whether the auto punch-out times have been altered, aiding in the assessment of data integrity or in tracking manual interventions in automated time logging systems."
tote_formats,tote_format_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `tote_format_id` column in the `tote_formats` table is a primary key of integer type, used to uniquely identify each tote container format within the Reusable Plastic Container (RPC) system. This column is crucial for linking and referencing specific tote configurations across various tables such as products, shipments, supplier settings, and invoice details. Since it is not nullable, every record in the `tote_formats` table must have a unique `tote_format_id`, ensuring consistent and reliable identification and referencing of tote formats in SQL queries and database operations."
tote_formats,width,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The `width` column in the `tote_formats` table specifies the width of each tote container format in the Reusable Plastic Container (RPC) system, measured as a decimal value with two places after the decimal point. This column is crucial for defining the physical dimensions of the containers and cannot be NULL, ensuring that every tote format has a specified width. In SQL queries, this column can be used to filter or sort tote formats based on their width, or to join with other tables that require width data for calculations or constraints."
tote_formats,height,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The `height` column in the `tote_formats` table represents the height of tote containers in the RPC system, stored as a decimal number with up to 10 digits and 2 decimal places. This column is essential for defining the physical dimensions of tote containers, ensuring that products fit appropriately for storage and transportation. Since the `height` column is not nullable, every record in the `tote_formats` table must include a valid height value, making it critical for queries that involve dimensions-based criteria or calculations for space management and compatibility checks in the logistics processes."
tote_formats,depth,"decimal(10,2)",NO,,,,,,,10.0,2.0,"The `depth` column in the `tote_formats` table specifies the depth of each tote container in the Reusable Plastic Container (RPC) system, measured in decimal format with precision up to two decimal places. This column is essential for determining the physical dimensions of containers, which can be used in SQL queries to calculate storage capacity, optimize space utilization in shipments, or match product sizes with appropriate tote containers. Since the column is not nullable, every record in the `tote_formats` table must include a depth value, ensuring complete dimensional data is available for each tote format."
tote_formats,supplier_id,varchar(255),YES,,,,,,255.0,,,"The `supplier_id` column in the `tote_formats` table is a varchar field of up to 255 characters that can optionally store the identifier of the supplier associated with each tote format. This column can be used in SQL queries to join the `tote_formats` table with other tables that contain supplier information, enabling detailed analysis and reporting on the tote formats used by specific suppliers. Since the column is nullable, SQL queries should account for the possibility of NULL values, which indicate that a tote format might not be linked to a specific supplier."
tote_formats,folded_tower_count,int,YES,,,,,,,10.0,0.0,"The `folded_tower_count` column in the `tote_formats` table represents the number of towers that can be folded within each tote container format, stored as an integer. This column is optional (nullable) and may be used in SQL queries to determine the compactness or storage efficiency of different tote designs in the Reusable Plastic Container (RPC) system. For example, it can help in optimizing the space or calculating the maximum number of totes that can be accommodated in a given area during shipping or storage."
tote_formats,unfolded_tower_count,int,YES,,,,,,,10.0,0.0,"The column `unfolded_tower_count` in the `tote_formats` table represents the number of towers a tote can unfold into when set up, stored as an integer. This column is optional (nullable) and can be used in SQL queries to determine or specify the capacity and layout of reusable plastic containers (RPCs) in different configurations. For example, it can help in selecting the appropriate tote format based on storage or display requirements in various logistical or retail settings."
tote_formats,internal_name,varchar(255),YES,UNI,,,,,255.0,,,"The `internal_name` column in the `tote_formats` table is a varchar(255) field that can store up to 255 characters and is used to provide a unique, human-readable identifier for each tote format in the Reusable Plastic Container (RPC) system. This column, which can accept null values, is crucial for distinguishing between different tote container formats when querying the database for product, shipment, supplier, or invoice information related to specific tote configurations. Being a unique key (UNI), each value in the `internal_name` column must be distinct across all records in the `tote_formats` table."
tote_formats,folded_half_tower_count,int,YES,,,,,,,10.0,0.0,"The `folded_half_tower_count` column in the `tote_formats` table specifies the number of half-sized tower configurations that a tote can be folded into within the Reusable Plastic Container (RPC) system. This integer column, which can accept null values, is used to detail the folding capabilities of each tote format. It is useful in SQL queries when determining or setting the storage and transportation specifications of tote containers, particularly in scenarios where space optimization is crucial."
training_stats_prepbasket,training_stat_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `training_stat_id` column in the `training_stats_prepbasket` table serves as the primary key for the table, uniquely identifying each record of basketball training statistics and performance metrics. As a non-nullable integer, this column must contain a unique value for each entry, ensuring that each set of training data can be distinctly referenced. This column is crucial for linking training statistics to specific sessions in the `employee_training` table via the `training_id` field, facilitating queries that combine employee and training performance data."
training_stats_prepbasket,training_id,int,NO,MUL,,,employee_training,training_id,,10.0,0.0,"The `training_id` column in the `training_stats_prepbasket` table is an integer that serves as a foreign key linking to the `employee_training` table. This column is crucial for SQL queries that need to associate basketball training statistics with specific training sessions recorded in the `employee_training` table. Since `training_id` is marked as non-nullable and has a key type of MUL, it must always have a value and can join to multiple entries in the related table, indicating potentially multiple statistics records per training session."
training_stats_prepbasket,put_speed,int,YES,,,,,,,10.0,0.0,"The `put_speed` column in the `training_stats_prepbasket` table represents an integer value that measures a specific performance metric related to speed during basketball training sessions. Since this column is nullable, it can accommodate entries where the speed measurement is not available or applicable. In SQL queries, this column can be used to analyze or compare the speed performance of participants across different training sessions by joining with the `employee_training` table using the `training_id` field."
training_stats_prepbasket,error_rate,float,YES,,,,,,,12.0,,"The `error_rate` column in the `training_stats_prepbasket` table represents the rate of errors recorded during basketball training sessions, expressed as a float. This column can be used in SQL queries to analyze the effectiveness or quality of training by measuring the frequency of errors made by participants. Since it is nullable, SQL queries should account for potential null values which indicate sessions where an error rate may not have been recorded or applicable."
training_stats_prepbasket,test_result,int,YES,,,,,,,10.0,0.0,"The `test_result` column in the `training_stats_prepbasket` table is used to store integer values representing the outcomes of basketball training tests. This column can be included in SQL queries to analyze or summarize the performance metrics of different training sessions. Since the column is nullable, queries involving `test_result` should account for the possibility of null values, which indicate that a test result was not recorded or is unavailable."
transaction_names,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `id` column in the `transaction_names` table is an integer type field that uniquely identifies each transaction type within the financial system. It serves as the primary key, meaning it cannot contain null values and each entry must be unique. This column is essential for linking and referencing transaction types in SQL queries when joining with other tables that record or process financial transactions."
transaction_names,name,varchar(128),YES,,,,,,128.0,,,"The `name` column in the `transaction_names` table is a VARCHAR(128) type and can store up to 128 characters. It is used to hold the names of different types of financial transactions. Although this column can contain null values, it typically serves as a descriptive label for categorizing transactions within the financial system, and can be used in SQL queries to join with other tables or to filter transaction types based on specific names."
transaction_names,type,int,YES,,,0,,,,10.0,0.0,"The `type` column in the `transaction_names` table is an integer data type that can be nullable, meaning it can contain integer values or be empty (NULL). This column is used to categorize financial transactions by assigning each transaction type a unique integer identifier. In SQL queries, this column can be used to join with other tables that record financial transactions, allowing for the categorization and analysis of transaction types based on the standardized list maintained in the `transaction_names` table."
transactions,transaction_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `transaction_id` column in the `transactions` table is a primary key of integer type, which uniquely identifies each financial transaction recorded in the system. As a non-nullable field, every record in the `transactions` table must have a unique `transaction_id`. This column is crucial for linking transactions to related data in other tables, such as bonus logs, guest records at community events, and transaction exclusion lists, thereby facilitating complex queries and data integrity across the database."
transactions,user_id,int,NO,MUL,,,,,,10.0,0.0,"The `user_id` column in the `transactions` table is an integer field that uniquely identifies users associated with each financial transaction. It is a mandatory field (non-nullable) and is indexed (indicated by Key Type: MUL), which facilitates efficient querying and joining with other related tables based on user identity. This column can be used in SQL queries to filter, aggregate, or join transaction data by specific users, enhancing the analysis of transaction patterns or user activity within the system."
transactions,source,tinyint,NO,,,0,,,,3.0,0.0,"The `source` column in the `transactions` table is a `tinyint` data type and cannot contain NULL values. It is used to identify the origin of each financial transaction recorded in the table. This column can be utilized in SQL queries to filter or categorize transactions based on their source, aiding in analyses or reporting that requires differentiation of transactions by their origin."
transactions,type,tinyint,NO,MUL,,0,,,,3.0,0.0,"The `type` column in the `transactions` table is a non-nullable `tinyint` data type that categorizes the types of financial transactions recorded in the system. It is indexed (indicated by Key Type: MUL), making it efficient for query operations that involve filtering or sorting by transaction type. This column should be used in SQL queries when you need to differentiate, group, or restrict results based on the type of transaction being processed, such as distinguishing between regular transactions, bonuses, or exclusions."
transactions,amount,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The `amount` column in the `transactions` table stores the monetary value of each financial transaction, recorded as a decimal number with up to 10 digits and 2 decimal places for precision (e.g., 1234567890.12). This column can be used in SQL queries to calculate totals, averages, or other financial metrics related to transactions. It is important to note that this column can contain NULL values, indicating transactions where the amount might not be specified or applicable."
transactions,description,varchar(255),NO,,,,,,255.0,,,"The `description` column in the `transactions` table is used to store textual descriptions of each financial transaction, with a maximum length of 255 characters. As a non-nullable varchar field, it must contain a value for every transaction record in the table. This column can be utilized in SQL queries to search, filter, or display transaction details based on their descriptions, enhancing the understanding of transaction purposes or activities recorded in the system."
transactions,created_time,datetime,NO,MUL,,,,,,,,"The `created_time` column in the `transactions` table contains the datetime data type and records the exact date and time when each financial transaction was created in the system. This column is non-nullable, ensuring that every transaction recorded in the table has a timestamp associated with it. The `created_time` can be used in SQL queries to sort, filter, or group transactions based on their creation times, which is useful for generating time-specific reports or analyzing transaction trends over time."
transactions,order_id,int,NO,MUL,,,,,,10.0,0.0,"The `order_id` column in the `transactions` table is an integer field that uniquely identifies each order associated with a financial transaction. It is a non-nullable column, indicating that every transaction must have an associated order ID. As it is marked with a key type of MUL, `order_id` can be used to join this table with other related tables, such as bonus logs or guest records, where `order_id` might also be referenced, facilitating complex queries across multiple facets of transaction data."
transactions,bank_transaction_id,varchar(50),NO,,,,,,50.0,,,"The `bank_transaction_id` column in the `transactions` table is a non-nullable varchar field with a maximum length of 50 characters. This column uniquely identifies each financial transaction as recorded by the bank, and it is crucial for linking transaction records in the database to corresponding entries in external banking systems. It can be used in SQL queries to join the `transactions` table with other related tables using the `transaction_id` to track, verify, or analyze financial transactions across different systems and activities."
transactions,staff_id,int,YES,MUL,,,,,,10.0,0.0,"The `staff_id` column in the `transactions` table is an integer field that can optionally link a transaction to a staff member, where each staff member is identified by a unique integer ID. This column supports multiple entries per staff member, indicated by its key type 'MUL'. It can be used in SQL queries to filter or join transaction records based on staff involvement, allowing analysis of transactions handled by specific staff members or to track staff performance in financial operations."
transactions,coupon_id,int,YES,MUL,,,,,,10.0,0.0,"The `coupon_id` column in the `transactions` table is an integer field that can optionally link a transaction to a specific coupon, indicated by the column being nullable. It is marked with a key type of 'MUL', suggesting that it is indexed and may be involved in joining this table with others that also reference `coupon_id`, such as a coupons table. This column can be used in SQL queries to filter or aggregate transaction data based on specific coupons, or to join with other tables to analyze the impact of coupon usage on transactions."
transactions,order_details_id,int,NO,MUL,,0,,,,10.0,0.0,"The `order_details_id` column in the `transactions` table is an integer field that uniquely identifies the specific order details associated with each financial transaction. This column is non-nullable, meaning every transaction record must have an associated `order_details_id`. As it is marked with a key type of MUL, this column can be used in SQL queries to join the `transactions` table with other tables that contain a corresponding `order_details_id`, facilitating the analysis of related transaction and order data across multiple table relationships within the database."
transactions,product_id,int,NO,,,0,,,,10.0,0.0,"The `product_id` column in the `transactions` table is an integer field that identifies the specific product associated with each financial transaction. This column is not nullable, indicating that every transaction must be linked to a product. In SQL queries, `product_id` can be used to join the `transactions` table with other product-related tables to fetch detailed information about the products involved in transactions, or to filter transactions based on specific product criteria."
transactions,hidden_details_amount_without_tax,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The `hidden_details_amount_without_tax` column in the `transactions` table specifies the amount involved in a financial transaction excluding any tax, recorded as a non-nullable decimal value with two decimal places precision. This column is crucial for accurately calculating the net transaction value before tax considerations in SQL queries. It can be used to assess financial data for reporting, analytics, or in conjunction with other tables linked via the `transaction_id` field to provide comprehensive transaction insights."
transactions,hidden_details_national_tax_amount,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The column `hidden_details_national_tax_amount` in the `transactions` table stores the national tax amount associated with each financial transaction as a non-nullable decimal value with precision up to 10 digits and 2 decimal places (e.g., 1234567890.12). This column must always contain a value (default is 0.00 if not specified), and it is used to calculate or report the tax component of transactions. When constructing SQL queries involving financial assessments or tax calculations, this column should be included to accurately reflect the tax obligations recorded in each transaction."
transactions,hidden_details_provincial_tax_amount,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The column `hidden_details_provincial_tax_amount` in the `transactions` table stores the amount of provincial tax applicable to each financial transaction, expressed as a decimal value with two decimal places (e.g., 12345.67). This column is mandatory (cannot be NULL) and typically defaults to 0.00, indicating no tax or tax not calculated yet. In SQL queries, this column can be used to calculate the total provincial tax for a set of transactions, to assess tax contributions per transaction, or to validate tax records against compliance requirements."
transactions,hidden_details_consigne_amount,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The `hidden_details_consigne_amount` column in the `transactions` table stores the monetary amount associated with a consignee in a financial transaction, recorded as a non-nullable decimal value with precision up to 10 digits and 2 decimal places. This column must always have a value (default is 0.00), indicating the consignee's financial involvement in the transaction. This field is crucial for accurately reflecting financial responsibilities in transaction records and can be used in SQL queries to calculate or verify the total amounts tied to specific consignees within the system."
transactions,finalized,int,NO,,,1,,,,10.0,0.0,"The `finalized` column in the `transactions` table is an integer data type that indicates the status of a financial transaction, where typically a value of `1` might represent that the transaction has been finalized. This column is not nullable, ensuring that every transaction record must explicitly have a finalized status. In SQL queries, this column can be used to filter or analyze only those transactions that have been completed, by checking where `finalized = 1`."
transactions,finalized_datetime,datetime,YES,,,,,,,,,"The `finalized_datetime` column in the `transactions` table stores the date and time when each financial transaction was finalized. This datetime field can be used in SQL queries to filter, sort, or group transactions based on when they were completed. Since this column is nullable, SQL queries should account for possible NULL values, which indicate transactions that have not yet been finalized."
transactions,child_transaction_id,int,YES,MUL,,0,,,,10.0,0.0,"The `child_transaction_id` column in the `transactions` table is an integer field that can optionally link a transaction to another related transaction within the same system, indicating a hierarchical or dependent relationship between transactions. This column is not a primary key but is indexed (as indicated by Key Type: MUL), which facilitates efficient querying and joining with other tables where `child_transaction_id` is referenced. It can be used in SQL queries to trace transaction chains or to aggregate data based on transaction relationships."
transactions,user_payments_id,int,YES,,,,,,,10.0,0.0,"The `user_payments_id` column in the `transactions` table is an integer field that can optionally link a transaction to a specific user payment. This column is nullable, indicating that not all transactions might be directly associated with a user payment. In SQL queries, this column can be used to join the `transactions` table with other tables related to user payments, facilitating analyses or reports that require correlating transactions with specific payment records by users."
transactions,bank_order_id,varchar(100),YES,,,,,,100.0,,,"The `bank_order_id` column in the `transactions` table is a VARCHAR type field that can store up to 100 characters and may contain null values. This column is used to store unique identifiers for bank orders associated with each transaction. It can be utilized in SQL queries to link or compare transaction records with external bank order data, facilitating the examination of financial transaction origins, verification processes, or reconciliation tasks."
transactions,bank_auth_code,varchar(100),YES,,,,,,100.0,,,"The `bank_auth_code` column in the `transactions` table is used to store the authorization code provided by a bank for each financial transaction, which is a variable character string up to 100 characters long. This column can contain null values, indicating that an authorization code may not always be present for every transaction. In SQL queries, `bank_auth_code` can be used to verify transaction authenticity, filter transactions by specific bank authorization codes, or join with other financial records that may require matching authorization details."
transactions,bank_account_id,varchar(15),YES,,,,,,15.0,,,"The `bank_account_id` column in the `transactions` table is a VARCHAR(15) field that can optionally store the identifier of a bank account associated with each financial transaction. Although it is not a key field and can contain null values, it is useful for linking transaction records to specific bank accounts when available. This column can be used in SQL queries to filter or join transaction data based on bank account information, aiding in detailed financial analysis or account-specific transaction tracking."
transactions,cs_ticket_id,int,YES,,,,,,,10.0,0.0,"The `cs_ticket_id` column in the `transactions` table is an integer field that can optionally link a transaction to a customer service ticket. Since it is nullable, not all transactions may be associated with a customer service ticket. This column can be used in SQL queries to join the `transactions` table with customer service-related tables, allowing for analysis or reporting on transactions that required customer service intervention."
transactions_sfids,transactions_sfids_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `transactions_sfids_id` column in the `transactions_sfids` table is an integer-type primary key that uniquely identifies each record. This column is not nullable, ensuring that every transaction record has a unique identifier. It is crucial for joining this table with other tables in SQL queries to maintain the integrity and synchronization of transaction data between the local system and Salesforce."
transactions_sfids,supplier_id,int,NO,,,,,,,10.0,0.0,"The `supplier_id` column in the `transactions_sfids` table is an integer data type that uniquely identifies suppliers associated with transaction records. This column is not nullable, indicating that every transaction record must have a corresponding supplier ID. In SQL queries, this column can be used to join the `transactions_sfids` table with other tables that contain supplier information, facilitating data analysis and integration tasks between the local system and Salesforce by ensuring that each transaction is linked to a specific supplier."
transactions_sfids,delivery_date,date,NO,,,,,,,,,"The `delivery_date` column in the `transactions_sfids` table is of the data type `date` and cannot contain NULL values. This column should be used in SQL queries when you need to filter or sort transaction records based on the date of delivery. It is essential for operations that involve scheduling, reporting, or tracking the timing of transactions that are synchronized between the local system and Salesforce."
transactions_sfids,amount,float,NO,,,,,,,12.0,,"The `amount` column in the `transactions_sfids` table represents the monetary value of a transaction and is stored as a non-nullable float data type. This column is crucial for financial calculations and reporting in SQL queries that involve transaction data synced with Salesforce. It should be included in queries where transaction amounts are required for summaries, averages, or other financial analysis between the local system and Salesforce."
transactions_sfids,description,varchar(500),YES,,,,,,500.0,,,"The `description` column in the `transactions_sfids` table is used to store textual descriptions associated with each transaction record, specifically detailing aspects relevant to the integration or synchronization process with Salesforce. This column is of type `varchar(500)`, allowing for descriptions up to 500 characters long, and it can accept NULL values, indicating that a description is not mandatory for every record. In SQL queries, this column can be utilized to provide contextual information about the transaction, aid in debugging integration issues, or enhance reporting capabilities by offering human-readable details about the transactions linked to Salesforce IDs."
transactions_sfids,type,int,YES,,,,,,,10.0,0.0,"The `type` column in the `transactions_sfids` table, which is of data type `int` and allows null values, categorizes the nature of the transactions linked to Salesforce IDs (SFIDs). This column can be used in SQL queries to filter or analyze transactions based on their type, facilitating the differentiation and handling of various transaction categories in synchronization processes between the local system and Salesforce. For example, specific transaction types might correspond to different processing rules or integration behaviors."
transactions_sfids,created,datetime,NO,,,,,,,,,"The `created` column in the `transactions_sfids` table holds datetime values indicating when each record, linking a Salesforce ID (SFID) to a transaction, was created. This column is essential for tracking the timing of data entry or synchronization between the local system and Salesforce. Since the `created` column is non-nullable, every record in the table must have a timestamp, ensuring that the exact creation time of each entry is always recorded and can be used in SQL queries to filter or sort transaction records based on their creation times."
transactions_sfids,updated,datetime,NO,,,,,,,,,"The `updated` column in the `transactions_sfids` table records the date and time when a transaction record was last updated. This datetime information is crucial for managing and tracking the synchronization status between the local system and Salesforce. Since the column is not nullable, every record in the table must have a timestamp indicating the last update, ensuring that there are no transactions without a recorded update time. This column can be used in SQL queries to filter or sort transaction records based on their last updated time, facilitating efficient data synchronization and integrity checks."
transactions_sfids,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `transactions_sfids` table is an integer data type and cannot contain null values. This column is used to uniquely identify users associated with transaction records that are synchronized with Salesforce. In SQL queries, `user_id` can be used to join this table with other user-related tables to fetch or manage transaction data linked to specific users within the system."
transfer_log,transfer_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `transfer_log_id` column in the `transfer_log` table is an integer-based primary key that uniquely identifies each record of a transfer or transaction in the system. This column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, the `transfer_log_id` can be used to specifically select, update, or delete records in the `transfer_log` table, and it is essential for joining this table with others that reference it to maintain relational integrity and facilitate complex data analysis."
transfer_log,created_at,date,NO,,,,,,,,,"The `created_at` column in the `transfer_log` table records the date when each transfer or transaction was initiated. This column is of the data type `date` and cannot contain null values, ensuring that there is always a date associated with each entry in the log. In SQL queries, this column is crucial for filtering and sorting the transfer records based on the time they were created, which is useful for generating time-specific reports or analyzing the transaction activities over a period."
transfer_log,transfer_by,int,NO,,,,,,,10.0,0.0,"The `transfer_by` column in the `transfer_log` table is an integer data type and cannot be null, indicating it is mandatory for each record. This column typically references the identifier of the user or system entity that initiated the transfer or transaction. In SQL queries, this column can be used to filter or join data based on who initiated specific transactions, aiding in user activity analysis or auditing system operations within the transfer history."
transfer_log,community_from,int,NO,,,,,,,10.0,0.0,"The `community_from` column in the `transfer_log` table is an integer data type that indicates the originating community ID for each transfer or transaction recorded in the system. This column is mandatory (non-nullable) and is used to identify and filter transfers based on where they originated. In SQL queries, `community_from` can be used to join with other tables that contain community-related information, or to specifically query transactions based on the originating community."
transfer_log,community_to,int,NO,,,,,,,10.0,0.0,"The `community_to` column in the `transfer_log` table is an integer that specifies the identifier of the community receiving a transfer or transaction. This column is not nullable, indicating that every record in the table must have a valid community identifier to which the transfer was directed. In SQL queries, this column can be used to filter or join data based on the recipient community, enabling analyses or reports on transactions directed towards specific communities."
transfer_log,actives,int,NO,,,,,,,10.0,0.0,"The `actives` column in the `transfer_log` table is an integer data type and cannot contain null values. This column should be used in SQL queries when you need to filter or analyze records based on specific numeric criteria related to active transfers or transactions. Since it is integral and non-nullable, ensure any query involving this column accounts for its mandatory presence in every record of the `transfer_log` table."
transfer_log,inactives,int,NO,,,,,,,10.0,0.0,"The `inactives` column in the `transfer_log` table, which is of type integer and cannot be null, appears to record a numerical value related to the transfers or transactions, possibly indicating items or aspects of the transactions that are inactive or not currently operational. In SQL queries, this column can be used to filter, count, or aggregate data to analyze the inactive elements of transactions, helping in identifying trends or issues in transaction processing. For example, you could use it to count how many transactions had a certain number of inactive elements during a specific period, aiding in system audits and performance assessments."
transfer_log,active_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The `active_rate` column in the `transfer_log` table represents a decimal value (with precision up to 10 digits and 2 decimal places) that is essential for calculations or conditions related to the rate active during a transfer or transaction. It is a mandatory field (non-nullable) and typically used in SQL queries to filter, sort, or aggregate data based on the rate applicable at the time of each transaction. This column does not serve as a primary or foreign key and always has a default value of 0.00 if not specified."
transfer_log,without_sub,int,NO,,,,,,,10.0,0.0,"The `without_sub` column in the `transfer_log` table is an integer data type and cannot contain null values. In SQL queries, this column can be used to filter or analyze records based on its values, which likely represent a specific identifier or status related to the transfers or transactions. Given its non-nullable nature, every record in the `transfer_log` table will have a value for `without_sub`, ensuring complete data for analyses involving this column."
transfer_log,total,int,NO,,,,,,,10.0,0.0,"The `total` column in the `transfer_log` table represents the monetary amount involved in a transfer or transaction and is stored as an integer. This column is not nullable, indicating that every record in the table must have a valid integer value for `total`. In SQL queries, this column can be used to calculate sums, averages, or other aggregate functions related to the financial aspects of transactions, and to filter or sort records based on the transaction amounts."
transfer_log,abp,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The column `abp` in the `transfer_log` table is a decimal field that stores a numeric value with up to 10 digits and 2 decimal places, and it cannot contain null values. In SQL queries, this column can be used to hold and manipulate amounts related to financial transactions or transfers, such as prices or balances. Since it defaults to 0.00, any new records without a specified value for `abp` will automatically be set to 0.00, ensuring that all transactions have a defined monetary value."
transfer_log,take_rate,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The `take_rate` column in the `transfer_log` table represents the percentage fee applied to each transaction or transfer recorded in the system. As a non-nullable decimal field with a precision of 10 digits and 2 decimal places, it ensures that all transactions include a clearly defined take rate. This column is crucial for calculating the fee amount from the transaction value in financial reports and analyses, and should be included in SQL queries that assess financial metrics or audit transaction fees."
trial_basket_daily_records,trial_basket_daily_record_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `trial_basket_daily_record_id` in the table `trial_basket_daily_records` serves as the primary key, uniquely identifying each record of daily aggregated trial basket metrics and performance data. This integer column is not nullable, ensuring that every record must have a unique identifier. When constructing SQL queries involving this table, use this column to uniquely reference or join records, ensuring data integrity and facilitating efficient data retrieval and analysis."
trial_basket_daily_records,delivery_date,datetime,NO,,,,,,,,,"The `delivery_date` column in the `trial_basket_daily_records` table is of the datetime data type and is not nullable, indicating that every record must have a delivery date specified. This column is essential for SQL queries that need to filter or analyze the trial basket metrics based on specific dates or date ranges. For instance, you can use this column to retrieve or organize daily aggregated data by specific delivery dates, enabling trend analysis or performance tracking over time."
trial_basket_daily_records,type,tinyint,NO,,,,,,,3.0,0.0,"The column named `type` in the `trial_basket_daily_records` table is used to categorize the records based on specific types, represented numerically as a `tinyint`. This column is not nullable, meaning every record in this table must have a value for `type`. When constructing SQL queries involving this table, you can use the `type` column to filter or classify the daily aggregated trial basket metrics and performance data based on their type categories."
trial_basket_daily_records,value,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The `value` column in the `trial_basket_daily_records` table stores decimal numbers, precisely formatted as `decimal(10,2)`, which means it can hold values with up to 10 digits, including 2 digits after the decimal point. This column is non-nullable, indicating that every record must have a value for this field. In SQL queries, this column can be used to calculate, aggregate, or filter metrics related to trial basket performance on a daily basis, such as summing up values, averaging them, or selecting records based on specific value criteria."
trial_logs,trial_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `trial_log_id` column in the `trial_logs` table is an integer column that uniquely identifies each log entry. As a primary key (PRI), it ensures that each record is unique and non-nullable, meaning every log entry must have a `trial_log_id`. This column is essential for indexing and can be used to efficiently retrieve, update, or delete specific log entries in SQL queries related to system trials or testing sessions."
trial_logs,ip,varchar(255),NO,MUL,,,,,255.0,,,"The `ip` column in the `trial_logs` table stores the IP address associated with each log entry from system trials or testing sessions. This column is of type `varchar(255)` and cannot contain null values, indicating that an IP address must be recorded for every log entry. As it is marked with a key type of `MUL`, it suggests that this column is indexed and can be efficiently used in SQL queries to filter or join data based on IP addresses, enhancing the performance and specificity of data retrieval related to network-related activities within the trials."
trial_logs,action,varchar(255),NO,MUL,,,,,255.0,,,"The `action` column in the `trial_logs` table is used to store descriptions of various actions performed during system trials or testing sessions. As a non-nullable varchar field with a maximum length of 255 characters, it ensures that every record in the table includes a textual description of the action taken. This column, marked with a key type of MUL, suggests it may be indexed for improving query performance on action-based searches or joins, which can be particularly useful for analyzing specific types of actions within the logs."
trial_logs,success,tinyint,YES,,,,,,,3.0,0.0,"The `success` column in the `trial_logs` table is of type `tinyint` and can contain null values. This column is used to indicate the outcome of a trial or testing session, where specific integer values (commonly 0 for failure and 1 for success) represent whether the trial was successful or not. In SQL queries, this column can be used to filter, count, or analyze the success rates of trials by checking against its values."
trial_logs,request,text,YES,,,,,,65535.0,,,"The `request` column in the `trial_logs` table stores textual data related to specific requests made during system trials or testing sessions. As it is of type text and nullable, SQL queries can include this column to filter, search, or analyze the nature and details of requests within trials. This column can be used in SELECT statements to retrieve the request details, in WHERE clauses to filter logs based on specific request content, or joined with other tables that provide additional context or outcomes of these requests."
trial_logs,response,text,YES,,,,,,65535.0,,,"The `response` column in the `trial_logs` table is used to store textual data that describes the outcomes or reactions during system trials or testing sessions. As a nullable text field, it can contain extensive details about the event or be left empty if no response is recorded. This column can be utilized in SQL queries to filter, analyze, or report on the qualitative aspects of each trial log, helping to understand specific outcomes or issues encountered during the testing phase."
trial_logs,exception,text,YES,,,,,,65535.0,,,"The ""exception"" column in the ""trial_logs"" table is used to store text descriptions of any errors or anomalies that occur during system trials or testing sessions. Since this column is of type text and can be nullable, it may contain detailed error messages or be left empty if no exceptions were recorded. When constructing SQL queries, this column can be used to filter or analyze logs where exceptions occurred, helping in debugging and enhancing system reliability."
trial_logs,created_at,datetime,NO,,,,,,,,,"The `created_at` column in the `trial_logs` table holds datetime values that indicate when each log or event was recorded during system trials or testing sessions. This column is not nullable, ensuring that a timestamp is always present for each entry. In SQL queries, the `created_at` column can be used to filter, sort, or group records based on the time they were created, facilitating time-based analysis and reporting of trial activities."
trial_logs,campaign_referral,varchar(255),YES,,,,,,255.0,,,"The `campaign_referral` column in the `trial_logs` table is used to store variable-length string data (up to 255 characters) that identifies the referral source of each trial or testing session. As a nullable column, it can contain null values, indicating cases where the referral source may not be applicable or known. This column can be used in SQL queries to filter, group, or analyze trial logs based on the referral sources, aiding in understanding the impact of different campaigns on system trials."
uncompletable_logs,packing_date,date,NO,,,,,,,,,"The `packing_date` column in the `uncompletable_logs` table holds the date data type and records the specific date when it was determined that a product could not be completed or fulfilled. This column is not nullable, indicating that a packing date must always be recorded for each entry in this table. In SQL queries, this column can be used to filter or analyze uncompletable products based on the date they were logged, helping in generating reports or identifying trends over time."
uncompletable_logs,logged_at,datetime,NO,,,,,,,,,"The `logged_at` column in the `uncompletable_logs` table is of data type `datetime` and it is not nullable, meaning every record must have a timestamp. This column is used to record the exact date and time when an instance of a product being uncompletable is logged into the system. In SQL queries, this column can be used to filter or sort the logs based on when they occurred, allowing for time-based analysis of uncompletable product instances."
uncompletable_logs,product_id,int,NO,MUL,,,products,product_id,,10.0,0.0,"The `product_id` column in the `uncompletable_logs` table is an integer field that serves as a foreign key linking to the `products` table, identifying specific products associated with instances of uncompletable or unfulfillable items. This column is crucial for SQL queries that need to analyze or report on product-related issues, ensuring that each log in `uncompletable_logs` can be directly correlated with a specific product. Since the column is marked as non-nullable (NO) and has a key type of MUL (indicating it can be involved in multiple relationships), it must always contain valid integers that reference existing entries in the `products` table."
uncompletable_logs,qty_needed,int,NO,,,,,,,10.0,0.0,"The `qty_needed` column in the `uncompletable_logs` table specifies the quantity of a product that was needed but could not be fulfilled, as recorded in each log entry. This integer column is not nullable, meaning every entry in the table must include a value for `qty_needed`. SQL queries involving this column can be used to analyze or report on the quantities of products that frequently face fulfillment issues, helping in inventory management and operational adjustments."
uncompletable_logs,qty_missing,int,NO,,,,,,,10.0,0.0,"The `qty_missing` column in the `uncompletable_logs` table is an integer that indicates the quantity of a specific product that could not be completed or fulfilled. This column is not nullable, meaning every record in the table must have a value for `qty_missing`. In SQL queries, this column can be used to calculate the total or average number of items missing, identify trends in unfulfillable orders, or assess the impact of these shortages on overall operations."
uncompletable_logs,resolved_at,datetime,YES,,,,,,,,,"The `resolved_at` column in the `uncompletable_logs` table is of data type `datetime` and can be nullable, indicating the date and time when an issue with an uncompletable product was resolved. This column can be used in SQL queries to filter or analyze logs based on the resolution time of the issues. For example, you can retrieve all logs where issues were resolved within a specific timeframe or check for unresolved issues by looking for NULL values in this column."
uncustomized_cancel_dates,date_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `date_id` column in the `uncustomized_cancel_dates` table is an integer-type primary key that uniquely identifies each record of a cancellation date for standard, non-personalized orders. This column is not nullable, meaning every record must have a unique `date_id` value. When constructing SQL queries, use the `date_id` to uniquely reference or join records within this table or across other tables that relate to these cancellation events."
uncustomized_cancel_dates,date,date,YES,,,,,,,,,"The `date` column in the `uncustomized_cancel_dates` table holds the cancellation dates of standard or non-personalized orders. As a nullable `date` type, it can contain null values, indicating instances where the cancellation date might not be recorded. In SQL queries, this column can be used to filter, sort, or perform date-specific aggregations to analyze cancellation trends or patterns for uncustomized orders."
user_agents,agent_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `agent_id` column in the `user_agents` table is an integer field that serves as the primary key for the table. This column uniquely identifies each record, ensuring that each user agent string stored in the table can be distinctly referenced. When writing SQL queries, use the `agent_id` to perform specific lookups, join operations with other tables that reference this primary key, or to ensure data integrity when inserting or updating records in the `user_agents` table."
user_agents,user_agent,varchar(600),YES,,,,,,600.0,,,"The `user_agent` column in the `user_agents` table is used to store the user agent string data from client requests, which identifies the browser and device used by a client. This varchar(600) column can accommodate lengthy user agent strings and is nullable, meaning it can accept NULL values if the user agent data is not provided. In SQL queries, this column can be used to filter, sort, or group records to analyze browser and device usage trends and compatibility issues."
user_billing,user_billing_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_billing_id` column in the `user_billing` table is an integer field that serves as the primary key for the table. This column uniquely identifies each record in the table, which contains comprehensive billing and payment information for users. When constructing SQL queries, use `user_billing_id` to specifically target, retrieve, or manipulate the billing details associated with a unique user account, ensuring that operations such as joins, updates, or deletions are accurately performed on the correct data set."
user_billing,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `user_billing` table is an integer data type that uniquely identifies users associated with billing and payment information. It is a crucial column for linking billing records to specific users in the database and cannot contain null values, ensuring that every record in the table is associated with a user. This column is typically used in SQL queries to join the `user_billing` table with other user-related tables in the database to retrieve comprehensive financial data for each user."
user_billing,first_name,varchar(255),NO,,,,,,255.0,,,"The `first_name` column in the `user_billing` table is a VARCHAR(255) field that stores the first name of the user associated with each billing record. This column is not nullable, indicating that every record in the table must include a first name. In SQL queries, this column can be used to filter or join data based on the user's first name, enhancing the ability to personalize and manage billing and payment information efficiently."
user_billing,last_name,varchar(255),NO,,,,,,255.0,,,"The `last_name` column in the `user_billing` table is used to store the surname of users as a string of up to 255 characters. Since this column is not nullable, every record in the table must include a last name, ensuring that all billing and payment information can be associated with a specific user. This column can be used in SQL queries to filter or join data based on the user's last name, which is useful for generating personalized billing reports or managing user-specific financial transactions."
user_billing,address,varchar(255),NO,,,,,,255.0,,,"The `address` column in the `user_billing` table is used to store the billing address associated with each user's account. It is a required field (`Nullable: NO`), ensuring that every record in the table must include a billing address. This column, being of type `varchar(255)`, can accommodate a variety of address formats up to 255 characters, which is useful in SQL queries for filtering, sorting, or joining data based on users' billing addresses."
user_billing,apt,varchar(50),NO,,,,,,50.0,,,"The `apt` column in the `user_billing` table holds the apartment number or identifier as a string, with a maximum length of 50 characters. This column is crucial for ensuring accurate billing addresses are stored for each user, as it is non-nullable, meaning every record in the table must include an apartment number. In SQL queries, this column can be used to filter or join data based on specific apartment details within a user's billing address."
user_billing,city_name,varchar(255),NO,,,,,,255.0,,,"The `city_name` column in the `user_billing` table is a VARCHAR(255) field that stores the name of the city associated with each user's billing address. Since this column is not nullable, every record in the table must include a city name, ensuring that billing addresses are always complete. This column can be used in SQL queries to filter or group financial data by city, which is useful for regional analysis or localized billing management."
user_billing,state_id,int,NO,,,,,,,10.0,0.0,"The `state_id` column in the `user_billing` table is an integer that represents the state associated with a user's billing address. This column is not nullable, indicating that every record in the `user_billing` table must have a state ID associated with it. In SQL queries, the `state_id` can be used to join the `user_billing` table with other tables that contain state information, filter records by state, or to ensure data integrity by checking that all billing records include valid state information."
user_billing,zip_code,varchar(50),NO,,,,,,50.0,,,"The `zip_code` column in the `user_billing` table is a varchar(50) field that stores the postal code associated with a user's billing address. This column is essential for organizing and filtering user billing information by geographic location, and it cannot contain null values, indicating that every record in the `user_billing` table must have a zip code specified. SQL queries can use this column to perform location-based searches, sort user billing data by regions, or join with other geographical data tables to enhance the analysis of user financial transactions."
user_billing,phone_home,varchar(255),NO,,,,,,255.0,,,"The `phone_home` column in the `user_billing` table is used to store the home phone number associated with a user's billing account. This column is of type `varchar(255)`, which means it can accommodate strings up to 255 characters, including numerical digits and potentially other characters such as dashes or spaces. Since the column is marked as non-nullable (`Nullable: NO`), every record in the `user_billing` table must include a home phone number, ensuring that there is always a phone contact available for billing inquiries or issues. This column can be used in SQL queries to filter, update, or join data based on the user's home phone number."
user_billing,phone_work,varchar(255),NO,,,,,,255.0,,,"The `phone_work` column in the `user_billing` table stores the work phone numbers of users as a string of up to 255 characters. Since this column is not nullable, every record in the table must include a work phone number. This column can be used in SQL queries to filter or retrieve users' work contact information, useful in contexts where communication or verification through a work phone is necessary."
user_billing,phone_cell,varchar(255),NO,,,,,,255.0,,,"The `phone_cell` column in the `user_billing` table stores the cell phone numbers of users as a string of up to 255 characters. Since this column is not nullable, every record in the table must include a cell phone number. This column can be used in SQL queries to contact users about their billing and payment information, verify user identity, or sort/filter users based on their contact details."
user_billing,updated,datetime,NO,,,,,,,,,"The `updated` column in the `user_billing` table records the date and time when any billing or payment information related to a user account was last modified. This column, which is of the `datetime` data type and cannot contain null values, ensures that each record's latest modification timestamp is maintained accurately. In SQL queries, the `updated` column can be used to track changes, filter records based on modification dates, or sort transactions and billing records by the most recent updates."
user_charitable_amount,user_charitable_amount_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `user_charitable_amount_id` in the `user_charitable_amount` table is an integer type primary key that uniquely identifies each record of charitable contributions made by users. This column is not nullable, ensuring that every record in the table has a unique identifier. When forming SQL queries, this column can be used to specifically target, retrieve, or manipulate data entries related to individual charitable transactions, and it can also be joined with the `user_id` from the users table to gather detailed user-specific donation histories."
user_charitable_amount,user_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The `user_id` column in the `user_charitable_amount` table is of type integer and can contain null values, indicating that not every record might be linked to a user. It functions as a foreign key that connects to the primary key in the `users` table, allowing SQL queries to join these tables to analyze or report on the charitable contributions made by specific users. This column supports multiple entries for the same user, reflecting their various contributions over time."
user_charitable_amount,iso_week,tinyint,NO,,,,,,,3.0,0.0,"The `iso_week` column in the `user_charitable_amount` table is of type `tinyint` and cannot be null. This column stores the ISO week number representing when a charitable contribution was made by a user. In SQL queries, this column can be used to aggregate or analyze donations based on weekly cycles, allowing for temporal patterns or trends in charitable giving to be identified and assessed."
user_charitable_amount,year,int,NO,,,,,,,10.0,0.0,"The `year` column in the `user_charitable_amount` table is of type integer and is not nullable, meaning it must always have a value. This column is used to store the year when a charitable contribution was made by a user. In SQL queries, this column can be used to filter or aggregate donation data by year, allowing for analysis of yearly donation trends or retrieval of contributions made in specific years."
user_charitable_amount,charity_available,float,YES,,,0,,,,12.0,,"The column `charity_available` in the `user_charitable_amount` table represents the amount of funds available for a user to donate to charity, stored as a floating-point number. This column can be nullable, meaning it might not have a value if no data is available for a user's charitable funds. In SQL queries, this column can be used to calculate or update the total available amount for charity per user, or to analyze the distribution of available charity funds across users."
user_charitable_amount,charity_used,float,YES,,,0,,,,12.0,,"The `charity_used` column in the `user_charitable_amount` table represents the monetary amount of charitable contributions made by users, recorded as a float. This column can be nullable, meaning that it can accept null values if no donation amount is recorded. In SQL queries, this column can be used to calculate total donations, average donations, or to track donation trends over time by joining with the `users` table using the `user_id` foreign key."
user_comments,comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `comment_id` column in the `user_comments` table serves as the primary key, uniquely identifying each record of user-submitted comments and feedback. This integer column is not nullable, ensuring that every comment stored in the database has a unique identifier. This column is essential for referencing specific comments in SQL queries, especially when joining the `user_comments` table with other related tables like `users` using foreign keys."
user_comments,parent_comment_id,int,YES,,,,,,,10.0,0.0,"The `parent_comment_id` column in the `user_comments` table is of type integer and can be nullable. This column is used to establish a hierarchical relationship between comments, indicating that a particular comment is a reply to another comment (the parent comment) within the same table. When constructing SQL queries, this column can be used to join the table to itself to retrieve threads of comments or to filter for comments that are responses to other comments."
user_comments,owner_name,varchar(50),NO,,,,,,50.0,,,"The `owner_name` column in the `user_comments` table holds the name of the user who submitted a comment, stored as a string up to 50 characters long. This column is essential for identifying and displaying the name of the comment's author in queries, ensuring that comments can be personally attributed to users. Since the column is not nullable, every record in the `user_comments` table must include the `owner_name`, guaranteeing that all comments have an associated user name for reference."
user_comments,owner_id,int,NO,,,,,,,10.0,0.0,"The `owner_id` column in the `user_comments` table is an integer type that identifies the user who authored each comment. It is a non-nullable field, meaning every comment must have an associated `owner_id`. This column can be used in SQL queries to join the `user_comments` table with the `users` table on `owner_id` to `user_id`, enabling retrieval of additional user information related to each comment."
user_comments,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `user_id` column in the `user_comments` table is an integer type field that links each comment to a specific user from the `users` table, ensuring that every comment can be attributed to its author. This column is not nullable, meaning every comment must have an associated `user_id`, and it is marked as a multiple key (`MUL`), indicating it is used as a foreign key. In SQL queries, this column is essential for joining the `user_comments` table with the `users` table to retrieve user-specific information alongside comments."
user_comments,comment_text,text,YES,,,,,,65535.0,,,"The `comment_text` column in the `user_comments` table is used to store the textual content of comments and feedback submitted by users. As a text data type, this column can contain a variable amount of text, and it is nullable, meaning it can accept NULL values if no comment text is provided. In SQL queries, this column can be used to select, insert, or update the content of user comments, and it can also be involved in search queries to find specific words or phrases within the comments."
user_comments,created_at,datetime,NO,,,,,,,,,"The `created_at` column in the `user_comments` table records the date and time when each comment or feedback was submitted by a user. This column, which uses the `datetime` data type and cannot be null, is essential for tracking the timing of user interactions on the platform. SQL queries can utilize this column to filter, sort, or group comments based on when they were created, enabling chronological analysis of user feedback."
user_comments,updated_at,datetime,NO,,,,,,,,,"The `updated_at` column in the `user_comments` table is of type `datetime` and cannot contain NULL values. This column records the date and time when a comment or feedback entry was last updated. In SQL queries, the `updated_at` column can be used to filter, sort, or perform time-based analyses on the comments, ensuring that users can track changes or updates to the feedback over time."
user_comments,status,int,NO,MUL,,0,,,,10.0,0.0,"The `status` column in the `user_comments` table is an integer (`int`) that indicates the current state of a user's comment or feedback. This column is not nullable, meaning every entry in the `user_comments` table must have a status value. The `status` column supports multiple key lookups (`MUL`), which suggests it may be used in joining this table with others or indexing for efficient query performance. It can be used in SQL queries to filter, sort, or join data based on the status of the comments."
user_comments,rating,int,NO,,,0,,,,10.0,0.0,"The `rating` column in the `user_comments` table is an integer type that stores user ratings associated with each comment or feedback submitted on the platform. This column is not nullable, meaning every comment must include a rating. It can be used in SQL queries to analyze the quality of feedback, calculate average ratings, or filter comments based on their ratings."
user_comments,processed,tinyint,NO,,,0,,,,3.0,0.0,"The `processed` column in the `user_comments` table is a `tinyint` data type and cannot be null. This column is used to indicate the status of a comment or feedback, typically representing whether it has been processed (1) or not processed (0). In SQL queries, this column can be used to filter, sort, or update records based on their processed status, ensuring that operations such as reviews or follow-ups are efficiently managed."
user_comments,cs_notified,int,NO,,,0,,,,10.0,0.0,"The `cs_notified` column in the `user_comments` table is an integer data type and cannot contain null values. This column is used to indicate whether customer service has been notified about a comment, with a typical value of 0 indicating no notification. In SQL queries, this column can be used to filter or update records based on whether customer service has addressed the feedback from users."
user_comments,processed_at,datetime,YES,,,,,,,,,"The `processed_at` column in the `user_comments` table records the datetime when a comment or feedback was processed or handled, which can vary from when it was initially submitted. This column is optional (`Nullable: YES`), indicating that not all comments may have been processed. In SQL queries, this column can be used to filter, sort, or perform date-based aggregations to analyze the processing times of user comments, such as calculating the average processing time or identifying comments that have not yet been processed."
user_comments,processed_by,int,YES,,,,,,,10.0,0.0,"The `processed_by` column in the `user_comments` table is an integer data type and can contain null values. This column likely references the ID of an employee or system process that has handled or moderated the comment. In SQL queries, you can use this column to filter, join, or analyze comments based on who or what processed them, enhancing the ability to track moderation activities or automated processing within the platform."
user_comments,pin,tinyint,NO,,,0,,,,3.0,0.0,"The `pin` column in the `user_comments` table is a `tinyint` data type and cannot contain null values. This column likely serves as a flag to mark certain comments for specific handling or prioritization, where a value of '0' might indicate a default state. In SQL queries, this column can be used to filter, sort, or apply conditional logic to comment records based on its value, enhancing the management or display of user feedback on the platform."
user_comms,user_comms_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_comms_id` column in the `user_comms` table is an integer-type primary key that uniquely identifies each record in the table. This column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, `user_comms_id` can be used to specifically target, join, or reference individual records regarding user communication preferences and contact history."
user_comms,user_id,int,YES,MUL,,,,,,10.0,0.0,"The `user_id` column in the `user_comms` table is an integer-type field that can optionally contain null values, indicating it might not always be mandatory for every record. This column is indexed (as indicated by the key type 'MUL'), which suggests it is used to establish relationships with other tables, potentially linking users to their communication preferences and histories. In SQL queries, `user_id` can be used to join the `user_comms` table with other user-related tables to fetch, update, or analyze user communication data efficiently."
user_comms,email,varchar(255),YES,,,,,,255.0,,,"The `email` column in the `user_comms` table holds the email addresses of users as a string of up to 255 characters. It is used to store and reference the user's email contact information, which can be used to send communications based on their preferences and opt-in statuses. Since the column is nullable, it allows for the possibility that an email address may not be provided for some users. In SQL queries, this column can be used to filter, join, or update records based on users' email addresses."
user_comms,phone,varchar(20),YES,MUL,,,,,20.0,,,"The `phone` column in the `user_comms` table, which has a data type of `varchar(20)` and allows null values, is used to store users' phone numbers. Being marked with a key type of `MUL` indicates that this column is indexed, likely for improving performance on queries involving phone numbers. This column can be used in SQL queries to filter, join, or manage data related to user communication preferences and contact history via phone."
user_comms,email_verified,tinyint(1),YES,,,1,,,,3.0,0.0,"The `email_verified` column in the `user_comms` table is a `tinyint(1)` data type that indicates whether a user's email address has been verified, where `1` typically represents 'verified' and `0` represents 'not verified'. This column can be used in SQL queries to filter or segment users based on the verification status of their email addresses. Since it is nullable, SQL queries should account for the possibility of null values, which might denote users whose verification status is unknown or not applicable."
user_comms,phone_verified,tinyint(1),YES,,,1,,,,3.0,0.0,"The `phone_verified` column in the `user_comms` table indicates whether a user's phone number has been verified, using a `tinyint(1)` data type where a value of `1` typically means verified, and `0` means not verified. This column can be used in SQL queries to filter or sort users based on the verification status of their phone numbers. Since it is nullable, SQL queries should account for potential NULL values which might indicate that the verification status is unknown or not applicable."
user_comms,main,tinyint(1),YES,,,0,,,,3.0,0.0,"The `main` column in the `user_comms` table is of type `tinyint(1)` and it is used to indicate a specific attribute of user communication preferences, most likely a boolean value (0 or 1) due to its data type and size. Since the column is nullable, the absence of a value (NULL) can be used to represent scenarios where the preference is undefined or not applicable. This column can be utilized in SQL queries to filter or classify users based on their primary communication preference or status, where '1' might represent an opted-in status and '0' an opted-out status."
user_comms,name,varchar(255),NO,,,,,,255.0,,,"The `name` column in the `user_comms` table is used to store the names of users as a string with a maximum length of 255 characters. Since this column is not nullable, every record in the `user_comms` table must include a user's name. This column can be used in SQL queries to filter or sort communication records based on the user's name, or to join with other tables that contain additional user information."
user_comms,lang,char(2),YES,,,fr,,,2.0,,,"The column `lang` in the `user_comms` table is used to store a two-character code representing the language preference of a user for communications. This column can be included in SQL queries to filter or update the language settings for user communications. The `lang` column can hold null values, indicating that the language preference might not be set for some users."
user_comms,signed_up_to_newsletter,tinyint(1),YES,,,1,,,,3.0,0.0,"The `signed_up_to_newsletter` column in the `user_comms` table is a `tinyint(1)` data type used to indicate whether a user has opted into receiving newsletters. It can store values of 0 or 1, where 1 means the user has opted in, and 0 means they have not. This column can be included in SQL queries to filter or count users based on their newsletter subscription status, and it is nullable, meaning it can also hold a NULL value if the subscription status is unknown or not applicable."
user_comms,sms_basket_notifications,tinyint(1),YES,,,0,,,,3.0,0.0,"The `sms_basket_notifications` column in the `user_comms` table is used to store information about whether a user has opted in to receive SMS notifications specifically for basket updates, such as promotions or reminders about their shopping basket. It is a `tinyint(1)` type, which typically represents a boolean value where `0` indicates 'no' (opt-out) and `1` indicates 'yes' (opt-in). This column can be included in SQL queries to filter users based on their preferences for receiving SMS basket notifications, or to update a user's preference."
user_comms,email_open_marketplace_notifications,tinyint(1),YES,,,0,,,,3.0,0.0,"The column `email_open_marketplace_notifications` in the `user_comms` table is used to store user preferences regarding receiving email notifications about marketplace activities. It is of type `tinyint(1)`, which typically represents a boolean value where `1` means the user has opted in to receive these notifications, and `0` indicates they have not. This column can be included in SQL queries to filter or update users' preferences for receiving marketplace-related emails."
user_comms,sms_open_marketplace_notifications,tinyint(1),YES,,,0,,,,3.0,0.0,"The `sms_open_marketplace_notifications` column in the `user_comms` table indicates whether a user has opted to receive open marketplace notifications via SMS, using a `tinyint(1)` data type where `1` represents opt-in and `0` represents opt-out. This column can be used in SQL queries to filter and manage the list of users based on their preferences for receiving SMS notifications about open marketplace activities. Since it is nullable, SQL queries should account for the possibility of NULL values, which might indicate that the user's preference is not set."
user_comms,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `user_comms` table is of the datetime data type and it can contain null values. This column typically records the timestamp when an entry related to a user's communication preferences or contact history was created. In SQL queries, this column can be used to filter or sort records based on when they were added to the database, allowing for analyses of changes over time or retrieval of recent communication records."
user_comms,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `user_comms` table, which is of the data type `datetime` and allows null values, records the date and time when a user's communication preferences or contact history was last modified. This column can be used in SQL queries to track changes, filter records based on modification dates, or sort users based on the most recent updates to their communication settings."
user_comms,in_use,tinyint(1),YES,,,1,,,,3.0,0.0,"The column `in_use` in the `user_comms` table is a `tinyint(1)` type that indicates whether a particular communication preference or channel is currently active (1) or inactive (0). It is nullable, meaning it can also hold a NULL value if the status is unknown or not applicable. This column can be used in SQL queries to filter and manage user communication settings, ensuring that interactions are directed through channels that are marked as active."
user_comms,email_customization_reminder,tinyint(1),YES,,,1,,,,3.0,0.0,"The `email_customization_reminder` column in the `user_comms` table is used to track whether a reminder has been sent to users regarding the customization of their email preferences. It is a `tinyint(1)` data type, which typically represents a boolean value where `1` indicates that a reminder has been sent, and `0` indicates no reminder has been sent. This column can be included in SQL queries to filter or update user records based on their reminder status for email customization."
user_comms,email_activation_reminder,tinyint(1),YES,,,1,,,,3.0,0.0,"The `email_activation_reminder` column in the `user_comms` table is used to track whether a reminder has been sent to users to activate their email as part of their communication preferences. This column is a tiny integer type (`tinyint(1)`) where a value of 1 typically indicates that a reminder has been sent, and a value of 0 indicates no reminder has been sent. Since the column is nullable, the absence of a value (NULL) could be used to represent an undefined or initial state before any action is taken. This column can be included in SQL queries to filter, update, or analyze the status of email activation reminders for users."
user_comms,sms_customization_reminder,tinyint(1),YES,,,0,,,,3.0,0.0,"The `sms_customization_reminder` column in the `user_comms` table is used to track whether a reminder for SMS customization has been sent to a user, represented as a boolean value (0 for no, 1 for yes). This column can be included in SQL queries to filter or update records based on whether the SMS customization reminder has been sent. Since it is nullable, SQL queries should account for potential null values which might indicate that the status of the reminder is unknown or not applicable."
user_comms,sms_activation_reminder,tinyint(1),YES,,,0,,,,3.0,0.0,"The `sms_activation_reminder` column in the `user_comms` table is a `tinyint(1)` data type, which typically represents a boolean value where `1` means true and `0` means false. This column can be used to track whether a reminder has been sent to users to activate SMS communication preferences. Since it is nullable, the absence of a value (NULL) could indicate that the status of the SMS activation reminder is unknown or not applicable. In SQL queries, this column can be used to filter, count, or update records based on whether an SMS activation reminder has been sent or not."
user_comms,sms_last_sent_date,datetime,YES,,,,,,,,,"The `sms_last_sent_date` column in the `user_comms` table records the date and time when the last SMS message was sent to a user. This column, which can contain null values if no SMS has been sent, is useful for tracking user engagement and for scheduling future communications. In SQL queries, this column can be used to filter users based on their recent interactions via SMS, or to identify users who have not received an SMS within a specific time frame."
user_comms,sms_last_sent_unsubscribe_date,datetime,YES,,,,,,,,,"The column `sms_last_sent_unsubscribe_date` in the `user_comms` table records the date and time when a user last opted out of receiving SMS communications. This datetime field, which can be null if the user has never unsubscribed via SMS, is useful for tracking user preferences and ensuring compliance with their communication choices. SQL queries utilizing this column can help in analyzing user engagement trends, managing re-subscription opportunities, and maintaining the integrity of SMS marketing campaigns."
user_comms,email_pup_delivery_complete,tinyint(1),YES,,,0,,,,3.0,0.0,"The column `email_pup_delivery_complete` in the `user_comms` table is used to track whether the delivery of an email communication to a user has been completed. Represented as a `tinyint(1)`, it likely uses the value `1` to indicate completion and `0` to indicate non-completion. This column can be included in SQL queries to filter or update records based on whether an email has successfully reached a user."
user_comms,email_pup_delivery_late,tinyint(1),YES,,,0,,,,3.0,0.0,"The `email_pup_delivery_late` column in the `user_comms` table is a tinyint(1) type, indicating it likely functions as a Boolean to represent whether an email communication was delivered late to a user. This column can be used in SQL queries to filter or analyze user records based on the timeliness of email delivery, where a value of 1 might signify a late delivery and 0 indicates on-time delivery. As it is nullable, SQL queries should account for the possibility of null values, which might represent records where delivery status is unknown or not applicable."
user_comms,sms_pup_delivery_complete,tinyint(1),YES,,,0,,,,3.0,0.0,"The column `sms_pup_delivery_complete` in the `user_comms` table is used to indicate whether a message delivery via SMS has been completed for a user, where a value of 1 represents completion and 0 represents non-completion. This column, being of type `tinyint(1)` and nullable, can be used in SQL queries to filter or update records based on the SMS delivery status. For example, it can help in querying users who have or have not received specific communications, aiding in the management of communication preferences and follow-ups."
user_comms,sms_pup_delivery_late,tinyint(1),YES,,,0,,,,3.0,0.0,"The column `sms_pup_delivery_late` in the `user_comms` table is a boolean-like field (represented as a tinyint(1), where 0 typically means false and 1 means true) that indicates whether there was a delay in the delivery of SMS messages as part of the user's communication preferences and contact history. This column can be used in SQL queries to filter or analyze user records based on the timeliness of SMS message delivery. Being nullable, it may not have data for all records, which should be considered when performing data analysis or reporting."
user_comms,sms_pup_delivery_incoming,tinyint(1),YES,,,0,,,,3.0,0.0,"The column `sms_pup_delivery_incoming` in the `user_comms` table is used to track whether incoming SMS messages are successfully delivered to users, represented as a tiny integer where `1` typically indicates success and `0` indicates failure. This column can be used in SQL queries to filter or analyze user records based on the receipt of SMS communications. Since it is nullable, SQL queries should account for the possibility of null values, which might represent undetermined delivery statuses."
user_comms,twilio_unsubscribe_date,datetime,YES,,,,,,,,,"The `twilio_unsubscribe_date` column in the `user_comms` table records the date and time when a user opts out of receiving communications via Twilio. It is of the `datetime` data type and can contain null values, indicating that a user has not unsubscribed. This column is useful in SQL queries for filtering users who have opted out after a specific date or for checking the status of a user's communication preferences."
user_comms,twilio_phone,varchar(20),YES,,,,,,20.0,,,"The `twilio_phone` column in the `user_comms` table is a varchar field that can store up to 20 characters and may contain phone numbers managed via Twilio, a cloud communications platform. This column is optional (nullable) and can be used in SQL queries to filter or update users' phone numbers for sending or tracking communications. It can be particularly useful for segmenting users based on their provided phone numbers or for ensuring communications are sent to valid, opted-in phone numbers."
user_coupons,user_coupon_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_coupon_id` column in the `user_coupons` table is an integer-based primary key that uniquely identifies each record of a coupon assigned to or claimed by a user. This column is non-nullable, ensuring that every record in the table has a unique identifier. In SQL queries, `user_coupon_id` can be used to specifically target, retrieve, or manipulate a single record, and it serves as a crucial element in joining this table with others in the database, such as a users table or a coupons master table, based on relational keys."
user_coupons,coupon_id,int,NO,MUL,,,,,,10.0,0.0,"The `coupon_id` column in the `user_coupons` table is an integer that uniquely identifies each coupon and is used to link to a master coupons table. This column is not nullable, meaning every record in the `user_coupons` table must have a `coupon_id` value, ensuring that all entries are associated with a specific coupon. As a multi-key (MUL), `coupon_id` can be used in join operations to connect related data across different tables, particularly useful for fetching detailed information about each coupon from the coupons master table."
user_coupons,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `user_coupons` table is an integer type that identifies and links a user to a specific coupon code. This column is non-nullable, indicating that every record in the table must have a `user_id` value, ensuring that each coupon code is associated with a user. It is typically used in SQL queries to join the `user_coupons` table with the `users` table to retrieve user-specific information related to coupon usage and management."
user_coupons,created,date,NO,,,,,,,,,"The `created` column in the `user_coupons` table records the date when a coupon code was assigned to or claimed by a user. This column is of the data type `date` and cannot contain null values, ensuring that every record in the table has a date associated with the assignment or claim of a coupon. In SQL queries, this column can be used to filter or sort records based on when coupons were distributed to users, which is essential for analyzing the timing and effectiveness of coupon usage."
user_coupons,staff_id,int,NO,,,,,,,10.0,0.0,"The `staff_id` column in the `user_coupons` table is an integer data type that cannot be null, indicating it is essential for every record. This column likely serves to link each coupon assignment or claim to a specific staff member who facilitated or managed the transaction. In SQL queries, `staff_id` can be used to join the `user_coupons` table with a staff-related table to retrieve or analyze information regarding the staff members who are interacting with or managing coupon distributions."
user_coupons_pending,user_coupons_pending_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `user_coupons_pending_id` in the `user_coupons_pending` table is an integer-based primary key that uniquely identifies each record of pending coupon assignments. It is not nullable, ensuring that every record has a unique identifier. This column is crucial for uniquely referencing specific pending coupon assignments in SQL queries, especially when joining with other tables like `coupons` and `users` to fetch detailed information about the coupons and the associated users."
user_coupons_pending,referrer_user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `referrer_user_id` column in the `user_coupons_pending` table is an integer that identifies the user who referred a new user to the platform. It is a non-nullable field, meaning every record in this table must have a `referrer_user_id` value. This column is indexed (denoted by Key Type: MUL), which facilitates efficient querying and joining with the `users` table to retrieve details about the referrer. In SQL queries, this column can be used to filter or join data based on the user who initiated the referral."
user_coupons_pending,new_user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `new_user_id` column in the `user_coupons_pending` table is an integer that uniquely identifies new users who have been assigned but have not yet claimed a referral coupon. This column is non-nullable, indicating every record in this table must have a `new_user_id` associated with it. As a foreign key (indicated by the key type 'MUL'), it is used to link each entry in `user_coupons_pending` to a corresponding user in the `users` table, ensuring that the coupon assignment can be traced to the correct new user. This column can be used in SQL queries to join the `user_coupons_pending` table with the `users` table to retrieve detailed information about the new users and manage"
user_coupons_pending,coupon_id,int,NO,MUL,,,coupons,coupon_id,,10.0,0.0,"The `coupon_id` column in the `user_coupons_pending` table is an integer that links to the `coupons` table, serving as a foreign key. This column is crucial for SQL queries that need to fetch or manipulate data concerning specific coupon rewards pending between users. Since it is not nullable and marked with a key type of MUL (indicating it's part of a non-unique index), it ensures that every record in `user_coupons_pending` must have a valid `coupon_id` that corresponds to an existing coupon in the `coupons` table, facilitating joins and data integrity checks."
user_coupons_pending,amount,float,NO,,,,,,,12.0,,"The `amount` column in the `user_coupons_pending` table specifies the monetary value of a coupon that is yet to be claimed by a new user, as part of a referral reward system. This column is of type float and cannot contain null values, indicating that every record must have a coupon amount specified. In SQL queries, this column can be used to calculate the total value of pending coupons, determine the average value of coupons per referral, or filter records based on the coupon amount."
user_coupons_pending,timestamp,timestamp,NO,,DEFAULT_GENERATED on update CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,,,,,,"The `timestamp` column in the `user_coupons_pending` table records the exact date and time when a coupon assignment was created between a referring user and a new user. This column is of the `timestamp` data type, automatically captures the current timestamp when a new record is inserted (due to the `CURRENT_TIMESTAMP` default setting), and cannot be null. This ensures that every coupon assignment is accurately timestamped, which is useful for tracking when referrals occur and for any time-sensitive processing or reporting of these events in SQL queries."
user_coupons_pending,status,tinyint,NO,,,1,,,,3.0,0.0,"The `status` column in the `user_coupons_pending` table is a `tinyint` data type and cannot contain null values. It is used to represent the current state of a pending coupon assignment, where different integers might indicate statuses such as active, claimed, or expired. This column is crucial for managing and querying the progress and condition of coupon assignments within SQL queries, helping to distinguish between various stages of coupon redemption processes between users."
user_coupons_pending,redeemed_on,datetime,YES,,,,,,,,,"The column `redeemed_on` in the `user_coupons_pending` table is of data type `datetime` and can contain null values, indicating that it is optional. This column is used to store the date and time when a new user redeems a coupon that was assigned to them through a referral. In SQL queries, this column can be used to check whether a coupon has been redeemed by looking for non-null values, and to filter or sort coupons based on the redemption date and time."
user_home_deliveries,user_home_delivery_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_home_delivery_id` column in the `user_home_deliveries` table is an integer column that serves as the primary key, meaning it uniquely identifies each record in the table. This column is not nullable, indicating that every record must have a unique `user_home_delivery_id`. In SQL queries, this column is crucial for operations that require the identification of specific delivery details, such as updating, deleting, or retrieving user-specific delivery information."
user_home_deliveries,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `user_home_deliveries` table is an integer field that uniquely identifies users who have home delivery preferences and details recorded. This column is essential for linking user-specific delivery information to their respective profiles in related tables, ensuring that SQL queries can accurately retrieve or update delivery details for each user. Since it is non-nullable, every record in the `user_home_deliveries` table must have a valid `user_id` value, indicating that every entry corresponds to a specific user."
user_home_deliveries,order_id,int,NO,MUL,,,,,,10.0,0.0,"The `order_id` column in the `user_home_deliveries` table is an integer that uniquely identifies each home delivery order. This column is crucial for linking delivery details to specific orders in SQL queries, ensuring data integrity and enabling detailed analysis of delivery operations. Since it is marked as `MUL`, it suggests that `order_id` may be used as a foreign key or is indexed, facilitating efficient joins and searches within the database."
user_home_deliveries,address,varchar(500),NO,MUL,,,,,500.0,,,"The `address` column in the `user_home_deliveries` table is used to store the physical delivery address for each user as a string up to 500 characters long. This column is essential for identifying where to send deliveries and cannot contain null values, ensuring every record has a delivery address. In SQL queries, this column can be used to filter, join, or match delivery addresses with user details or regional delivery areas by joining with the `ww_territories` table through the `territory_id`."
user_home_deliveries,apt,varchar(50),NO,,,,,,50.0,,,"The `apt` column in the `user_home_deliveries` table stores the apartment number or identifier as a string (up to 50 characters) where the user resides. This column is essential for specifying the exact delivery location within a building complex and cannot contain null values, ensuring that every record has a specified apartment detail. Use this column in SQL queries when you need to filter or retrieve delivery information based on specific apartment units within the user-defined territories."
user_home_deliveries,zip_code,varchar(50),NO,,,,,,50.0,,,"The `zip_code` column in the `user_home_deliveries` table is used to store the postal code as a variable character string with a maximum length of 50 characters. This column is critical for identifying the specific location of a user's home delivery within a territory. Since the column is marked as non-nullable, every record in the `user_home_deliveries` table must include a zip code, ensuring that each delivery can be accurately mapped to a geographical area for logistical and service planning in SQL queries."
user_home_deliveries,city_name,varchar(50),NO,,,,,,50.0,,,"The `city_name` column in the `user_home_deliveries` table is used to store the name of the city where each user's delivery address is located. This column is a VARCHAR type with a maximum length of 50 characters and does not allow NULL values, ensuring that every record in the table must have a city name specified. In SQL queries, this column can be used to filter or group delivery records by city, facilitating regional analysis or operational logistics planning."
user_home_deliveries,state_id,int,NO,,,,,,,10.0,0.0,"The `state_id` column in the `user_home_deliveries` table is an integer field that is crucial for categorizing and managing the delivery regions at a more granular level than territories. It is used to link user delivery preferences and details to specific states within a territory, ensuring that delivery services are appropriately aligned with regional regulations and logistics. Since it is not nullable, every record in the `user_home_deliveries` table must have a `state_id` associated with it, indicating that all delivery details must be mapped to a specific state. This column can be used in SQL queries to filter, join, or aggregate delivery data by state."
user_home_deliveries,created,datetime,YES,,,,,,,,,"The column `created` in the `user_home_deliveries` table is of data type `datetime` and can contain null values. It records the date and time when an entry regarding a user's home delivery preference or detail was created. This column can be used in SQL queries to filter or sort records based on when they were added to the database, which is useful for analyzing delivery trends or auditing delivery records over time."
user_home_deliveries,comment,varchar(500),YES,,,,,,500.0,,,"The ""comment"" column in the ""user_home_deliveries"" table is used to store additional textual remarks or instructions related to the home delivery preferences of a user, with a maximum length of 500 characters. This column can contain NULL values, indicating that a comment is optional. In SQL queries, this column can be used to retrieve, update, or analyze user-specific notes or instructions that may assist in the delivery process."
user_home_deliveries,leave_basket,tinyint,NO,,,0,,,,3.0,0.0,"The `leave_basket` column in the `user_home_deliveries` table is used to indicate whether a delivery basket should be left at the user's address without requiring a signature or direct handoff. This column is of type `tinyint` and cannot contain null values, typically representing a boolean where `0` means 'do not leave' and `1` means 'leave'. In SQL queries, this column can be used to filter or update delivery preferences, ensuring that delivery instructions are tailored to user preferences within their respective territories."
user_home_deliveries,latitude,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The `latitude` column in the `user_home_deliveries` table stores the latitude coordinates as a decimal value with up to 10 total digits and 8 decimal places, indicating the precise north-south position of a user's home delivery location. This column can be used in SQL queries to calculate distances between delivery points, to filter deliveries within certain latitudinal bounds, or to join with geographic or mapping data that requires latitude information. Being nullable, it's important to handle cases where the latitude might not be provided."
user_home_deliveries,longitude,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The `longitude` column in the `user_home_deliveries` table stores the longitudinal coordinate, as a decimal value, of a user's home delivery location. This information can be used in SQL queries to calculate distances between delivery points or to integrate with mapping services for route optimization. Since it is nullable, ensure to handle cases where longitude might not be provided in your SQL logic."
user_home_deliveries,territory_id,int,NO,MUL,,1,ww_territories,id,,10.0,0.0,"The `territory_id` column in the `user_home_deliveries` table is an integer that serves as a foreign key linking to the `ww_territories` table. This column is crucial for SQL queries that need to identify or join delivery details with specific territorial data, ensuring that user deliveries are correctly associated with their respective service areas. As a non-nullable field with a key type of MUL, it supports multiple entries for each territory, enabling complex queries across different regions."
user_interaction_histories,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `id` column in the `user_interaction_histories` table is an integer type field that serves as the primary key for the table. This column uniquely identifies each record of user interactions and activities within the system, ensuring that each entry is distinct and can be referenced individually. The column is not nullable, meaning every record must have a unique `id` value, which is crucial for maintaining the integrity of the data when performing SQL queries to analyze user behavior."
user_interaction_histories,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `user_interaction_histories` table is an integer field that uniquely identifies users within the system. This column is non-nullable, indicating that every interaction record must be associated with a user. It can be used in SQL queries to filter or join data based on specific users, facilitating the analysis of user activities and behaviors recorded in the table."
user_interaction_histories,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `user_interaction_histories` table is of data type `datetime` and can contain null values. This column is used to record the date and time when each user interaction or activity was logged in the system. In SQL queries, this column is essential for filtering and sorting records based on the time of user activities, enabling temporal analysis of user behavior within the system."
user_interaction_histories,google_count,int,YES,,,0,,,,10.0,0.0,"The `google_count` column in the `user_interaction_histories` table is an integer field that can store null values. This column likely represents the count of interactions or activities related to Google, such as logins or usage of Google services, recorded for each user. In SQL queries, this column can be used to analyze or aggregate the frequency of Google-related activities by users, which can be critical for understanding user engagement levels or auditing user behavior within the system."
user_interaction_histories,google_visited,tinyint,YES,,,0,,,,3.0,0.0,"The `google_visited` column in the `user_interaction_histories` table is a `tinyint` data type and can hold values indicating whether a user has visited Google during an interaction (typically `1` for yes and `0` for no). This column is nullable, meaning it can also contain NULL values if the information is not available. In SQL queries, this column can be used to filter or analyze user interactions based on whether they included a visit to Google, which can be useful in understanding user behavior patterns or in audit trails where specific actions like visiting external sites are tracked."
user_interaction_histories,google_do_not_prompt,tinyint,YES,,,0,,,,3.0,0.0,"The `google_do_not_prompt` column in the `user_interaction_histories` table is a `tinyint` type that indicates whether to avoid prompting users for specific Google-related interactions. This column can be used in SQL queries to filter or modify user interaction records based on their preference for Google prompts, where a value of 0 typically indicates no restriction (i.e., users can be prompted). Since it is nullable, the absence of a value (NULL) might imply that the user's preference is undefined or not set."
user_interaction_histories,google_last_interaction,datetime,YES,,,,,,,,,"The `google_last_interaction` column in the `user_interaction_histories` table is of the datetime data type and can contain null values. This column is used to record the timestamp of the last interaction that a user had with Google-related services or features within the system. In SQL queries, this column can be used to filter or sort records based on the date and time of the users' last Google interaction, which is useful for analyzing user engagement patterns or auditing user activities."
user_ips,user_ip_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_ip_id` column in the `user_ips` table serves as a primary key with an integer data type and cannot contain null values. This column uniquely identifies each record of IP addresses linked to user activities or access logs. In SQL queries, `user_ip_id` can be used to specifically target, retrieve, or manipulate individual records efficiently, ensuring accurate and reliable operations on data related to user IP tracking and security monitoring."
user_ips,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `user_ips` table is an integer data type and is not nullable, meaning it must always have a value. This column is used to link each IP address entry to a specific user, typically by referencing a user's unique identifier from another related table (such as a `users` table). In SQL queries, `user_id` can be used to join the `user_ips` table with other user-related tables to analyze user activity and access patterns based on IP addresses."
user_ips,user_ip,varchar(17),NO,,,,,,17.0,,,"The `user_ip` column in the `user_ips` table is a VARCHAR(17) field that stores IP addresses related to user activities or access logs. This column is non-nullable, ensuring that every record in the table must have an IP address associated with it. In SQL queries, the `user_ip` column can be used to filter or analyze data based on specific IP addresses, aiding in the monitoring of user locations and identifying potentially suspicious access patterns."
user_ips,first_time,datetime,NO,,,,,,,,,"The `first_time` column in the `user_ips` table is of the `datetime` data type and cannot contain null values. This column is used to record the timestamp of the first occurrence when a user's IP address was logged, which is crucial for analyzing the initial access time in user activity or security investigations. In SQL queries, this column can be used to filter, sort, or group records based on the initial access time to understand user behavior patterns or identify potential security breaches."
user_ips,last_time,datetime,NO,,,,,,,,,"The `last_time` column in the `user_ips` table is of the `datetime` data type and is designed to store the timestamp of the most recent activity or access event associated with a specific IP address. This column is not nullable, indicating that a timestamp must always be recorded for each entry. In SQL queries, this column can be used to filter, sort, or analyze user activity based on the time of access, which can be crucial for identifying trends, monitoring user behavior, or detecting potential security threats."
user_metrics,user_metrics_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_metrics_id` column in the `user_metrics` table is an integer-type primary key that uniquely identifies each record of user performance and activity metrics. This column is not nullable, ensuring that every record in the table has a unique identifier. In SQL queries, use `user_metrics_id` to specifically select, update, or reference individual records in the `user_metrics` table efficiently."
user_metrics,user_id,int,NO,MUL,,,,,,10.0,0.0,"The `user_id` column in the `user_metrics` table is an integer data type column that uniquely identifies users within the system. It is a non-nullable column, meaning every record in the table must have a valid `user_id` value, and it is marked with a key type of MUL, indicating that it may be involved in indexing and can be used to join with other tables that also contain a `user_id` column. This column is essential for SQL queries that aim to retrieve or analyze user-specific performance metrics and activity data, allowing for targeted data operations based on individual user identifiers."
user_metrics,last_updated_date,datetime,NO,,,,,,,,,"The column `last_updated_date` in the `user_metrics` table is of type `datetime` and cannot contain null values. This column records the date and time when the user's metrics were last updated. In SQL queries, this column can be used to filter or sort records based on the most recent updates to user performance and activity metrics, ensuring that the data retrieved reflects the latest changes and trends in user behavior."
user_metrics,total_amount_spent,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The `total_amount_spent` column in the `user_metrics` table represents the total monetary amount that users have spent, stored as a decimal value with two places after the decimal point, ensuring precision up to cents. This column is essential for SQL queries that aim to analyze or report on the financial activity and contribution of users within the system. Since it is not nullable, every record in the `user_metrics` table will have a definitive value for `total_amount_spent`, ensuring complete data for financial calculations and comparisons."
user_metrics,first_shipped_order_date,date,YES,,,,,,,,,"The column `first_shipped_order_date` in the `user_metrics` table records the date of the first order shipped for each user, indicating when a user first successfully completed a transaction. This date column, which can contain null values if a user has not yet had an order shipped, is useful in SQL queries for analyzing user activation times, determining the duration between account creation and first shipment, and segmenting users based on their initial activity date. You can use this column to track user engagement and to calculate metrics such as time to first order across different cohorts of users."
user_metrics,last_shipped_order_date,date,YES,,,,,,,,,"The `last_shipped_order_date` column in the `user_metrics` table records the date of the most recent order shipped for each user. This column, which is of the data type `date` and can contain null values, is useful for tracking the latest shipping activity of a user. In SQL queries, this column can be used to analyze or report on user engagement by determining periods of activity or inactivity, and to segment users based on their recent interactions with shipping services."
user_metrics,nb_shipped_orders,int,NO,,,0,,,,10.0,0.0,"The column `nb_shipped_orders` in the `user_metrics` table is an integer type that records the total number of orders shipped by each user. This column cannot contain null values, ensuring that every user has a recorded count, which might be zero as indicated by the extra info. Use this column in SQL queries to analyze or report on user activity related to order fulfillment, such as calculating the average number of orders shipped per user or identifying top performers in order shipping."
user_metrics,nb_order_created,int,NO,,,0,,,,10.0,0.0,"The `nb_order_created` column in the `user_metrics` table is an integer type column that records the number of orders each user has created. Since it is not nullable, every record in the table must have a value for this column, indicating that every user has an associated order count (which could be zero). This column is useful for SQL queries that aim to analyze or report on user engagement by quantifying how actively users are creating orders in the system."
user_metrics,nb_cancelled_orders,int,NO,,,0,,,,10.0,0.0,"The column `nb_cancelled_orders` in the `user_metrics` table represents the number of orders cancelled by each user and is an integer data type. Since it is not nullable, every record must have a value, ensuring that there is always a count of cancelled orders available for queries. This column can be used in SQL queries to analyze or report on user engagement by assessing the frequency of order cancellations, which could indicate user satisfaction or system issues."
user_metrics,nb_declined_orders,int,NO,,,0,,,,10.0,0.0,"The column `nb_declined_orders` in the `user_metrics` table is used to store the number of orders declined by each user, represented as an integer (`int`). This column is not nullable, meaning every record in the table must have a value for this field, defaulting to 0 if no orders have been declined. In SQL queries, this column can be used to analyze or report on user engagement by assessing how frequently users decline orders, which can help in understanding user behavior and potentially improving the system's order management or user interface."
user_metrics,nb_customized_orders,int,NO,,,0,,,,10.0,0.0,"The column `nb_customized_orders` in the `user_metrics` table is an integer type that records the number of customized orders made by each user. It is a non-nullable field, meaning every record in the table must have a value for this column. This column can be used in SQL queries to analyze or report on the level of user customization in orders, which is crucial for understanding user engagement and preferences within the system."
user_metrics,last_contact_with_cs,date,YES,,,,,,,,,"The column `last_contact_with_cs` in the `user_metrics` table records the date of the most recent interaction a user had with customer service. This column, which is of the data type `date` and can accept NULL values, can be used in SQL queries to analyze or report on the frequency and recency of user interactions with customer service, helping to assess user engagement and support effectiveness. Queries might typically involve filtering, sorting, or calculating time intervals since the last contact to identify users needing follow-up or evaluating customer service performance."
user_notes,user_notes_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_notes_id` column in the `user_notes` table is an integer column that serves as the primary key for the table. This column uniquely identifies each note or memo created by users in the system. Since it is not nullable and is the primary key, every record in the `user_notes` table must have a unique `user_notes_id`. This column is essential for performing SQL operations that require the identification of specific notes, such as retrieving, updating, or deleting entries based on the note's unique ID."
user_notes,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `user_notes` table is an integer data type and is not nullable, indicating that every record in the table must have a `user_id` value associated with it. This column is used to identify the user who created each note or memo, serving as a user-specific identifier. In SQL queries, the `user_id` can be used to filter or sort notes based on the user, or to join with other tables that contain user information, assuming those tables have a corresponding user identifier column."
user_notes,customer_id,int,NO,,,,,,,10.0,0.0,"The `customer_id` column in the `user_notes` table is an integer data type and is not nullable, indicating that every note must be associated with a specific customer identified by this column. This column is essential for linking notes to individual users within the system. In SQL queries, `customer_id` can be used to filter, sort, or join notes based on the user, ensuring that operations such as retrieving, updating, or analyzing notes are user-specific."
user_notes,note_msg,text,NO,,,,,,65535.0,,,"The `note_msg` column in the `user_notes` table contains the text content of personal notes or memos created by users. As a non-nullable `text` type column, it must always contain data when a record is inserted into the table. In SQL queries, this column can be used to retrieve, search, or manipulate the textual content of notes, such as filtering notes containing specific keywords, updating content, or displaying all notes created by a particular user if combined with a user identifier in the same table."
user_notes,created,datetime,NO,,,,,,,,,"The `created` column in the `user_notes` table is of data type `datetime` and is used to record the exact date and time when a user's note or memo was created. This column cannot contain null values, ensuring that every note stored in the table has a timestamp associated with its creation. In SQL queries, this column can be used to filter or sort notes based on when they were created, facilitating time-based retrievals and analyses."
user_notification_message_queue,user_notification_message_queue_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `user_notification_message_queue_id` in the `user_notification_message_queue` table serves as the primary key, uniquely identifying each record in the table. This integer column is non-nullable, ensuring that every record has a unique identifier. In SQL queries, this column is used to uniquely select, update, or delete records associated with specific notification messages in the queue destined for delivery to users."
user_notification_message_queue,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `user_id` column in the `user_notification_message_queue` table is an integer field that uniquely identifies users who are to receive notifications. This column is non-nullable, meaning every record in the table must have a `user_id` value, ensuring that each notification message in the queue is linked to a specific user. As a column with a key type of MUL, `user_id` may be involved in indexing and can join with other tables that contain a corresponding `user_id`, facilitating efficient retrieval and management of notification messages for users."
user_notification_message_queue,notification_messages_id,int,NO,MUL,,,notification_messages,notification_messages_id,,10.0,0.0,"The `notification_messages_id` column in the `user_notification_message_queue` table is an integer type field that serves as a foreign key linking to the `notification_messages` table. This column is crucial for identifying which notification message needs to be delivered to users. It is non-nullable, ensuring that every record in the `user_notification_message_queue` must be associated with a specific notification message, and its key type, MUL, indicates that it can be involved in non-unique indexing, facilitating efficient joins and lookups between tables."
user_notification_message_queue,session_clicks,tinyint,NO,,,0,,,,3.0,0.0,"The `session_clicks` column in the `user_notification_message_queue` table is of type `tinyint` and cannot have null values. This column likely tracks the number of times a notification message has been clicked by users in a session. In SQL queries, this column can be used to analyze user engagement with notifications, such as filtering or counting messages based on the number of clicks they received, to improve or adjust the notification delivery strategy."
user_notification_message_queue,link_clicks,tinyint,NO,,,0,,,,3.0,0.0,"The `link_clicks` column in the `user_notification_message_queue` table is a tinyint data type and cannot be null, holding a default value of 0. This column is used to track the number of times a link within a notification message has been clicked by the user. It is crucial for analyzing user engagement with the notifications sent, and can be used in SQL queries to filter, count, or update the engagement metrics for specific notifications or users."
user_payments,user_payments_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_payments_id` column in the `user_payments` table serves as the primary key, meaning it uniquely identifies each record in the table. This integer column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, this column is crucial for operations like joining the `user_payments` table with other related tables, ensuring referential integrity, and efficiently retrieving or manipulating specific payment records based on their unique ID."
user_payments,user_id,int,YES,MUL,,,,,,10.0,0.0,"The `user_id` column in the `user_payments` table is an integer data type that can be used to link payment transactions to specific users in the system. It is marked as nullable, meaning that some records can exist without a `user_id` if the transaction is not associated with a user account. As a key with the type 'MUL', this column is indexed and can be involved in joining this table with other tables that contain a `user_id` column to retrieve comprehensive user-related financial information."
user_payments,payment_gateway,tinyint,YES,,,0,,,,3.0,0.0,"The `payment_gateway` column in the `user_payments` table is used to represent different payment gateways through which transactions are processed, using a `tinyint` data type. This column can contain null values, indicating that for some records, the payment gateway might not be specified. In SQL queries, this column can be used to filter or analyze transactions based on the payment gateway used, such as grouping transactions by gateway or excluding transactions from specific gateways."
user_payments,card_last4digits,varchar(10),YES,,,,,,10.0,,,"The `card_last4digits` column in the `user_payments` table stores the last four digits of the credit or debit card used in a payment transaction. This varchar(10) field can be used in SQL queries to identify or verify the card involved in a transaction without revealing the full card number, ensuring partial privacy and security. Given its nature, it can be included in queries that analyze payment patterns, detect fraud, or summarize transactions by payment method."
user_payments,card_type,varchar(255),YES,,,,,,255.0,,,"The `card_type` column in the `user_payments` table is used to store the type of card used in a payment transaction, such as Visa, MasterCard, or American Express. As a `varchar(255)` field, it can accommodate various card issuer names up to 255 characters. This column is nullable, indicating that it's optional to specify the card type for some transactions. In SQL queries, this column can be used to filter or analyze payment transactions by card type."
user_payments,exp_month,varchar(2),YES,,,,,,2.0,,,"The `exp_month` column in the `user_payments` table is used to store the expiration month of the payment method associated with a transaction. It is formatted as a two-character varchar, which can include leading zeros (e.g., '01' for January). Since the column is nullable, some records might not have this information. This column can be used in SQL queries to filter or analyze transactions based on when the payment method is set to expire."
user_payments,exp_year,varchar(4),YES,,,,,,4.0,,,"The column `exp_year` in the `user_payments` table represents the expiration year of a payment method associated with a user account and is stored as a four-character string. Since this column is nullable, it can contain null values, indicating that the expiration year might not be provided for some records. In SQL queries, this column can be used to filter, sort, or join data based on the expiration year of the payment methods."
user_payments,payment_token,varchar(200),YES,,,,,,200.0,,,"The `payment_token` column in the `user_payments` table is a variable character string field that can store up to 200 characters and may contain unique tokens associated with each payment transaction. This column is optional, as indicated by its nullable attribute, meaning not every record needs to have a payment token. In SQL queries, `payment_token` can be used to uniquely identify or verify transactions, or to join with other tables that track additional details related to these tokens in user transactions."
user_payments,payment_profile_id,varchar(200),YES,MUL,,0,,,200.0,,,"The `payment_profile_id` column in the `user_payments` table is used to store identifiers for payment profiles, which likely link to specific details about payment methods used by users. This column, having a data type of `varchar(200)`, can accommodate a variety of identifier formats up to 200 characters long. Since it is marked as nullable, it is optional for some records to have a payment profile ID. The `MUL` key type indicates that this column is indexed, possibly as a non-unique index, facilitating efficient querying and joining operations related to users' payment profiles."
user_payments,card_priority,int,YES,,,,,,,10.0,0.0,"The `card_priority` column in the `user_payments` table is an integer data type that can be used to indicate the priority or preference of payment methods associated with user accounts. Since it is nullable, not all records are required to have a value in this column. In SQL queries, this column can be utilized to sort or filter payment transactions based on the priority assigned to the payment methods, which can be helpful in analyzing preferred payment methods or processing transactions based on their priority."
user_payments,created_at,datetime,YES,,,,,,,,,"The `created_at` column in the `user_payments` table records the datetime when each payment transaction was initiated or recorded. This column, being of the datetime data type and nullable, can be used in SQL queries to filter or sort transactions based on the time they were created. For instance, it can help in generating reports that show all transactions within a specific time frame or analyzing transaction trends over time."
user_payments,updated_at,datetime,YES,,,,,,,,,"The `updated_at` column in the `user_payments` table records the date and time when a payment transaction record was last updated. This datetime column can be used in SQL queries to track changes or updates to payment transactions over time. Since it is nullable, there may be records where the update time is not specified."
user_payments,in_use,tinyint,YES,,,1,,,,3.0,0.0,"The `in_use` column in the `user_payments` table is a `tinyint` data type that indicates whether a payment method is currently active or inactive. Since the column is nullable, it can also contain NULL values, which might represent undefined states. In SQL queries, this column can be used to filter or update records based on whether a payment method is actively in use (where `in_use = 1`) or not in use (where `in_use = 0`)."
user_payments,cardholder_name,varchar(255),YES,,,,,,255.0,,,"The `cardholder_name` column in the `user_payments` table is used to store the name of the cardholder associated with each payment transaction. This column is a variable character string with a maximum length of 255 characters and can contain null values, indicating that the cardholder's name might not be mandatory for all records. In SQL queries, this column can be used to filter or join transactions based on the cardholder's name, or to verify and display payment details linked to specific users."
user_payments,cardholder_zip,varchar(10),YES,,,,,,10.0,,,"The column `cardholder_zip` in the `user_payments` table is used to store the ZIP code of the cardholder associated with each payment transaction. This varchar(10) field can accommodate ZIP codes that may include hyphens or additional characters for international formats and is optional (nullable) in records. It can be used in SQL queries to filter or analyze transactions based on geographical locations of the cardholders, such as grouping transactions by regions or verifying billing address information during fraud analysis."
user_payments,avs_response,varchar(10),YES,,,,,,10.0,,,"The `avs_response` column in the `user_payments` table stores the Address Verification Service (AVS) response codes as a varchar data type with a maximum length of 10 characters. This column is used to record the outcome of the AVS check performed during the payment process, which helps in assessing the validity of the address details provided by a user associated with a credit or debit card transaction. Since the column is nullable, it can contain null values, indicating transactions where no AVS check was performed or the AVS response was not applicable or received. In SQL queries, this column can be used to filter or analyze transactions based on the AVS response to assess risk or verify address information accuracy."
user_payments,cvv_response,varchar(10),YES,,,,,,10.0,,,"The `cvv_response` column in the `user_payments` table is used to store the response codes related to the Card Verification Value (CVV) used in payment transactions. As a `varchar(10)` field, it can hold various types of response codes, which indicate the verification status of the CVV during the transaction process. This column can be included in SQL queries to analyze payment security and verification outcomes, and it is nullable, meaning not all records will necessarily have a CVV response."
user_payments,valid,int,YES,,,1,,,,10.0,0.0,"The `valid` column in the `user_payments` table, which is of integer data type and can accept nullable entries, is used to indicate the validity of a payment transaction. Typically, a value of 1 in this column might represent a valid or successful transaction, while other values (possibly 0 or NULL) could indicate invalid or incomplete transactions. This column can be utilized in SQL queries to filter and analyze only the transactions that are marked as valid, enhancing data accuracy and relevance in financial reporting and decision-making."
user_payments,payer_token,varchar(200),YES,,,,,,200.0,,,"The `payer_token` column in the `user_payments` table is a VARCHAR(200) field that can store up to 200 characters and may contain a unique token or identifier representing the payer in each transaction. Since it is nullable, it is not mandatory for every record to have a value in this column. This column can be used in SQL queries to filter or join data based on specific payer identities, which is useful for tracking transactions linked to individual payers or analyzing payment patterns."
user_payments,gt_payment_token,varchar(200),YES,,,,,,200.0,,,"The `gt_payment_token` column in the `user_payments` table is a variable character string field (up to 200 characters) that likely stores a unique token or identifier associated with individual payment transactions. This token can be used in SQL queries to uniquely identify and retrieve specific payment records from the table. Since it is nullable, some records may not have a token assigned, which should be considered when performing data retrieval or analysis operations involving this column."
user_payments,streetAddress1,varchar(255),YES,,,,,,255.0,,,"The `streetAddress1` column in the `user_payments` table is used to store the first line of the street address associated with a user's payment method or transaction. It is a variable character string with a maximum length of 255 characters and can accommodate most street address details. Since this column is nullable, it is optional and may not be filled for every record in the table, which is useful for cases where the payment method does not require a physical address or the address is not provided. In SQL queries, this column can be used to filter or join data based on users' address information."
user_payments,streetAddress2,varchar(255),YES,,,,,,255.0,,,"The `streetAddress2` column in the `user_payments` table is used to store additional address details such as apartment or suite numbers, which complement the primary street address stored in another column. This column has a variable character data type (`varchar(255)`) and can accept null values, indicating that it is optional. When crafting SQL queries involving this table, the `streetAddress2` column can be used to refine or filter results based on specific address components not covered by the main street address."
user_payments,city,varchar(255),YES,,,,,,255.0,,,"The `city` column in the `user_payments` table is a VARCHAR field that can store up to 255 characters and represents the city associated with each payment transaction. Since it is nullable, it is optional to provide a city name for each record. In SQL queries, this column can be used to filter or analyze payment transactions based on geographical location, enabling insights into regional trends or preferences in payment methods."
user_payments,postalCode,varchar(255),YES,,,,,,255.0,,,"The `postalCode` column in the `user_payments` table is used to store the postal code associated with each payment transaction, indicating the location related to the user's payment method or billing address. As a `varchar(255)` type, it can accommodate a wide range of postal code formats. This column can be included in SQL queries to filter or analyze payment transactions by geographical areas, even though it is not a key field and can contain null values."
user_payments,country,varchar(255),YES,,,,,,255.0,,,"The `country` column in the `user_payments` table is used to store the country associated with each payment transaction, indicating where the transaction originated or where the payment method is registered. This column is a variable character string with a maximum length of 255 characters and can contain null values, which means not all records might specify a country. In SQL queries, this column can be used to filter or analyze payment transactions by geographical location, such as generating reports on transactions per country or conducting regional sales analyses."
user_payments,avs_response_address,varchar(10),YES,,,,,,10.0,,,"The column `avs_response_address` in the `user_payments` table stores a short text-based code (up to 10 characters) related to the Address Verification System (AVS) response for each payment transaction. Since it is nullable, some records may not have an AVS response. This column can be used in SQL queries to filter or analyze transactions based on the results of address verification, which can help in identifying issues with transaction authenticity or in validating transaction security."
user_payments,duplicate,tinyint,YES,,,0,,,,3.0,0.0,"The column named 'duplicate' in the 'user_payments' table is used to indicate whether a payment transaction is a duplicate. It is of type 'tinyint' and can accept null values. In SQL queries, this column can be used to filter or identify transactions that are marked as duplicates (likely where a value of 1 represents a duplicate and 0 represents a non-duplicate), which can be crucial for data cleaning or auditing purposes."
user_report_subscriptions,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `id` column in the `user_report_subscriptions` table is an integer-type primary key that uniquely identifies each record of user subscription preferences for different reports or notifications. As a non-nullable field, it must contain a value for every record. This column is essential for uniquely referencing and managing individual subscription entries in SQL queries, such as SELECT, UPDATE, or DELETE operations targeting specific subscription records."
user_report_subscriptions,user_id,int,NO,MUL,,,,,,10.0,0.0,"The `user_id` column in the `user_report_subscriptions` table is an integer that uniquely identifies each user within the system. It is a mandatory field (non-nullable) and is indexed as a multi-key (MUL), suggesting it may be used as a foreign key linked to a primary key in another table, typically the users table. This column is crucial for SQL queries when you need to filter or join data based on specific user identities to manage or analyze their report subscription preferences."
user_report_subscriptions,report_name,varchar(255),NO,MUL,,,,,255.0,,,"The `report_name` column in the `user_report_subscriptions` table is used to specify the name of the report to which a user has subscribed. It is a non-nullable varchar field with a maximum length of 255 characters, ensuring that each subscription entry must have an associated report name. This column can be used in SQL queries to filter, join, or aggregate data based on specific report names, facilitating targeted operations on user subscription data. As a column with a key type of MUL, it may be indexed and can be involved in creating joins with other tables that reference report names."
user_report_subscriptions,send_monday,tinyint(1),NO,,,0,,,,3.0,0.0,"The `send_monday` column in the `user_report_subscriptions` table is used to indicate whether a user has opted to receive specific reports or notifications on Mondays. This column stores values as a `tinyint(1)`, where `0` represents 'no' (do not send) and `1` represents 'yes' (send). Since the column is not nullable, every record must explicitly specify whether the report should be sent on Monday or not. This column can be used in SQL queries to filter users who have chosen to receive notifications on Mondays, enhancing targeted communication strategies."
user_report_subscriptions,send_tuesday,tinyint(1),NO,,,0,,,,3.0,0.0,"The `send_tuesday` column in the `user_report_subscriptions` table is a boolean-type indicator (stored as `tinyint(1)`) that specifies whether a user has opted to receive reports or notifications on Tuesdays. Since the column is not nullable and defaults to 0, it implies that unless explicitly set, users will not receive notifications on Tuesdays. In SQL queries, this column can be used to filter users who have subscribed to receive notifications on Tuesdays by checking for `send_tuesday = 1`."
user_report_subscriptions,send_wednesday,tinyint(1),NO,,,0,,,,3.0,0.0,"The column `send_wednesday` in the `user_report_subscriptions` table is used to indicate whether a user has opted to receive specific reports or notifications on Wednesdays. It is a non-nullable `tinyint(1)` field, where a value of `1` represents that the user has opted in to receive notifications on Wednesday, and a value of `0` indicates they have not. This column can be used in SQL queries to filter and manage user preferences for report delivery on Wednesdays."
user_report_subscriptions,send_thursday,tinyint(1),NO,,,0,,,,3.0,0.0,"The `send_thursday` column in the `user_report_subscriptions` table is used to indicate whether a user has opted to receive reports or notifications on Thursdays. It is a non-nullable `tinyint(1)` field where a value of `1` means the user has opted in to receive the reports on Thursdays, and a value of `0` indicates they have not. This column can be used in SQL queries to filter and manage the delivery of notifications or reports based on user preferences for receiving them on Thursdays."
user_report_subscriptions,send_friday,tinyint(1),NO,,,0,,,,3.0,0.0,"The `send_friday` column in the `user_report_subscriptions` table is used to indicate whether a user has chosen to receive specific reports or notifications on Fridays. It is a non-nullable tinyint(1) field where a value of 1 means the user has opted to receive reports on Fridays, and a value of 0 means they have not. This column should be included in SQL queries when determining which users should receive notifications on Fridays or when updating a user's preferences regarding Friday notifications."
user_report_subscriptions,send_saturday,tinyint(1),NO,,,0,,,,3.0,0.0,"The `send_saturday` column in the `user_report_subscriptions` table indicates whether a user has opted to receive reports or notifications on Saturdays. This column uses a `tinyint(1)` data type where a value of 1 means the user has opted in, and a value of 0 means they have not. This column should be used in SQL queries to filter or update user preferences for receiving Saturday communications."
user_report_subscriptions,send_sunday,tinyint(1),NO,,,0,,,,3.0,0.0,"The `send_sunday` column in the `user_report_subscriptions` table is a boolean-like field (represented as `tinyint(1)`) that indicates whether a user has opted to receive specific reports or notifications on Sundays. This column cannot contain NULL values, with '1' representing that the user has opted in for Sunday notifications and '0' indicating they have not. In SQL queries, this column can be used to filter users based on their preference for receiving reports on Sundays, such as in WHERE clauses to select users who have subscribed to Sunday notifications."
user_report_subscriptions,send_on_day_of_month,int,YES,,,,,,,10.0,0.0,"The `send_on_day_of_month` column in the `user_report_subscriptions` table is an integer type that specifies the day of the month on which users choose to receive reports or notifications. This column can contain null values, indicating that no specific day has been set for some users. In SQL queries, this column can be used to filter or schedule when subscriptions should trigger notifications, such as sending out reports on a particular day of the month."
user_report_subscriptions,params_time_last_week_sunday_saturday,tinyint(1),NO,,,0,,,,3.0,0.0,"The column `params_time_last_week_sunday_saturday` in the `user_report_subscriptions` table is used to indicate whether a user has opted to receive reports based on data from the previous week, specifically from Sunday to Saturday. This column is of type `tinyint(1)`, meaning it likely stores boolean values (0 or 1), where 1 might represent 'opted-in' and 0 'opted-out'. This column is not nullable, ensuring that every record in the table must explicitly specify a preference for receiving weekly reports. This column can be used in SQL queries to filter users based on their subscription preferences for receiving weekly reports."
user_report_subscriptions,params_time_last_week_monday_sunday,tinyint(1),NO,,,0,,,,3.0,0.0,"The column `params_time_last_week_monday_sunday` in the `user_report_subscriptions` table is used to indicate whether a user has opted to receive reports or notifications based on data from the previous week, spanning Monday to Sunday. This column is of type `tinyint(1)`, meaning it likely stores boolean values (0 or 1), where 0 could mean 'no subscription' and 1 means 'subscribed'. This column does not allow null values, ensuring every record explicitly states the user's preference for receiving weekly reports."
user_report_subscriptions,params_time_last_month,tinyint(1),NO,,,0,,,,3.0,0.0,"The column `params_time_last_month` in the `user_report_subscriptions` table is used to indicate whether a user has chosen to receive reports or notifications based on data from the previous month. It is a non-nullable `tinyint(1)` field where a value of 1 represents that the user has opted for last month's data in their reports, and a value of 0 indicates they have not. This column is essential for filtering and generating reports based on user preferences for time-specific data in SQL queries."
user_report_subscriptions,params_time_last_year,tinyint(1),NO,,,0,,,,3.0,0.0,"The column `params_time_last_year` in the `user_report_subscriptions` table is a `tinyint(1)` data type used to indicate whether a user has opted to receive reports or notifications that pertain specifically to data from the previous year. This column cannot be null and typically contains values of 0 or 1, where 1 indicates that the user has subscribed to last year's data, and 0 means they have not. In SQL queries, this column can be used to filter users based on their subscription preferences for receiving annual reports or notifications."
user_report_subscriptions,params_time_last_days,int,YES,,,,,,,10.0,0.0,"The column `params_time_last_days` in the `user_report_subscriptions` table represents the number of days for which a user wishes to receive reports or notifications, as specified in their subscription preferences. This integer column can be used in SQL queries to filter or determine the time frame of the reports users are subscribed to. It is nullable, indicating that if no value is set, the subscription might not have a specific time limitation or the default setting is used."
user_roles,user_role_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_role_id` column in the `user_roles` table serves as the primary key and is integral for uniquely identifying each record within the table. As an integer that cannot be null (`Nullable: NO`), it ensures that every association between a user and a role has a distinct identifier. This column is essential for performing SQL queries that involve joining the `user_roles` table with other tables like `users` and `roles`, particularly when needing to reference or manage specific user-role associations."
user_roles,user_id,int,NO,UNI,,,users,user_id,,10.0,0.0,"The `user_id` column in the `user_roles` table is of type `int` and is used as a part of a composite key (along with `role_id`) to uniquely identify records in this table. It serves as a foreign key that links to the `user_id` column in the `users` table, ensuring that each entry in `user_roles` corresponds to a valid user. This column is crucial for SQL queries that need to join user data with their respective roles, facilitating the management of user permissions and access within the system. Queries involving this column typically focus on filtering, joining, or aggregating data based on user-specific role assignments."
user_roles,role_id,int,NO,MUL,,,roles,role_id,,10.0,0.0,"The `role_id` column in the `user_roles` table is an integer field that serves as a foreign key linking to the `roles` table. It is essential for establishing the many-to-many relationship between users and their roles by matching `role_id` with the corresponding identifier in the `roles` table. This column cannot contain null values and is indexed, which supports efficient querying and joining operations between the `user_roles` and `roles` tables to retrieve or manage the roles assigned to users."
user_roles,default_shift_id,int,NO,,,,,,,10.0,0.0,"The `default_shift_id` column in the `user_roles` table is an integer that specifies a default shift associated with a particular user-role combination. Since this column is not nullable, every record in the `user_roles` table must have a valid `default_shift_id` value. This column can be used in SQL queries to join with a shifts table to retrieve shift details or to filter user-role associations based on specific shift requirements."
user_session,id,char(32),NO,PRI,,,,,32.0,,,"The `id` column in the `user_session` table is a primary key that uniquely identifies each record of user session data. It is a non-nullable character string of fixed length (32 characters), ensuring each session can be distinctly referenced. This column is essential for SQL queries aimed at retrieving, updating, or deleting specific user session entries based on their unique identifier."
user_session,user_id,int,YES,MUL,,,,,,10.0,0.0,"The `user_id` column in the `user_session` table is an integer data type that can optionally be null. It is indexed with a non-unique key, allowing for efficient querying and joining of data related to multiple sessions of the same user. This column should be used in SQL queries to filter or aggregate session data by specific users, or to join with other tables that contain user-specific information, enhancing the analysis of user activities and session patterns."
user_session,expire,int,YES,MUL,,,,,,10.0,0.0,"The `expire` column in the `user_session` table is an integer data type that indicates the expiration time of a user session, presumably representing a timestamp or a duration in seconds. Since it is nullable, it can hold null values, which might signify sessions that do not have a predetermined expiration. The column is indexed (as indicated by the key type 'MUL'), which facilitates faster querying and sorting of data based on session expiration times, useful for analyzing session durations or identifying active/inactive sessions."
user_session,data,longblob,YES,,,,,,4294967295.0,,,"The `data` column in the `user_session` table is of type `longblob` and can store large binary data, such as serialized objects, images, or files related to user sessions. Since it is nullable, it is optional to include this column in your SQL queries. This column is useful for storing detailed session-related data that exceeds typical text sizes, which can be retrieved for deep analysis or session reconstruction. Queries involving this column might require specific functions to handle `blob` data, depending on the database system used."
user_session,created_at,datetime,YES,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `created_at` column in the `user_session` table is of type `datetime` and it automatically records the timestamp when each user session is created, using the `CURRENT_TIMESTAMP` default value. This column can be used in SQL queries to filter or analyze user sessions based on their creation times. Although it is nullable, under normal circumstances each session should have a creation timestamp logged, facilitating the tracking of user activity and session start times for analytical purposes."
user_settings,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `id` column in the `user_settings` table is an integer type field that serves as the primary key for the table. This column uniquely identifies each record, ensuring that each set of user preferences and configurations can be distinctly accessed and modified. As it is non-nullable and marked as a primary key, every record in the `user_settings` table must have a unique `id` value, which is crucial for performing SQL operations such as `SELECT`, `UPDATE`, or `DELETE` to target specific user settings efficiently."
user_settings,user_id,int,NO,MUL,,,,,,10.0,0.0,"The `user_id` column in the `user_settings` table is an integer type field that uniquely identifies a user's preferences and settings within an application. This column is not nullable, ensuring that every record in the `user_settings` table must be associated with a user. As a key with a type of MUL, `user_id` may be part of a foreign key or indexed to facilitate efficient joins and queries related to individual user configurations. This column is crucial for linking user-specific settings with their respective user profiles in SQL queries."
user_settings,option_name,varchar(255),NO,MUL,,,,,255.0,,,"The `option_name` column in the `user_settings` table is used to identify the specific setting or preference applicable to a user within the application. As a non-nullable varchar(255) field with a key type of MUL (indicating it's part of a non-unique index), it can be used in SQL queries to efficiently search, filter, or join data based on specific settings names. This column is crucial for retrieving or updating user-specific configurations that dictate how the application behaves or appears to the user."
user_settings,option_value,varchar(255),NO,,,,,,255.0,,,"The `option_value` column in the `user_settings` table is used to store the specific settings or preferences values for each user as a string of up to 255 characters. Since the column is not nullable, every record in the table must have a value for this column, ensuring that all user-specific settings are explicitly defined. In SQL queries, this column can be used to retrieve, update, or insert the preference values for individual users to customize their application experience."
user_settings,created_at,datetime,NO,,,,,,,,,"The `created_at` column in the `user_settings` table records the date and time when each user's settings were initially created. This datetime value is essential for tracking when user preferences were set up and is non-nullable, ensuring that a timestamp exists for each entry. SQL queries involving this column can be used to sort or filter user settings based on their creation time, which is useful for understanding user configuration timelines or for maintenance purposes."
user_settings,updated_at,datetime,NO,,,,,,,,,"The `updated_at` column in the `user_settings` table is of the `datetime` data type and is not nullable, indicating that it must always have a date and time value. This column records the timestamp of the most recent update made to a user's preferences and settings. In SQL queries, `updated_at` can be used to track changes, filter records based on the last update time, or sort user settings by the most recently updated."
user_settings,staff_id,int,NO,,,,,,,10.0,0.0,"The `staff_id` column in the `user_settings` table is an integer field that uniquely identifies a user within the application. This column is crucial for linking user-specific preferences and settings to the correct staff member, ensuring that each user's experience is customized according to their saved configurations. Since it is not nullable, every record in the `user_settings` table must have a `staff_id` value, which can be used in SQL queries to retrieve or update the preferences for a specific user."
user_teams,user_team_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_team_id` column in the `user_teams` table serves as the primary key, uniquely identifying each record within the table. This integer column cannot contain null values, ensuring that every record has a unique identifier. In SQL queries, this column is crucial for efficiently retrieving, updating, or deleting specific associations between users and their department teams, and it can also be used to join the `user_teams` table with other related tables using foreign key relationships."
user_teams,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `user_id` column in the `user_teams` table is an integer that uniquely identifies a user and is used to establish a foreign key relationship with the `users` table. Since it is marked as non-nullable (`Nullable: NO`), every record in the `user_teams` table must include a valid `user_id` that exists in the `users` table. This column is essential for SQL queries that join the `user_teams` table with the `users` table to retrieve or manage information about which users are assigned to specific department teams."
user_teams,team_id,int,NO,MUL,,,department_teams,department_team_id,,10.0,0.0,"The `team_id` column in the `user_teams` table is used to link users to specific department teams. It is a non-nullable integer that acts as a foreign key, referencing the `department_teams` table. This column is essential for SQL queries aimed at retrieving or managing the team assignments of users, ensuring that each user is correctly associated with their respective team."
user_tokens,user_token_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_token_id` column in the `user_tokens` table is an integer column that uniquely identifies each record of authentication tokens and security credentials. As it is marked as a primary key (PRI) and is non-nullable, it must contain a unique value for each row, which ensures that each set of tokens and credentials can be distinctly accessed and managed. This column is essential for referencing specific user sessions in SQL queries, particularly when joining with other related tables that track user activities and access logs."
user_tokens,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `user_tokens` table is an integer data type and is not nullable, indicating that every record in this table must have a `user_id` value associated with it. This column is used to link each authentication token and its related security credentials to a specific user. In SQL queries, the `user_id` can be used to fetch, update, or manage session-specific data for individual users, ensuring that operations such as token validation or session expiration checks are correctly associated with the appropriate user account."
user_tokens,created,datetime,NO,,,,,,,,,"The `created` column in the `user_tokens` table is of the `datetime` data type and is used to store the timestamp when an authentication token was created. This column is not nullable, indicating that a timestamp must be recorded for each entry in the table. In SQL queries, this column can be used to filter or sort records based on the creation time of the tokens, which is essential for operations like checking token validity or analyzing token issuance over time."
user_tokens,token,varchar(255),NO,,,,,,255.0,,,"The `token` column in the `user_tokens` table is used to store the authentication tokens as a string of characters (varchar(255)), with a maximum length of 255 characters. This column is crucial for identifying and validating user sessions, as it contains unique token hashes that are essential for session security. Since the `token` column is not nullable, every record in the `user_tokens` table must have a token value, ensuring that no user session lacks a corresponding authentication token. This column can be used in SQL queries to retrieve, update, or validate session information based on the token's value."
user_utm_referral,user_utm_referral_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_utm_referral_id` column in the `user_utm_referral` table serves as the primary key, uniquely identifying each record in the table. As an integer that cannot be null, it ensures that each entry related to tracking UTM parameters and referral sources for user acquisitions is distinct. This column is crucial for linking each referral record to specific user acquisition data and should be used in SQL queries to join with other tables, particularly the `users` table, via the `user_id` to analyze the effectiveness of different marketing campaigns and channels."
user_utm_referral,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `user_id` column in the `user_utm_referral` table is an integer field that serves as a foreign key linking to the `users` table. This non-nullable column is crucial for associating UTM parameters and referral sources with specific users, thereby enabling SQL queries to analyze how different acquisition channels and marketing campaigns impact user behavior. Use this column in SQL JOIN operations to correlate user-specific data across the `user_utm_referral` and `users` tables for comprehensive analysis."
user_utm_referral,utm_source,varchar(255),NO,,,,,,255.0,,,"The `utm_source` column in the `user_utm_referral` table is a non-nullable varchar field that stores the source of traffic for user acquisitions, such as a search engine, newsletter name, or other sources. This column is essential for SQL queries aimed at analyzing where users are coming from, which helps in assessing the effectiveness of different marketing channels. You can use this column to join with the `users` table using the `user_id` to gain insights into specific user behaviors and campaign performance."
user_utm_referral,utm_medium,varchar(255),NO,,,,,,255.0,,,"The `utm_medium` column in the `user_utm_referral` table is a non-nullable VARCHAR(255) field that records the medium through which a user was acquired, such as 'email', 'social', or 'cpc'. This column is crucial for SQL queries aiming to analyze the effectiveness of different marketing mediums in user acquisitions. By joining this table with the `users` table using the `user_id`, analysts can correlate user behavior and demographics with the specific acquisition channels documented in `utm_medium`."
user_utm_referral,utm_campaign,varchar(255),NO,,,,,,255.0,,,"The `utm_campaign` column in the `user_utm_referral` table is used to store the name or identifier of the marketing campaign associated with a user's acquisition. This column is of type varchar(255) and cannot be null, indicating that every record in the table must include a campaign identifier. In SQL queries, this column can be used to join with the `users` table using `user_id` to analyze the effectiveness of different marketing campaigns in attracting users."
user_utm_referral,utm_term,varchar(255),NO,,,,,,255.0,,,"The `utm_term` column in the `user_utm_referral` table stores text data (up to 255 characters) related to the specific search terms used in the marketing campaigns that directed users to the site. This column is crucial for analyzing the effectiveness of keyword-focused aspects of marketing campaigns and cannot contain null values, ensuring that every record has a corresponding term. In SQL queries, this column can be used to filter, group, or join data based on these specific search terms to assess their impact on user acquisition."
user_utm_referral,utm_content,varchar(255),NO,,,,,,255.0,,,"The `utm_content` column in the `user_utm_referral` table is a non-nullable varchar field with a maximum length of 255 characters, designed to store specific content identifiers used in marketing campaigns. This column can be used in SQL queries to analyze how different content variations within the same campaign influence user acquisition. By joining this table with the `users` table using the `user_id`, detailed insights into the effectiveness of specific content in marketing strategies can be obtained."
user_utm_referral,created,datetime,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `created` column in the `user_utm_referral` table is of the `datetime` data type and records the exact date and time when an entry is added to the table, defaulting to the current timestamp at the moment of insertion. This column is not nullable, ensuring that every record in the table has a timestamp indicating when it was created. This feature is particularly useful for analyzing trends over time in user acquisition channels and assessing the timing and effectiveness of specific marketing campaigns."
user_validation_ip_logs,user_validation_ip_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `user_validation_ip_log_id` in the `user_validation_ip_logs` table is an integer type primary key that uniquely identifies each record of user validation attempts and security monitoring. This non-nullable column ensures that each entry regarding IP addresses, timestamps, and validation outcomes can be distinctly accessed and referenced in SQL queries, facilitating efficient data retrieval and management of authentication events and potential suspicious activities."
user_validation_ip_logs,user_id,int,NO,,,,,,,10.0,0.0,"The `user_id` column in the `user_validation_ip_logs` table is an integer type that uniquely identifies users involved in validation attempts and security events. It is a mandatory field (non-nullable), ensuring that every record in the table is associated with a user. This column can be used in SQL queries to filter or join data based on specific user identities, analyze user behavior, or track authentication outcomes linked to individual users."
user_validation_ip_logs,ip_address,varchar(255),NO,,,,,,255.0,,,"The `ip_address` column in the `user_validation_ip_logs` table is used to store the IP addresses associated with user validation attempts. As a non-nullable varchar(255) field, it ensures that every record in the table includes a valid IP address string, which can be used in SQL queries to filter, analyze, or track authentication events and identify potential security threats. This column is essential for correlating different validation attempts to the same or different IP addresses, aiding in security monitoring and analysis."
user_validation_ip_logs,login_page,varchar(10),YES,,,,,,10.0,,,"The `login_page` column in the `user_validation_ip_logs` table is a variable character field that can store up to 10 characters. This column is used to identify which specific login page was accessed during user validation attempts, helping to track and analyze authentication events. Since it is nullable, some records may not have a login page specified. This column can be included in SQL queries to filter or analyze security events by specific login pages."
user_validation_ip_logs,country_code,varchar(2),YES,,,,,,2.0,,,"The `country_code` column in the `user_validation_ip_logs` table is used to store the two-letter country codes (ISO 3166-1 alpha-2 format) associated with the IP addresses from which user validation attempts are made. This varchar(2) field, which is nullable, allows for the identification of the geographical location of the user during authentication events and can be helpful in analyzing patterns in security monitoring. Queries involving this column can be used to filter or aggregate data by country, aiding in the detection of regional trends or potential security threats."
user_validation_ip_logs,created,datetime,NO,,,,,,,,,"The `created` column in the `user_validation_ip_logs` table is of data type `datetime` and cannot contain null values. This column records the exact date and time when each user validation attempt or security event was logged. It is essential for tracking the timing of authentication events and analyzing patterns or trends in security monitoring over time. This column can be used in SQL queries to filter, sort, or group records based on specific time periods or to calculate the duration between different events."
user_validation_ip_logs,used_at,datetime,YES,,,0000-00-00 00:00:00,,,,,,"The `used_at` column in the `user_validation_ip_logs` table is of type `datetime` and may contain null values. This column records the specific date and time when a user validation attempt occurred, allowing for the tracking of authentication events over time. In SQL queries, this column can be used to filter or analyze user validation activities based on specific timestamps, such as identifying trends in login attempts or investigating the timing of suspicious activities."
user_validation_ip_logs,uniq_hash,varchar(32),NO,,,,,,32.0,,,"The `uniq_hash` column in the `user_validation_ip_logs` table serves as a unique identifier for each record. This varchar(32) field, which cannot be null, likely stores a hash value representing specific details of each validation attempt, ensuring that each entry is unique and easily identifiable. This column can be used in SQL queries to retrieve or analyze distinct validation attempts, join this table with others on the hash value, or ensure data integrity by avoiding duplicate records."
user_waitlist_activation_link,user_waitlist_activation_link_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `user_waitlist_activation_link_id` in the table `user_waitlist_activation_link` serves as the primary key and is used to uniquely identify each record in the table. This integer column is not nullable, ensuring that every record must have a unique identifier. In SQL queries, this column is crucial for operations like joining this table with others, retrieving specific activation links, or ensuring data integrity by preventing duplicate entries."
user_waitlist_activation_link,user_id,int,YES,UNI,,,,,,10.0,0.0,"The `user_id` column in the `user_waitlist_activation_link` table is an integer type that can optionally contain null values. It serves as a unique identifier linking each activation link to a specific user in the waitlist system. This column is crucial for SQL queries aimed at retrieving or managing activation details for individual users, ensuring that each activation link corresponds to a unique user in the system."
user_waitlist_activation_link,link,text,YES,,,,,,65535.0,,,"The `link` column in the `user_waitlist_activation_link` table is of type `text` and can contain null values. This column is used to store the activation links or unique tokens that are sent to users on a waitlist to enable them to activate their accounts. When constructing SQL queries, this column can be used to retrieve or update the specific activation links associated with each waitlisted user, ensuring they have the necessary credentials to complete their account activation process."
user_waitlist_activation_link,created_at,datetime,YES,MUL,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `created_at` column in the `user_waitlist_activation_link` table records the datetime when each activation link was created. This column, which can contain null values, automatically captures the current timestamp at the moment of record creation. In SQL queries, this column is useful for tracking and analyzing the timing of waitlist activations, enabling operations such as sorting or filtering records based on the date and time they were generated."
users,user_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `user_id` column in the `users` table is an integer type primary key that uniquely identifies each user in the system. This column is non-nullable, ensuring that every record in the `users` table has a unique identifier. In SQL queries, `user_id` is crucial for joining the `users` table with other tables that track user-related activities, permissions, and roles, thereby facilitating efficient data retrieval and management related to user accounts."
users,user_email,varchar(255),YES,UNI,,,,,255.0,,,"The `user_email` column in the `users` table is a VARCHAR(255) field that stores the email addresses associated with user accounts. It is defined as a unique field (UNI key type), meaning that each email address must be distinct across all records in the table. This column can be used in SQL queries to uniquely identify and authenticate users, as well as to join with other tables that track user activities, permissions, and interactions within the application. Since it is nullable, SQL queries should account for potential NULL values when performing operations involving this column."
users,user_pass,varchar(255),NO,,,,,,255.0,,,"The `user_pass` column in the `users` table stores encrypted passwords as a varchar datatype with a maximum length of 255 characters. It is essential for user authentication processes and cannot contain null values, ensuring that every user account has an associated password. This column is crucial for maintaining security and privacy within the system, and it is used in SQL queries primarily for validating user logins and managing account security settings."
users,first_name,varchar(45),YES,MUL,,,,,45.0,,,"The `first_name` column in the `users` table is used to store the first names of users as a variable character string with a maximum length of 45 characters. This column can contain null values, indicating that the first name is not mandatory for all user records. As a column with a key type of MUL (multi-valued), `first_name` can be involved in creating non-unique indexes, which facilitates efficient querying and sorting of users based on their first names. This column is crucial for personalizing user interactions and managing user information across various functionalities of the application."
users,last_name,varchar(45),YES,MUL,,,,,45.0,,,"The `last_name` column in the `users` table is used to store the surname of a user as a variable character string with a maximum length of 45 characters. This column can contain null values, indicating that the last name may not be mandatory for all user records in the database. Since it is marked with a key type of `MUL`, `last_name` may be indexed and used in joining this table with other tables in the database, facilitating queries that involve user identification, sorting, or filtering by surname."
users,coordinator_display_name,varchar(255),YES,,,,,,255.0,,,"The `coordinator_display_name` column in the `users` table is a VARCHAR(255) field that can store up to 255 characters and is allowed to contain null values. This column is used to hold the display name of a user when they are acting in a coordinator role within the system. It can be utilized in SQL queries to retrieve or manage the display names associated with coordinators, which is especially useful in user management interfaces, reports, or any functionality that involves representing user roles or identities visually in the application."
users,language,varchar(5),YES,,,,,,5.0,,,"The `language` column in the `users` table is used to store the preferred language of a user, represented as a string with a maximum length of 5 characters. This column can be utilized in SQL queries to personalize user interfaces, filter or sort users based on their language preferences, and enhance user experience by delivering content in the user's preferred language. Since it is nullable, queries involving this column should account for potential NULL values, which indicate that the user's language preference is unspecified."
users,created,datetime,YES,,,,,,,,,"The `created` column in the `users` table stores the datetime when each user account was created. This column, which can contain null values, is useful for tracking the timeline of user registrations and can be leveraged in SQL queries to analyze user growth, account longevity, or to filter users based on their account creation date. Given its role in the system, it can also be used in conjunction with other tables to understand user activity patterns or system usage trends over time."
users,status,tinyint,YES,,,1,,,,3.0,0.0,"The `status` column in the `users` table is a `tinyint` type that can optionally be null, indicating the current state or condition of a user's account. This column is used to represent different statuses such as active, inactive, suspended, etc., typically with specific integer values assigned to each status. In SQL queries, the `status` column can be used to filter, sort, or execute conditional logic based on user account conditions within the system, playing a critical role in managing user access and activity."
users,last_forgot_password_request,datetime,YES,,,,,,,,,"The `last_forgot_password_request` column in the `users` table records the timestamp of the most recent request by a user to reset their password, using the datetime data type. This column can be nullable, meaning it may not have a value if the user has never requested a password reset. In SQL queries, this column is useful for tracking and analyzing the frequency and recency of password reset requests, which can help in understanding user engagement and identifying potential security issues."
users,credits,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The `credits` column in the `users` table is of type `decimal(10,2)` and can store values up to 10 digits in total, with 2 decimal places, allowing for precise financial tracking. This column, which is nullable, indicates the amount of credits or funds available to a user's account, and can be used in SQL queries to calculate, update, or report a user's credit balance. Given its financial implications, this column is crucial for managing user transactions, rewards, or billing systems within the application."
users,address,varchar(255),NO,,,,,,255.0,,,"The `address` column in the `users` table is of data type `varchar(255)` and is used to store the physical address of each user. Since this column is not nullable, every record in the `users` table must include a valid address. This column is crucial for operations that require user location details, such as shipping, billing, or regional analysis, and can be used in SQL queries to filter, join, or sort users based on their addresses."
users,zip_code,varchar(15),NO,,,,,,15.0,,,"The `zip_code` column in the `users` table is a non-nullable varchar field with a maximum length of 15 characters, used to store the postal code of each user's address. This column is crucial for segmenting users geographically and can be used in SQL queries for location-based filtering, analysis, or grouping of user data. Given its importance in the users table, the `zip_code` can be employed in join operations with other tables that include user geographic information to enhance data insights or user management processes."
users,phone_home,varchar(50),NO,,,,,,50.0,,,"The `phone_home` column in the `users` table stores home phone numbers as strings with a maximum length of 50 characters. This column is essential for contact information and cannot be left empty as it is marked as non-nullable. It can be used in SQL queries to retrieve or update a user's home phone number, which is critical for communication and verification processes within the system."
users,phone_work,varchar(50),NO,,,,,,50.0,,,"The `phone_work` column in the `users` table stores the work phone numbers of users as a string of up to 50 characters. It is a mandatory field (`Nullable: NO`), meaning every record in the `users` table must include a work phone number. This column is crucial for contact management and can be used in SQL queries to retrieve or update a user's work contact details, facilitating communication and operational processes within the system."
users,updated,datetime,NO,,,,,,,,,"The `updated` column in the `users` table records the date and time when a user's account information was last modified. This datetime column is essential for tracking changes and maintaining the integrity of user data, ensuring that all modifications are timestamped. Since this column is non-nullable, every record in the `users` table must have a valid datetime entry indicating the most recent update, which is crucial for audits, data synchronization, and user management processes within the system."
users,last_login_date,datetime,NO,,,,,,,,,"The `last_login_date` column in the `users` table is of the `datetime` data type and cannot contain null values. This column records the date and time when a user last accessed the system. It is crucial for monitoring user activity, enhancing security by tracking authentication times, and can be used in SQL queries to generate reports on user engagement or to identify inactive accounts."
users,warehouse_id,int,YES,,,,,,,10.0,0.0,"The `warehouse_id` column in the `users` table is an integer field that can optionally link a user to a specific warehouse, indicated by the fact that it is nullable. This column can be used in SQL queries to join the `users` table with a `warehouses` table, assuming one exists, to fetch or analyze information about which users are associated with particular warehouse locations. This linkage is useful for managing user permissions and activities related to different warehouses, enhancing the system's ability to handle operations and relationships specific to various physical locations."
users,city_name,varchar(255),YES,,,,,,255.0,,,"The `city_name` column in the `users` table stores the name of the city associated with each user as a variable character string up to 255 characters long. Given that it is nullable, not all user records are required to have a city name specified. This column can be used in SQL queries to filter, sort, or join user data based on their city, which is useful for regional analysis or location-based user segmentation in the application."
users,state_id,int,NO,,,3,,,,10.0,0.0,"The `state_id` column in the `users` table is of type `int` and cannot contain null values, indicating that every user must be associated with a state, represented by an integer identifier. This column likely references an identifier from another table that lists states, suggesting it is used to track the geographical state associated with each user's profile. In SQL queries, `state_id` can be used to join the `users` table with other tables that contain state-specific information, enabling the analysis and management of user data by geographical regions."
users,apt,varchar(50),YES,,,,,,50.0,,,"The `apt` column in the `users` table, which is a varchar(50) and allows null values, likely stores information related to the user's apartment or unit number within a residential address. In SQL queries, this column can be used to filter or sort users based on their apartment details, which can be particularly useful in scenarios requiring address-specific data analysis or operations targeting users living in multi-unit dwellings. Additionally, since it is nullable, SQL queries should account for potential null values when performing operations that involve the `apt` column."
users,plan_id,int,NO,MUL,,4,,,,10.0,0.0,"The `plan_id` column in the `users` table is an integer that links each user to a specific plan, indicating the type of service or subscription the user is enrolled in. This column is not nullable, ensuring every user record must have an associated plan. As a column with a key type of MUL, `plan_id` is likely indexed and can be used in SQL queries to join the `users` table with other tables that detail plan features, costs, or limitations, facilitating efficient data retrieval and management related to user subscriptions."
users,open_alert,tinyint,YES,,,1,,,,3.0,0.0,"The `open_alert` column in the `users` table is a `tinyint` data type that indicates a specific status or condition related to user accounts, such as whether there is an open alert associated with a user. This column can be nullable, meaning it can hold null values which might represent the absence of any alert. When constructing SQL queries involving this table, the `open_alert` column can be used to filter or trigger specific actions for users based on the presence or status of an alert (where typically, a value of 1 might indicate an active alert)."
users,closed_alert,tinyint,YES,,,1,,,,3.0,0.0,"The `closed_alert` column in the `users` table, which is of data type `tinyint` and can be nullable, functions as a flag to indicate a specific status related to user accounts, such as whether an alert associated with the user account has been closed (1 for closed, presumably 0 for open). In SQL queries, this column can be used to filter or update user records based on the status of their alerts, enabling targeted operations like sending notifications only to users with open alerts or auditing accounts with closed alerts. This flexibility makes it valuable for managing user-related processes and ensuring appropriate actions are taken based on alert statuses."
users,customer_profile_id,varchar(255),YES,,,,,,255.0,,,"The `customer_profile_id` column in the `users` table is a VARCHAR(255) field that can optionally store a unique identifier linking users to their customer profiles. Since this column is nullable, not all user records might have an associated customer profile. It is useful in SQL queries for joining the `users` table with other tables that contain detailed customer information, enabling comprehensive analyses of user behavior, customer service interactions, or marketing strategies."
users,charge_method,varchar(50),YES,,,manual,,,50.0,,,"The `charge_method` column in the `users` table is a varchar field that can store up to 50 characters and is used to specify the method by which a user's charges are processed. It is optional (nullable) and can contain various descriptions of payment methods, such as 'credit card', 'paypal', or 'bank transfer'. This column can be utilized in SQL queries to filter or sort users based on their preferred charge methods, which is useful in managing payment processes and analyzing financial data within the system."
users,free_credits,float,NO,,,0,,,,12.0,,"The `free_credits` column in the `users` table stores a floating-point number that represents the amount of credits available to each user for free services or features within the system. This column is non-nullable, ensuring that every user record has a specific value for free credits, defaulting to 0 if not otherwise specified. In SQL queries, this column can be used to calculate, update, or conditionally filter user entitlements to certain features based on their available credits."
users,card_type,varchar(255),YES,,,,,,255.0,,,"The `card_type` column in the `users` table stores the type of card associated with a user's account, such as credit, debit, or other payment card types. This column is a variable character string that can be up to 255 characters in length and may contain null values if the card type is not specified. In SQL queries, this column can be used to filter, sort, or join user data based on their associated card type, aiding in analyses related to payment methods or financial transactions within the system."
users,exp_month,varchar(2),YES,,,,,,2.0,,,"The `exp_month` column in the `users` table is a varchar type field that can store up to two characters, representing the expiration month of a user-related attribute, such as a credit card or membership. This column is optional, as it is nullable, meaning it can contain empty values. In SQL queries, `exp_month` can be used to filter, join, or sort user data based on the expiration month, which is crucial for managing user account validity and ensuring timely updates or checks on expiring credentials."
users,exp_year,varchar(4),YES,,,,,,4.0,,,"The `exp_year` column in the `users` table is designed to store a four-character string, likely representing the expiration year of a user-related attribute, such as a membership, subscription, or credential. Given its data type `varchar(4)` and the fact that it is nullable, it can accommodate any four-character string or be left empty. When constructing SQL queries, this column can be used to filter, sort, or join users based on the expiration year of their associated details, enhancing queries related to user account validity or status within the system."
users,last_contacted_on,date,YES,,,,,,,,,"The `last_contacted_on` column in the `users` table records the date when a user was last contacted. This column, which can contain null values, is useful for tracking user engagement and communication history. SQL queries can leverage this column to analyze user activity patterns, follow up on user interactions, or manage reminders and notifications based on the last contact date."
users,next_contact_on,date,YES,,,,,,,,,"The `next_contact_on` column in the `users` table is of data type `date` and can contain null values. This column is used to store the scheduled date for the next contact or interaction with a user. In SQL queries, this column can be used to filter, sort, or trigger actions based on the upcoming scheduled contacts, which is useful for managing follow-ups, reminders, and ensuring timely communication with users."
users,never_call,tinyint,YES,MUL,,0,,,,3.0,0.0,"The `never_call` column in the `users` table is a `tinyint` data type and can be used to indicate whether a user should not be contacted via phone. It is optional (`Nullable: YES`) and has a multiple key type (`Key Type: MUL`), suggesting it may be used in indexing or joining with other tables. In SQL queries, this column can be utilized to filter out users who are not to be called, enhancing query efficiency in operations related to user communication preferences."
users,coupon_id,int,YES,,,,,,,10.0,0.0,"The `coupon_id` column in the `users` table is an integer type column that can store optional (nullable) identifiers linking users to specific coupons. This column is used in SQL queries to associate users with particular coupon codes, which can be essential for implementing discounts, promotions, or tracking marketing interactions. When querying the `users` table, you can use the `coupon_id` to join with a coupons table to retrieve details about the coupons assigned to each user."
users,notification_type,tinyint,YES,,,2,,,,3.0,0.0,"The `notification_type` column in the `users` table is of data type `tinyint` and can accept nullable values. This column likely represents different types of notifications preferences or settings associated with each user, where the value '2' might indicate a specific default or common setting. In SQL queries, this column can be used to filter, sort, or group users based on their notification preferences, which is useful for customizing user interactions, managing communication settings, or analyzing user preferences within the system."
users,supplier_id,int,YES,,,,,,,10.0,0.0,"The `supplier_id` column in the `users` table, which is of type integer and allows null values, is used to link users to their respective suppliers. This column can be utilized in SQL queries to join the `users` table with supplier-related tables, enabling the analysis of user interactions and relationships with specific suppliers. It is particularly useful for filtering, aggregating, or reporting on user data based on supplier information."
users,social_provider,varchar(255),YES,,,,,,255.0,,,"The `social_provider` column in the `users` table is used to store the name of the social media service that a user has utilized for signing into the system, if applicable. This column is of type `varchar(255)` and can accommodate various social media platform names up to 255 characters. It is nullable, indicating that not all users might have used a social media provider for authentication. In SQL queries, this column can be used to filter or analyze user accounts based on their chosen method of authentication via different social platforms."
users,social_identifier,varchar(255),YES,,,,,,255.0,,,"The `social_identifier` column in the `users` table is a varchar field that can store up to 255 characters and is optional, meaning it can contain null values. This column is typically used to store social media identifiers or other unique identifiers linked to a user's social media accounts. In SQL queries, this column can be used to join with other tables that track social media interactions or to filter users based on their associated social media details."
users,social_info2,varchar(255),YES,,,,,,255.0,,,"The `social_info2` column in the `users` table is a VARCHAR(255) field that can store up to 255 characters of optional textual data, related to a user's social information. Since it is nullable, it is not mandatory for every user record to have this field filled. This column can be used in SQL queries to filter, update, or analyze user-specific social data, which could include social media handles, preferences, or other relevant social details not captured elsewhere in the user profile."
users,social_info1,varchar(255),YES,,,,,,255.0,,,"The `social_info1` column in the `users` table is a variable character field that can store up to 255 characters and is optional, meaning it can contain null values. This column is likely used to store additional social information about users, such as social media handles or links, which can be utilized to enhance user profiles or support social media integration features within the application. When constructing SQL queries, this column can be included to fetch or update the user's social media details, which can be critical for features that involve social interactions or marketing strategies."
users,gender,varchar(20),YES,,,,,,20.0,,,"The `gender` column in the `users` table is used to store the gender identity of each user as a variable character string up to 20 characters long. This column can contain null values, indicating that the gender information is optional and may not be provided by all users. In SQL queries, this column can be used to filter, sort, or group user data based on gender, which can be useful for generating reports, customizing user experiences, or analyzing demographic distributions within the application."
users,birthday,date,YES,,,,,,,,,"The `birthday` column in the `users` table is of data type `date` and can be nullable, meaning it is optional to provide a user's birthday. This column can be utilized in SQL queries to filter or sort users based on their birth dates, which can be useful for features like sending birthday greetings, age verification, or demographic analysis. Since it is not a key column, it primarily serves as supplementary user information and should be used with consideration for privacy and data protection regulations."
users,facebook_id,varchar(255),YES,,,,,,255.0,,,"The `facebook_id` column in the `users` table is a VARCHAR(255) field that stores the Facebook identifier associated with a user's account. This column is optional (`Nullable: YES`), meaning not every user record must have a Facebook ID linked. In SQL queries, this column can be used to join user data with Facebook-related data, authenticate users, or enhance social media integration features within the application."
users,facebook_access_token,text,YES,,,,,,65535.0,,,"The `facebook_access_token` column in the `users` table stores text data representing authentication tokens for users' Facebook accounts. This column can be used in SQL queries to access or update a user's Facebook access token, which is essential for integrating Facebook features within the application. Being nullable indicates that not all user records might have an associated Facebook access token."
users,image_url,varchar(500),YES,,,,,,500.0,,,"The `image_url` column in the `users` table stores the URL links to the profile images of users. This column, which can accept variable character data up to 500 characters in length, is optional as it is nullable, meaning not all user records need to have an image URL. In SQL queries, this column can be used to retrieve or update the profile images associated with user accounts, enhancing the visual identification and personalization of user data within the application."
users,vip,tinyint,NO,,,0,,,,3.0,0.0,"The `vip` column in the `users` table is a `tinyint` data type used to indicate whether a user has VIP status within the system. As it is non-nullable, every user record must explicitly have a VIP status marked as `0` (non-VIP) or `1` (VIP). This column is crucial for queries that need to differentiate between regular users and VIP users, potentially affecting how the application handles user permissions, access levels, or specific features available to VIPs."
users,how_did_you_hear,tinyint,YES,,,,,,,3.0,0.0,"The `how_did_you_hear` column in the `users` table is a `tinyint` type that can optionally store data, as indicated by its nullable property. This column is likely used to reference a coded list of options describing how users first heard about the service or platform. When writing SQL queries, this column can be used to analyze user acquisition channels, segment users based on their initial contact source, or for reporting and marketing strategy adjustments."
users,how_did_you_hear_other,varchar(500),YES,,,,,,500.0,,,"The column `how_did_you_hear_other` in the `users` table is a variable character string field that can store up to 500 characters and is optional (nullable). It is used to capture additional details about how users learned about the service or platform, typically when predefined options are not sufficient. This column can be leveraged in SQL queries to analyze user acquisition strategies, segment users based on their responses, or enhance personalized marketing efforts by understanding diverse user entry points into the system."
users,pup_coordinator,tinyint,NO,,,0,,,,3.0,0.0,"The `pup_coordinator` column in the `users` table is a `tinyint` type and cannot be null, implying that every user record must specify whether the user is a pup coordinator or not, with likely values being 0 or 1. This column is essential for identifying users who have specific roles or permissions related to coordinating activities in the system, which could influence how user management and related functionalities are implemented. In SQL queries, this column can be used to filter or differentiate users based on their role as pup coordinators, enhancing targeted data retrieval for operations, reporting, or interface customization related to user roles."
users,signup_source,tinyint,YES,,,0,,,,3.0,0.0,"The `signup_source` column in the `users` table is a `tinyint` data type and can be nullable, indicating that it is used to store numerical codes representing the source through which a user signed up. This could include various platforms or methods such as a website, mobile app, or referral. In SQL queries, this column can be used to analyze user acquisition trends, segment users based on their signup origins, or tailor specific marketing strategies by examining the distribution of signup sources."
users,description,text,YES,,,,,,65535.0,,,"The `description` column in the `users` table is of type `text` and can store optional textual data about each user, such as biographical information, user roles, or other relevant details. Since it is nullable, SQL queries can include conditions to check for `NULL` if the description is not provided for some users. This column can be utilized in queries for generating detailed reports, enhancing user profiles, or filtering users based on specific textual criteria contained within their descriptions."
users,beta_tester,tinyint,YES,,,0,,,,3.0,0.0,"The `beta_tester` column in the `users` table is a `tinyint` data type, which is typically used to represent boolean values (0 for false, 1 for true) in this context. This column indicates whether a user is participating in beta testing of the system's features. Since it is nullable, the absence of a value (NULL) can be interpreted as the user's beta testing status being undefined or not set. In SQL queries, this column can be used to filter or analyze subsets of users based on their participation in beta testing, for instance, by selecting users who are beta testers for targeted communications or feature rollouts."
users,payment_gateway,tinyint,YES,,,0,,,,3.0,0.0,"The `payment_gateway` column in the `users` table is a `tinyint` type that can optionally be null, indicating the type or ID of the payment gateway associated with a user. This column can be used in SQL queries to filter or sort users based on their selected payment methods. For instance, querying this column can help identify the payment preferences or configurations of users, which is crucial for processing transactions or analyzing financial data within the system."
users,payment_token,varchar(200),YES,,,,,,200.0,,,"The `payment_token` column in the `users` table is a varchar(200) field that can store up to 200 characters and is nullable, meaning it is optional and can contain null values. This column typically holds a unique token or identifier used for processing or verifying user payments. In SQL queries, the `payment_token` can be used to join with transaction tables or to retrieve payment-related information for user accounts, ensuring secure and efficient payment operations within the system."
users,substitution,tinyint,YES,,,1,,,,3.0,0.0,"The `substitution` column in the `users` table, which is of data type `tinyint` and can be nullable, appears to represent a specific attribute or status related to user accounts, possibly indicating whether a user is acting as a substitute for another user (where a value of 1 might signify 'yes'). In SQL queries, this column can be used to filter or identify users who are designated substitutes, aiding in analyses or operations that require understanding or manipulating user roles or permissions based on their substitution status. For instance, to find all users who are substitutes, you would check for `substitution = 1` in your SQL query conditions."
users,activate_deposit,tinyint,YES,,,0,,,,3.0,0.0,"The `activate_deposit` column in the `users` table is a `tinyint` data type that indicates whether a user's deposit feature is activated (represented by 1) or not (represented by 0). It is nullable, meaning it can also hold a NULL value if the activation status is unknown or not set. This column can be used in SQL queries to filter or update user records based on their deposit activation status, facilitating features related to financial transactions or account settings within the application."
users,deposit,"decimal(10,2)",YES,,,,,,,10.0,2.0,"The `deposit` column in the `users` table is a decimal field that can store values up to 10 digits in total, with 2 digits after the decimal point, representing financial amounts like balances or pre-paid amounts. This column is optional (nullable), meaning not all user records need to have a deposit amount specified. In SQL queries, this column can be used to calculate, update, or report on the financial engagements or commitments of users, such as filtering users based on their deposit amounts or calculating total deposits."
users,prefered_deposit_amount,int,NO,,,0,,,,10.0,0.0,"The `prefered_deposit_amount` column in the `users` table stores an integer value representing the preferred deposit amount set by each user. This non-nullable column ensures that every user record must have a specified preferred deposit amount, which is crucial for processes involving financial transactions or account settings. SQL queries can utilize this column to tailor user-specific operations, such as setting default deposit fields or analyzing preferred deposit trends across the user base."
users,card_last4digits,varchar(10),YES,,,,,,10.0,,,"The `card_last4digits` column in the `users` table stores the last four digits of a user's payment card as a string (varchar(10)). This column can be nullable, indicating that not all user records are required to have this information. In SQL queries, this column is useful for displaying partial card information for security purposes, such as in user profiles or transaction summaries, while ensuring sensitive full card numbers are not exposed."
users,payment_profile_id,varchar(200),NO,MUL,,0,,,200.0,,,"The `payment_profile_id` column in the `users` table is a non-nullable varchar field of up to 200 characters, used to store unique identifiers for payment profiles associated with each user. As a column with a key type of MUL (indicating it's part of a non-unique index, usually enabling faster searches and joins), it facilitates efficient querying and linking of user payment information across the system. This column is crucial for operations related to billing, transaction management, and ensuring secure access to user-specific payment details."
users,notification_status,tinyint,YES,,,1,,,,3.0,0.0,"The `notification_status` column in the `users` table, which is of type `tinyint` and can be nullable, is used to track the status of notifications settings for each user. This column likely represents different states of user preferences for receiving notifications, where specific integer values (e.g., 1 for active, 0 for inactive) indicate these states. In SQL queries, this column can be used to filter, update, or analyze user preferences regarding the receipt of notifications within the system, enhancing targeted communication and user engagement strategies."
users,nb_qa_required,tinyint,YES,,,0,,,,3.0,0.0,"The `nb_qa_required` column in the `users` table specifies the number of quality assurances required for a user, represented as a tiny integer. This column can be nullable, indicating that for some users, the requirement for quality assurances might not be set. In SQL queries, this column can be used to filter, sort, or set conditions based on the quality assurance requirements for users, which is useful in managing user account validations or assessing user reliability and compliance within the system."
users,campaign_referral,varchar(64),YES,,,,,,64.0,,,"The `campaign_referral` column in the `users` table is a VARCHAR(64) field that can store up to 64 characters. This column is designed to hold information about the referral campaign that led a user to register or interact with the system. Being nullable, it is optional and can be left blank if the user did not sign up through a referral campaign. This column can be used in SQL queries to analyze the effectiveness of different marketing campaigns in user acquisition and engagement."
users,login_token,varchar(255),YES,,,,,,255.0,,,"The `login_token` column in the `users` table is a variable character string that can store up to 255 characters and is used to authenticate and manage user sessions. Although it is nullable, indicating that not every user record must have a login token, it plays a crucial role in securing user accounts by validating identities for ongoing sessions. This column can be used in SQL queries to check the validity of user sessions, retrieve user information based on the token, or update the token as part of security measures such as token refresh mechanisms."
users,seen_popup,int,YES,,,0,,,,10.0,0.0,"The `seen_popup` column in the `users` table is an integer type that indicates whether a user has seen a specific popup, with `0` typically representing that the popup has not been seen. As this column is nullable, it allows for the possibility that the status of seeing the popup may not be recorded for some users. In SQL queries, this column can be used to filter or update user records based on their interaction with the popup, aiding in managing user experience and interface interactions within the application."
users,gift_preferences,int,NO,,,1,,,,10.0,0.0,"The `gift_preferences` column in the `users` table is an integer data type that stores specific preference codes related to gifts, which are mandatory for each user record (non-nullable). This column can be used in SQL queries to filter or sort users based on their gift preferences, which is crucial for personalizing marketing efforts or analyzing user behavior related to gifts. The column does not serve as a key and contains an extra indicator of '1', which may signify a default or specific categorization needing further definition in system documentation."
users,display_sold_out_products,tinyint,NO,,,1,,,,3.0,0.0,"The `display_sold_out_products` column in the `users` table is a `tinyint` type used to indicate whether a user's settings allow the display of sold-out products. This column cannot be null, implying that a default value (likely either 0 or 1) is always required, with '1' possibly indicating that sold-out products should be displayed. This column can be utilized in SQL queries to customize user experiences by filtering product visibility based on individual user preferences."
users,home_delivery_address,varchar(500),YES,,,,,,500.0,,,"The `home_delivery_address` column in the `users` table stores the delivery addresses of users as a string of up to 500 characters. This column can be used in SQL queries to fetch or update the delivery address details for users, which is essential for operations involving product shipping or service provisioning directly to a user's location. Since the column is nullable, SQL queries should handle cases where the delivery address might not be provided."
users,home_delivery_apt,varchar(50),YES,,,,,,50.0,,,"The `home_delivery_apt` column in the `users` table is used to store the apartment number or unit details for home delivery addresses associated with each user. This column is of type varchar(50), allowing for a maximum of 50 characters, and it can accept null values, indicating that not all user records might have an apartment number specified. In SQL queries, this column can be used to filter, update, or display user-specific delivery information, enhancing functionalities related to shipping or mailing operations within the system."
users,home_delivery_zip_code,varchar(50),YES,,,,,,50.0,,,"The `home_delivery_zip_code` column in the `users` table stores the zip code information for user home delivery addresses as a variable character string up to 50 characters long. This column can be used in SQL queries to filter or sort users based on their geographic location for delivery purposes. Since it is nullable, queries involving this column should account for potential null values which indicate missing zip code information."
users,home_delivery_city_name,varchar(50),YES,,,,,,50.0,,,"The `home_delivery_city_name` column in the `users` table stores the city name for home delivery addresses associated with each user, using a variable character string format with a maximum length of 50 characters. This column can be used in SQL queries to filter or sort users based on their specified home delivery city, which is particularly useful in logistics, marketing strategies, and regional analysis. Since the column is nullable, SQL queries should account for possible null values, which indicate users without a specified home delivery city."
users,home_delivery_state_id,int,YES,,,,,,,10.0,0.0,"The `home_delivery_state_id` column in the `users` table is an integer that optionally links users to a state identifier, which can be used to track the state where users prefer to receive home deliveries. This column can be included in SQL queries to filter or sort users based on their delivery location preferences or to join with other tables that contain state-specific information, such as tax rates or delivery logistics. It is especially useful in functions related to shipping, marketing, and regional analysis within the system."
users,home_delivery_comment,varchar(500),YES,,,,,,500.0,,,"The `home_delivery_comment` column in the `users` table is a varchar(500) field that can store up to 500 characters and is optional (nullable). This column is typically used to record any remarks or special instructions related to the delivery of items or services to a user's home address. In SQL queries, this column can be used to fetch, update, or analyze delivery comments for better understanding user preferences or requirements in logistics and service delivery contexts."
users,home_delivery_leave_basket,tinyint,YES,,,,,,,3.0,0.0,"The `home_delivery_leave_basket` column in the `users` table is a tinyint type that can optionally contain a value (nullable). This column likely indicates a user's preference or permission regarding leaving deliveries in a basket at their home, where a value of 1 might represent permission granted, and 0 indicates no permission. In SQL queries, this column can be used to filter or update user preferences related to delivery options, ensuring that application functionalities align with individual user settings and preferences concerning home deliveries."
users,fraudulent_reasons_id,int,YES,,,,,,,10.0,0.0,"The `fraudulent_reasons_id` column in the `users` table is an integer that can optionally link to a record in another table that details reasons for labeling a user account as fraudulent. Since this column is nullable, not all user records may have an associated fraudulent reason. This column is useful in SQL queries for filtering or identifying users who have been flagged for fraudulent activities, allowing for further investigation or action based on associated reasons documented in the linked table."
users,signed_up_to_weekly_promotions,tinyint,NO,,,0,,,,3.0,0.0,"The `signed_up_to_weekly_promotions` column in the `users` table is a `tinyint` data type used to indicate whether a user has opted into receiving weekly promotions. The values for this column are non-nullable, meaning every user record must explicitly have a value (typically 0 for 'no' and 1 for 'yes'). This column is essential for managing marketing communications and can be used in SQL queries to filter and target users based on their preference for promotional emails."
users,cs_pref_communication_language,varchar(5),NO,,,,,,5.0,,,"The `cs_pref_communication_language` column in the `users` table specifies the preferred communication language for each user, stored as a varchar with a maximum length of 5 characters. This column is non-nullable, indicating that a preferred language must be specified for every user record. In SQL queries, this column can be used to tailor communications with users, filter or group users by language preferences, or join with other tables that might provide localized content based on user language settings."
users,in_bad_debt_since,datetime,YES,,,,,,,,,"The `in_bad_debt_since` column in the `users` table is of type datetime and can contain null values. This column records the date and time when a user's account was identified as being in bad debt. In SQL queries, this column can be used to filter or analyze users based on their debt status, helping in financial assessments, debt recovery processes, and user account management. Queries might involve checking how long an account has been in debt, or identifying accounts that recently entered into bad debt for targeted actions."
users,address_lat,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The `address_lat` column in the `users` table stores the latitude coordinates of a user's address, formatted as a decimal with up to 10 digits and 8 decimal places. This column can be used in SQL queries to perform geographic or location-based analyses and operations, such as calculating distances between users or filtering users within a specific geographic area. Since it is nullable, queries involving this column should account for potential NULL values, which indicate that the latitude information is not available for some users."
users,address_lng,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The `address_lng` column in the `users` table stores the longitude component of a user's address as a decimal value with up to 10 digits in total and 8 digits after the decimal point. This column is optional (nullable) and can be used in SQL queries to perform geographical location-based analysis, such as calculating distances between users or determining users within a specific geographic area. The precision of the data type allows for accurate location mapping, which is crucial for features that depend on precise user location data."
users,bonus_program,int,NO,,,0,,,,10.0,0.0,"The `bonus_program` column in the `users` table is an integer field that indicates the specific bonus program associated with each user. It is a mandatory field, as indicated by its non-nullable property, ensuring that every user record must have a bonus program assigned. This column can be used in SQL queries to filter, sort, or join user data based on their participation in various bonus programs, enhancing insights into user benefits and engagement within the system."
users,employee_status,"enum('Non employee','Active','Inactive','Terminated','On Extended Leave')",NO,MUL,,,,,17.0,,,"The `employee_status` column in the `users` table is an enumeration type that categorizes each user's employment status within the organization, with possible values including 'Non employee', 'Active', 'Inactive', 'Terminated', and 'On Extended Leave'. This column is crucial for queries that need to distinguish between different types of user accounts based on their employment status, facilitating targeted operations such as accessing permissions, managing roles, or analyzing workforce demographics. Since it is a non-nullable field with a `MUL` key type, it is indexed and can be efficiently used in join operations with other tables to enhance query performance and data integrity across the system."
users,employee_personal_email,varchar(255),YES,,,,,,255.0,,,"The `employee_personal_email` column in the `users` table is of type `varchar(255)` and can accept null values, indicating that not all user records might have an email address provided. This column is used to store the personal email addresses of employees, distinguishing it from potentially other official or work-related email addresses stored elsewhere in the system. In SQL queries, this column can be used to contact employees outside of professional contexts, perform user verification, or recover accounts, and it can be joined with other tables where personal email might be needed for cross-referencing or data integration purposes."
users,internal_employee_id,int,YES,,,,,,,10.0,0.0,"The `internal_employee_id` column in the `users` table is an optional integer field that uniquely identifies employees within the system. It can be used in SQL queries to link user account information with specific employee records, facilitating operations related to employee management and tracking within the application. This column is particularly useful for distinguishing between regular users and employees, and for performing joins with other tables that involve employee-specific data."
users,employee_photo_url,varchar(255),YES,,,,,,255.0,,,"The `employee_photo_url` column in the `users` table is used to store the URL link to the photograph of an employee, allowing for easy retrieval and display of the user's image within the application. This column is a VARCHAR data type with a maximum length of 255 characters and can contain null values, indicating that not all user records are required to have an associated photo URL. The column can be used in SQL queries to join with other tables that require visual identification of users, enhance user profile data, or for any features within the system that utilize employee images."
users,date_of_birth,date,YES,,,,,,,,,"The `date_of_birth` column in the `users` table stores the birth date of each user as a date type and can accept null values. This column is useful for querying age-related attributes, verifying user identities, or performing demographic analysis. It can be utilized in SQL queries to filter, sort, or group users based on age, either directly by the date or by calculating the age from the date of birth."
users,employee_lock,tinyint,YES,,,0,,,,3.0,0.0,"The `employee_lock` column in the `users` table, which is of data type `tinyint` and can be nullable, is used to indicate the lock status of a user account, typically in an employee context. A value of `0` in this column likely represents an unlocked state, while other integer values may signify different levels or reasons for account locks. This column can be utilized in SQL queries to filter or update user records based on their lock status, which is crucial for managing access control and account security within the application."
users,community_representative_group_id,int,YES,MUL,,0,,,,10.0,0.0,"The `community_representative_group_id` column in the `users` table is an integer field that can optionally link a user to a community representative group, allowing for the categorization and management of users based on their group affiliations. Since it is marked with a key type of MUL (indicating it is part of a non-unique index), this column is likely used to enhance query performance on joins with the table that stores details of different community representative groups. SQL queries involving this column can efficiently filter, sort, or group users by their associated community representative group, facilitating targeted operations and analyses within the system."
users,coordinator_photo_url,varchar(255),YES,,,,,,255.0,,,"The `coordinator_photo_url` column in the `users` table stores the URL link to the profile photo of users who have coordinator roles, and it is stored as a variable character string with a maximum length of 255 characters. This column can contain null values, indicating that a photo URL may not be provided for every coordinator. In SQL queries, this column can be used to retrieve or update the profile photo URLs of coordinators, enhancing user interfaces or reports with visual identification of these users."
users,coordinator_description,varchar(255),YES,,,,,,255.0,,,"The `coordinator_description` column in the `users` table is a varchar(255) field that can optionally store textual descriptions related to the roles or responsibilities of users designated as coordinators. This column can be used in SQL queries to filter, display, or update the descriptions for coordinators, enhancing the management of user roles and responsibilities within the system. It is particularly useful for generating reports or interfaces where understanding the specific duties of coordinator roles is necessary."
users,coordinator_availability,varchar(255),YES,,,,,,255.0,,,"The `coordinator_availability` column in the `users` table is a varchar field that can store up to 255 characters, describing the availability status of users who act as coordinators. This column, which can contain null values, is useful for queries that need to filter, display, or update a coordinator's availability status within user management or coordination-specific functionalities. It can be employed in SQL operations to manage and analyze user availability, particularly for coordinators, which is pivotal in scheduling, planning, and operational tasks within the system."
users,max_rows,int,YES,MUL,,,,,,10.0,0.0,"The `max_rows` column in the `users` table, which is an integer data type and can be nullable, specifies the maximum number of rows a user is allowed to retrieve or interact with in certain queries or operations within the system. This column, marked with a key type of MUL (indicating it may be part of a non-unique index or used in joins), is crucial for implementing user-specific data access limitations or controls. SQL queries involving the `users` table can utilize the `max_rows` column to dynamically set or enforce limits on data retrieval operations based on individual user settings or permissions."
users,primary_task_type_id,int,NO,,,,,,,10.0,0.0,"The `primary_task_type_id` column in the `users` table is an integer that identifies the main type of task associated with each user, reflecting their primary role or responsibility within the system. This column is not nullable, indicating that every user must have a primary task type specified. In SQL queries, this column can be used to filter or join users based on their primary tasks, facilitating targeted operations and analyses related to user roles and activities."
users,company_id,int,YES,MUL,,,companies,company_id,,10.0,0.0,"The `company_id` column in the `users` table is an integer that can optionally link a user to a specific company, indicated by its allowance for NULL values and its designation as a MUL key, suggesting it is used as a foreign key to another table, likely a `companies` table. This column is crucial for SQL queries that need to segment or report on users based on their associated company, such as generating lists of users belonging to a particular company, or analyzing user activity by company. Additionally, its use in join operations can enrich user data with company-specific details, facilitating more detailed user management and relationship tracking across the system."
users,charitable_account,tinyint,NO,,,0,,,,3.0,0.0,"The `charitable_account` column in the `users` table is a `tinyint` data type used to indicate whether a user has opted into charitable activities or features. Since the column is non-nullable, it requires a value (likely 0 for no and 1 for yes) for each user record. This column can be used in SQL queries to filter or segment users based on their participation in charity-related options, which is essential for managing user preferences and activities within the system."
users,family_size,tinyint,NO,,,1,,,,3.0,0.0,"The `family_size` column in the `users` table holds an integer value that represents the size of a user's family. This column is of the `tinyint` data type, which indicates it can store small integer values (typically from 0 to 255). It is a non-nullable field, ensuring that a value must be provided for each user record in the system. This column can be used in SQL queries to filter, sort, or perform aggregate functions (like averages or counts) based on the family size of users, which can be useful for demographic analysis or marketing strategies tailored to family-oriented services within the application."
users,giveback_donation_percent,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The `giveback_donation_percent` column in the `users` table specifies the percentage of their transactions or earnings that users allocate to donations. As a non-nullable decimal field with a precision of 10 digits and 2 decimal places, it ensures an accurate representation of donation commitments by each user. This column is crucial for calculating the donation amounts in financial or transaction-related queries and can be used to generate reports on user contributions or for promoting charitable activities within the application."
users,order_donation,"decimal(10,2)",NO,,,0.00,,,,10.0,2.0,"The `order_donation` column in the `users` table is a decimal field that records monetary values associated with user donations, with a precision of 10 digits and 2 decimal places. This column is mandatory (non-nullable) and defaults to 0.00, indicating that if no donation amount is specified, it will automatically be set to $0.00. In SQL queries, this column can be used to calculate total donations, average donations per user, or to filter and identify users based on their donation amounts, enhancing reports and analyses related to user contributions within the system."
users,ident_verified,tinyint,NO,,,0,,,,3.0,0.0,"The `ident_verified` column in the `users` table is a `tinyint` data type used to indicate whether a user's identity has been verified, where a value of 0 typically represents unverified and 1 represents verified. This column is non-nullable, ensuring that every user record explicitly states whether the identity has been verified or not. In SQL queries, this column is crucial for filtering, joining, or updating records based on the verification status of the user's identity, supporting functionalities related to security, access control, and user management within the system."
users,mask_donor_identity,tinyint,NO,,,0,,,,3.0,0.0,"The `mask_donor_identity` column in the `users` table is a `tinyint` data type used to indicate whether a user's identity as a donor should be masked or not. Since it is non-nullable, every record in the `users` table must explicitly have a value for this column, typically set to 0 or 1, where 1 might represent that the donor's identity should be masked and 0 that it should not. This column is crucial for maintaining privacy and confidentiality in user interactions and data handling related to donor activities within the system."
users,numb_children,int,NO,,,0,,,,10.0,0.0,"The `numb_children` column in the `users` table is an integer type column that records the number of children each user has. This column is non-nullable, meaning every user record in the database must include a valid integer value for `numb_children`. It can be used in SQL queries to filter, sort, or perform aggregate functions based on the users' number of children, which can be useful in analyses related to family demographics or determining eligibility for family-oriented services or offers within the system."
users,snipeit_userid,int,YES,,,,,,,10.0,0.0,"The `snipeit_userid` column in the `users` table is an integer type field that can optionally contain a null value. This column likely serves as a reference or link to user IDs in an external system or application, such as Snipe-IT, which is an asset management system. In SQL queries, this column can be used to join the `users` table with other tables that track specific assets assigned to users, allowing for integrated user and asset management within the system."
users,job_title,varchar(60),YES,,,,,,60.0,,,"The `job_title` column in the `users` table is a varchar field with a maximum length of 60 characters, and it is optional (nullable). This column stores the professional or occupational titles of users within the system. It can be used in SQL queries to filter, sort, or join user data based on their job roles, which is useful for generating reports, managing access controls, or tailoring user interactions based on their professional responsibilities."
users,dg_coordinator_company_id,int,YES,MUL,,,companies,company_id,,10.0,0.0,"The `dg_coordinator_company_id` column in the `users` table is an integer field that can contain null values and is used to link users to specific companies, potentially indicating the company for which a user acts as a coordinator. As a column with a key type of MUL (indicating it's part of a non-unique index and can be involved in join operations), it is crucial for SQL queries that require filtering, joining, or reporting based on the company associated with a user. This column is particularly useful in queries that involve understanding or managing user roles and responsibilities across different companies within the system."
users,guest,tinyint,NO,,,0,,,,3.0,0.0,"The `guest` column in the `users` table is a `tinyint` data type and cannot be null, indicating it likely serves as a boolean flag (with 0 representing `false`). This column is used to distinguish between guest users and registered users within the system. In SQL queries, this column can be utilized to filter or differentiate user types, enabling specific operations or access controls based on whether a user is a guest (0) or a registered member."
users,badge_color,varchar(5),YES,,,,,,5.0,,,"The `badge_color` column in the `users` table is a VARCHAR(5) field that can store a short string, typically used to represent a color associated with a user's badge. This column is optional (nullable) and can be used in SQL queries to filter or categorize users based on their badge color, which may correspond to different roles, statuses, or privileges within the application. This information could be vital for visual representations in user interfaces or for generating reports that require differentiation of users based on badge color."
users,internal_grouping_code,varchar(6),YES,,,,,,6.0,,,"The `internal_grouping_code` column in the `users` table is a variable character field that can store up to 6 characters and is capable of containing null values. This column is used to categorize or group users within the system, potentially aligning with specific roles, departments, or operational needs. When constructing SQL queries, this column can be utilized to filter or segment users based on these internal groupings, aiding in targeted data retrieval or analysis within user management and related operations."
users,bonus_program_version,int,NO,,,1,,,,10.0,0.0,"The `bonus_program_version` column in the `users` table is an integer field that specifies the version of the bonus program each user is associated with. This column is not nullable, indicating that every user must be assigned a specific version of the bonus program. When crafting SQL queries, this column can be used to filter or group users based on their bonus program version, allowing for targeted analysis or operations on subsets of users who are part of different versions of the bonus program."
users,users_date_of_last_shipped_order,date,YES,,,,,,,,,"The `users_date_of_last_shipped_order` column in the `users` table stores the date of the most recent order shipped for each user. This column, which can contain null values if a user has no shipped orders, is essential for tracking order fulfillment history and analyzing customer activity. In SQL queries, this column can be used to filter or sort users based on their latest interaction in the order shipping process, facilitating targeted marketing campaigns, operational analysis, and customer service follow-ups."
users,tier_id,int,YES,,,4,,,,10.0,0.0,"The `tier_id` column in the `users` table is an integer field that can be nullable, indicating that it is optional and some users may not have a tier assigned. This column likely references different user levels or categories, which could be used to differentiate users based on privileges, subscription tiers, or access rights within the system. In SQL queries, `tier_id` can be used to join the `users` table with other tables that define specific tier attributes, enabling analysis or operations based on user categorization."
users,last_updated_pass,datetime,YES,,,,,,,,,"The `last_updated_pass` column in the `users` table records the datetime when a user's password was last updated. This datetime field, which can be null, is crucial for managing security and authentication by allowing the system to prompt users for periodic password updates or to check for outdated credentials. SQL queries can leverage this column to enhance security protocols, such as identifying accounts with passwords that need updating or analyzing the frequency of password changes across the user base."
usersLang,l_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `l_id` column in the `usersLang` table is an integer type primary key that uniquely identifies each record of language preferences and settings for users. As a non-nullable primary key, every record in the `usersLang` table must have a unique `l_id` value. This column is essential for SQL queries that require joining the `usersLang` table with other tables in the database to retrieve or manipulate user-specific language settings based on unique identifiers."
usersLang,user_id,int,YES,MUL,,,,,,10.0,0.0,"The `user_id` column in the `usersLang` table is an integer type that may be used to link users to their specific language preferences and settings. Although it is nullable, meaning not every record necessarily has a `user_id`, it is marked with a key type 'MUL', indicating it is part of a non-unique index and can be used in SQL queries to efficiently filter or join data based on user identity. This setup suggests that multiple entries for a single user can exist, each potentially representing different language settings or preferences."
usersLang,lang_id,varchar(10),NO,,,,,,10.0,,,"The `lang_id` column in the `usersLang` table is a non-nullable varchar field of up to 10 characters, used to store the language identifiers corresponding to each user's language preferences. As it is essential for defining user-specific language settings, this column is crucial in SQL queries for filtering, joining, or updating records to ensure users receive content in their preferred language. This column does not serve as a primary or foreign key but is integral for localization operations within the system."
usersLang,l_description,text,YES,,,,,,65535.0,,,"The `l_description` column in the `usersLang` table is of data type text and can store textual descriptions related to users' language preferences or settings. Since it is nullable, the column can contain null values, indicating that a description might not always be provided for every entry. This column can be used in SQL queries to retrieve or update the descriptive information about language settings for individual users, enhancing the customization of language-based features within the system."
usersLang,l_coordinator_description,varchar(255),YES,,,,,,255.0,,,"The `l_coordinator_description` column in the `usersLang` table is a variable character string field that can store up to 255 characters and is used to hold descriptive information about the language coordinator relevant to a user's language preferences and settings. This column can contain null values, indicating that the description is optional. In SQL queries, this column can be used to fetch, filter, or update the language coordinator's description for each user, enhancing the customization of language settings in user profiles."
usersLang,l_coordinator_availability,varchar(255),YES,,,,,,255.0,,,"The column `l_coordinator_availability` in the `usersLang` table is a VARCHAR(255) field that can store up to 255 characters and is nullable, meaning it can accept NULL values. This column likely holds information about the availability of a language coordinator or similar role, formatted as text. In SQL queries, this column can be used to filter, sort, or display the availability status of language coordinators associated with users, allowing for customized user interactions based on language support availability."
users_excluded_from_reduced_prices_test,user_id,int,NO,PRI,,,,,,10.0,0.0,"The `user_id` column in the `users_excluded_from_reduced_prices_test` table is an integer type primary key that uniquely identifies users. This column is not nullable, ensuring every record in the table must have a user ID. In SQL queries, this column is used to specify which users are part of the exclusion list for A/B testing in pricing strategies, ensuring they do not receive promotional or reduced pricing offers."
users_for_reduced_prices_test,user_id,int,NO,PRI,,,,,,10.0,0.0,"The `user_id` column in the `users_for_reduced_prices_test` table is a primary key, meaning it uniquely identifies each record in the table. It is of integer data type and cannot contain NULL values. This column should be used in SQL queries to select, update, or delete records associated with specific users who are part of pricing-related tests or experiments."
users_for_reduced_prices_test,shown_popup,tinyint,NO,,,0,,,,3.0,0.0,"The `shown_popup` column in the `users_for_reduced_prices_test` table is a `tinyint` type that indicates whether a user has been shown a promotional pricing popup. This column is not nullable, meaning every record must have a value of either 0 (popup not shown) or 1 (popup shown). This field is essential for tracking user interactions with promotional price notifications in SQL queries, particularly for analyzing how these interactions affect user behavior or the success of pricing strategies."
vacations,vacation_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `vacation_id` column in the `vacations` table is an integer-type primary key that uniquely identifies each vacation record. Since it is set as a non-nullable primary key, every record in the `vacations` table must have a unique `vacation_id`. This column is essential for referencing specific vacation records in SQL queries, ensuring data integrity and facilitating operations like joins, updates, or deletions, even though this table does not directly relate to other tables."
vacations,user_id,int,NO,MUL,,,,,,10.0,0.0,"The `user_id` column in the `vacations` table is an integer type that identifies users associated with vacation records. This column is non-nullable, meaning every record in the `vacations` table must have a `user_id` value, ensuring that each vacation entry is linked to a user. The key type 'MUL' indicates that `user_id` may be used in joining this table with other tables that contain a `user_id`, facilitating queries that involve user-specific vacation data, despite it being a standalone table."
vacations,start_date,date,YES,MUL,,,,,,,,"The `start_date` column in the `vacations` table holds date values indicating when a vacation begins. This column, which can contain null values, is indexed (as indicated by the key type 'MUL'), suggesting it is frequently used in query conditions to filter or sort vacation records by their start dates. When constructing SQL queries, you can utilize the `start_date` to retrieve or organize vacation records based on specific starting times, which is especially useful for generating timelines or schedules."
vacations,end_date,date,YES,MUL,,,,,,,,"The `end_date` column in the `vacations` table is used to store the date on which a vacation ends, with the data type set to 'date'. This column can contain null values, indicating that the end date might not be specified for some records. As it is indexed (Key Type: MUL), this column can be efficiently used in SQL queries that need to sort or filter records based on the vacation end date, such as finding all vacations that end before a certain date or calculating the duration of each vacation if the start date is also available."
vacations,name,varchar(255),NO,,,,,,255.0,,,"The `name` column in the `vacations` table is a VARCHAR(255) type, indicating it stores text-based data, specifically names, up to 255 characters in length. This column is not nullable, meaning every record in the `vacations` table must include a value for `name`. In SQL queries, this column can be used to identify or search for specific vacation records by name, sort them alphabetically, or group vacation records sharing the same name."
vacations,submission_type,int,NO,,,0,,,,10.0,0.0,"The `submission_type` column in the `vacations` table is an integer data type and cannot contain null values. It is used to categorize the type of vacation submission, potentially representing different statuses or types of vacation requests. When writing SQL queries involving this table, you can use the `submission_type` column to filter or sort vacation records based on their submission type, ensuring that each query specifies an integer value for this column since it cannot be null."
vehicle_capacities,vehicle_capacity_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `vehicle_capacity_id` column in the `vehicle_capacities` table is an integer column that uniquely identifies each record. As a primary key, it ensures that each capacity measurement and specification entry for the vehicles is unique. This column should be used in SQL queries to reference specific capacity entries efficiently, and it cannot contain NULL values, guaranteeing that every record has a valid identifier."
vehicle_capacities,vehicle_id,int,NO,,,,,,,10.0,0.0,"The `vehicle_id` column in the `vehicle_capacities` table is an integer field that uniquely identifies each vehicle within the system. This column is crucial for linking capacity measurements to the specific vehicle they pertain to. Since it is non-nullable, every record in the `vehicle_capacities` table must have a `vehicle_id` value, ensuring that all capacity data can be accurately associated with a vehicle. This column can be used in SQL queries to join with other tables that include vehicle information, allowing for comprehensive data analysis regarding vehicle capacities."
vehicle_capacities,capacity_type_id,int,NO,MUL,,,capacity_types,capacity_type_id,,10.0,0.0,"The `capacity_type_id` column in the `vehicle_capacities` table is an integer field used to link each record to a specific type of capacity measurement, as defined in the `capacity_types` table. This column is not nullable, meaning every record in the `vehicle_capacities` table must have a valid `capacity_type_id` associated with it. Since it is marked with a key type of `MUL`, it indicates that this column is indexed and likely used as a foreign key, facilitating efficient joins with the `capacity_types` table to retrieve descriptive details about the capacity type."
vehicle_capacities,capacity,int,NO,,,,,,,10.0,0.0,"The `capacity` column in the `vehicle_capacities` table is an integer field that represents the quantity of a specific capacity type for a vehicle, such as the number of passengers it can carry, its cargo volume, or its weight limit. This column is crucial for queries that need to retrieve or analyze the capacity specifications of vehicles, ensuring that each vehicle's capacity data is accurately recorded and is not nullable, meaning every record in the table must have a capacity value specified. It can be used in SQL queries to filter, sort, or aggregate data based on vehicle capacities, aiding in operations management and planning."
vehicle_skills,vehicle_skill_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `vehicle_skill_id` column in the `vehicle_skills` table serves as the primary key, uniquely identifying each record of skills or capabilities associated with vehicles. As a non-nullable integer, it ensures that every skill entry has a unique identifier, which is crucial for maintaining data integrity and for referencing specific vehicle skills in SQL queries. This column is essential when performing joins with other tables or when specific skill records need to be retrieved, updated, or deleted based on their unique ID."
vehicle_skills,skill_type_id,int,NO,MUL,,,skill_types,skill_type_id,,10.0,0.0,"The `skill_type_id` column in the `vehicle_skills` table is an integer that serves as a foreign key linking to the `skill_types` table. This relationship categorizes and defines the nature of each skill associated with a vehicle. In SQL queries, `skill_type_id` can be used to join the `vehicle_skills` table with the `skill_types` table to retrieve detailed descriptions or classifications of vehicle skills, ensuring that each skill is clearly identified and not nullable, meaning every entry in the `vehicle_skills` table must have a valid `skill_type_id` that exists in the `skill_types` table."
vehicle_skills,vehicle_id,int,NO,,,,,,,10.0,0.0,"The `vehicle_id` column in the `vehicle_skills` table is an integer column that uniquely identifies vehicles within the system. This column is essential for SQL queries when you need to link the skills or capabilities of specific vehicles, ensuring that each entry in `vehicle_skills` is directly associated with one vehicle. Since `vehicle_id` is not nullable, every record in the `vehicle_skills` table must be associated with a valid vehicle, which can be used in JOIN operations with other tables that contain vehicle-specific data."
vehicle_time_windows,vehicle_time_window_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `vehicle_time_window_id` column in the `vehicle_time_windows` table is an integer column used as the primary key, meaning it uniquely identifies each record in the table. This column is essential for SQL queries when you need to reference or manipulate specific time windows associated with vehicles, ensuring accurate selection, updating, or deletion of data. Since it is not nullable, every record must have a unique `vehicle_time_window_id` value, guaranteeing that each time window can be distinctly identified without ambiguity."
vehicle_time_windows,vehicle_id,int,NO,,,,,,,10.0,0.0,"The `vehicle_id` column in the `vehicle_time_windows` table is an integer data type and cannot contain null values. This column is used to uniquely identify vehicles associated with specific time windows or scheduling periods, facilitating SQL queries that link or filter data based on vehicle identity. It is essential for operations that involve understanding or managing the availability or scheduling of vehicles within the table's context."
vehicle_time_windows,day_of_week,"enum('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday')",YES,,,,,,9.0,,,"The `day_of_week` column in the `vehicle_time_windows` table is an enumerated type that includes the days of the week from 'Sunday' to 'Saturday'. This column can be used in SQL queries to filter or analyze vehicle availability or scheduling based on specific days of the week. Since it is nullable, SQL queries should account for possible NULL values, which might indicate that the time window is not restricted to a particular day."
vehicle_time_windows,start_time,time,YES,,,,,,,,,"The `start_time` column in the `vehicle_time_windows` table represents the beginning of a time window or scheduling period for a vehicle. As a time data type and nullable, this column can store the specific start times of these periods, allowing for null values if the start time is not specified. In SQL queries, this column can be used to filter, sort, or join data based on when vehicles begin their availability or scheduled operations."
vehicle_time_windows,end_time,time,YES,,,,,,,,,"The `end_time` column in the `vehicle_time_windows` table specifies the ending time of a time window or scheduling period for a vehicle. Since this column is of type `time` and is nullable, it can store the time of day when a vehicle's availability or scheduled operation concludes, but it may also be left empty if the end time is unspecified or open-ended. This column can be used in SQL queries to filter, sort, or join data based on when vehicle availability windows end."
vehicle_time_windows,break,tinyint,YES,,,,,,,3.0,0.0,"The `break` column in the `vehicle_time_windows` table is a `tinyint` data type and can be nullable, indicating that it may represent a boolean-like flag (typically 0 or 1) for the presence or absence of a break within a vehicle's time window or schedule. In SQL queries, this column can be used to filter or identify specific time windows where breaks are scheduled (`break = 1`) or not scheduled (`break = 0`) for vehicles, aiding in the management of vehicle availability and operations scheduling."
vehicle_time_windows,service_time,int,YES,,,,,,,10.0,0.0,"The `service_time` column in the `vehicle_time_windows` table is an integer data type and can hold nullable values. This column likely represents the duration or specific time allocations (in minutes or another unit of measure) for which a vehicle is scheduled to be in service or available. It can be used in SQL queries to filter, sort, or calculate the service durations of vehicles, and to manage or optimize scheduling by comparing these time windows against operational needs or constraints."
vehicle_time_windows,speed,int,NO,,,3,,,,10.0,0.0,"The `speed` column in the `vehicle_time_windows` table is an integer that specifies a particular speed associated with a vehicle's time window, possibly indicating the speed limit or target speed for the vehicle during the specified scheduling period. This column is not nullable, meaning every record in the `vehicle_time_windows` table must have a speed value specified. The `speed` column can be used in SQL queries to filter or sort vehicles based on their designated speeds during different time windows, ensuring that operations are optimized for speed efficiency or compliance with speed regulations."
video_watched,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `id` column in the `video_watched` table is an integer type primary key that uniquely identifies each record of videos watched by users. This column is non-nullable, ensuring that every record in the table has a unique identifier. In SQL queries, this column can be used to uniquely reference or retrieve specific entries in the `video_watched` table, and it is essential for joining this table with others, such as the `users` table via the `user_id` foreign key, to perform comprehensive analyses on user video consumption patterns."
video_watched,user_id,int,NO,MUL,,,users,user_id,,10.0,0.0,"The `user_id` column in the `video_watched` table is an integer type that serves as a foreign key linking to the `users` table. This non-nullable column (meaning every record must have a `user_id` value) is crucial for constructing SQL queries that analyze individual user behaviors, such as tracking which videos a specific user has watched. It can be used in joins with the `users` table to retrieve detailed user-specific video viewing patterns and metrics."
video_watched,date,datetime,NO,,,,,,,,,"The `date` column in the `video_watched` table is of type `datetime` and is used to record the exact date and time when a video was watched on the platform. This non-nullable column is essential for analyzing when videos are viewed, allowing for time-based querying and reporting. It can be used in SQL queries to filter or sort records based on specific dates and times, or to calculate viewing trends over time."
video_watched,type,int,NO,,,,,,,10.0,0.0,"The `type` column in the `video_watched` table is an integer that categorizes the types of videos watched by users. It is a mandatory field (not nullable) and can be used in SQL queries to filter or aggregate data based on the video type, which facilitates analysis of user preferences or the popularity of different video categories. This column does not serve as a primary or foreign key but is essential for segmenting video content in user consumption reports."
violation_types,violation_type_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `violation_type_id` column in the `violation_types` table is an integer column that uniquely identifies each type of violation or infraction in the catalog. As a primary key, it is not nullable and must contain unique values for each record. This column is essential for referencing and linking different types of violations across the database in SQL queries, ensuring consistency and integrity in the management of violation data."
violation_types,name,varchar(255),NO,,,,,,255.0,,,"The `name` column in the `violation_types` table is used to store the names of various violations or infractions as character strings up to 255 characters in length. Since this column is not nullable, every record in the table must include a violation name. This column can be used in SQL queries to filter or join data based on specific violation names, ensuring that data retrieval and manipulation are aligned with the standardized categories of violations defined in the system."
violation_types,penalty_amount,"double(10,5)",NO,,,,,,,10.0,5.0,"The `penalty_amount` column in the `violation_types` table specifies the financial penalty associated with each type of violation or infraction. It is a non-nullable double precision floating-point field, ensuring that each violation type must have a defined penalty amount. This column is essential for calculating fines in SQL queries, where it can be used to determine the total penalties for given infractions by joining with other tables that record actual violations."
violation_types,status,int,YES,,,0,,,,10.0,0.0,"The `status` column in the `violation_types` table is used to indicate the current status of each violation type, where different integers represent different statuses. This column, being nullable, allows for the possibility of a violation type not having a status assigned. In SQL queries, this column can be used to filter or update the status of violation types, helping to manage and categorize different infractions within the system."
violation_types,manual,tinyint,NO,,,0,,,,3.0,0.0,"The `manual` column in the `violation_types` table is a `tinyint` data type and cannot be null. This column is likely used to indicate a specific attribute or flag related to the violation types, such as whether a violation requires manual intervention or oversight (0 could represent 'No' and a non-zero value 'Yes'). In SQL queries, this column can be used to filter or classify violation types based on whether they involve manual processes."
violation_types,placeholder_txt,varchar(255),YES,,,,,,255.0,,,"The `placeholder_txt` column in the `violation_types` table is a VARCHAR(255) field that can store up to 255 characters and is used to hold additional text or remarks relevant to each violation or infraction type. It is optional, as indicated by its nullable attribute, meaning it can contain null values if no additional text is provided. This column can be used in SQL queries to retrieve or update the descriptive text associated with different types of violations, enhancing the understanding or categorization of each violation type within the system."
violation_types,is_driver_related,tinyint,NO,,,0,,,,3.0,0.0,"The column `is_driver_related` in the `violation_types` table is a `tinyint` data type used to indicate whether a violation type is related to a driver. The column does not accept null values and typically contains the value `0` or `1`, where `0` means the violation is not driver-related and `1` means it is driver-related. This column can be used in SQL queries to filter or classify violations based on their association with drivers."
violation_types,is_bonus_related,tinyint,NO,,,0,,,,3.0,0.0,"The column `is_bonus_related` in the `violation_types` table is of type `tinyint` and cannot be null. This column is used to indicate whether a violation or infraction is related to bonuses, with a value of `0` typically representing 'no' and `1` representing 'yes'. In SQL queries, this column can be used to filter or classify violations based on their association with bonuses, enhancing data retrieval and analysis related to bonus-related infractions."
violation_types,show_in_tms,int,YES,,,,,,,10.0,0.0,"The column `show_in_tms` in the `violation_types` table is an integer type that indicates whether a particular type of violation should be displayed in the Transaction Management System (TMS). It is nullable, meaning it can accept NULL values, which might be used to indicate undefined or default behaviors. This column can be used in SQL queries to filter or determine the visibility of violation types within the TMS, enhancing query specificity and data management within the system."
violations,violation_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `violation_id` column in the `violations` table is an integer-type primary key that uniquely identifies each record of a violation or non-compliance incident. This column is critical for distinguishing between different incidents and cannot contain null values. In SQL queries, `violation_id` can be used to specifically target, retrieve, or manipulate data related to individual violations, and it facilitates joining the `violations` table with other related tables, such as those for companies, orders, or workflow steps, using foreign key relationships."
violations,created_at,timestamp,NO,,DEFAULT_GENERATED,CURRENT_TIMESTAMP,,,,,,"The `created_at` column in the `violations` table is a timestamp indicating when each violation or non-compliance incident was recorded. This column is non-nullable, ensuring that a timestamp is always captured automatically at the current time when a new record is created. In SQL queries, this column can be used to filter or sort violations based on the time they were logged, which is useful for generating reports or analyzing trends over time."
violations,created_by,int,NO,,,,,,,10.0,0.0,"The `created_by` column in the `violations` table is an integer data type and is not nullable, indicating it must always have a value. This column is used to store the identifier (ID) of the user who recorded the violation. In SQL queries, the `created_by` column can be used to join the `violations` table with a users table to fetch details about the user who logged the violation, ensuring accountability and traceability in the workflow process."
violations,violation_type_id,int,NO,,,,,,,10.0,0.0,"The `violation_type_id` column in the `violations` table is an integer that categorizes the type of non-compliance incident recorded. Since it is not nullable, every entry in the `violations` table must have a valid `violation_type_id` indicating the specific type of violation. This column can be used in SQL queries to filter or aggregate data based on the type of violation, join with other tables that provide detailed descriptions of each violation type, or analyze patterns of non-compliance across different workflow processes."
violations,violation_amount,"double(10,5)",YES,,,,,,,10.0,5.0,"The `violation_amount` column in the `violations` table represents the numerical value associated with a violation or non-compliance incident, measured in a double precision format with up to 10 digits and 5 decimal places. This column can be used in SQL queries to calculate the total, average, or other aggregate measures of violation amounts related to specific companies, orders, or workflow steps. Since the column is nullable, SQL queries should account for potential NULL values when performing calculations or aggregations to ensure accuracy."
violations,additional_information,text,YES,,,,,,65535.0,,,"The `additional_information` column in the `violations` table is used to store supplementary text details about each non-compliance incident recorded. As it is a text field and nullable, it can contain extensive descriptive information or be left empty if no additional details are needed. In SQL queries, this column can be used to provide further context or explanations regarding a violation when analyzing incidents, generating reports, or conducting audits related to workflow processes."
violations,delivery_type_id,int,YES,MUL,,,,,,10.0,0.0,"The `delivery_type_id` column in the `violations` table is an integer field that can be used to categorize or identify the type of delivery involved when a violation occurred during a workflow process. Since it is marked as nullable, it is optional and may not be filled for all records. This column is likely linked to another table that specifies different delivery types, as indicated by its key type 'MUL' suggesting it is part of a foreign key relationship. In SQL queries, this column can be used to join the `violations` table with a delivery types table to analyze or report on violations by delivery type."
violations,route_details_id,int,YES,MUL,,,,,,10.0,0.0,"The `route_details_id` column in the `violations` table is an integer field that can optionally link a violation to a specific route detail, which may represent a particular part of a workflow process where the violation was identified. Since this column is marked with a key type of 'MUL', it indicates that it is indexed but not unique, suggesting it can be used to join the `violations` table with another table that records more detailed information about each route or workflow step. This linkage is useful in queries that aim to analyze violations by specific segments of the workflow process or to track the frequency and nature of violations at different stages within the workflow."
violations,reported_by,int,NO,,,,,,,10.0,0.0,"The `reported_by` column in the `violations` table is an integer that identifies the individual or entity who reported the non-compliance incident. This column is not nullable, ensuring that every record in the `violations` table must have a reporter specified. In SQL queries, this column can be used to join the `violations` table with other tables that contain detailed information about the reporter, typically using the reporter's ID to fetch or analyze data related to the person or entity who reported the violation."
violations,frustration_level,int,YES,,,,,,,10.0,0.0,"The column `frustration_level` in the `violations` table is an integer that quantifies the level of frustration caused by a violation or non-compliance incident during a workflow process. This column can be used in SQL queries to analyze the severity of violations based on their impact on the workflow, allowing for prioritization or further investigation of high-frustration incidents. Since it is nullable, SQL queries should account for the possibility of null values, which indicate that the frustration level was not assessed or recorded for some violations."
violations,status,int,YES,,,0,,,,10.0,0.0,"The `status` column in the `violations` table is an integer data type that can hold nullable values, indicating the current status of a violation or non-compliance incident within a workflow process. This column can be used in SQL queries to filter, sort, or aggregate data based on the status of the violations, such as identifying unresolved violations (if specific integer values are designated for different statuses). Additionally, the status can be joined with other related tables like companies, orders, and workflow steps to provide a comprehensive view of where and how violations are occurring and being managed."
violations,company_id,int,YES,MUL,,,companies,company_id,,10.0,0.0,"The `company_id` column in the `violations` table is used to associate each violation or non-compliance incident with a specific company. This integer column can be nullable, meaning not all violations need to be linked to a company. As a foreign key (indicated by the key type 'MUL'), it can be used in SQL queries to join the `violations` table with the `companies` table, enabling analysis or reports that detail violations by company."
violations,violation_date,date,NO,MUL,,,,,,,,"The `violation_date` column in the `violations` table records the exact date when a non-compliance incident was detected during a workflow process. Since this column is of data type `date` and cannot be null (`Nullable: NO`), every record in the `violations` table must have a specific date associated with the violation. The `MUL` key type indicates that this column is indexed and can be efficiently used in SQL queries to filter, sort, or join data based on the date of the violation."
violations,euf_exclude,tinyint,NO,,,0,,,,3.0,0.0,"The `euf_exclude` column in the `violations` table is a `tinyint` data type and cannot be null. This column is used to flag whether a violation should be excluded from certain evaluations or reports, with a value of 0 indicating inclusion. When constructing SQL queries, this column can be used to filter out violations that should not be considered in specific analyses or outputs."
violations,ww_step_id,int,YES,MUL,,,ww_steps,step_id,,10.0,0.0,"The `ww_step_id` column in the `violations` table is an integer field that references the specific workflow step where a violation or non-compliance incident was detected. This column can contain null values, indicating cases where the specific step of the violation is not identified. It is indexed (as indicated by the key type 'MUL'), which allows for more efficient querying and joining operations with other tables that track detailed workflow step data. This column is crucial for analyzing at which points in the workflow process violations are most frequently occurring."
violations,violations_order_id,int,YES,MUL,,,orders,order_id,,10.0,0.0,"The `violations_order_id` column in the `violations` table is an integer type field that can optionally link a violation record to a specific order from the `orders` table. Being marked as `MUL` (multiple key index), this column is indexed, which facilitates faster query performance when filtering or joining on this column. Although nullable, when provided, it helps in identifying and analyzing the specific order associated with a particular non-compliance incident during workflow processes."
violations,violations_violation_source,varchar(50),YES,,,,,,50.0,,,"The column `violations_violation_source` in the `violations` table is a variable character string with a maximum length of 50 characters, used to specify the origin or cause of a violation or non-compliance incident within a workflow process. This column can contain null values, indicating that in some cases, the source of the violation may not be specified. In SQL queries, this column can be used to filter or analyze violations based on their sources, helping to identify patterns or frequent issues related to specific origins within the workflow processes."
vsl_pup_record,vsl_pup_record_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `vsl_pup_record_id` in the `vsl_pup_record` table is an integer-type primary key that uniquely identifies each record of vessel pupillary examinations and measurements. As it is non-nullable, every record in the table must have a unique `vsl_pup_record_id`. This column is essential for indexing and efficiently querying specific entries related to pupil assessments in SQL operations."
vsl_pup_record,delivery_date,date,YES,,,,,,,,,"The `delivery_date` column in the `vsl_pup_record` table stores the date when a pupillary examination was performed on a vessel. This column is of the data type 'date' and can accept null values, indicating that the date of the examination may not always be recorded. In SQL queries, this column can be used to filter or sort records based on the date of the examination, or to calculate time intervals between different clinical events related to vessel examinations."
vsl_pup_record,cart_id,varchar(64),YES,,,,,,64.0,,,"The `cart_id` column in the `vsl_pup_record` table is used to reference or link to a specific cart or set of tools used during the pupillary examinations of vessels. This column, which is of type `varchar(64)` and can accept null values, may be used in SQL queries to join with other tables that record details about the carts or to filter records based on specific cart identities. This is useful for tracking which equipment was used in particular assessments or managing inventory and usage statistics of examination tools."
vsl_pup_record,cart_position,int,YES,,,,,,,10.0,0.0,"The `cart_position` column in the `vsl_pup_record` table is an integer data type and can be nullable, indicating that it is optional and may not be filled for all records. This column likely represents the position of the cart or equipment used during the pupillary examination of vessels. In SQL queries, `cart_position` can be used to filter, sort, or group records based on the specific location or setup of the equipment during the examination process."
vsl_pup_record,order_id,int,YES,,,,,,,10.0,0.0,"The `order_id` column in the `vsl_pup_record` table, which is of data type integer and can accept null values, is used to potentially link pupillary examination records to specific orders or medical examination processes. In SQL queries, this column can be utilized to join the `vsl_pup_record` table with other tables that contain order details, allowing for a comprehensive analysis of pupil assessments in relation to specific medical orders or procedures. This linkage is crucial for queries aiming to correlate clinical observations with particular medical interventions or assessments documented by orders."
vsl_pup_record,user_id,int,YES,,,,,,,10.0,0.0,"The `user_id` column in the `vsl_pup_record` table is an integer data type and can contain null values. This column likely links each record of vessel pupillary examinations to a specific user, which could be a patient or a healthcare provider, depending on the context of the user system. In SQL queries, the `user_id` can be used to join the `vsl_pup_record` table with other tables that contain user-specific information, enabling more detailed analysis or reporting on pupillary assessments by user."
vsl_pup_record,email,varchar(255),YES,,,,,,255.0,,,"The `email` column in the `vsl_pup_record` table is a variable character string field that can store up to 255 characters and is used to hold the email addresses associated with each record of vessel pupillary examinations and measurements. This column can contain null values, indicating that the email address for some records might not be provided. In SQL queries, this column can be used to filter or join records based on email addresses, or to send notifications and communications related to the pupil assessments stored in the table."
vsl_pup_record,first_name,varchar(64),YES,,,,,,64.0,,,"The `first_name` column in the `vsl_pup_record` table is used to store the first name of the individual whose pupillary examination data is recorded. This column is of type `varchar(64)`, allowing for names up to 64 characters long, and it can contain null values, indicating that the first name might not always be provided. In SQL queries, this column can be used to filter or join records based on the patient's first name, enhance readability in results, and assist in personalizing data outputs in reports related to vessel pupillary examinations."
vsl_pup_record,last_name,varchar(64),YES,,,,,,64.0,,,"The `last_name` column in the `vsl_pup_record` table is a VARCHAR(64) type field that can store up to 64 characters, representing the last name of the individual whose pupillary examination data is recorded in the table. This column is nullable, meaning it can accept null values, which indicates that the last name might not be mandatory for every record. In SQL queries, this column can be used to filter, sort, or join data based on the last name of the patient, enhancing the ability to perform patient-specific searches or analyses within the dataset."
vsl_pup_record,parking_spot,int,YES,,,,,,,10.0,0.0,"The column `parking_spot` in the `vsl_pup_record` table is an integer data type and can hold null values. This column likely refers to a designated numeric identifier for a specific location or spot where the examination or measurement related to the vessel's pupillary assessment is conducted. In SQL queries, this column can be used to filter, join, or sort records based on the examination location, aiding in organizing or analyzing data by specific examination spots."
vsl_pup_record,status,"enum('Picked up','Not picked up')",YES,,,,,,13.0,,,"The `status` column in the `vsl_pup_record` table is an enumerated type that indicates whether the pupillary examination results have been picked up or not. This column can hold one of two values: 'Picked up' or 'Not picked up'. It is nullable, meaning it can also contain a NULL value if the status is unknown or not applicable at the time of record entry. This column can be used in SQL queries to filter or sort records based on whether the examination results have been collected."
vsl_pup_record,notes,text,YES,,,,,,65535.0,,,"The `notes` column in the `vsl_pup_record` table is used to store textual information that may include additional observations, comments, or details not captured by other more structured data fields related to pupil assessments during vessel-related medical examinations. As a text type and nullable column, it can accommodate varying lengths of text and can be left empty if no extra notes are necessary. In SQL queries, this column can be used to provide supplementary details when reviewing or analyzing pupil examination records."
walkthrough_log,walkthrough_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `walkthrough_log_id` in the `walkthrough_log` table is an integer-type primary key that uniquely identifies each record of user interactions and progress in tutorials or walkthrough sequences. As it is not nullable and serves as the primary key, it must contain a unique value for each entry, ensuring each record is distinctly identifiable. This column is essential for referencing specific logs in SQL queries, particularly for operations involving joining, updating, or deleting records based on unique user activity entries."
walkthrough_log,user_id,int,NO,MUL,,,,,,10.0,0.0,"The `user_id` column in the `walkthrough_log` table is an integer that uniquely identifies users. It is a non-nullable field, meaning every record in the table must have a `user_id` value associated with it. This column is indexed (indicated by Key Type: MUL), which supports efficient querying and joining operations to other tables that also contain a `user_id` column, facilitating analysis of user behavior across different segments of the tutorial or walkthrough sequences."
walkthrough_log,to_see,tinyint,YES,,,1,,,,3.0,0.0,"The `to_see` column in the `walkthrough_log` table, which is of data type `tinyint` and allows NULL values, is used to indicate a specific state or condition in user interactions within tutorials or walkthrough sequences. Typically, this column could represent a binary or small range flag (such as seen/unseen, 0 or 1) to track whether certain steps or milestones have been viewed or need attention. In SQL queries, this column can be used to filter or analyze user progress and engagement by checking the status of interactions in different walkthrough steps."
walkthrough_log,walkthrough_type,int,NO,,,0,,,,10.0,0.0,"The `walkthrough_type` column in the `walkthrough_log` table is an integer that categorizes the type of walkthrough or tutorial sequence a user is engaging with. This column is not nullable, indicating that every record in the table must have a defined walkthrough type. In SQL queries, this column can be used to filter or analyze data based on different types of walkthroughs, aiding in understanding user engagement across various tutorial categories."
warehouse_path,warehouse_path_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `warehouse_path_id` column in the `warehouse_path` table is an integer type field that serves as the primary key for the table. This column uniquely identifies each navigation path or route within a warehouse facility. It is essential for SQL queries that involve selecting, updating, or deleting specific records related to particular paths in the warehouse, ensuring accurate and efficient data manipulation and retrieval."
warehouse_path,aisle,varchar(4),YES,MUL,,,,,4.0,,,"The `aisle` column in the `warehouse_path` table is used to store alphanumeric identifiers (up to 4 characters) of aisles within a warehouse. This column, which can contain null values, helps to categorize or group physical navigation paths or routes by specific aisles, facilitating queries that need to retrieve or analyze movement paths related to particular warehouse aisles. Since it's marked with a key type of MUL, it may be indexed for optimizing search queries and can be involved in joining with other tables that reference the `aisle` column."
warehouse_path,bay,varchar(4),YES,,,,,,4.0,,,"The column `bay` in the `warehouse_path` table is used to store identifiers for specific bays within a warehouse, with each identifier being up to 4 characters long. Given that it is a `varchar(4)` and nullable, this column can hold short textual codes that represent different bays, and it may not be mandatory for every path entry to have a bay associated with it. This column can be utilized in SQL queries to filter or join data based on specific bays, enhancing the management of navigation and logistical operations within different areas of the warehouse."
warehouse_path,weight,int,NO,,,0,,,,10.0,0.0,"The `weight` column in the `warehouse_path` table, which is of type integer and cannot be null, represents the cost or difficulty associated with traversing a particular path or route segment in a warehouse. This column can be used in SQL queries to calculate the most efficient or least burdensome routes for navigation by considering the weight as a factor in path selection or optimization algorithms. For example, when querying for the optimal path, you might sum the weights of connected segments to find the path with the lowest total weight."
warehouse_path,x_pos,int,YES,,,,,,,10.0,0.0,"The column `x_pos` in the `warehouse_path` table represents the x-coordinate (horizontal positioning) within a warehouse's layout. It is used to define specific locations along the paths or routes in the warehouse, facilitating the navigation of personnel or machinery. Since it is an integer and nullable, it can accommodate whole number values or be left empty if the x-coordinate is not specified or unknown. This column can be used in SQL queries to filter or sort paths based on their horizontal positions within the warehouse."
warehouse_path,y_pos,int,YES,,,,,,,10.0,0.0,"The `y_pos` column in the `warehouse_path` table represents the y-coordinate (vertical position) within a warehouse's navigation system. This integer column can be used in SQL queries to determine or filter specific vertical locations or routes within the warehouse. Since it is nullable, SQL queries should account for possible null values which might indicate undefined or inapplicable vertical positions in certain path segments."
warehouse_path,floor,varchar(10),YES,,,B,,,10.0,,,"The `floor` column in the `warehouse_path` table is a VARCHAR(10) field that can optionally store the specific floor within a warehouse facility on which a particular navigation path or route is located. This column allows SQL queries to differentiate or filter paths by floors, which is useful in multi-level warehouse environments. When querying this table, you can use the `floor` column to specify or retrieve navigation details pertinent to a particular floor, enhancing the efficiency of operations by providing targeted navigational data."
warehouses,warehouse_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `warehouse_id` column in the `warehouses` table is an integer-type primary key that uniquely identifies each warehouse record. This column is essential for SQL queries when you need to specifically target, retrieve, or manipulate data related to a particular warehouse. Since it is not nullable, every warehouse must have a unique `warehouse_id`, ensuring that all operations and references using this column will relate directly to one specific warehouse entity."
warehouses,name,varchar(255),YES,,,,,,255.0,,,"The column `name` in the `warehouses` table is of type `varchar(255)` and can store up to 255 characters, representing the name of each warehouse. This column can contain null values, indicating that the name of the warehouse might not be provided in some records. When querying the `warehouses` table in SQL, the `name` column can be used to filter, sort, or join data based on warehouse names, assisting in operations that require identification or categorization of warehouses by name."
warehouses,address,varchar(500),YES,,,,,,500.0,,,"The `address` column in the `warehouses` table is used to store the physical address of each warehouse, with a variable character limit of up to 500 characters. Since this column is nullable, it allows for the possibility that the address might not be provided for some warehouse entries. In SQL queries, this column can be used to filter, join, or display warehouse locations based on their addresses, enhancing operations and logistical planning."
warehouses,city_name,varchar(255),YES,,,,,,255.0,,,"The `city_name` column in the `warehouses` table is a variable character string field that can store up to 255 characters and represents the city where each warehouse is located. Since this column is nullable, it is optional and may not be filled in for all records. In SQL queries, this column can be used to filter, sort, or join data based on the city associated with each warehouse, which is useful for regional analysis or operations planning."
warehouses,state_id,int,YES,,,,,,,10.0,0.0,"The `state_id` column in the `warehouses` table is an integer type that may optionally contain a value (nullable), and it is used to reference the state where each warehouse is located. This column can be used in SQL queries to filter or join warehouse data based on specific states, facilitating geographic-specific analyses or operations management. For instance, you could use `state_id` to group warehouses by state or to join with another table that maps `state_id` to state names or other regional data."
warehouses,zip_code,varchar(10),YES,,,,,,10.0,,,"The `zip_code` column in the `warehouses` table is used to store the postal code associated with each warehouse location as a variable character string up to 10 characters long. Since this column is nullable, it is possible for some records to have a null value, indicating that the zip code is not provided. In SQL queries, this column can be used to filter or group warehouse data based on geographic regions defined by zip codes."
warehouses,apt,varchar(10),YES,,,,,,10.0,,,"The `apt` column in the `warehouses` table is used to store optional information about the apartment or suite number within the warehouse address, if applicable. As a `varchar(10)` field, it can accommodate up to 10 characters and being nullable, it is not mandatory for every record in the table. This column can be used in SQL queries to filter or display warehouse locations that include specific apartment or suite details."
warehouses,lat,varchar(255),YES,,,,,,255.0,,,"The column named 'lat' in the 'warehouses' table is used to store the latitude coordinates of each warehouse as a string (varchar(255)). Since it is nullable, some records may not have latitude information. In SQL queries, this column can be used to determine the geographical location of the warehouses for purposes such as calculating distances between warehouses or to other points of interest."
warehouses,lng,varchar(255),YES,,,,,,255.0,,,"The `lng` column in the `warehouses` table is used to store the longitude coordinates of each warehouse as a string (varchar(255)). Since this column is nullable, it is possible for some warehouse entries not to have longitude data. In SQL queries, this column can be used to determine the geographical positioning of warehouses, which can be essential for logistics and planning purposes, such as calculating distances between warehouses or locating the nearest warehouse to a particular point."
ww_depots,depot_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `depot_id` column in the `ww_depots` table is an integer field used as a primary key, meaning it uniquely identifies each record in the table. This column is crucial for linking the `ww_depots` table to other related tables in the database, such as tracking operational activities by associating `depot_id` with specific actions in connected tables. Since it is not nullable, every record in the `ww_depots` table must have a unique `depot_id` value, ensuring data integrity and facilitating efficient data retrieval and management in SQL queries."
ww_depots,ww_depot_id,varchar(255),NO,,,,,,255.0,,,"The `ww_depot_id` column in the `ww_depots` table serves as a unique identifier for each warehouse or storage depot within a logistics or distribution system. As a non-nullable varchar(255) field, it ensures that every depot record can be uniquely and consistently identified across the database. This column is crucial for SQL queries aimed at retrieving, updating, or correlating specific depot data with other related tables, such as activities in `depot_id` or geographical locations in `ww_territory_id`."
ww_depots,dev_ww_depot_id,varchar(255),NO,,,,,,255.0,,,"The `dev_ww_depot_id` column in the `ww_depots` table is a non-nullable varchar field with a maximum length of 255 characters, used to uniquely identify each warehouse or storage depot within a logistics or distribution system. This identifier is crucial for linking depots to specific geographical territories and operational activities, ensuring that SQL queries can accurately retrieve or manipulate data related to specific locations in the distribution network. When writing SQL queries, this column should be used to join the `ww_depots` table with other related tables where depot identification is necessary for data integration and analysis."
ww_depots,ww_territory_id,int,NO,MUL,,,ww_territories,id,,10.0,0.0,"The `ww_territory_id` column in the `ww_depots` table is an integer that serves as a foreign key linking each depot to a specific territory in a logistics or distribution system. This column is essential for SQL queries that need to analyze or report on depots based on their geographical locations. Since it is marked as non-nullable (`Nullable: NO`) and has a key type of `MUL`, it indicates that each depot must be associated with one territory, and multiple depots can be associated with the same territory."
ww_depots,name,varchar(255),NO,,,,,,255.0,,,"The `name` column in the `ww_depots` table is used to store the unique names of warehouses or storage depots within a logistics or distribution system. This column is a VARCHAR(255) type, indicating it can hold strings up to 255 characters and cannot contain null values, ensuring every depot has a designated name. In SQL queries, the `name` column can be used to identify, search, and display the specific names of depots, facilitating operations like data retrieval, updates, or joins with other tables based on depot names."
ww_depots,address,varchar(255),NO,,,,,,255.0,,,"The `address` column in the `ww_depots` table is a non-nullable varchar field with a maximum length of 255 characters. It is used to store the physical address of each warehouse or storage depot within a logistics or distribution system. This column is essential for identifying the specific location of depots, and it can be used in SQL queries to filter, sort, or join data based on the depot's address, enhancing the management and operational tracking of different geographical locations."
ww_depots,main,tinyint,NO,,,0,,,,3.0,0.0,"The `main` column in the `ww_depots` table, defined as a non-nullable `tinyint` data type, is used to indicate a specific attribute or status of warehouses or storage depots in a logistics system. This column likely serves a boolean purpose, where a value of 0 could represent that the depot is not a main or primary location. When constructing SQL queries involving this table, use the `main` column to filter or differentiate between main and non-main depots, enhancing the management and operational planning of logistics activities."
ww_drivers,driver_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `driver_id` column in the `ww_drivers` table is an integer-type primary key that uniquely identifies each delivery driver in the system. This column is not nullable, ensuring that every record in the table must have a unique `driver_id`. It can be used in SQL queries to join with other tables like `ww_territories` via the `ww_territory_id` to fetch or analyze data specific to each driver's operational area."
ww_drivers,ww_driver_id,varchar(255),NO,,,,,,255.0,,,"The `ww_driver_id` column in the `ww_drivers` table is a VARCHAR(255) type that uniquely identifies each delivery driver in the system. This column is non-nullable, meaning that every record in the `ww_drivers` table must have a unique driver ID. In SQL queries, `ww_driver_id` can be used to join with other tables that reference this ID, or to filter and retrieve specific driver information based on their unique identifier."
ww_drivers,name,varchar(255),YES,,,,,,255.0,,,"The column `name` in the `ww_drivers` table is used to store the names of delivery drivers, which can be up to 255 characters long. As a `varchar` data type and being nullable, it allows for the insertion of text data up to 255 characters, and it can also accept null values if the driver's name is not provided. In SQL queries, this column can be used to select, insert, or update the names of drivers in the `ww_drivers` table, and can also be used in WHERE clauses to filter records based on driver names."
ww_drivers,email,varchar(255),YES,,,,,,255.0,,,"The `email` column in the `ww_drivers` table is of type `varchar(255)` and can store up to 255 characters, accommodating standard email addresses. This column is nullable, meaning it is optional and may contain null values if an email address is not provided for some drivers. In SQL queries, this column can be used to contact drivers, verify their identity, or link records across related tables where email addresses are used as identifiers or contact references."
ww_drivers,ww_territory_id,int,NO,MUL,,,ww_territories,id,,10.0,0.0,"The `ww_territory_id` column in the `ww_drivers` table is an integer field that links each driver to a specific geographical area, as defined in the `ww_territories` table. This column is essential for SQL queries that aim to analyze or retrieve driver data based on their operational territories. Since it is a non-nullable field marked with a key type 'MUL', it indicates that it is part of a foreign key relationship, allowing for joins with the `ww_territories` table to gather more detailed information about the territories."
ww_order_comments,order_comment_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `order_comment_id` column in the `ww_order_comments` table serves as the primary key for the table, uniquely identifying each record of comments or notes associated with orders. This integer column is non-nullable, ensuring that every comment stored in the table has a unique identifier. When writing SQL queries, use the `order_comment_id` to specifically select, update, or delete comment records linked to particular orders in the system."
ww_order_comments,order_id,int,NO,MUL,,,,,,10.0,0.0,"The `order_id` column in the `ww_order_comments` table is an integer field that serves as a foreign key linking comments to their respective orders. It is not nullable, ensuring that every comment is associated with an order. This column can be used in SQL queries to join the `ww_order_comments` table with other tables that contain order details, facilitating the retrieval and correlation of order-specific comments with relevant order information."
ww_order_comments,reason_id,int,NO,,,,,,,10.0,0.0,"The `reason_id` column in the `ww_order_comments` table is an integer data type and cannot be null. This column likely serves as an identifier to categorize or specify the reasons for the comments made on orders, such as issues related to order processing, shipping, or customer interactions. In SQL queries, `reason_id` can be used to join with other tables that explain or expand on these reason codes, or to filter and aggregate data based on specific reasons noted in the comments."
ww_order_comments,comment,text,NO,,,,,,65535.0,,,"The `comment` column in the `ww_order_comments` table is used to store textual comments or notes associated with specific orders. These comments can include details about order processing, shipping, or customer service interactions. Since the column is non-nullable, every record in the table must include a comment, ensuring that no order is without associated notes or feedback. This column can be utilized in SQL queries to retrieve, update, or analyze communication and information linked to order handling within the system."
ww_orders,order_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `order_id` column in the `ww_orders` table is an integer data type that uniquely identifies each order processed in a wine warehouse. As a primary key (PRI) that is not nullable, it ensures that each record in the table is unique and must contain a value. This column is essential for SQL queries when joining with other tables in the database to retrieve, update, or analyze specific order details linked to delivery routes, territories, and other related order processing information."
ww_orders,ww_order_id,varchar(255),NO,,,,,,255.0,,,"The `ww_order_id` column in the `ww_orders` table is a non-nullable VARCHAR(255) field that uniquely identifies each order processed in a wine warehouse. This column is crucial for SQL queries when you need to reference or manipulate specific order details, as it serves as a unique identifier linking various aspects of order processing and delivery logistics. Use this column to join with other related tables, filter data, or track individual orders through the warehouse system."
ww_orders,name,varchar(255),YES,,,,,,255.0,,,"The `name` column in the `ww_orders` table is a VARCHAR(255) type that can store text up to 255 characters, used to record the name associated with each order in a wine warehouse's order processing system. This column is optional (nullable) and may contain the name of the customer or order identifier. In SQL queries, this column can be used to search, filter, or join order details based on the order's name, enhancing the ability to manage and analyze order data related to delivery and distribution logistics."
ww_orders,phone,text,YES,,,,,,65535.0,,,The `phone` column in the `ww_orders` table stores textual data representing the contact phone number associated with each wine warehouse order. This column is optional (nullable) and can be used in SQL queries to retrieve or manage contact information related to order communications. It is particularly useful for ensuring that communication channels are available for discussing delivery specifics or resolving issues related to the order.
ww_orders,order_number,int,YES,MUL,,,orders,order_id,,10.0,0.0,"The `order_number` column in the `ww_orders` table is an integer field that can be used to uniquely identify or reference specific orders within the context of wine warehouse operations. Although it is not the primary key (as indicated by the key type 'MUL' suggesting it may be part of a composite key or indexed for joining with other tables), it plays a crucial role in linking various logistical aspects such as delivery routes and territories. This column can be included in SQL queries to filter, join, or aggregate order data based on specific order numbers, and its nullable property allows for the possibility of some records not having an order number assigned."
ww_orders,comment,text,YES,,,,,,65535.0,,,"The `comment` column in the `ww_orders` table is used to store textual remarks or additional information related to each order in the wine warehouse management system. Being of the data type `text` and nullable, it can hold optional, extensive descriptive data about the order, such as special handling instructions, customer requests, or internal notes. This column can be included in SQL queries to retrieve or update these annotations, enhancing the understanding and management of specific order details within the warehouse's logistical operations."
ww_orders,ww_territory_id,int,NO,MUL,,,ww_territories,id,,10.0,0.0,"The `ww_territory_id` column in the `ww_orders` table is an integer identifier that links each order to a specific geographic territory. This column is crucial for organizing and managing the distribution of orders by territory, ensuring that each order is associated with the correct delivery route and location. Since it is a non-nullable field marked with a key type of MUL (indicating it's part of a non-unique index), it can be used in SQL queries to efficiently join with other tables that contain detailed territory information, thereby facilitating complex queries related to order processing and logistics in the wine warehouse context."
ww_orders,drop_instance_id,int,YES,MUL,,,drop_instance,drop_instance_id,,10.0,0.0,"The `drop_instance_id` column in the `ww_orders` table is an integer that can optionally link each order to a specific drop instance, which is part of the logistical process in the wine warehouse's distribution system. This column, marked with a key type of MUL (indicating it's part of a non-unique index or a foreign key), is used in SQL queries to join the `ww_orders` table with other tables that manage or record details about these drop instances. This facilitates complex queries involving the coordination of orders, delivery routes, and specific delivery instances."
ww_orders,route_id,int,YES,MUL,,,ww_routes,route_id,,10.0,0.0,"The `route_id` column in the `ww_orders` table is an integer field that can optionally contain a value (nullable). It is used to link an order to a specific delivery route, facilitating the association of orders with particular delivery paths as part of the wine warehouse's logistical operations. As indicated by the key type 'MUL', this column can be involved in joining this table with other tables that contain matching route identifiers, enabling complex queries about delivery routes and their related orders."
ww_orders,box_to_pickup,int,YES,,,0,,,,10.0,0.0,"The column `box_to_pickup` in the `ww_orders` table is an integer that specifies the number of boxes designated for pickup in a wine warehouse order. It can be used in SQL queries to calculate the total boxes needed for pickup across different orders or to filter orders based on the quantity of boxes ready for pickup. Since this column is nullable, queries should account for possible NULL values which indicate that the number of boxes to be picked up has not been specified."
ww_orders,delivery_date,date,NO,MUL,,,,,,,,"The `delivery_date` column in the `ww_orders` table is of type `date` and is used to store the scheduled delivery dates for wine orders. This column is essential for managing the timing of deliveries, ensuring that orders are dispatched and arrive on their designated dates. It cannot contain null values, indicating that every order must have a specified delivery date, and its key type `MUL` suggests that it is indexed, possibly as a part of a composite key or for optimizing query performance on delivery schedules. This column is crucial for querying and organizing delivery logistics by date in SQL operations."
ww_orders,box_picked_up,int,YES,,,0,,,,10.0,0.0,"The `box_picked_up` column in the `ww_orders` table is an integer type that indicates whether boxes in an order have been picked up, with a value of '0' potentially representing that no boxes have been picked up yet. This column can be used in SQL queries to filter or update records based on the pickup status of the boxes in wine warehouse orders. Since it is nullable, queries involving this column should account for the possibility of null values, which might indicate undefined pickup statuses."
ww_orders,notified_incoming_delivery,tinyint,NO,,,0,,,,3.0,0.0,"The column `notified_incoming_delivery` in the `ww_orders` table is a `tinyint` type used to indicate whether a notification has been sent for an incoming delivery. As it is not nullable and defaults to 0, this suggests that the default state is 'no notification sent'. This column is crucial for managing communications and ensuring that all parties are aware of the delivery status, which can be used in SQL queries to filter or update records based on whether a notification has been sent (1) or not (0)."
ww_orders,notified_late_delivery,tinyint,NO,,,0,,,,3.0,0.0,"The `notified_late_delivery` column in the `ww_orders` table is of type `tinyint` and cannot be null. It is used to indicate whether a notification has been sent about a late delivery, with a value of 0 typically representing 'no notification sent'. This column is crucial for managing customer communications and ensuring that the status of late deliveries is tracked within the logistics and order processing system of the wine warehouse."
ww_routes,route_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `route_id` column in the `ww_routes` table serves as the primary key, uniquely identifying each delivery route within warehouse operations. As an integer that cannot be null (`Nullable: NO`), it ensures that every record in the table represents a distinct route. This column is essential for linking the `ww_routes` table to other related tables such as driver breaks, load baskets, and orders, facilitating complex SQL queries involving joins, where `route_id` acts as a foreign key in those related tables."
ww_routes,ww_route_id,varchar(255),NO,,,,,,255.0,,,"The `ww_route_id` column in the `ww_routes` table is a non-nullable varchar field that uniquely identifies each delivery route within warehouse operations. As a primary key, it is essential for linking records across related tables such as driver breaks, load baskets, and orders, ensuring that all information connected to a specific route can be accurately and efficiently retrieved and managed in SQL queries. This column is crucial for organizing, accessing, and maintaining coherent data regarding the distribution and logistical planning of goods."
ww_routes,date,date,NO,MUL,,,,,,,,"The `date` column in the `ww_routes` table is of type `date` and is used to store the specific date on which a delivery route is scheduled. This column is crucial for organizing and managing delivery schedules and cannot be null, ensuring that every route entry has a designated date. As a key with multiple entries allowed (`MUL`), this column can be used in SQL queries to join with other tables related to driver schedules, load baskets, and orders, facilitating complex queries about delivery operations on specific dates or date ranges."
ww_routes,vehicle_id,int,NO,MUL,,,,,,10.0,0.0,"The `vehicle_id` column in the `ww_routes` table is used to uniquely identify vehicles assigned to specific delivery routes in warehouse operations. It is an integer (`int`) data type and cannot contain NULL values, indicating that every route must be associated with a vehicle. Being marked with a key type of MUL (multiple), this column likely serves as a foreign key that can be joined with a corresponding `vehicle_id` in a vehicle management table to retrieve details about the vehicles used for the routes."
ww_routes,driver_id,int,NO,,,,,,,10.0,0.0,"The `driver_id` column in the `ww_routes` table is an integer field that uniquely identifies drivers associated with each delivery route. This column is essential for linking delivery routes to specific drivers in the warehouse operations system. As it is not nullable, every record in the `ww_routes` table must have a valid `driver_id` associated with it, ensuring that all routes are assigned to a driver. This column can be used in SQL queries to join the `ww_routes` table with other tables that contain driver-specific information, facilitating comprehensive data analysis and operational oversight."
ww_routes,ww_territory_id,int,NO,MUL,,,ww_territories,id,,10.0,0.0,"The `ww_territory_id` column in the `ww_routes` table is an integer field that serves as a foreign key linking each delivery route to a specific territory. This column is essential for organizing routes by geographic or operational territories and is crucial for queries that involve aggregating or filtering route data based on territories. Since it is marked as non-nullable and has a key type of MUL, it must always have a valid territory ID and can be used in JOIN operations with other tables that contain territory information."
ww_routes,basket_count,int,YES,,,,,,,10.0,0.0,"The `basket_count` column in the `ww_routes` table represents the number of baskets assigned to each delivery route and is used to manage the load capacity for warehouse operations. This integer column can be included in SQL queries to calculate or filter routes based on the load they are carrying, which is crucial for optimizing delivery efficiency and planning. Since it is nullable, SQL queries should account for potential null values, which might indicate routes without assigned baskets."
ww_routes,agent_id,int,YES,,,,,,,10.0,0.0,"The `agent_id` column in the `ww_routes` table is an integer type that can be used to link delivery routes to specific agents (or operators) managing or assigned to those routes. Although this column can contain null values, indicating that some routes might not be assigned to any agent at a given time, it typically serves to establish a relationship between routes and agents for organizational and management purposes in warehouse operations. In SQL queries, this column can be used to join the `ww_routes` table with other tables related to agents, facilitating comprehensive data retrieval about route assignments and agent responsibilities."
ww_routes,ratio,float,YES,,,,,,,12.0,,"The `ratio` column in the `ww_routes` table, which is of type float and can contain null values, stores numerical data likely related to the efficiency or performance of delivery routes in warehouse operations. In SQL queries, this column can be used to calculate, compare, or analyze the effectiveness of different routes, possibly in relation to metrics like time, cost, or distance covered. It can be particularly useful in optimizing route planning or assessing route productivity within the broader context of warehouse logistics and operations management."
ww_routes,penalty,int,YES,,,,,,,10.0,0.0,"The `penalty` column in the `ww_routes` table, which is of integer data type and can accept null values, is used to store numerical penalties associated with specific delivery routes in warehouse operations. This column can be used in SQL queries to calculate, adjust, or analyze the cost implications of route deviations or inefficiencies. It is instrumental for optimizing route planning and management by allowing the assessment of financial impacts due to penalties on different routes."
ww_routes,operator_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The `operator_id` column in the `ww_routes` table is an integer field that can be used to link delivery routes to the operators responsible for managing them. It supports SQL queries involving joins with an operators table, allowing for the retrieval or update of route management details based on specific operators. Since it is nullable and marked with a key type of MUL, it indicates that multiple routes can be associated with a single operator, and some routes may not have an assigned operator."
ww_routes,target_ratio,float,NO,,,0,,,,12.0,,"The `target_ratio` column in the `ww_routes` table, which is of type float and cannot contain null values, represents a numerical factor or metric used in planning and assessing the efficiency of delivery routes. This column is crucial for optimizing route planning by providing a quantitative goal or benchmark that must be met or exceeded. In SQL queries, `target_ratio` can be used to filter, sort, or aggregate route data to evaluate performance against targets, enhance decision-making processes, or adjust route parameters based on operational analytics."
ww_routes,parent_route_id,int,YES,,,,,,,10.0,0.0,"The `parent_route_id` column in the `ww_routes` table is an integer data type that can be nullable and is used to establish hierarchical relationships between delivery routes. This column likely references the `route_id` of another route in the same table, indicating that a given route is a sub-route or part of a larger route structure. In SQL queries, this column can be used to join the table with itself to analyze route dependencies and hierarchies, or to filter and organize routes based on their parent-child relationships within the delivery system."
ww_routes,is_split,tinyint(1),NO,,,0,,,,3.0,0.0,"The `is_split` column in the `ww_routes` table is a non-nullable `tinyint(1)` field used to indicate whether a delivery route is divided into multiple segments or not. In SQL queries, this column can be used to filter or classify routes based on whether they are split (1) or not split (0). This is crucial for understanding the complexity of a route and organizing delivery operations accordingly."
ww_routes,reason,int,NO,,,0,,,,10.0,0.0,"The `reason` column in the `ww_routes` table is an integer field that stores specific codes or identifiers representing the reasons associated with each delivery route. Since the column is non-nullable, it must always have a value, indicating that every route must have a designated reason code. This column can be used in SQL queries to filter, sort, or join data based on the reasons for the routes, aiding in analyses or operational adjustments related to route planning and management."
ww_routes,geometry_string,text,YES,,,,,,65535.0,,,"The `geometry_string` column in the `ww_routes` table is used to store textual representations of the geographical paths for delivery routes, likely in a format compatible with spatial data handling, such as WKT (Well-Known Text). Since this column is of type text and is nullable, it can optionally contain this spatial data. SQL queries involving this column can be used to retrieve or manipulate the geometric data of delivery routes, which is crucial for visualizing routes or integrating with mapping software."
ww_steps,step_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `step_id` column in the `ww_steps` table serves as the primary key, uniquely identifying each step or checkpoint in a workflow or walkthrough process. As a non-nullable integer, it ensures that every record in the table has a unique identifier, which is essential for linking steps to specific users, depots, ratings, and violations. This column is crucial for SQL queries aimed at retrieving or manipulating data about specific steps, joining with other related tables, or ensuring data integrity within the database."
ww_steps,order_id,int,NO,MUL,,,,,,10.0,0.0,"The `order_id` column in the `ww_steps` table is an integer field that is used to reference a specific order within a workflow or walkthrough process. As a non-nullable field with a key type of MUL (indicating it is part of a multiple-column index or a non-unique key), it plays a crucial role in organizing the sequence of steps and linking them to particular orders. This column can be used in SQL queries to join the `ww_steps` table with other related tables, such as those containing detailed order information or user data, to analyze or manage the workflow process effectively."
ww_steps,arrival_sec,int,YES,,,0,,,,10.0,0.0,"The `arrival_sec` column in the `ww_steps` table is an integer type that optionally records the time, in seconds, at which a step or checkpoint in a workflow or walkthrough process is reached. This column can be used in SQL queries to analyze the timing of each step, compare durations between steps, or integrate with timing data from other steps or processes. It can also be helpful in generating reports or insights on the efficiency or delays in the workflow, especially when linked to user and depot data provided in the same table."
ww_steps,start_sec,int,YES,,,0,,,,10.0,0.0,"The `start_sec` column in the `ww_steps` table represents the starting time of a step or checkpoint in a workflow or walkthrough process, measured in seconds. This integer column can be used in SQL queries to sort or filter steps based on their commencement times, facilitating analyses such as duration calculations or timing-based step sequencing. Although it is nullable, indicating that the start time might not be recorded for all steps, when available, it provides a crucial temporal reference within the workflow's context."
ww_steps,end_sec,int,YES,,,0,,,,10.0,0.0,"The `end_sec` column in the `ww_steps` table represents the timestamp, in seconds, marking the end of a specific step or checkpoint within a workflow or walkthrough process. As an integer and nullable field, it can store a null value indicating that the end time might not be set for some steps. This column can be used in SQL queries to calculate durations of steps by comparing it against start times, to check for completion of steps, or to sequence the steps in chronological order when analyzing the workflow efficiency or compliance."
ww_steps,order,int,YES,,,,,,,10.0,0.0,"The `order` column in the `ww_steps` table is an integer type that indicates the sequence or position of each step within a specific workflow or walkthrough process. Since it is nullable, not all steps might have an assigned order. This column can be used in SQL queries to sort or filter the steps based on their sequence in the process, helping to organize or analyze the flow of operations within different workflows."
ww_steps,status,int,YES,,,0,,,,10.0,0.0,"The `status` column in the `ww_steps` table is an integer type field that can optionally contain null values. This column is used to represent the current status of each step or checkpoint in a workflow or walkthrough process. In SQL queries, the `status` column can be used to filter or update records based on the progress or completion state of the steps, which is crucial for managing workflow execution and monitoring compliance or performance issues."
ww_steps,type,int,NO,MUL,,,,,,10.0,0.0,"The `type` column in the `ww_steps` table is an integer field that categorizes the steps or checkpoints within a workflow or walkthrough process. Since it is marked as non-nullable (`Nullable: NO`), every record in the `ww_steps` table must have a value for the `type` column, ensuring that each step is clearly categorized. The `MUL` key type indicates that this column is indexed and likely used in joining this table with other tables, possibly to filter or aggregate data based on the step type during SQL queries."
ww_steps,distance_to_next,int,YES,,,,,,,10.0,0.0,"The `distance_to_next` column in the `ww_steps` table represents the distance from the current step to the next step in a workflow or walkthrough process, measured in units implied by the system (e.g., meters, kilometers). This integer column can be used in SQL queries to calculate the total distance of a workflow, to determine the proximity of sequential steps, or to optimize the sequence of steps based on distance criteria. Since it is nullable, SQL queries should account for potential null values which might indicate that there is no subsequent step or that the distance is unknown."
ww_steps,user_id,int,YES,MUL,,,users,user_id,,10.0,0.0,"The `user_id` column in the `ww_steps` table is an integer type that can optionally be null, indicating the ID of the user who performs a specific step in a workflow or walkthrough process. This column is marked with a key type of MUL, suggesting that it is part of a non-unique index and can be used to establish a relationship with the users table, facilitating queries that join these tables to retrieve information about the users associated with each step. The column supports efficient lookup and filtering of workflow steps based on user involvement."
ww_steps,time_to_next,int,YES,,,0,,,,10.0,0.0,"The `time_to_next` column in the `ww_steps` table represents the time, in integer format, taken to move from the current step to the next step in a workflow or walkthrough process. This column can be used in SQL queries to calculate durations between steps, analyze efficiency, or optimize the sequence of steps. Since it is nullable, SQL queries using this column should account for possible NULL values which indicate that the time to the next step is not specified or applicable."
ww_steps,address,varchar(255),YES,,,,,,255.0,,,"The `address` column in the `ww_steps` table is used to store the location details where individual steps or checkpoints of a workflow or walkthrough process occur. This column, defined as a variable character string with a maximum length of 255 characters, can be included in SQL queries to filter or join data based on specific locations. Although this column can contain null values, it is essential for analyzing the geographical distribution of workflow steps and identifying any location-specific trends in ratings or violations associated with these steps."
ww_steps,depot_id,int,YES,MUL,,,ww_depots,depot_id,,10.0,0.0,"The `depot_id` column in the `ww_steps` table is an integer-based field that can optionally link each step in a workflow or walkthrough process to a specific depot where the step occurs. Since it is marked as nullable, not all steps may be associated with a depot. The `MUL` key type indicates that this column is indexed and likely used in joining the `ww_steps` table with another table that contains depot details, facilitating efficient queries and analysis related to the location of workflow steps."
ww_steps,scheduled_datetime,datetime,YES,,,0000-00-00 00:00:00,,,,,,"The `scheduled_datetime` column in the `ww_steps` table is used to store the date and time when a specific step or checkpoint in a workflow or walkthrough process is scheduled to occur. This `datetime` type column can handle null values, indicating that not all steps may have a scheduled time. In SQL queries, this column can be used to filter, sort, or join data based on the scheduled times of these workflow steps, which is useful for planning, tracking progress, and analyzing the timing of workflow executions."
ww_steps,completed_datetime,datetime,YES,,,0000-00-00 00:00:00,,,,,,"The `completed_datetime` column in the `ww_steps` table records the date and time when an individual step or checkpoint in a workflow or walkthrough process was completed. Stored as a `datetime` data type, this column can be null, indicating that a step may not yet be completed. This column is useful in SQL queries for filtering, sorting, or calculating durations within workflow processes, and can be crucial in reports concerning the efficiency and timeliness of step completions in various depots or by different users."
ww_steps,revised_datetime,datetime,YES,,,0000-00-00 00:00:00,,,,,,"The `revised_datetime` column in the `ww_steps` table is of data type `datetime` and is used to record the date and time when a step in the workflow or walkthrough process was last revised. This column can be nullable, meaning it is optional and may not be filled for every record. In SQL queries, this column can be used to filter or sort steps based on when they were last updated, which is useful for tracking changes or updates in the workflow process. The default value for this column is '0000-00-00 00:00:00', indicating that no revision has been made if the field is not explicitly set."
ww_steps,photo_url,varchar(255),YES,,,,,,255.0,,,"The `photo_url` column in the `ww_steps` table stores the URL link to a photo associated with each step in a workflow or walkthrough process. This varchar(255) field, which can be null, allows users to reference visual documentation or evidence related to the step. In SQL queries, this column can be used to retrieve or update the image links for specific steps, enhancing the understanding and tracking of workflow checkpoints."
ww_steps,departed_datetime,datetime,YES,,,,,,,,,"The `departed_datetime` column in the `ww_steps` table records the date and time when a specific step or checkpoint in a workflow or walkthrough process was completed or moved past. This datetime information can be used in SQL queries to analyze the timing of each step, assess delays or efficiencies, and correlate with other data such as ratings or violations related to that step. Since the column is nullable, SQL queries should account for possible null values which indicate that the departure time for a step was not recorded."
ww_steps,left_at_door,tinyint,YES,,,0,,,,3.0,0.0,"The ""left_at_door"" column in the ""ww_steps"" table is a tinyint data type that can be used to indicate whether a step in the workflow was completed with the item being left at a door (typically represented by a value of 1) or not (typically represented by a value of 0). This column is nullable, meaning that there can be instances where it is not specified whether the item was left at the door or not. In SQL queries, this column can be used to filter or analyze steps based on whether items were left at doors, which can be useful in understanding delivery or service procedures within the workflow."
ww_steps,limit_datetime,datetime,YES,,,0000-00-00 00:00:00,,,,,,"The `limit_datetime` column in the `ww_steps` table is used to store the datetime by which a specific step or checkpoint in a workflow or walkthrough process should be completed. This column, which can accept null values, helps in managing deadlines for each step. In SQL queries, this column can be used to filter or sort steps based on their scheduled completion times, or to check for any steps that are overdue by comparing `limit_datetime` with the current datetime."
ww_steps,distance_from_previous,int,YES,,,,,,,10.0,0.0,"The column `distance_from_previous` in the `ww_steps` table represents the distance between the current step and the previous step in a workflow or walkthrough process. Stored as an integer, this column can be used in SQL queries to calculate the total or cumulative distance covered in a process, or to analyze the spacing between consecutive steps. Since it is nullable, SQL queries should account for potential null values which might indicate that the distance from the previous step is either unknown or not applicable."
ww_steps,time_from_previous,int,YES,,,,,,,10.0,0.0,"The `time_from_previous` column in the `ww_steps` table, which is of type `int` and can be nullable, represents the time taken to transition from the previous step to the current step in a workflow or walkthrough process. This column can be used in SQL queries to analyze or report on the efficiency and duration of each step within the workflow, helping to identify any potential delays or bottlenecks. Additionally, it allows for comparisons between different steps or checkpoints in terms of time spent, facilitating optimizations in the workflow process."
ww_steps,actual_time_from_previous,int,YES,,,,,,,10.0,0.0,"The column `actual_time_from_previous` in the `ww_steps` table is an integer type that represents the actual time taken to transition from the previous step to the current step in a workflow or walkthrough process. This column can be used in SQL queries to analyze or calculate the efficiency and duration of each step within the process. Since it is nullable, ensure to handle cases where the time might not be recorded or applicable."
ww_steps,return_distance,int,YES,,,,,,,10.0,0.0,"The `return_distance` column in the `ww_steps` table, which stores integer values and can accept nulls, represents the distance that must be covered to return from a specific step or checkpoint in a workflow or walkthrough process. This column can be used in SQL queries to calculate or analyze the travel requirements associated with completing or returning from each step, potentially influencing how steps are planned or sequenced in terms of logistical efficiency or user effort."
ww_steps,sta_photo_url,varchar(255),YES,,,,,,255.0,,,"The `sta_photo_url` column in the `ww_steps` table stores a URL link to a photo associated with each step or checkpoint in a workflow or walkthrough process. This column, being of type `varchar(255)` and nullable, can hold up to 255 characters and may contain a null value if no photo URL is available for a step. In SQL queries, this column can be used to retrieve or link the visual representation of steps, enhancing the understanding or verification of the step's completion within the workflow."
ww_steps,is_photo_rejected,tinyint,NO,,,0,,,,3.0,0.0,"The column `is_photo_rejected` in the `ww_steps` table is a `tinyint` data type used to indicate whether a photo submitted at a particular step in a workflow or walkthrough process has been rejected (1) or not (0). This column is non-nullable, meaning every record in the table must have a value of either 0 or 1, ensuring that every step has a clear status regarding photo rejection. This column can be used in SQL queries to filter or analyze steps based on the acceptance or rejection of photos, aiding in the monitoring and management of workflow compliance and quality control."
ww_steps,logistics_notified,int,YES,,,,,,,10.0,0.0,"The `logistics_notified` column in the `ww_steps` table is an integer type that indicates whether logistics personnel have been notified regarding a specific step in a workflow or walkthrough process. This column can be used in SQL queries to filter or update records based on whether the notification to logistics has been made (typically represented by values, where 1 might indicate notified, and 0 not notified). Since it is nullable, it may also hold NULL values indicating that the notification status is unknown or not applicable."
ww_territories,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `id` column in the `ww_territories` table is an integer-type primary key that uniquely identifies each territory. This column is non-nullable, ensuring that every record in the table has a unique identifier. In SQL queries, the `id` column is used to reference specific territories, link related data from other tables (such as droppoints, drivers, routes, vehicles, and orders), and ensure data integrity across the database."
ww_territories,name,varchar(50),NO,,,,,,50.0,,,"The `name` column in the `ww_territories` table is a varchar(50) field that stores the unique names of territories used in defining and managing delivery operations. As a non-nullable column, each record must include a name, which is essential for identifying and referencing specific territories in SQL queries. This column can be used to join with other operational tables such as droppoints, drivers, routes, vehicles, and orders to organize and analyze delivery operations by geographical areas."
ww_territories,territory_key,varchar(255),NO,,,,,,255.0,,,"The `territory_key` column in the `ww_territories` table is a critical identifier used to uniquely reference different delivery territories. As a non-nullable varchar(255), this column ensures that each territory can be distinctly identified by a string value, which is essential for linking and querying related data across tables such as droppoints, drivers, routes, vehicles, and orders. When constructing SQL queries, use the `territory_key` to join with other operational tables to fetch or manipulate data concerning specific geographical service areas within the delivery network."
ww_territories,dev_territory_key,varchar(255),NO,,,,,,255.0,,,"The `dev_territory_key` column in the `ww_territories` table is a non-nullable varchar(255) field that uniquely identifies each territory used in delivery operations. This key is crucial for linking territories to various operational aspects such as droppoints, drivers, routes, vehicles, and orders, ensuring that all delivery activities are organized according to the defined geographical zones. When constructing SQL queries, use this column to join the `ww_territories` table with other related tables to fetch or manipulate data based on specific territories."
ww_territories,urgent_packing,tinyint,YES,,,0,,,,3.0,0.0,"The `urgent_packing` column in the `ww_territories` table is a `tinyint` data type that indicates whether the territory requires urgent packing services for deliveries. This column can be used in SQL queries to filter or prioritize territories based on the urgency of packing needs, which is especially useful in optimizing delivery operations. The column can contain null values, and a value of '0' typically indicates that urgent packing is not required for that territory."
ww_territories,type,"enum('HD','PUP','BOTH')",NO,,,,,,4.0,,,"The column `type` in the `ww_territories` table is used to categorize the nature of delivery territories. This column, which is non-nullable and uses an enum data type with values 'HD' (Home Delivery), 'PUP' (Pick Up Point), and 'BOTH' (both Home Delivery and Pick Up Point), specifies the type of delivery services that a territory supports. In SQL queries, this column can be used to filter or differentiate territories based on the delivery service types they are designated for, aiding in the efficient management and organization of delivery operations across various geographical zones."
ww_territories,daily_capacity,int,NO,,,,,,,10.0,0.0,"The `daily_capacity` column in the `ww_territories` table specifies the maximum number of deliveries that can be handled within a specific territory for each day. This integer value is crucial for planning and optimizing delivery operations, ensuring that the capacity of each territory is not exceeded. It is important to incorporate this column in SQL queries when assessing or updating delivery capabilities and scheduling to maintain efficient operational flow across the different territories."
ww_vehicles,vehicle_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `vehicle_id` column in the `ww_vehicles` table is a primary key of type integer and cannot contain null values. It uniquely identifies each vehicle within the waste/water management system. This column is essential for linking records across related tables, such as connecting vehicles to their daily assignments, reservation droppoints, and specific management territories. Use `vehicle_id` in SQL queries to join the `ww_vehicles` table with other related tables where `vehicle_id` is a foreign key, ensuring accurate retrieval and management of vehicle-related data."
ww_vehicles,ww_vehicle_id,varchar(255),NO,,,,,,255.0,,,"The `ww_vehicle_id` column in the `ww_vehicles` table serves as a unique identifier for each vehicle within a waste/water management system. This varchar(255) column, which is not nullable, ensures that each vehicle can be distinctly identified and referenced in SQL queries. It is pivotal for linking records across related tables, such as connecting vehicles to their daily assignments, specific droppoints, and assigned territories, facilitating comprehensive data management and retrieval in the system."
ww_vehicles,external_id,varchar(255),YES,,,,,,255.0,,,"The `external_id` column in the `ww_vehicles` table is a VARCHAR(255) field that can store a unique identifier for each vehicle, potentially linking it to external systems or databases. This column is optional (nullable), meaning not all records need to have an `external_id`. In SQL queries, this column can be used to join with external datasets or to filter specific vehicles based on identifiers not generated within the waste/water management system's internal database."
ww_vehicles,ww_territory_id,int,NO,MUL,,,ww_territories,id,,10.0,0.0,"The `ww_territory_id` column in the `ww_vehicles` table is an integer field that associates each vehicle with a specific territory within a waste/water management system. This column is not nullable, indicating that every record in the `ww_vehicles` table must have a valid territory ID associated with it. As it is marked with a key type of MUL, this column may be used in joining this table with other tables that contain the `ww_territory_id` to retrieve or manage data related to the geographic distribution and assignment of vehicles."
ww_vehicles,profile,varchar(64),YES,,,car,,,64.0,,,"The `profile` column in the `ww_vehicles` table is a VARCHAR(64) type that can store textual data up to 64 characters about the vehicle, specifically related to its characteristics or type, such as ""car"". It is optional (nullable) and can be used in SQL queries to filter or categorize vehicles based on their profile, which can be useful for identifying specific types of vehicles within the waste/water management system. This column does not serve as a key, so it is primarily used for descriptive purposes rather than for joining or indexing."
ww_vehicles,immatriculation,varchar(10),YES,,,,,,10.0,,,"The `immatriculation` column in the `ww_vehicles` table is a VARCHAR(10) field that can optionally store the registration number (or similar identifier) of vehicles used in a waste/water management system. This column allows for the identification and tracking of individual vehicles within the system, and can be used in SQL queries to filter, sort, or join vehicle data based on their specific registration numbers. Since it is nullable, SQL queries involving this column should account for possible null values, which indicate vehicles without an assigned registration number."
ww_vehicles,company_id,int,YES,,,,,,,10.0,0.0,"The `company_id` column in the `ww_vehicles` table is of type integer and can contain null values. This column is used to associate each vehicle in the waste/water management system with a specific company, potentially allowing for queries that filter or aggregate vehicle data by company. For example, SQL queries might use `company_id` to join the `ww_vehicles` table with a company table to retrieve or manage information about which company owns or operates particular vehicles."
ww_vehicles,max_distance,int,YES,,,,,,,10.0,0.0,"The `max_distance` column in the `ww_vehicles` table specifies the maximum distance (in kilometers or miles, as per system settings) that a vehicle can travel, represented as an integer. This column can be used in SQL queries to filter or set conditions based on the vehicle's travel capability, such as ensuring vehicles assigned to longer routes do not exceed their maximum travel distance. Although this column can accept null values, indicating that the maximum distance may not be set for some vehicles, it is essential for optimizing vehicle assignments and managing operational constraints within the waste/water management system."
ww_vehicles,is_electric,tinyint,YES,,,0,,,,3.0,0.0,"The `is_electric` column in the `ww_vehicles` table indicates whether a vehicle is electric or not, using a `tinyint` data type where typically `0` represents a non-electric vehicle and a non-zero value (commonly `1`) represents an electric vehicle. This column can be used in SQL queries to filter or analyze vehicles based on their propulsion type, such as selecting all electric vehicles or calculating the percentage of electric vehicles in the fleet. Since the column is nullable, SQL queries should account for potential NULL values which might represent unknown or unspecified electric status."
ww_vehicles,active,tinyint,YES,,,0,,,,3.0,0.0,"The column `active` in the `ww_vehicles` table is used to indicate the current operational status of a vehicle within a waste/water management system. It is a `tinyint` data type that can typically store values such as 0 or 1, where 0 might represent an inactive vehicle and 1 an active vehicle. This column can be utilized in SQL queries to filter out vehicles based on their active status, for example, selecting only those vehicles that are currently active (i.e., `active = 1`) for operational tasks or reporting."
ww_vehicles,reserved_for_droppoint_id,int,YES,MUL,,,droppoints,droppoint_id,,10.0,0.0,"The column `reserved_for_droppoint_id` in the `ww_vehicles` table is used to identify the specific droppoints where vehicles are reserved. As an integer data type and marked as nullable, this column can contain null values, indicating that a vehicle may not be reserved for any droppoint at certain times. The 'MUL' key type suggests that this column is indexed and can be efficiently used in JOIN operations with other tables that contain a matching droppoint ID, facilitating queries that involve analyzing vehicle reservations at various droppoints."
ww_vehicles,model_of_vehicle,varchar(40),YES,,,car,,,40.0,,,"The `model_of_vehicle` column in the `ww_vehicles` table is used to store the model name of each vehicle, which is part of a waste/water management system. This column, being of type varchar(40), can accommodate up to 40 characters, allowing for a variety of vehicle model names. Since the column is nullable, it is optional to specify the model for each vehicle in the database. This column can be used in SQL queries to filter or report on specific vehicle models within the fleet."
yearly_giveback_log_gift,id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `id` column in the `yearly_giveback_log_gift` table is an integer type field used as the primary key, meaning it uniquely identifies each record in the table. Since it is set to non-nullable (NULL values are not allowed), every record must have a unique `id` value. This column is essential for SQL queries when you need to specifically select, update, or delete records in the `yearly_giveback_log_gift` table based on a unique identifier."
yearly_giveback_log_gift,user_id,int,NO,MUL,,,,,,10.0,0.0,"The `user_id` column in the `yearly_giveback_log_gift` table is an integer type that uniquely identifies users who receive gifts or rewards as part of annual giveback or rewards programs. Since this column is marked as non-nullable (`Nullable: NO`) and has a key type of `MUL`, it indicates that each record must have a `user_id` associated with it and that it is likely indexed for faster querying, possibly as part of a foreign key relationship with a users table. This column is essential for linking gift records to specific users and analyzing user participation in the programs."
yearly_giveback_log_gift,giveback_received_on,date,NO,,,,,,,,,"The `giveback_received_on` column in the `yearly_giveback_log_gift` table is of the data type `date` and is not nullable, meaning every record must have a date value specified. This column is used to store the exact date when a gift or reward was received by a participant in the yearly giveback or rewards program. In SQL queries, this column can be used to filter, sort, or group records based on the date the gifts were distributed, allowing for analysis of distribution patterns over time or retrieval of gift records for specific dates."
yearly_giveback_log_gift,gift_received_on,date,YES,,,,,,,,,"The column `gift_received_on` in the `yearly_giveback_log_gift` table is used to store the date when a gift was received by a participant in a yearly giveback or rewards program. This column has a data type of `date` and can accept null values, indicating that the date a gift was received may not always be recorded. In SQL queries, this column can be used to filter or analyze records based on the date gifts were distributed, such as finding all gifts received within a specific year or comparing the distribution of gifts across different years."
yearly_giveback_log_gift,phase,int,YES,,,,,,,10.0,0.0,"The ""phase"" column in the ""yearly_giveback_log_gift"" table, which is of type integer and allows null values, represents different stages or periods within the yearly giveback or rewards programs. This column can be used in SQL queries to segment or filter records based on specific phases of the program, allowing for analysis or reporting on the distribution and reception of gifts at different times or stages within the annual cycle."
yiiconsole_exec_logs,yiiconsole_exec_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `yiiconsole_exec_log_id` in the `yiiconsole_exec_logs` table serves as the primary key and uniquely identifies each record of console command executions in a Yii application. This integer column is non-nullable, ensuring every record must have a unique identifier. Use this column in SQL queries to specifically target, reference, or join records based on their unique execution log ID within the context of tracking and debugging command executions."
yiiconsole_exec_logs,start_ts,int unsigned,NO,,,,,,,10.0,0.0,"The `start_ts` column in the `yiiconsole_exec_logs` table is an unsigned integer that records the timestamp when a Yii console command execution begins. This column is not nullable, meaning every record in the table must have a start timestamp. It is used in SQL queries to filter or sort records based on the initiation time of command executions, facilitating chronological analysis and debugging of the command history."
yiiconsole_exec_logs,end_ts,int unsigned,YES,,,,,,,10.0,0.0,"The `end_ts` column in the `yiiconsole_exec_logs` table stores the timestamp indicating when a Yii console command execution ended, represented as an unsigned integer. This column can be nullable, meaning it may not have a value if the command execution has not completed. In SQL queries, `end_ts` can be used to filter, sort, or calculate durations by comparing it against other timestamp columns like the start time of the command execution."
yiiconsole_exec_logs,duration,int,YES,,VIRTUAL GENERATED,,,,,10.0,0.0,"The `duration` column in the `yiiconsole_exec_logs` table is an integer type that records the time taken for a Yii console command to execute, measured in seconds. Although this column can contain null values, indicating that the duration might not always be recorded, it can be used in SQL queries to analyze the performance of commands by checking how long they take to execute. This information is valuable for optimizing command execution times and identifying any commands that may be causing delays."
yiiconsole_exec_logs,exit_code,int,YES,MUL,,,,,,10.0,0.0,"The `exit_code` column in the `yiiconsole_exec_logs` table is used to store the integer exit status of Yii console commands, indicating whether a command completed successfully or encountered an error. Since the column is nullable, it can accommodate scenarios where an exit code might not be applicable or captured. Additionally, being indexed (Key Type: MUL), this column supports efficient querying and filtering based on the command's exit status, useful in analyzing the performance and issues in command execution."
yiiconsole_exec_logs,command,varchar(100),NO,MUL,,,,,100.0,,,"The column `command` in the `yiiconsole_exec_logs` table is used to store the specific Yii console command that was executed, represented as a string with a maximum length of 100 characters. This column is not nullable, indicating that every record in the table must include the command executed. As it is indexed (Key Type: MUL), this column can be efficiently used in SQL queries to filter or sort the execution logs based on specific commands, enhancing query performance for operations like searching or analyzing command usage patterns."
yiiconsole_exec_logs,args,json,NO,,,,,,,,,"The column `args` in the `yiiconsole_exec_logs` table stores JSON-formatted data representing the arguments passed to Yii console commands during execution. This column cannot contain null values, indicating that every record in the table must include the arguments used for the command. When creating SQL queries, use this column to analyze or filter command executions based on specific arguments provided, which can be particularly useful for debugging or monitoring the behavior of the commands."
zawtar_hd_drivers,user_email,varchar(255),YES,UNI,,,,,255.0,,,"The `user_email` column in the `zawtar_hd_drivers` table is a VARCHAR(255) field that can store up to 255 characters and is used to record the email addresses associated with users responsible for configuring or managing the drivers in the Zawtar system. This column is unique (UNI), meaning each email address must be distinct within the table, and it can contain null values, indicating that the email address for some entries might not be provided. In SQL queries, this column can be used to uniquely identify or communicate with individuals managing specific hardware drivers, and it can be involved in joins with other tables that contain user contact information."
zawtar_hd_drivers,uid,int,NO,,,,,,,10.0,0.0,"The `uid` column in the `zawtar_hd_drivers` table is an integer data type that uniquely identifies each entry in the table. This column is non-nullable, meaning every record must have a unique `uid` value. In SQL queries, the `uid` column can be used to specifically select, update, or delete records related to hardware drivers and their configurations in the Zawtar system, ensuring that operations are performed on the correct record."
zipcode_droppoint_log,zipcode_droppoint_log_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `zipcode_droppoint_log_id` column in the `zipcode_droppoint_log` table serves as the primary key, uniquely identifying each record of activities and events related to zip code drop points. This integer column is not nullable, ensuring that every entry in the table has a unique identifier. When writing SQL queries, use this column to reference specific entries accurately or to join with other tables that may relate to these log entries, if applicable."
zipcode_droppoint_log,droppoint_id,int,NO,,,,,,,10.0,0.0,"The `droppoint_id` column in the `zipcode_droppoint_log` table is an integer that uniquely identifies different drop points where packages or items are deposited. This column is essential for distinguishing between various locations within the same zip code and cannot contain null values, indicating that every record in the table must have a valid `droppoint_id` associated with it. In SQL queries, this column can be used to filter, join, or aggregate data based on specific drop points."
zipcode_droppoint_log,zipcode,varchar(255),YES,,,,,,255.0,,,"The `zipcode` column in the `zipcode_droppoint_log` table is a VARCHAR(255) field that can store zip code values associated with drop points where packages or items are deposited. Since this column is nullable, it may not always contain data, indicating that some log entries might lack specific zip code information. In SQL queries, this column can be used to filter or analyze drop point activities by specific zip codes, although care must be taken to handle entries where the zip code might be null."
zipcode_droppoint_log,message,varchar(255),YES,,,,,,255.0,,,"The `message` column in the `zipcode_droppoint_log` table is a VARCHAR(255) type that can store textual data up to 255 characters. This column is used to record any textual messages or descriptions related to the activities and events at zip code drop points, such as details about the package or the nature of the drop-off event. Since the column is nullable, it is optional to include a message for each log entry. This flexibility allows for both detailed and minimal logging of drop point activities."
zipcode_droppoint_log,action,varchar(255),YES,,,,,,255.0,,,"The `action` column in the `zipcode_droppoint_log` table is a VARCHAR(255) type that can contain textual descriptions of activities or events associated with different zip code drop points. It is optional (nullable) and can be used in SQL queries to filter or analyze specific actions taken at these drop points, such as 'item deposited' or 'item retrieved'. This column helps in understanding the types of operations performed at each drop point location, which can be crucial for operational analysis and reporting."
zipcode_droppoint_log,created_at,datetime,NO,,,,,,,,,"The `created_at` column in the `zipcode_droppoint_log` table records the date and time when each activity or event at a zip code drop point was logged. This column is of the datetime data type and cannot contain null values, ensuring that every record in the table has a timestamp indicating when the event occurred. In SQL queries, this column is essential for filtering, sorting, or aggregating data based on specific time frames related to the activities at drop points."
zipcode_droppoint_log,staff_id,int,NO,,,,,,,10.0,0.0,"The `staff_id` column in the `zipcode_droppoint_log` table is used to store integer values that uniquely identify staff members responsible for activities at various zip code drop points. As it is non-nullable, every record in the table must have a `staff_id` associated with it, indicating that each entry regarding a drop point activity is linked to a specific staff member. This column can be used in SQL queries to filter or join data based on staff involvement in the operations logged in this table."
zipcode_region,zipcode_region_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `zipcode_region_id` column in the `zipcode_region` table is an integer column that serves as the primary key, uniquely identifying each record in the table. This column maps ZIP codes to specific geographical regions or service areas, facilitating the association of delivery drop points with particular regions in SQL queries. As it is not nullable and marked as a primary key, each record must have a unique `zipcode_region_id`, ensuring data integrity and enabling efficient joins with other tables, such as `droppoint_zipcode_region`, that reference this key."
zipcode_region,zipcode_prefix,varchar(7),YES,UNI,,,,,7.0,,,"The `zipcode_prefix` column in the `zipcode_region` table is a varchar(7) field that can uniquely identify the initial segment or complete ZIP code for a geographical region or service area. This column, which allows null values and is defined as a unique key, ensures that each ZIP code prefix is associated with only one region. It is used in SQL queries to link ZIP codes from the `droppoint_zipcode_region` table to their respective regions, facilitating the mapping of delivery drop points to specific geographic areas."
zipcode_region,weight,int,NO,,,0,,,,10.0,0.0,"The `weight` column in the `zipcode_region` table is an integer that represents a specific attribute or metric related to each ZIP code region. This column is not nullable, meaning every record in the table must have a value for `weight`. In SQL queries, this column can be used to sort, filter, or aggregate data based on the `weight` attribute to analyze or prioritize regions based on their assigned weights."
zipcode_region,region_name,varchar(255),NO,,,,,,255.0,,,"The `region_name` column in the `zipcode_region` table is used to store the name of the geographical region or service area associated with specific ZIP codes. This column is of type `varchar(255)` and does not allow null values, indicating that each ZIP code must be linked to a defined region. It is essential for SQL queries that require the retrieval or manipulation of data related to regional categorizations of ZIP codes, such as joining with the `droppoint_zipcode_region` table to determine the regions applicable to various delivery drop points."
zipcode_region,province,varchar(10),NO,,,,,,10.0,,,"The `province` column in the `zipcode_region` table is used to store the province identifier for each ZIP code region as a string of up to 10 characters. This column is not nullable, meaning every record in the table must have a province value. In SQL queries, this column can be used to filter or join data based on specific provinces, aiding in the analysis or organization of geographical or service area data related to ZIP codes."
zipcodes,zipcode_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The `zipcode_id` column in the `zipcodes` table is an integer-type primary key that uniquely identifies each record of ZIP code data. As a non-nullable field, every record in the table must have a valid `zipcode_id`. This column is essential for SQL queries aimed at fetching, linking, or managing specific ZIP code information within the database, ensuring precise and efficient data retrieval and integrity in operations involving postal address validation and standardization."
zipcodes,zipcode,varchar(10),NO,UNI,,,,,10.0,,,"The `zipcode` column in the `zipcodes` table is a VARCHAR(10) field that uniquely identifies postal codes. Since it is a non-nullable column with a unique constraint, every record must have a distinct and non-empty zipcode value. This column is essential for SQL queries aimed at retrieving or validating specific geographical locations by postal code, and it can be used in join operations with other tables that require postal code data for address verification or geographical analysis."
zipcodes,city,varchar(255),YES,,,,,,255.0,,,"The `city` column in the `zipcodes` table, which is of type varchar(255) and allows null values, contains the name of the city associated with each postal code. In SQL queries, this column can be used to retrieve or match the city names for specific ZIP codes, or to join with other tables that contain city-related information to enrich or validate address data. This is particularly useful for operations involving geographic segmentation, address verification, or data analysis based on regional demographics."
zipcodes,region,varchar(255),YES,,,,,,255.0,,,"The `region` column in the `zipcodes` table, which is a variable character string with a maximum length of 255 characters and can contain null values, represents the geographical area or region associated with a particular ZIP code. This column can be used in SQL queries to filter or group ZIP codes by region, aiding in tasks such as regional analysis or location-based segmentation. Since `region` can be nullable, it's important to account for potential null values in queries to avoid unexpected results."
zipcodes,province,varchar(10),YES,,,,,,10.0,,,"The `province` column in the `zipcodes` table, which is of type varchar(10) and can accept null values, stores the province or state information associated with each ZIP code. This column can be used in SQL queries to filter or join ZIP code data based on specific provinces, aiding in tasks such as address validation or region-specific analyses within geographic datasets. Queries might also use this column to group or sort postal data by province, enhancing the organization and accessibility of location-based information."
zipcodes,lng,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The column `lng` in the `zipcodes` table represents the longitude coordinate associated with each ZIP code and is stored as a decimal type with a precision of 10 digits and a scale of 8 decimal places. Since the column is nullable, it can contain null values, indicating that the longitude may not be available for some ZIP codes. This column is useful in SQL queries for operations that involve geographic calculations, such as finding distances between locations or selecting ZIP codes within a certain longitude range."
zipcodes,lat,"decimal(10,8)",YES,,,,,,,10.0,8.0,"The column named 'lat' in the 'zipcodes' table represents the latitude of a location associated with a specific ZIP code. It is stored as a decimal type with up to 10 digits and 8 decimal places, allowing for precise geographical positioning. This column can be used in SQL queries to retrieve or analyze the latitude data for geographical mapping, location-based services, or to perform proximity searches between different ZIP codes."
zzz_20240521_user_id,uid,int,NO,MUL,,,,,,10.0,0.0,"The column `uid` in the table `zzz_20240521_user_id` is used to store unique user identifiers as integers. Given that it is not nullable, every record in this table must contain a valid integer value for `uid`. The `MUL` key type suggests that this column is indexed, possibly as part of a non-unique index, which facilitates efficient querying and lookup operations based on user ID values. This column can be used in SQL queries to select, update, or delete records based on specific user IDs in scenarios involving temporary data handling or archival purposes."
zzz_waitlist_bump_users,zzz_waitlist_bump_users_id,int,NO,PRI,auto_increment,,,,,10.0,0.0,"The column `zzz_waitlist_bump_users_id` in the table `zzz_waitlist_bump_users` serves as the primary key for the table, meaning each record in the table has a unique `zzz_waitlist_bump_users_id`. This integer-based column is non-nullable, ensuring that no record can exist without a unique identifier. In SQL queries, this column is crucial for uniquely identifying, referencing, and retrieving specific records of users who have been granted priority status on a waitlist, allowing for precise data manipulation and querying within the database."
zzz_waitlist_bump_users,user_id,int,YES,,,,,,,10.0,0.0,"The `user_id` column in the `zzz_waitlist_bump_users` table is an integer type that can store the unique identifier of users who have been given priority status on a waitlist. This column can contain null values, indicating that some records might not have an associated user ID. In SQL queries, this column can be used to join with other user-related tables to fetch detailed information about the prioritized users or to update and manage the priority status of users on the waitlist."
